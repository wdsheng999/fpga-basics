
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f54  08002f54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f5c  08002f5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08002fd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002fd4  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0a8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196f  00000000  00000000  0002a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165e8  00000000  00000000  0002ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5c0  00000000  00000000  00043050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008981b  00000000  00000000  0004d610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000226c  00000000  00000000  000d6e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002e50 	.word	0x08002e50

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08002e50 	.word	0x08002e50

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	469b      	mov	fp, r3
 8000292:	d433      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000294:	465a      	mov	r2, fp
 8000296:	4653      	mov	r3, sl
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83a      	bhi.n	800031e <__udivmoddi4+0xc2>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e078      	b.n	80003a0 <__udivmoddi4+0x144>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e075      	b.n	80003a6 <__udivmoddi4+0x14a>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e028      	b.n	8000326 <__udivmoddi4+0xca>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	2320      	movs	r3, #32
 8000300:	1a9b      	subs	r3, r3, r2
 8000302:	4652      	mov	r2, sl
 8000304:	40da      	lsrs	r2, r3
 8000306:	4641      	mov	r1, r8
 8000308:	0013      	movs	r3, r2
 800030a:	464a      	mov	r2, r9
 800030c:	408a      	lsls	r2, r1
 800030e:	0017      	movs	r7, r2
 8000310:	4642      	mov	r2, r8
 8000312:	431f      	orrs	r7, r3
 8000314:	4653      	mov	r3, sl
 8000316:	4093      	lsls	r3, r2
 8000318:	001e      	movs	r6, r3
 800031a:	42af      	cmp	r7, r5
 800031c:	d9c4      	bls.n	80002a8 <__udivmoddi4+0x4c>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	4643      	mov	r3, r8
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0d9      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032c:	07fb      	lsls	r3, r7, #31
 800032e:	0872      	lsrs	r2, r6, #1
 8000330:	431a      	orrs	r2, r3
 8000332:	4646      	mov	r6, r8
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	e00e      	b.n	8000356 <__udivmoddi4+0xfa>
 8000338:	42ab      	cmp	r3, r5
 800033a:	d101      	bne.n	8000340 <__udivmoddi4+0xe4>
 800033c:	42a2      	cmp	r2, r4
 800033e:	d80c      	bhi.n	800035a <__udivmoddi4+0xfe>
 8000340:	1aa4      	subs	r4, r4, r2
 8000342:	419d      	sbcs	r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	1924      	adds	r4, r4, r4
 8000348:	416d      	adcs	r5, r5
 800034a:	2100      	movs	r1, #0
 800034c:	3e01      	subs	r6, #1
 800034e:	1824      	adds	r4, r4, r0
 8000350:	414d      	adcs	r5, r1
 8000352:	2e00      	cmp	r6, #0
 8000354:	d006      	beq.n	8000364 <__udivmoddi4+0x108>
 8000356:	42ab      	cmp	r3, r5
 8000358:	d9ee      	bls.n	8000338 <__udivmoddi4+0xdc>
 800035a:	3e01      	subs	r6, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2e00      	cmp	r6, #0
 8000362:	d1f8      	bne.n	8000356 <__udivmoddi4+0xfa>
 8000364:	9800      	ldr	r0, [sp, #0]
 8000366:	9901      	ldr	r1, [sp, #4]
 8000368:	465b      	mov	r3, fp
 800036a:	1900      	adds	r0, r0, r4
 800036c:	4169      	adcs	r1, r5
 800036e:	2b00      	cmp	r3, #0
 8000370:	db24      	blt.n	80003bc <__udivmoddi4+0x160>
 8000372:	002b      	movs	r3, r5
 8000374:	465a      	mov	r2, fp
 8000376:	4644      	mov	r4, r8
 8000378:	40d3      	lsrs	r3, r2
 800037a:	002a      	movs	r2, r5
 800037c:	40e2      	lsrs	r2, r4
 800037e:	001c      	movs	r4, r3
 8000380:	465b      	mov	r3, fp
 8000382:	0015      	movs	r5, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	db2a      	blt.n	80003de <__udivmoddi4+0x182>
 8000388:	0026      	movs	r6, r4
 800038a:	409e      	lsls	r6, r3
 800038c:	0033      	movs	r3, r6
 800038e:	0026      	movs	r6, r4
 8000390:	4647      	mov	r7, r8
 8000392:	40be      	lsls	r6, r7
 8000394:	0032      	movs	r2, r6
 8000396:	1a80      	subs	r0, r0, r2
 8000398:	4199      	sbcs	r1, r3
 800039a:	9000      	str	r0, [sp, #0]
 800039c:	9101      	str	r1, [sp, #4]
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a0:	42a3      	cmp	r3, r4
 80003a2:	d8bc      	bhi.n	800031e <__udivmoddi4+0xc2>
 80003a4:	e783      	b.n	80002ae <__udivmoddi4+0x52>
 80003a6:	4642      	mov	r2, r8
 80003a8:	2320      	movs	r3, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	9100      	str	r1, [sp, #0]
 80003b2:	9201      	str	r2, [sp, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	e786      	b.n	80002ca <__udivmoddi4+0x6e>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	002a      	movs	r2, r5
 80003c4:	4646      	mov	r6, r8
 80003c6:	409a      	lsls	r2, r3
 80003c8:	0023      	movs	r3, r4
 80003ca:	40f3      	lsrs	r3, r6
 80003cc:	4644      	mov	r4, r8
 80003ce:	4313      	orrs	r3, r2
 80003d0:	002a      	movs	r2, r5
 80003d2:	40e2      	lsrs	r2, r4
 80003d4:	001c      	movs	r4, r3
 80003d6:	465b      	mov	r3, fp
 80003d8:	0015      	movs	r5, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dad4      	bge.n	8000388 <__udivmoddi4+0x12c>
 80003de:	4642      	mov	r2, r8
 80003e0:	002f      	movs	r7, r5
 80003e2:	2320      	movs	r3, #32
 80003e4:	0026      	movs	r6, r4
 80003e6:	4097      	lsls	r7, r2
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	40de      	lsrs	r6, r3
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7cd      	b.n	800038e <__udivmoddi4+0x132>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b089      	sub	sp, #36	; 0x24
 800044c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	240c      	movs	r4, #12
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2314      	movs	r3, #20
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f001 ffa7 	bl	80023ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_GPIO_Init+0x84>)
 8000460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_GPIO_Init+0x84>)
 8000464:	2101      	movs	r1, #1
 8000466:	430a      	orrs	r2, r1
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_GPIO_Init+0x84>)
 800046c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800046e:	2201      	movs	r2, #1
 8000470:	4013      	ands	r3, r2
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_GPIO_Init+0x84>)
 8000478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_GPIO_Init+0x84>)
 800047c:	2102      	movs	r1, #2
 800047e:	430a      	orrs	r2, r1
 8000480:	635a      	str	r2, [r3, #52]	; 0x34
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_GPIO_Init+0x84>)
 8000484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000486:	2202      	movs	r2, #2
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	480f      	ldr	r0, [pc, #60]	; (80004d0 <MX_GPIO_Init+0x88>)
 8000494:	2200      	movs	r2, #0
 8000496:	0019      	movs	r1, r3
 8000498:	f000 fce2 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	0052      	lsls	r2, r2, #1
 80004a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2201      	movs	r2, #1
 80004a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <MX_GPIO_Init+0x88>)
 80004ba:	0019      	movs	r1, r3
 80004bc:	0010      	movs	r0, r2
 80004be:	f000 fb6b 	bl	8000b98 <HAL_GPIO_Init>

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b009      	add	sp, #36	; 0x24
 80004c8:	bd90      	pop	{r4, r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40021000 	.word	0x40021000
 80004d0:	50000400 	.word	0x50000400

080004d4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 80004dc:	2301      	movs	r3, #1
 80004de:	425b      	negs	r3, r3
 80004e0:	1d39      	adds	r1, r7, #4
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <__io_putchar+0x20>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	f001 fa59 	bl	800199c <HAL_UART_Transmit>
	return ch;
 80004ea:	687b      	ldr	r3, [r7, #4]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b002      	add	sp, #8
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000090 	.word	0x20000090

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 f9ee 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f81a 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f7ff ffa0 	bl	8000448 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000508:	f000 f940 	bl	800078c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, led_Pin);
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <main+0x38>)
 8000512:	0019      	movs	r1, r3
 8000514:	0010      	movs	r0, r2
 8000516:	f000 fcc0 	bl	8000e9a <HAL_GPIO_TogglePin>
	  printf("hello world\r\n");
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <main+0x3c>)
 800051c:	0018      	movs	r0, r3
 800051e:	f001 ffbf 	bl	80024a0 <puts>
	  HAL_Delay(2000);
 8000522:	23fa      	movs	r3, #250	; 0xfa
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fa5e 	bl	80009e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, led_Pin);
 800052c:	e7ee      	b.n	800050c <main+0x14>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	50000400 	.word	0x50000400
 8000534:	08002e68 	.word	0x08002e68

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b093      	sub	sp, #76	; 0x4c
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	2410      	movs	r4, #16
 8000540:	193b      	adds	r3, r7, r4
 8000542:	0018      	movs	r0, r3
 8000544:	2338      	movs	r3, #56	; 0x38
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f001 ff2f 	bl	80023ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054e:	003b      	movs	r3, r7
 8000550:	0018      	movs	r0, r3
 8000552:	2310      	movs	r3, #16
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f001 ff28 	bl	80023ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fcb5 	bl	8000ed0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2202      	movs	r2, #2
 800056a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	0052      	lsls	r2, r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2240      	movs	r2, #64	; 0x40
 800057e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	193b      	adds	r3, r7, r4
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fced 	bl	8000f68 <HAL_RCC_OscConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000592:	f000 f819 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	003b      	movs	r3, r7
 8000598:	2207      	movs	r2, #7
 800059a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ae:	003b      	movs	r3, r7
 80005b0:	2100      	movs	r1, #0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fff2 	bl	800159c <HAL_RCC_ClockConfig>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005bc:	f000 f804 	bl	80005c8 <Error_Handler>
  }
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b013      	add	sp, #76	; 0x4c
 80005c6:	bd90      	pop	{r4, r7, pc}

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <Error_Handler+0x8>
	...

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_MspInit+0x44>)
 80005dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <HAL_MspInit+0x44>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	641a      	str	r2, [r3, #64]	; 0x40
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_MspInit+0x44>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_MspInit+0x44>)
 80005f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <HAL_MspInit+0x44>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0549      	lsls	r1, r1, #21
 80005fc:	430a      	orrs	r2, r1
 80005fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_MspInit+0x44>)
 8000602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	055b      	lsls	r3, r3, #21
 8000608:	4013      	ands	r3, r2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40021000 	.word	0x40021000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <NMI_Handler+0x4>

08000622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <HardFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000640:	f000 f9b6 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	e00a      	b.n	8000672 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800065c:	e000      	b.n	8000660 <_read+0x16>
 800065e:	bf00      	nop
 8000660:	0001      	movs	r1, r0
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	60ba      	str	r2, [r7, #8]
 8000668:	b2ca      	uxtb	r2, r1
 800066a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	3301      	adds	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	697a      	ldr	r2, [r7, #20]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	429a      	cmp	r2, r3
 8000678:	dbf0      	blt.n	800065c <_read+0x12>
  }

  return len;
 800067a:	687b      	ldr	r3, [r7, #4]
}
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	b006      	add	sp, #24
 8000682:	bd80      	pop	{r7, pc}

08000684 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	e009      	b.n	80006aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	60ba      	str	r2, [r7, #8]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ff18 	bl	80004d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	3301      	adds	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	dbf1      	blt.n	8000696 <_write+0x12>
  }
  return len;
 80006b2:	687b      	ldr	r3, [r7, #4]
}
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b006      	add	sp, #24
 80006ba:	bd80      	pop	{r7, pc}

080006bc <_close>:

int _close(int file)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	425b      	negs	r3, r3
}
 80006c8:	0018      	movs	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b002      	add	sp, #8
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0192      	lsls	r2, r2, #6
 80006e0:	605a      	str	r2, [r3, #4]
  return 0;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b002      	add	sp, #8
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_isatty>:

int _isatty(int file)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006f4:	2301      	movs	r3, #1
}
 80006f6:	0018      	movs	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b002      	add	sp, #8
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b084      	sub	sp, #16
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800070a:	2300      	movs	r3, #0
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	b004      	add	sp, #16
 8000712:	bd80      	pop	{r7, pc}

08000714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <_sbrk+0x5c>)
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <_sbrk+0x60>)
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <_sbrk+0x64>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d102      	bne.n	8000736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <_sbrk+0x64>)
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <_sbrk+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	18d3      	adds	r3, r2, r3
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	429a      	cmp	r2, r3
 8000742:	d207      	bcs.n	8000754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000744:	f001 fe08 	bl	8002358 <__errno>
 8000748:	0003      	movs	r3, r0
 800074a:	220c      	movs	r2, #12
 800074c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800074e:	2301      	movs	r3, #1
 8000750:	425b      	negs	r3, r3
 8000752:	e009      	b.n	8000768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <_sbrk+0x64>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <_sbrk+0x64>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	18d2      	adds	r2, r2, r3
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <_sbrk+0x64>)
 8000764:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000766:	68fb      	ldr	r3, [r7, #12]
}
 8000768:	0018      	movs	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	b006      	add	sp, #24
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20002000 	.word	0x20002000
 8000774:	00000400 	.word	0x00000400
 8000778:	2000008c 	.word	0x2000008c
 800077c:	20000138 	.word	0x20000138

08000780 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_USART2_UART_Init+0x60>)
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <MX_USART2_UART_Init+0x64>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_USART2_UART_Init+0x60>)
 8000798:	22e1      	movs	r2, #225	; 0xe1
 800079a:	0252      	lsls	r2, r2, #9
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_USART2_UART_Init+0x60>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART2_UART_Init+0x60>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART2_UART_Init+0x60>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x60>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_USART2_UART_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART2_UART_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_USART2_UART_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART2_UART_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_USART2_UART_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x60>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 f88a 	bl	80018f0 <HAL_UART_Init>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007e0:	f7ff fef2 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000090 	.word	0x20000090
 80007f0:	40004400 	.word	0x40004400

080007f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b08b      	sub	sp, #44	; 0x2c
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	2414      	movs	r4, #20
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	2314      	movs	r3, #20
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f001 fdd0 	bl	80023ac <memset>
  if(uartHandle->Instance==USART2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <HAL_UART_MspInit+0x8c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d130      	bne.n	8000878 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <HAL_UART_MspInit+0x90>)
 8000818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_UART_MspInit+0x90>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0289      	lsls	r1, r1, #10
 8000820:	430a      	orrs	r2, r1
 8000822:	63da      	str	r2, [r3, #60]	; 0x3c
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_UART_MspInit+0x90>)
 8000826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	029b      	lsls	r3, r3, #10
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_UART_MspInit+0x90>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_UART_MspInit+0x90>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_UART_MspInit+0x90>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800084a:	0021      	movs	r1, r4
 800084c:	187b      	adds	r3, r7, r1
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2202      	movs	r2, #2
 8000856:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2201      	movs	r2, #1
 8000868:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	187a      	adds	r2, r7, r1
 800086c:	23a0      	movs	r3, #160	; 0xa0
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f000 f990 	bl	8000b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b00b      	add	sp, #44	; 0x2c
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	40004400 	.word	0x40004400
 8000884:	40021000 	.word	0x40021000

08000888 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800088c:	f7ff ff78 	bl	8000780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	; (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	; (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008b6:	f001 fd55 	bl	8002364 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008ba:	f7ff fe1d 	bl	80004f8 <main>

080008be <LoopForever>:

LoopForever:
  b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   r0, =_estack
 80008c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008cc:	08002f64 	.word	0x08002f64
  ldr r2, =_sbss
 80008d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008d4:	20000138 	.word	0x20000138

080008d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_IRQHandler>
	...

080008dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_Init+0x3c>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_Init+0x3c>)
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	0049      	lsls	r1, r1, #1
 80008f2:	430a      	orrs	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f6:	2003      	movs	r0, #3
 80008f8:	f000 f810 	bl	800091c <HAL_InitTick>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d003      	beq.n	8000908 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e001      	b.n	800090c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fe64 	bl	80005d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781b      	ldrb	r3, [r3, #0]
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000924:	230f      	movs	r3, #15
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <HAL_InitTick+0x88>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d02b      	beq.n	800098c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_InitTick+0x8c>)
 8000936:	681c      	ldr	r4, [r3, #0]
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <HAL_InitTick+0x88>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	0019      	movs	r1, r3
 800093e:	23fa      	movs	r3, #250	; 0xfa
 8000940:	0098      	lsls	r0, r3, #2
 8000942:	f7ff fbdf 	bl	8000104 <__udivsi3>
 8000946:	0003      	movs	r3, r0
 8000948:	0019      	movs	r1, r3
 800094a:	0020      	movs	r0, r4
 800094c:	f7ff fbda 	bl	8000104 <__udivsi3>
 8000950:	0003      	movs	r3, r0
 8000952:	0018      	movs	r0, r3
 8000954:	f000 f913 	bl	8000b7e <HAL_SYSTICK_Config>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d112      	bne.n	8000982 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b03      	cmp	r3, #3
 8000960:	d80a      	bhi.n	8000978 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	2301      	movs	r3, #1
 8000966:	425b      	negs	r3, r3
 8000968:	2200      	movs	r2, #0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f8f2 	bl	8000b54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_InitTick+0x90>)
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	e00d      	b.n	8000994 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000978:	230f      	movs	r3, #15
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e008      	b.n	8000994 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000982:	230f      	movs	r3, #15
 8000984:	18fb      	adds	r3, r7, r3
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	e003      	b.n	8000994 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800098c:	230f      	movs	r3, #15
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000994:	230f      	movs	r3, #15
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	781b      	ldrb	r3, [r3, #0]
}
 800099a:	0018      	movs	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	b005      	add	sp, #20
 80009a0:	bd90      	pop	{r4, r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_IncTick+0x1c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	001a      	movs	r2, r3
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_IncTick+0x20>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	18d2      	adds	r2, r2, r3
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_IncTick+0x20>)
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000124 	.word	0x20000124

080009d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <HAL_GetTick+0x10>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	20000124 	.word	0x20000124

080009e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f0:	f7ff fff0 	bl	80009d4 <HAL_GetTick>
 80009f4:	0003      	movs	r3, r0
 80009f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	d005      	beq.n	8000a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_Delay+0x44>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	001a      	movs	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	189b      	adds	r3, r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	f7ff ffe0 	bl	80009d4 <HAL_GetTick>
 8000a14:	0002      	movs	r2, r0
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d8f7      	bhi.n	8000a10 <HAL_Delay+0x28>
  {
  }
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b004      	add	sp, #16
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000008 	.word	0x20000008

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	0002      	movs	r2, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b7f      	cmp	r3, #127	; 0x7f
 8000a44:	d828      	bhi.n	8000a98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a46:	4a2f      	ldr	r2, [pc, #188]	; (8000b04 <__NVIC_SetPriority+0xd4>)
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	33c0      	adds	r3, #192	; 0xc0
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	589b      	ldr	r3, [r3, r2]
 8000a56:	1dfa      	adds	r2, r7, #7
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	400a      	ands	r2, r1
 8000a60:	00d2      	lsls	r2, r2, #3
 8000a62:	21ff      	movs	r1, #255	; 0xff
 8000a64:	4091      	lsls	r1, r2
 8000a66:	000a      	movs	r2, r1
 8000a68:	43d2      	mvns	r2, r2
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	019b      	lsls	r3, r3, #6
 8000a72:	22ff      	movs	r2, #255	; 0xff
 8000a74:	401a      	ands	r2, r3
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	4003      	ands	r3, r0
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a84:	481f      	ldr	r0, [pc, #124]	; (8000b04 <__NVIC_SetPriority+0xd4>)
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	33c0      	adds	r3, #192	; 0xc0
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a96:	e031      	b.n	8000afc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <__NVIC_SetPriority+0xd8>)
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	400b      	ands	r3, r1
 8000aa4:	3b08      	subs	r3, #8
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	3306      	adds	r3, #6
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	18d3      	adds	r3, r2, r3
 8000aae:	3304      	adds	r3, #4
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	1dfa      	adds	r2, r7, #7
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	2203      	movs	r2, #3
 8000aba:	400a      	ands	r2, r1
 8000abc:	00d2      	lsls	r2, r2, #3
 8000abe:	21ff      	movs	r1, #255	; 0xff
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	000a      	movs	r2, r1
 8000ac4:	43d2      	mvns	r2, r2
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	019b      	lsls	r3, r3, #6
 8000ace:	22ff      	movs	r2, #255	; 0xff
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	2303      	movs	r3, #3
 8000ada:	4003      	ands	r3, r0
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <__NVIC_SetPriority+0xd8>)
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	001c      	movs	r4, r3
 8000ae8:	230f      	movs	r3, #15
 8000aea:	4023      	ands	r3, r4
 8000aec:	3b08      	subs	r3, #8
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	430a      	orrs	r2, r1
 8000af2:	3306      	adds	r3, #6
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	18c3      	adds	r3, r0, r3
 8000af8:	3304      	adds	r3, #4
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b003      	add	sp, #12
 8000b02:	bd90      	pop	{r4, r7, pc}
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	045b      	lsls	r3, r3, #17
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d301      	bcc.n	8000b24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b20:	2301      	movs	r3, #1
 8000b22:	e010      	b.n	8000b46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <SysTick_Config+0x44>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	3a01      	subs	r2, #1
 8000b2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	425b      	negs	r3, r3
 8000b30:	2103      	movs	r1, #3
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff ff7c 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x44>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x44>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	210f      	movs	r1, #15
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	1c02      	adds	r2, r0, #0
 8000b64:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ffbf 	bl	8000b0c <SysTick_Config>
 8000b8e:	0003      	movs	r3, r0
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	e147      	b.n	8000e38 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d100      	bne.n	8000bc0 <HAL_GPIO_Init+0x28>
 8000bbe:	e138      	b.n	8000e32 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d005      	beq.n	8000bd8 <HAL_GPIO_Init+0x40>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	0013      	movs	r3, r2
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	43da      	mvns	r2, r3
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	2201      	movs	r2, #1
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d017      	beq.n	8000c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	409a      	lsls	r2, r3
 8000c54:	0013      	movs	r3, r2
 8000c56:	43da      	mvns	r2, r3
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d123      	bne.n	8000cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	0092      	lsls	r2, r2, #2
 8000c8c:	58d3      	ldr	r3, [r2, r3]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	2207      	movs	r2, #7
 8000c94:	4013      	ands	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	691a      	ldr	r2, [r3, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2107      	movs	r1, #7
 8000cae:	400b      	ands	r3, r1
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	6939      	ldr	r1, [r7, #16]
 8000cc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	401a      	ands	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	23c0      	movs	r3, #192	; 0xc0
 8000d04:	029b      	lsls	r3, r3, #10
 8000d06:	4013      	ands	r3, r2
 8000d08:	d100      	bne.n	8000d0c <HAL_GPIO_Init+0x174>
 8000d0a:	e092      	b.n	8000e32 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d0c:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	3318      	adds	r3, #24
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	589b      	ldr	r3, [r3, r2]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	220f      	movs	r2, #15
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	43da      	mvns	r2, r3
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	23a0      	movs	r3, #160	; 0xa0
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0x1ca>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a45      	ldr	r2, [pc, #276]	; (8000e54 <HAL_GPIO_Init+0x2bc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d00d      	beq.n	8000d5e <HAL_GPIO_Init+0x1c6>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HAL_GPIO_Init+0x2c0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d007      	beq.n	8000d5a <HAL_GPIO_Init+0x1c2>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a43      	ldr	r2, [pc, #268]	; (8000e5c <HAL_GPIO_Init+0x2c4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_GPIO_Init+0x1be>
 8000d52:	2303      	movs	r3, #3
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x1cc>
 8000d56:	2305      	movs	r3, #5
 8000d58:	e004      	b.n	8000d64 <HAL_GPIO_Init+0x1cc>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_Init+0x1cc>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <HAL_GPIO_Init+0x1cc>
 8000d62:	2300      	movs	r3, #0
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	2103      	movs	r1, #3
 8000d68:	400a      	ands	r2, r1
 8000d6a:	00d2      	lsls	r2, r2, #3
 8000d6c:	4093      	lsls	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d74:	4936      	ldr	r1, [pc, #216]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3318      	adds	r3, #24
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d82:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	035b      	lsls	r3, r3, #13
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43da      	mvns	r2, r3
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	039b      	lsls	r3, r3, #14
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000dd8:	2384      	movs	r3, #132	; 0x84
 8000dda:	58d3      	ldr	r3, [r2, r3]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43da      	mvns	r2, r3
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	029b      	lsls	r3, r3, #10
 8000df0:	4013      	ands	r3, r2
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dfc:	4914      	ldr	r1, [pc, #80]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000dfe:	2284      	movs	r2, #132	; 0x84
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	58d3      	ldr	r3, [r2, r3]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	025b      	lsls	r3, r3, #9
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e2a:	4909      	ldr	r1, [pc, #36]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	40da      	lsrs	r2, r3
 8000e40:	1e13      	subs	r3, r2, #0
 8000e42:	d000      	beq.n	8000e46 <HAL_GPIO_Init+0x2ae>
 8000e44:	e6b0      	b.n	8000ba8 <HAL_GPIO_Init+0x10>
  }
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b006      	add	sp, #24
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021800 	.word	0x40021800
 8000e54:	50000400 	.word	0x50000400
 8000e58:	50000800 	.word	0x50000800
 8000e5c:	50000c00 	.word	0x50000c00

08000e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	0008      	movs	r0, r1
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	1cbb      	adds	r3, r7, #2
 8000e6e:	1c02      	adds	r2, r0, #0
 8000e70:	801a      	strh	r2, [r3, #0]
 8000e72:	1c7b      	adds	r3, r7, #1
 8000e74:	1c0a      	adds	r2, r1, #0
 8000e76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e78:	1c7b      	adds	r3, r7, #1
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e80:	1cbb      	adds	r3, r7, #2
 8000e82:	881a      	ldrh	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e88:	e003      	b.n	8000e92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e8a:	1cbb      	adds	r3, r7, #2
 8000e8c:	881a      	ldrh	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	000a      	movs	r2, r1
 8000ea4:	1cbb      	adds	r3, r7, #2
 8000ea6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eae:	1cbb      	adds	r3, r7, #2
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	041a      	lsls	r2, r3, #16
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	1cb9      	adds	r1, r7, #2
 8000ebe:	8809      	ldrh	r1, [r1, #0]
 8000ec0:	400b      	ands	r3, r1
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	619a      	str	r2, [r3, #24]
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b004      	add	sp, #16
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d11f      	bne.n	8000f34 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	0013      	movs	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	189b      	adds	r3, r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4912      	ldr	r1, [pc, #72]	; (8000f4c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff f8fe 	bl	8000104 <__udivsi3>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f0e:	e008      	b.n	8000f22 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e001      	b.n	8000f22 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e009      	b.n	8000f36 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d0ed      	beq.n	8000f10 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b004      	add	sp, #16
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	40007000 	.word	0x40007000
 8000f44:	fffff9ff 	.word	0xfffff9ff
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	000f4240 	.word	0x000f4240

08000f50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	23e0      	movs	r3, #224	; 0xe0
 8000f5a:	01db      	lsls	r3, r3, #7
 8000f5c:	4013      	ands	r3, r2
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000

08000f68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e2fe      	b.n	8001578 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4013      	ands	r3, r2
 8000f82:	d100      	bne.n	8000f86 <HAL_RCC_OscConfig+0x1e>
 8000f84:	e07c      	b.n	8001080 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f86:	4bc3      	ldr	r3, [pc, #780]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2238      	movs	r2, #56	; 0x38
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f90:	4bc0      	ldr	r3, [pc, #768]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2203      	movs	r2, #3
 8000f96:	4013      	ands	r3, r2
 8000f98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	d102      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x3e>
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d002      	beq.n	8000fac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d10b      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	4bb9      	ldr	r3, [pc, #740]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	029b      	lsls	r3, r3, #10
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d062      	beq.n	800107e <HAL_RCC_OscConfig+0x116>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d15e      	bne.n	800107e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e2d9      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	025b      	lsls	r3, r3, #9
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d107      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x78>
 8000fd0:	4bb0      	ldr	r3, [pc, #704]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4baf      	ldr	r3, [pc, #700]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	0249      	lsls	r1, r1, #9
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e020      	b.n	8001022 <HAL_RCC_OscConfig+0xba>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	23a0      	movs	r3, #160	; 0xa0
 8000fe6:	02db      	lsls	r3, r3, #11
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d10e      	bne.n	800100a <HAL_RCC_OscConfig+0xa2>
 8000fec:	4ba9      	ldr	r3, [pc, #676]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4ba8      	ldr	r3, [pc, #672]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	02c9      	lsls	r1, r1, #11
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	4ba6      	ldr	r3, [pc, #664]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4ba5      	ldr	r3, [pc, #660]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	0249      	lsls	r1, r1, #9
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e00b      	b.n	8001022 <HAL_RCC_OscConfig+0xba>
 800100a:	4ba2      	ldr	r3, [pc, #648]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4ba1      	ldr	r3, [pc, #644]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001010:	49a1      	ldr	r1, [pc, #644]	; (8001298 <HAL_RCC_OscConfig+0x330>)
 8001012:	400a      	ands	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	4b9f      	ldr	r3, [pc, #636]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b9e      	ldr	r3, [pc, #632]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800101c:	499f      	ldr	r1, [pc, #636]	; (800129c <HAL_RCC_OscConfig+0x334>)
 800101e:	400a      	ands	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d014      	beq.n	8001054 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102a:	f7ff fcd3 	bl	80009d4 <HAL_GetTick>
 800102e:	0003      	movs	r3, r0
 8001030:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fcce 	bl	80009d4 <HAL_GetTick>
 8001038:	0002      	movs	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e298      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001046:	4b93      	ldr	r3, [pc, #588]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	029b      	lsls	r3, r3, #10
 800104e:	4013      	ands	r3, r2
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0xcc>
 8001052:	e015      	b.n	8001080 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001054:	f7ff fcbe 	bl	80009d4 <HAL_GetTick>
 8001058:	0003      	movs	r3, r0
 800105a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800105e:	f7ff fcb9 	bl	80009d4 <HAL_GetTick>
 8001062:	0002      	movs	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b64      	cmp	r3, #100	; 0x64
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e283      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001070:	4b88      	ldr	r3, [pc, #544]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	029b      	lsls	r3, r3, #10
 8001078:	4013      	ands	r3, r2
 800107a:	d1f0      	bne.n	800105e <HAL_RCC_OscConfig+0xf6>
 800107c:	e000      	b.n	8001080 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2202      	movs	r2, #2
 8001086:	4013      	ands	r3, r2
 8001088:	d100      	bne.n	800108c <HAL_RCC_OscConfig+0x124>
 800108a:	e099      	b.n	80011c0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800108c:	4b81      	ldr	r3, [pc, #516]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2238      	movs	r2, #56	; 0x38
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001096:	4b7f      	ldr	r3, [pc, #508]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2203      	movs	r2, #3
 800109c:	4013      	ands	r3, r2
 800109e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d102      	bne.n	80010ac <HAL_RCC_OscConfig+0x144>
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d002      	beq.n	80010b2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d135      	bne.n	800111e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b2:	4b78      	ldr	r3, [pc, #480]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4013      	ands	r3, r2
 80010bc:	d005      	beq.n	80010ca <HAL_RCC_OscConfig+0x162>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e256      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b72      	ldr	r3, [pc, #456]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a74      	ldr	r2, [pc, #464]	; (80012a0 <HAL_RCC_OscConfig+0x338>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	0019      	movs	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	021a      	lsls	r2, r3, #8
 80010da:	4b6e      	ldr	r3, [pc, #440]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010dc:	430a      	orrs	r2, r1
 80010de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d112      	bne.n	800110c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010e6:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6e      	ldr	r2, [pc, #440]	; (80012a4 <HAL_RCC_OscConfig+0x33c>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	0019      	movs	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	4b67      	ldr	r3, [pc, #412]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	0adb      	lsrs	r3, r3, #11
 8001100:	2207      	movs	r2, #7
 8001102:	4013      	ands	r3, r2
 8001104:	4a68      	ldr	r2, [pc, #416]	; (80012a8 <HAL_RCC_OscConfig+0x340>)
 8001106:	40da      	lsrs	r2, r3
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <HAL_RCC_OscConfig+0x344>)
 800110a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800110c:	4b68      	ldr	r3, [pc, #416]	; (80012b0 <HAL_RCC_OscConfig+0x348>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fc03 	bl	800091c <HAL_InitTick>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d051      	beq.n	80011be <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e22c      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d030      	beq.n	8001188 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001126:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a5e      	ldr	r2, [pc, #376]	; (80012a4 <HAL_RCC_OscConfig+0x33c>)
 800112c:	4013      	ands	r3, r2
 800112e:	0019      	movs	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	4b57      	ldr	r3, [pc, #348]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b55      	ldr	r3, [pc, #340]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0049      	lsls	r1, r1, #1
 8001144:	430a      	orrs	r2, r1
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fc44 	bl	80009d4 <HAL_GetTick>
 800114c:	0003      	movs	r3, r0
 800114e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fc3f 	bl	80009d4 <HAL_GetTick>
 8001156:	0002      	movs	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e209      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001164:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4013      	ands	r3, r2
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b48      	ldr	r3, [pc, #288]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <HAL_RCC_OscConfig+0x338>)
 8001176:	4013      	ands	r3, r2
 8001178:	0019      	movs	r1, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	021a      	lsls	r2, r3, #8
 8001180:	4b44      	ldr	r3, [pc, #272]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001182:	430a      	orrs	r2, r1
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	e01b      	b.n	80011c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001188:	4b42      	ldr	r3, [pc, #264]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b41      	ldr	r3, [pc, #260]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800118e:	4949      	ldr	r1, [pc, #292]	; (80012b4 <HAL_RCC_OscConfig+0x34c>)
 8001190:	400a      	ands	r2, r1
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fc1e 	bl	80009d4 <HAL_GetTick>
 8001198:	0003      	movs	r3, r0
 800119a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fc19 	bl	80009d4 <HAL_GetTick>
 80011a2:	0002      	movs	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1e3      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b0:	4b38      	ldr	r3, [pc, #224]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4013      	ands	r3, r2
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x236>
 80011bc:	e000      	b.n	80011c0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2208      	movs	r2, #8
 80011c6:	4013      	ands	r3, r2
 80011c8:	d047      	beq.n	800125a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80011ca:	4b32      	ldr	r3, [pc, #200]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2238      	movs	r2, #56	; 0x38
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b18      	cmp	r3, #24
 80011d4:	d10a      	bne.n	80011ec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011da:	2202      	movs	r2, #2
 80011dc:	4013      	ands	r3, r2
 80011de:	d03c      	beq.n	800125a <HAL_RCC_OscConfig+0x2f2>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d138      	bne.n	800125a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e1c5      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d019      	beq.n	8001228 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	430a      	orrs	r2, r1
 80011fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fbe8 	bl	80009d4 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800120a:	f7ff fbe3 	bl	80009d4 <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e1ad      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800121e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001220:	2202      	movs	r2, #2
 8001222:	4013      	ands	r3, r2
 8001224:	d0f1      	beq.n	800120a <HAL_RCC_OscConfig+0x2a2>
 8001226:	e018      	b.n	800125a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800122a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800122e:	2101      	movs	r1, #1
 8001230:	438a      	bics	r2, r1
 8001232:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fbce 	bl	80009d4 <HAL_GetTick>
 8001238:	0003      	movs	r3, r0
 800123a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff fbc9 	bl	80009d4 <HAL_GetTick>
 8001242:	0002      	movs	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e193      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001254:	2202      	movs	r2, #2
 8001256:	4013      	ands	r3, r2
 8001258:	d1f1      	bne.n	800123e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2204      	movs	r2, #4
 8001260:	4013      	ands	r3, r2
 8001262:	d100      	bne.n	8001266 <HAL_RCC_OscConfig+0x2fe>
 8001264:	e0c6      	b.n	80013f4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001266:	231f      	movs	r3, #31
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2238      	movs	r2, #56	; 0x38
 8001274:	4013      	ands	r3, r2
 8001276:	2b20      	cmp	r3, #32
 8001278:	d11e      	bne.n	80012b8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800127c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127e:	2202      	movs	r2, #2
 8001280:	4013      	ands	r3, r2
 8001282:	d100      	bne.n	8001286 <HAL_RCC_OscConfig+0x31e>
 8001284:	e0b6      	b.n	80013f4 <HAL_RCC_OscConfig+0x48c>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d000      	beq.n	8001290 <HAL_RCC_OscConfig+0x328>
 800128e:	e0b1      	b.n	80013f4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e171      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
 8001294:	40021000 	.word	0x40021000
 8001298:	fffeffff 	.word	0xfffeffff
 800129c:	fffbffff 	.word	0xfffbffff
 80012a0:	ffff80ff 	.word	0xffff80ff
 80012a4:	ffffc7ff 	.word	0xffffc7ff
 80012a8:	00f42400 	.word	0x00f42400
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004
 80012b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012b8:	4bb1      	ldr	r3, [pc, #708]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80012ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	055b      	lsls	r3, r3, #21
 80012c0:	4013      	ands	r3, r2
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_OscConfig+0x360>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <HAL_RCC_OscConfig+0x362>
 80012c8:	2300      	movs	r3, #0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d011      	beq.n	80012f2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4bac      	ldr	r3, [pc, #688]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80012d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012d2:	4bab      	ldr	r3, [pc, #684]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0549      	lsls	r1, r1, #21
 80012d8:	430a      	orrs	r2, r1
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c
 80012dc:	4ba8      	ldr	r3, [pc, #672]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80012de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	055b      	lsls	r3, r3, #21
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012ea:	231f      	movs	r3, #31
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f2:	4ba4      	ldr	r3, [pc, #656]	; (8001584 <HAL_RCC_OscConfig+0x61c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	d11a      	bne.n	8001334 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012fe:	4ba1      	ldr	r3, [pc, #644]	; (8001584 <HAL_RCC_OscConfig+0x61c>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4ba0      	ldr	r3, [pc, #640]	; (8001584 <HAL_RCC_OscConfig+0x61c>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	0049      	lsls	r1, r1, #1
 8001308:	430a      	orrs	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800130c:	f7ff fb62 	bl	80009d4 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001316:	f7ff fb5d 	bl	80009d4 <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e127      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001328:	4b96      	ldr	r3, [pc, #600]	; (8001584 <HAL_RCC_OscConfig+0x61c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4013      	ands	r3, r2
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x3e2>
 800133c:	4b90      	ldr	r3, [pc, #576]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 800133e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001340:	4b8f      	ldr	r3, [pc, #572]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001342:	2101      	movs	r1, #1
 8001344:	430a      	orrs	r2, r1
 8001346:	65da      	str	r2, [r3, #92]	; 0x5c
 8001348:	e01c      	b.n	8001384 <HAL_RCC_OscConfig+0x41c>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x404>
 8001352:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001356:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001358:	2104      	movs	r1, #4
 800135a:	430a      	orrs	r2, r1
 800135c:	65da      	str	r2, [r3, #92]	; 0x5c
 800135e:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001360:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001362:	4b87      	ldr	r3, [pc, #540]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001364:	2101      	movs	r1, #1
 8001366:	430a      	orrs	r2, r1
 8001368:	65da      	str	r2, [r3, #92]	; 0x5c
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0x41c>
 800136c:	4b84      	ldr	r3, [pc, #528]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 800136e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001370:	4b83      	ldr	r3, [pc, #524]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001372:	2101      	movs	r1, #1
 8001374:	438a      	bics	r2, r1
 8001376:	65da      	str	r2, [r3, #92]	; 0x5c
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 800137a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800137c:	4b80      	ldr	r3, [pc, #512]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 800137e:	2104      	movs	r1, #4
 8001380:	438a      	bics	r2, r1
 8001382:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d014      	beq.n	80013b6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fb22 	bl	80009d4 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001394:	e009      	b.n	80013aa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fb1d 	bl	80009d4 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4a79      	ldr	r2, [pc, #484]	; (8001588 <HAL_RCC_OscConfig+0x620>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0e6      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013aa:	4b75      	ldr	r3, [pc, #468]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80013ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x42e>
 80013b4:	e013      	b.n	80013de <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fb0d 	bl	80009d4 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013be:	e009      	b.n	80013d4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fb08 	bl	80009d4 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	4a6f      	ldr	r2, [pc, #444]	; (8001588 <HAL_RCC_OscConfig+0x620>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0d1      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d4:	4b6a      	ldr	r3, [pc, #424]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	2202      	movs	r2, #2
 80013da:	4013      	ands	r3, r2
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013de:	231f      	movs	r3, #31
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013e8:	4b65      	ldr	r3, [pc, #404]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80013ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ec:	4b64      	ldr	r3, [pc, #400]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80013ee:	4967      	ldr	r1, [pc, #412]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d100      	bne.n	80013fe <HAL_RCC_OscConfig+0x496>
 80013fc:	e0bb      	b.n	8001576 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013fe:	4b60      	ldr	r3, [pc, #384]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2238      	movs	r2, #56	; 0x38
 8001404:	4013      	ands	r3, r2
 8001406:	2b10      	cmp	r3, #16
 8001408:	d100      	bne.n	800140c <HAL_RCC_OscConfig+0x4a4>
 800140a:	e07b      	b.n	8001504 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d156      	bne.n	80014c2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b59      	ldr	r3, [pc, #356]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 800141a:	495d      	ldr	r1, [pc, #372]	; (8001590 <HAL_RCC_OscConfig+0x628>)
 800141c:	400a      	ands	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fad8 	bl	80009d4 <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff fad3 	bl	80009d4 <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e09d      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800143c:	4b50      	ldr	r3, [pc, #320]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	049b      	lsls	r3, r3, #18
 8001444:	4013      	ands	r3, r2
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_RCC_OscConfig+0x62c>)
 800144e:	4013      	ands	r3, r2
 8001450:	0019      	movs	r1, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1a      	ldr	r2, [r3, #32]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001474:	431a      	orrs	r2, r3
 8001476:	4b42      	ldr	r3, [pc, #264]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001478:	430a      	orrs	r2, r1
 800147a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	0449      	lsls	r1, r1, #17
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0549      	lsls	r1, r1, #21
 8001494:	430a      	orrs	r2, r1
 8001496:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fa9c 	bl	80009d4 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff fa97 	bl	80009d4 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e061      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	049b      	lsls	r3, r3, #18
 80014bc:	4013      	ands	r3, r2
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x53a>
 80014c0:	e059      	b.n	8001576 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80014c8:	4931      	ldr	r1, [pc, #196]	; (8001590 <HAL_RCC_OscConfig+0x628>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fa81 	bl	80009d4 <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fa7c 	bl	80009d4 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e046      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	049b      	lsls	r3, r3, #18
 80014f2:	4013      	ands	r3, r2
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 80014fc:	4926      	ldr	r1, [pc, #152]	; (8001598 <HAL_RCC_OscConfig+0x630>)
 80014fe:	400a      	ands	r2, r1
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	e038      	b.n	8001576 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e033      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_RCC_OscConfig+0x618>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2203      	movs	r2, #3
 800151a:	401a      	ands	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	429a      	cmp	r2, r3
 8001522:	d126      	bne.n	8001572 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2270      	movs	r2, #112	; 0x70
 8001528:	401a      	ands	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d11f      	bne.n	8001572 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	23fe      	movs	r3, #254	; 0xfe
 8001536:	01db      	lsls	r3, r3, #7
 8001538:	401a      	ands	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d116      	bne.n	8001572 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	23f8      	movs	r3, #248	; 0xf8
 8001548:	039b      	lsls	r3, r3, #14
 800154a:	401a      	ands	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d10e      	bne.n	8001572 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	23e0      	movs	r3, #224	; 0xe0
 8001558:	051b      	lsls	r3, r3, #20
 800155a:	401a      	ands	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	0f5b      	lsrs	r3, r3, #29
 8001568:	075a      	lsls	r2, r3, #29
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b008      	add	sp, #32
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000
 8001584:	40007000 	.word	0x40007000
 8001588:	00001388 	.word	0x00001388
 800158c:	efffffff 	.word	0xefffffff
 8001590:	feffffff 	.word	0xfeffffff
 8001594:	11c1808c 	.word	0x11c1808c
 8001598:	eefefffc 	.word	0xeefefffc

0800159c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0e9      	b.n	8001784 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b0:	4b76      	ldr	r3, [pc, #472]	; (800178c <HAL_RCC_ClockConfig+0x1f0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2207      	movs	r2, #7
 80015b6:	4013      	ands	r3, r2
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d91e      	bls.n	80015fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b73      	ldr	r3, [pc, #460]	; (800178c <HAL_RCC_ClockConfig+0x1f0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2207      	movs	r2, #7
 80015c4:	4393      	bics	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	4b70      	ldr	r3, [pc, #448]	; (800178c <HAL_RCC_ClockConfig+0x1f0>)
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015d0:	f7ff fa00 	bl	80009d4 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015d8:	e009      	b.n	80015ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015da:	f7ff f9fb 	bl	80009d4 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4a6a      	ldr	r2, [pc, #424]	; (8001790 <HAL_RCC_ClockConfig+0x1f4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0ca      	b.n	8001784 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ee:	4b67      	ldr	r3, [pc, #412]	; (800178c <HAL_RCC_ClockConfig+0x1f0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2207      	movs	r2, #7
 80015f4:	4013      	ands	r3, r2
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1ee      	bne.n	80015da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2202      	movs	r2, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d015      	beq.n	8001632 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2204      	movs	r2, #4
 800160c:	4013      	ands	r3, r2
 800160e:	d006      	beq.n	800161e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001610:	4b60      	ldr	r3, [pc, #384]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	4b5f      	ldr	r3, [pc, #380]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 8001616:	21e0      	movs	r1, #224	; 0xe0
 8001618:	01c9      	lsls	r1, r1, #7
 800161a:	430a      	orrs	r2, r1
 800161c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161e:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4a5d      	ldr	r2, [pc, #372]	; (8001798 <HAL_RCC_ClockConfig+0x1fc>)
 8001624:	4013      	ands	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 800162e:	430a      	orrs	r2, r1
 8001630:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	4013      	ands	r3, r2
 800163a:	d057      	beq.n	80016ec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	4013      	ands	r3, r2
 800164e:	d12b      	bne.n	80016a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e097      	b.n	8001784 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d107      	bne.n	800166c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165c:	4b4d      	ldr	r3, [pc, #308]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	049b      	lsls	r3, r3, #18
 8001664:	4013      	ands	r3, r2
 8001666:	d11f      	bne.n	80016a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e08b      	b.n	8001784 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d107      	bne.n	8001684 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001674:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4013      	ands	r3, r2
 800167e:	d113      	bne.n	80016a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e07f      	b.n	8001784 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d106      	bne.n	800169a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168c:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 800168e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d108      	bne.n	80016a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e074      	b.n	8001784 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800169a:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e06d      	b.n	8001784 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2207      	movs	r2, #7
 80016ae:	4393      	bics	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 80016b8:	430a      	orrs	r2, r1
 80016ba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016bc:	f7ff f98a 	bl	80009d4 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c4:	e009      	b.n	80016da <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c6:	f7ff f985 	bl	80009d4 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_RCC_ClockConfig+0x1f4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e054      	b.n	8001784 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2238      	movs	r2, #56	; 0x38
 80016e0:	401a      	ands	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d1ec      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_RCC_ClockConfig+0x1f0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2207      	movs	r2, #7
 80016f2:	4013      	ands	r3, r2
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d21e      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_RCC_ClockConfig+0x1f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2207      	movs	r2, #7
 8001700:	4393      	bics	r3, r2
 8001702:	0019      	movs	r1, r3
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_RCC_ClockConfig+0x1f0>)
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800170c:	f7ff f962 	bl	80009d4 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001714:	e009      	b.n	800172a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001716:	f7ff f95d 	bl	80009d4 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <HAL_RCC_ClockConfig+0x1f4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e02c      	b.n	8001784 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_RCC_ClockConfig+0x1f0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2207      	movs	r2, #7
 8001730:	4013      	ands	r3, r2
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d1ee      	bne.n	8001716 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2204      	movs	r2, #4
 800173e:	4013      	ands	r3, r2
 8001740:	d009      	beq.n	8001756 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	4a15      	ldr	r2, [pc, #84]	; (800179c <HAL_RCC_ClockConfig+0x200>)
 8001748:	4013      	ands	r3, r2
 800174a:	0019      	movs	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 8001752:	430a      	orrs	r2, r1
 8001754:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001756:	f000 f829 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800175a:	0001      	movs	r1, r0
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	220f      	movs	r2, #15
 8001764:	401a      	ands	r2, r3
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_RCC_ClockConfig+0x204>)
 8001768:	0092      	lsls	r2, r2, #2
 800176a:	58d3      	ldr	r3, [r2, r3]
 800176c:	221f      	movs	r2, #31
 800176e:	4013      	ands	r3, r2
 8001770:	000a      	movs	r2, r1
 8001772:	40da      	lsrs	r2, r3
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_ClockConfig+0x208>)
 8001776:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_ClockConfig+0x20c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff f8cd 	bl	800091c <HAL_InitTick>
 8001782:	0003      	movs	r3, r0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b004      	add	sp, #16
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40022000 	.word	0x40022000
 8001790:	00001388 	.word	0x00001388
 8001794:	40021000 	.word	0x40021000
 8001798:	fffff0ff 	.word	0xfffff0ff
 800179c:	ffff8fff 	.word	0xffff8fff
 80017a0:	08002e78 	.word	0x08002e78
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b2:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2238      	movs	r2, #56	; 0x38
 80017b8:	4013      	ands	r3, r2
 80017ba:	d10f      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0adb      	lsrs	r3, r3, #11
 80017c2:	2207      	movs	r2, #7
 80017c4:	4013      	ands	r3, r2
 80017c6:	2201      	movs	r2, #1
 80017c8:	409a      	lsls	r2, r3
 80017ca:	0013      	movs	r3, r2
 80017cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80017ce:	6839      	ldr	r1, [r7, #0]
 80017d0:	4835      	ldr	r0, [pc, #212]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017d2:	f7fe fc97 	bl	8000104 <__udivsi3>
 80017d6:	0003      	movs	r3, r0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e05d      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2238      	movs	r2, #56	; 0x38
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <HAL_RCC_GetSysClockFreq+0x100>)
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e054      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2238      	movs	r2, #56	; 0x38
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b10      	cmp	r3, #16
 80017f8:	d138      	bne.n	800186c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2203      	movs	r2, #3
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	2207      	movs	r2, #7
 800180c:	4013      	ands	r3, r2
 800180e:	3301      	adds	r3, #1
 8001810:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d10d      	bne.n	8001834 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	4824      	ldr	r0, [pc, #144]	; (80018ac <HAL_RCC_GetSysClockFreq+0x100>)
 800181c:	f7fe fc72 	bl	8000104 <__udivsi3>
 8001820:	0003      	movs	r3, r0
 8001822:	0019      	movs	r1, r3
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	227f      	movs	r2, #127	; 0x7f
 800182c:	4013      	ands	r3, r2
 800182e:	434b      	muls	r3, r1
 8001830:	617b      	str	r3, [r7, #20]
        break;
 8001832:	e00d      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	481c      	ldr	r0, [pc, #112]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001838:	f7fe fc64 	bl	8000104 <__udivsi3>
 800183c:	0003      	movs	r3, r0
 800183e:	0019      	movs	r1, r3
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	227f      	movs	r2, #127	; 0x7f
 8001848:	4013      	ands	r3, r2
 800184a:	434b      	muls	r3, r1
 800184c:	617b      	str	r3, [r7, #20]
        break;
 800184e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0f5b      	lsrs	r3, r3, #29
 8001856:	2207      	movs	r2, #7
 8001858:	4013      	ands	r3, r2
 800185a:	3301      	adds	r3, #1
 800185c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	6978      	ldr	r0, [r7, #20]
 8001862:	f7fe fc4f 	bl	8000104 <__udivsi3>
 8001866:	0003      	movs	r3, r0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	e015      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2238      	movs	r2, #56	; 0x38
 8001872:	4013      	ands	r3, r2
 8001874:	2b20      	cmp	r3, #32
 8001876:	d103      	bne.n	8001880 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	e00b      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2238      	movs	r2, #56	; 0x38
 8001886:	4013      	ands	r3, r2
 8001888:	2b18      	cmp	r3, #24
 800188a:	d103      	bne.n	8001894 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800188c:	23fa      	movs	r3, #250	; 0xfa
 800188e:	01db      	lsls	r3, r3, #7
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	e001      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001898:	693b      	ldr	r3, [r7, #16]
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b006      	add	sp, #24
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	40021000 	.word	0x40021000
 80018a8:	00f42400 	.word	0x00f42400
 80018ac:	007a1200 	.word	0x007a1200

080018b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80018c8:	f7ff fff2 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018cc:	0004      	movs	r4, r0
 80018ce:	f7ff fb3f 	bl	8000f50 <LL_RCC_GetAPB1Prescaler>
 80018d2:	0003      	movs	r3, r0
 80018d4:	0b1a      	lsrs	r2, r3, #12
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	58d3      	ldr	r3, [r2, r3]
 80018dc:	221f      	movs	r2, #31
 80018de:	4013      	ands	r3, r2
 80018e0:	40dc      	lsrs	r4, r3
 80018e2:	0023      	movs	r3, r4
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	08002eb8 	.word	0x08002eb8

080018f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e046      	b.n	8001990 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2288      	movs	r2, #136	; 0x88
 8001906:	589b      	ldr	r3, [r3, r2]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d107      	bne.n	800191c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2284      	movs	r2, #132	; 0x84
 8001910:	2100      	movs	r1, #0
 8001912:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	0018      	movs	r0, r3
 8001918:	f7fe ff6c 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2288      	movs	r2, #136	; 0x88
 8001920:	2124      	movs	r1, #36	; 0x24
 8001922:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2101      	movs	r1, #1
 8001930:	438a      	bics	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	0018      	movs	r0, r3
 8001938:	f000 f8cc 	bl	8001ad4 <UART_SetConfig>
 800193c:	0003      	movs	r3, r0
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e024      	b.n	8001990 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	0018      	movs	r0, r3
 8001952:	f000 fb37 	bl	8001fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	490d      	ldr	r1, [pc, #52]	; (8001998 <HAL_UART_Init+0xa8>)
 8001962:	400a      	ands	r2, r1
 8001964:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	212a      	movs	r1, #42	; 0x2a
 8001972:	438a      	bics	r2, r1
 8001974:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0018      	movs	r0, r3
 800198a:	f000 fbcf 	bl	800212c <UART_CheckIdleState>
 800198e:	0003      	movs	r3, r0
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}
 8001998:	ffffb7ff 	.word	0xffffb7ff

0800199c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	1dbb      	adds	r3, r7, #6
 80019aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2288      	movs	r2, #136	; 0x88
 80019b0:	589b      	ldr	r3, [r3, r2]
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	d000      	beq.n	80019b8 <HAL_UART_Transmit+0x1c>
 80019b6:	e088      	b.n	8001aca <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_UART_Transmit+0x2a>
 80019be:	1dbb      	adds	r3, r7, #6
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e080      	b.n	8001acc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	015b      	lsls	r3, r3, #5
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d109      	bne.n	80019ea <HAL_UART_Transmit+0x4e>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d105      	bne.n	80019ea <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2201      	movs	r2, #1
 80019e2:	4013      	ands	r3, r2
 80019e4:	d001      	beq.n	80019ea <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e070      	b.n	8001acc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2290      	movs	r2, #144	; 0x90
 80019ee:	2100      	movs	r1, #0
 80019f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2288      	movs	r2, #136	; 0x88
 80019f6:	2121      	movs	r1, #33	; 0x21
 80019f8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019fa:	f7fe ffeb 	bl	80009d4 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1dba      	adds	r2, r7, #6
 8001a06:	2154      	movs	r1, #84	; 0x54
 8001a08:	8812      	ldrh	r2, [r2, #0]
 8001a0a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1dba      	adds	r2, r7, #6
 8001a10:	2156      	movs	r1, #86	; 0x56
 8001a12:	8812      	ldrh	r2, [r2, #0]
 8001a14:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	015b      	lsls	r3, r3, #5
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d108      	bne.n	8001a34 <HAL_UART_Transmit+0x98>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d104      	bne.n	8001a34 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	e003      	b.n	8001a3c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a3c:	e02c      	b.n	8001a98 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	0013      	movs	r3, r2
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	f000 fbbc 	bl	80021c8 <UART_WaitOnFlagUntilTimeout>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e039      	b.n	8001acc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10b      	bne.n	8001a76 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	001a      	movs	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	05d2      	lsls	r2, r2, #23
 8001a6a:	0dd2      	lsrs	r2, r2, #23
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	3302      	adds	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	e007      	b.n	8001a86 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	3301      	adds	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2256      	movs	r2, #86	; 0x56
 8001a8a:	5a9b      	ldrh	r3, [r3, r2]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b299      	uxth	r1, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2256      	movs	r2, #86	; 0x56
 8001a96:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2256      	movs	r2, #86	; 0x56
 8001a9c:	5a9b      	ldrh	r3, [r3, r2]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1cc      	bne.n	8001a3e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	0013      	movs	r3, r2
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2140      	movs	r1, #64	; 0x40
 8001ab2:	f000 fb89 	bl	80021c8 <UART_WaitOnFlagUntilTimeout>
 8001ab6:	1e03      	subs	r3, r0, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e006      	b.n	8001acc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2288      	movs	r2, #136	; 0x88
 8001ac2:	2120      	movs	r1, #32
 8001ac4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8001aca:	2302      	movs	r3, #2
  }
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b008      	add	sp, #32
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ad4:	b5b0      	push	{r4, r5, r7, lr}
 8001ad6:	b090      	sub	sp, #64	; 0x40
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001adc:	231a      	movs	r3, #26
 8001ade:	2220      	movs	r2, #32
 8001ae0:	189b      	adds	r3, r3, r2
 8001ae2:	19db      	adds	r3, r3, r7
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4ac4      	ldr	r2, [pc, #784]	; (8001e18 <UART_SetConfig+0x344>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b12:	430b      	orrs	r3, r1
 8001b14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4abf      	ldr	r2, [pc, #764]	; (8001e1c <UART_SetConfig+0x348>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	0018      	movs	r0, r3
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	68d9      	ldr	r1, [r3, #12]
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4ab9      	ldr	r2, [pc, #740]	; (8001e20 <UART_SetConfig+0x34c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d004      	beq.n	8001b4a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b46:	4313      	orrs	r3, r2
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4ab4      	ldr	r2, [pc, #720]	; (8001e24 <UART_SetConfig+0x350>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	220f      	movs	r2, #15
 8001b68:	4393      	bics	r3, r2
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	0003      	movs	r3, r0
 8001b76:	430b      	orrs	r3, r1
 8001b78:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4aaa      	ldr	r2, [pc, #680]	; (8001e28 <UART_SetConfig+0x354>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d131      	bne.n	8001be8 <UART_SetConfig+0x114>
 8001b84:	4ba9      	ldr	r3, [pc, #676]	; (8001e2c <UART_SetConfig+0x358>)
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	2203      	movs	r2, #3
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d01d      	beq.n	8001bcc <UART_SetConfig+0xf8>
 8001b90:	d823      	bhi.n	8001bda <UART_SetConfig+0x106>
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d00c      	beq.n	8001bb0 <UART_SetConfig+0xdc>
 8001b96:	d820      	bhi.n	8001bda <UART_SetConfig+0x106>
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <UART_SetConfig+0xce>
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d00e      	beq.n	8001bbe <UART_SetConfig+0xea>
 8001ba0:	e01b      	b.n	8001bda <UART_SetConfig+0x106>
 8001ba2:	231b      	movs	r3, #27
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	189b      	adds	r3, r3, r2
 8001ba8:	19db      	adds	r3, r3, r7
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	e071      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001bb0:	231b      	movs	r3, #27
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	189b      	adds	r3, r3, r2
 8001bb6:	19db      	adds	r3, r3, r7
 8001bb8:	2202      	movs	r2, #2
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e06a      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001bbe:	231b      	movs	r3, #27
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	189b      	adds	r3, r3, r2
 8001bc4:	19db      	adds	r3, r3, r7
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	e063      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001bcc:	231b      	movs	r3, #27
 8001bce:	2220      	movs	r2, #32
 8001bd0:	189b      	adds	r3, r3, r2
 8001bd2:	19db      	adds	r3, r3, r7
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e05c      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001bda:	231b      	movs	r3, #27
 8001bdc:	2220      	movs	r2, #32
 8001bde:	189b      	adds	r3, r3, r2
 8001be0:	19db      	adds	r3, r3, r7
 8001be2:	2210      	movs	r2, #16
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e055      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a90      	ldr	r2, [pc, #576]	; (8001e30 <UART_SetConfig+0x35c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d106      	bne.n	8001c00 <UART_SetConfig+0x12c>
 8001bf2:	231b      	movs	r3, #27
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	189b      	adds	r3, r3, r2
 8001bf8:	19db      	adds	r3, r3, r7
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e049      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a86      	ldr	r2, [pc, #536]	; (8001e20 <UART_SetConfig+0x34c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d13e      	bne.n	8001c88 <UART_SetConfig+0x1b4>
 8001c0a:	4b88      	ldr	r3, [pc, #544]	; (8001e2c <UART_SetConfig+0x358>)
 8001c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c0e:	23c0      	movs	r3, #192	; 0xc0
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4013      	ands	r3, r2
 8001c14:	22c0      	movs	r2, #192	; 0xc0
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d027      	beq.n	8001c6c <UART_SetConfig+0x198>
 8001c1c:	22c0      	movs	r2, #192	; 0xc0
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d82a      	bhi.n	8001c7a <UART_SetConfig+0x1a6>
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d011      	beq.n	8001c50 <UART_SetConfig+0x17c>
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d822      	bhi.n	8001c7a <UART_SetConfig+0x1a6>
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <UART_SetConfig+0x16e>
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	00d2      	lsls	r2, r2, #3
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00e      	beq.n	8001c5e <UART_SetConfig+0x18a>
 8001c40:	e01b      	b.n	8001c7a <UART_SetConfig+0x1a6>
 8001c42:	231b      	movs	r3, #27
 8001c44:	2220      	movs	r2, #32
 8001c46:	189b      	adds	r3, r3, r2
 8001c48:	19db      	adds	r3, r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e021      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001c50:	231b      	movs	r3, #27
 8001c52:	2220      	movs	r2, #32
 8001c54:	189b      	adds	r3, r3, r2
 8001c56:	19db      	adds	r3, r3, r7
 8001c58:	2202      	movs	r2, #2
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	e01a      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001c5e:	231b      	movs	r3, #27
 8001c60:	2220      	movs	r2, #32
 8001c62:	189b      	adds	r3, r3, r2
 8001c64:	19db      	adds	r3, r3, r7
 8001c66:	2204      	movs	r2, #4
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e013      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001c6c:	231b      	movs	r3, #27
 8001c6e:	2220      	movs	r2, #32
 8001c70:	189b      	adds	r3, r3, r2
 8001c72:	19db      	adds	r3, r3, r7
 8001c74:	2208      	movs	r2, #8
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e00c      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001c7a:	231b      	movs	r3, #27
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	189b      	adds	r3, r3, r2
 8001c80:	19db      	adds	r3, r3, r7
 8001c82:	2210      	movs	r2, #16
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e005      	b.n	8001c94 <UART_SetConfig+0x1c0>
 8001c88:	231b      	movs	r3, #27
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	189b      	adds	r3, r3, r2
 8001c8e:	19db      	adds	r3, r3, r7
 8001c90:	2210      	movs	r2, #16
 8001c92:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a61      	ldr	r2, [pc, #388]	; (8001e20 <UART_SetConfig+0x34c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d000      	beq.n	8001ca0 <UART_SetConfig+0x1cc>
 8001c9e:	e092      	b.n	8001dc6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001ca0:	231b      	movs	r3, #27
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	189b      	adds	r3, r3, r2
 8001ca6:	19db      	adds	r3, r3, r7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d015      	beq.n	8001cda <UART_SetConfig+0x206>
 8001cae:	dc18      	bgt.n	8001ce2 <UART_SetConfig+0x20e>
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d00d      	beq.n	8001cd0 <UART_SetConfig+0x1fc>
 8001cb4:	dc15      	bgt.n	8001ce2 <UART_SetConfig+0x20e>
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <UART_SetConfig+0x1ec>
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d005      	beq.n	8001cca <UART_SetConfig+0x1f6>
 8001cbe:	e010      	b.n	8001ce2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001cc0:	f7ff fe00 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001cc8:	e014      	b.n	8001cf4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001cca:	4b5a      	ldr	r3, [pc, #360]	; (8001e34 <UART_SetConfig+0x360>)
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001cce:	e011      	b.n	8001cf4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001cd0:	f7ff fd6c 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001cd8:	e00c      	b.n	8001cf4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001ce0:	e008      	b.n	8001cf4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001ce6:	231a      	movs	r3, #26
 8001ce8:	2220      	movs	r2, #32
 8001cea:	189b      	adds	r3, r3, r2
 8001cec:	19db      	adds	r3, r3, r7
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
        break;
 8001cf2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d100      	bne.n	8001cfc <UART_SetConfig+0x228>
 8001cfa:	e147      	b.n	8001f8c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d00:	4b4d      	ldr	r3, [pc, #308]	; (8001e38 <UART_SetConfig+0x364>)
 8001d02:	0052      	lsls	r2, r2, #1
 8001d04:	5ad3      	ldrh	r3, [r2, r3]
 8001d06:	0019      	movs	r1, r3
 8001d08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d0a:	f7fe f9fb 	bl	8000104 <__udivsi3>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	0013      	movs	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	189b      	adds	r3, r3, r2
 8001d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d305      	bcc.n	8001d2e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d906      	bls.n	8001d3c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8001d2e:	231a      	movs	r3, #26
 8001d30:	2220      	movs	r2, #32
 8001d32:	189b      	adds	r3, r3, r2
 8001d34:	19db      	adds	r3, r3, r7
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	e127      	b.n	8001f8c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d48:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <UART_SetConfig+0x364>)
 8001d4a:	0052      	lsls	r2, r2, #1
 8001d4c:	5ad3      	ldrh	r3, [r2, r3]
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	69b8      	ldr	r0, [r7, #24]
 8001d5a:	69f9      	ldr	r1, [r7, #28]
 8001d5c:	f7fe fa5e 	bl	800021c <__aeabi_uldivmod>
 8001d60:	0002      	movs	r2, r0
 8001d62:	000b      	movs	r3, r1
 8001d64:	0e11      	lsrs	r1, r2, #24
 8001d66:	021d      	lsls	r5, r3, #8
 8001d68:	430d      	orrs	r5, r1
 8001d6a:	0214      	lsls	r4, r2, #8
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68b8      	ldr	r0, [r7, #8]
 8001d7a:	68f9      	ldr	r1, [r7, #12]
 8001d7c:	1900      	adds	r0, r0, r4
 8001d7e:	4169      	adcs	r1, r5
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f7fe fa45 	bl	800021c <__aeabi_uldivmod>
 8001d92:	0002      	movs	r2, r0
 8001d94:	000b      	movs	r3, r1
 8001d96:	0013      	movs	r3, r2
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d9c:	23c0      	movs	r3, #192	; 0xc0
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d309      	bcc.n	8001db8 <UART_SetConfig+0x2e4>
 8001da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	035b      	lsls	r3, r3, #13
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d204      	bcs.n	8001db8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	e0e9      	b.n	8001f8c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8001db8:	231a      	movs	r3, #26
 8001dba:	2220      	movs	r2, #32
 8001dbc:	189b      	adds	r3, r3, r2
 8001dbe:	19db      	adds	r3, r3, r7
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e0e2      	b.n	8001f8c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d000      	beq.n	8001dd4 <UART_SetConfig+0x300>
 8001dd2:	e083      	b.n	8001edc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8001dd4:	231b      	movs	r3, #27
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	189b      	adds	r3, r3, r2
 8001dda:	19db      	adds	r3, r3, r7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d015      	beq.n	8001e0e <UART_SetConfig+0x33a>
 8001de2:	dc2b      	bgt.n	8001e3c <UART_SetConfig+0x368>
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d00d      	beq.n	8001e04 <UART_SetConfig+0x330>
 8001de8:	dc28      	bgt.n	8001e3c <UART_SetConfig+0x368>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <UART_SetConfig+0x320>
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d005      	beq.n	8001dfe <UART_SetConfig+0x32a>
 8001df2:	e023      	b.n	8001e3c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001df4:	f7ff fd66 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001dfc:	e027      	b.n	8001e4e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <UART_SetConfig+0x360>)
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e02:	e024      	b.n	8001e4e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e04:	f7ff fcd2 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e0c:	e01f      	b.n	8001e4e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e14:	e01b      	b.n	8001e4e <UART_SetConfig+0x37a>
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	cfff69f3 	.word	0xcfff69f3
 8001e1c:	ffffcfff 	.word	0xffffcfff
 8001e20:	40008000 	.word	0x40008000
 8001e24:	11fff4ff 	.word	0x11fff4ff
 8001e28:	40013800 	.word	0x40013800
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40004400 	.word	0x40004400
 8001e34:	00f42400 	.word	0x00f42400
 8001e38:	08002ed8 	.word	0x08002ed8
      default:
        pclk = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001e40:	231a      	movs	r3, #26
 8001e42:	2220      	movs	r2, #32
 8001e44:	189b      	adds	r3, r3, r2
 8001e46:	19db      	adds	r3, r3, r7
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
        break;
 8001e4c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d100      	bne.n	8001e56 <UART_SetConfig+0x382>
 8001e54:	e09a      	b.n	8001f8c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5a:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <UART_SetConfig+0x4e8>)
 8001e5c:	0052      	lsls	r2, r2, #1
 8001e5e:	5ad3      	ldrh	r3, [r2, r3]
 8001e60:	0019      	movs	r1, r3
 8001e62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e64:	f7fe f94e 	bl	8000104 <__udivsi3>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	005a      	lsls	r2, r3, #1
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	085b      	lsrs	r3, r3, #1
 8001e72:	18d2      	adds	r2, r2, r3
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	0019      	movs	r1, r3
 8001e7a:	0010      	movs	r0, r2
 8001e7c:	f7fe f942 	bl	8000104 <__udivsi3>
 8001e80:	0003      	movs	r3, r0
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	2b0f      	cmp	r3, #15
 8001e88:	d921      	bls.n	8001ece <UART_SetConfig+0x3fa>
 8001e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	025b      	lsls	r3, r3, #9
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d21c      	bcs.n	8001ece <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	200e      	movs	r0, #14
 8001e9a:	2420      	movs	r4, #32
 8001e9c:	1903      	adds	r3, r0, r4
 8001e9e:	19db      	adds	r3, r3, r7
 8001ea0:	210f      	movs	r1, #15
 8001ea2:	438a      	bics	r2, r1
 8001ea4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2207      	movs	r2, #7
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b299      	uxth	r1, r3
 8001eb2:	1903      	adds	r3, r0, r4
 8001eb4:	19db      	adds	r3, r3, r7
 8001eb6:	1902      	adds	r2, r0, r4
 8001eb8:	19d2      	adds	r2, r2, r7
 8001eba:	8812      	ldrh	r2, [r2, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	1902      	adds	r2, r0, r4
 8001ec6:	19d2      	adds	r2, r2, r7
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	e05e      	b.n	8001f8c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8001ece:	231a      	movs	r3, #26
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	19db      	adds	r3, r3, r7
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	e057      	b.n	8001f8c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001edc:	231b      	movs	r3, #27
 8001ede:	2220      	movs	r2, #32
 8001ee0:	189b      	adds	r3, r3, r2
 8001ee2:	19db      	adds	r3, r3, r7
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d015      	beq.n	8001f16 <UART_SetConfig+0x442>
 8001eea:	dc18      	bgt.n	8001f1e <UART_SetConfig+0x44a>
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d00d      	beq.n	8001f0c <UART_SetConfig+0x438>
 8001ef0:	dc15      	bgt.n	8001f1e <UART_SetConfig+0x44a>
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <UART_SetConfig+0x428>
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d005      	beq.n	8001f06 <UART_SetConfig+0x432>
 8001efa:	e010      	b.n	8001f1e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001efc:	f7ff fce2 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8001f00:	0003      	movs	r3, r0
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f04:	e014      	b.n	8001f30 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <UART_SetConfig+0x4ec>)
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f0a:	e011      	b.n	8001f30 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f0c:	f7ff fc4e 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001f10:	0003      	movs	r3, r0
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f14:	e00c      	b.n	8001f30 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f1c:	e008      	b.n	8001f30 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001f22:	231a      	movs	r3, #26
 8001f24:	2220      	movs	r2, #32
 8001f26:	189b      	adds	r3, r3, r2
 8001f28:	19db      	adds	r3, r3, r7
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
        break;
 8001f2e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d02a      	beq.n	8001f8c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <UART_SetConfig+0x4e8>)
 8001f3c:	0052      	lsls	r2, r2, #1
 8001f3e:	5ad3      	ldrh	r3, [r2, r3]
 8001f40:	0019      	movs	r1, r3
 8001f42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f44:	f7fe f8de 	bl	8000104 <__udivsi3>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	18d2      	adds	r2, r2, r3
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	0019      	movs	r1, r3
 8001f5a:	0010      	movs	r0, r2
 8001f5c:	f7fe f8d2 	bl	8000104 <__udivsi3>
 8001f60:	0003      	movs	r3, r0
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d90a      	bls.n	8001f80 <UART_SetConfig+0x4ac>
 8001f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	025b      	lsls	r3, r3, #9
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d205      	bcs.n	8001f80 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	e005      	b.n	8001f8c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8001f80:	231a      	movs	r3, #26
 8001f82:	2220      	movs	r2, #32
 8001f84:	189b      	adds	r3, r3, r2
 8001f86:	19db      	adds	r3, r3, r7
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	226a      	movs	r2, #106	; 0x6a
 8001f90:	2101      	movs	r1, #1
 8001f92:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	2268      	movs	r2, #104	; 0x68
 8001f98:	2101      	movs	r1, #1
 8001f9a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8001fa8:	231a      	movs	r3, #26
 8001faa:	2220      	movs	r2, #32
 8001fac:	189b      	adds	r3, r3, r2
 8001fae:	19db      	adds	r3, r3, r7
 8001fb0:	781b      	ldrb	r3, [r3, #0]
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b010      	add	sp, #64	; 0x40
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	08002ed8 	.word	0x08002ed8
 8001fc0:	00f42400 	.word	0x00f42400

08001fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a4a      	ldr	r2, [pc, #296]	; (8002108 <UART_AdvFeatureConfig+0x144>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d00b      	beq.n	8002010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a43      	ldr	r2, [pc, #268]	; (800210c <UART_AdvFeatureConfig+0x148>)
 8002000:	4013      	ands	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	2204      	movs	r2, #4
 8002016:	4013      	ands	r3, r2
 8002018:	d00b      	beq.n	8002032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <UART_AdvFeatureConfig+0x14c>)
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	2208      	movs	r2, #8
 8002038:	4013      	ands	r3, r2
 800203a:	d00b      	beq.n	8002054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a34      	ldr	r2, [pc, #208]	; (8002114 <UART_AdvFeatureConfig+0x150>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	2210      	movs	r2, #16
 800205a:	4013      	ands	r3, r2
 800205c:	d00b      	beq.n	8002076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <UART_AdvFeatureConfig+0x154>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	2220      	movs	r2, #32
 800207c:	4013      	ands	r3, r2
 800207e:	d00b      	beq.n	8002098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4a25      	ldr	r2, [pc, #148]	; (800211c <UART_AdvFeatureConfig+0x158>)
 8002088:	4013      	ands	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	2240      	movs	r2, #64	; 0x40
 800209e:	4013      	ands	r3, r2
 80020a0:	d01d      	beq.n	80020de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <UART_AdvFeatureConfig+0x15c>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	035b      	lsls	r3, r3, #13
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d10b      	bne.n	80020de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a15      	ldr	r2, [pc, #84]	; (8002124 <UART_AdvFeatureConfig+0x160>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	4013      	ands	r3, r2
 80020e6:	d00b      	beq.n	8002100 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <UART_AdvFeatureConfig+0x164>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
  }
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}
 8002108:	fffdffff 	.word	0xfffdffff
 800210c:	fffeffff 	.word	0xfffeffff
 8002110:	fffbffff 	.word	0xfffbffff
 8002114:	ffff7fff 	.word	0xffff7fff
 8002118:	ffffefff 	.word	0xffffefff
 800211c:	ffffdfff 	.word	0xffffdfff
 8002120:	ffefffff 	.word	0xffefffff
 8002124:	ff9fffff 	.word	0xff9fffff
 8002128:	fff7ffff 	.word	0xfff7ffff

0800212c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2290      	movs	r2, #144	; 0x90
 8002138:	2100      	movs	r1, #0
 800213a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800213c:	f7fe fc4a 	bl	80009d4 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2208      	movs	r2, #8
 800214c:	4013      	ands	r3, r2
 800214e:	2b08      	cmp	r3, #8
 8002150:	d10c      	bne.n	800216c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	0391      	lsls	r1, r2, #14
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4a1a      	ldr	r2, [pc, #104]	; (80021c4 <UART_CheckIdleState+0x98>)
 800215c:	9200      	str	r2, [sp, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	f000 f832 	bl	80021c8 <UART_WaitOnFlagUntilTimeout>
 8002164:	1e03      	subs	r3, r0, #0
 8002166:	d001      	beq.n	800216c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e026      	b.n	80021ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2204      	movs	r2, #4
 8002174:	4013      	ands	r3, r2
 8002176:	2b04      	cmp	r3, #4
 8002178:	d10c      	bne.n	8002194 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	03d1      	lsls	r1, r2, #15
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <UART_CheckIdleState+0x98>)
 8002184:	9200      	str	r2, [sp, #0]
 8002186:	2200      	movs	r2, #0
 8002188:	f000 f81e 	bl	80021c8 <UART_WaitOnFlagUntilTimeout>
 800218c:	1e03      	subs	r3, r0, #0
 800218e:	d001      	beq.n	8002194 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e012      	b.n	80021ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2288      	movs	r2, #136	; 0x88
 8002198:	2120      	movs	r1, #32
 800219a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	228c      	movs	r2, #140	; 0x8c
 80021a0:	2120      	movs	r1, #32
 80021a2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2284      	movs	r2, #132	; 0x84
 80021b4:	2100      	movs	r1, #0
 80021b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	0018      	movs	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	b004      	add	sp, #16
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	01ffffff 	.word	0x01ffffff

080021c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b094      	sub	sp, #80	; 0x50
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d8:	e0a7      	b.n	800232a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021dc:	3301      	adds	r3, #1
 80021de:	d100      	bne.n	80021e2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80021e0:	e0a3      	b.n	800232a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e2:	f7fe fbf7 	bl	80009d4 <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d302      	bcc.n	80021f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80021f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d13f      	bne.n	8002278 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f8:	f3ef 8310 	mrs	r3, PRIMASK
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002200:	647b      	str	r3, [r7, #68]	; 0x44
 8002202:	2301      	movs	r3, #1
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	f383 8810 	msr	PRIMASK, r3
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	494e      	ldr	r1, [pc, #312]	; (8002354 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800221a:	400a      	ands	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	f383 8810 	msr	PRIMASK, r3
}
 8002228:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800222a:	f3ef 8310 	mrs	r3, PRIMASK
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002232:	643b      	str	r3, [r7, #64]	; 0x40
 8002234:	2301      	movs	r3, #1
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223a:	f383 8810 	msr	PRIMASK, r3
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2101      	movs	r1, #1
 800224c:	438a      	bics	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002256:	f383 8810 	msr	PRIMASK, r3
}
 800225a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2288      	movs	r2, #136	; 0x88
 8002260:	2120      	movs	r1, #32
 8002262:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	228c      	movs	r2, #140	; 0x8c
 8002268:	2120      	movs	r1, #32
 800226a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2284      	movs	r2, #132	; 0x84
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e069      	b.n	800234c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2204      	movs	r2, #4
 8002280:	4013      	ands	r3, r2
 8002282:	d052      	beq.n	800232a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	401a      	ands	r2, r3
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	429a      	cmp	r2, r3
 8002296:	d148      	bne.n	800232a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2280      	movs	r2, #128	; 0x80
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a2:	f3ef 8310 	mrs	r3, PRIMASK
 80022a6:	613b      	str	r3, [r7, #16]
  return(result);
 80022a8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80022aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022ac:	2301      	movs	r3, #1
 80022ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f383 8810 	msr	PRIMASK, r3
}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4924      	ldr	r1, [pc, #144]	; (8002354 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f383 8810 	msr	PRIMASK, r3
}
 80022d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d4:	f3ef 8310 	mrs	r3, PRIMASK
 80022d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80022da:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80022de:	2301      	movs	r3, #1
 80022e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f383 8810 	msr	PRIMASK, r3
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2101      	movs	r1, #1
 80022f6:	438a      	bics	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	f383 8810 	msr	PRIMASK, r3
}
 8002304:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2288      	movs	r2, #136	; 0x88
 800230a:	2120      	movs	r1, #32
 800230c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	228c      	movs	r2, #140	; 0x8c
 8002312:	2120      	movs	r1, #32
 8002314:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2290      	movs	r2, #144	; 0x90
 800231a:	2120      	movs	r1, #32
 800231c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2284      	movs	r2, #132	; 0x84
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e010      	b.n	800234c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	4013      	ands	r3, r2
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	425a      	negs	r2, r3
 800233a:	4153      	adcs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	001a      	movs	r2, r3
 8002340:	1dfb      	adds	r3, r7, #7
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d100      	bne.n	800234a <UART_WaitOnFlagUntilTimeout+0x182>
 8002348:	e747      	b.n	80021da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b014      	add	sp, #80	; 0x50
 8002352:	bd80      	pop	{r7, pc}
 8002354:	fffffe5f 	.word	0xfffffe5f

08002358 <__errno>:
 8002358:	4b01      	ldr	r3, [pc, #4]	; (8002360 <__errno+0x8>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	4770      	bx	lr
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	2000000c 	.word	0x2000000c

08002364 <__libc_init_array>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	2600      	movs	r6, #0
 8002368:	4d0c      	ldr	r5, [pc, #48]	; (800239c <__libc_init_array+0x38>)
 800236a:	4c0d      	ldr	r4, [pc, #52]	; (80023a0 <__libc_init_array+0x3c>)
 800236c:	1b64      	subs	r4, r4, r5
 800236e:	10a4      	asrs	r4, r4, #2
 8002370:	42a6      	cmp	r6, r4
 8002372:	d109      	bne.n	8002388 <__libc_init_array+0x24>
 8002374:	2600      	movs	r6, #0
 8002376:	f000 fd6b 	bl	8002e50 <_init>
 800237a:	4d0a      	ldr	r5, [pc, #40]	; (80023a4 <__libc_init_array+0x40>)
 800237c:	4c0a      	ldr	r4, [pc, #40]	; (80023a8 <__libc_init_array+0x44>)
 800237e:	1b64      	subs	r4, r4, r5
 8002380:	10a4      	asrs	r4, r4, #2
 8002382:	42a6      	cmp	r6, r4
 8002384:	d105      	bne.n	8002392 <__libc_init_array+0x2e>
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	00b3      	lsls	r3, r6, #2
 800238a:	58eb      	ldr	r3, [r5, r3]
 800238c:	4798      	blx	r3
 800238e:	3601      	adds	r6, #1
 8002390:	e7ee      	b.n	8002370 <__libc_init_array+0xc>
 8002392:	00b3      	lsls	r3, r6, #2
 8002394:	58eb      	ldr	r3, [r5, r3]
 8002396:	4798      	blx	r3
 8002398:	3601      	adds	r6, #1
 800239a:	e7f2      	b.n	8002382 <__libc_init_array+0x1e>
 800239c:	08002f5c 	.word	0x08002f5c
 80023a0:	08002f5c 	.word	0x08002f5c
 80023a4:	08002f5c 	.word	0x08002f5c
 80023a8:	08002f60 	.word	0x08002f60

080023ac <memset>:
 80023ac:	0003      	movs	r3, r0
 80023ae:	1882      	adds	r2, r0, r2
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d100      	bne.n	80023b6 <memset+0xa>
 80023b4:	4770      	bx	lr
 80023b6:	7019      	strb	r1, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	e7f9      	b.n	80023b0 <memset+0x4>

080023bc <_puts_r>:
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	0005      	movs	r5, r0
 80023c0:	000e      	movs	r6, r1
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d004      	beq.n	80023d0 <_puts_r+0x14>
 80023c6:	6983      	ldr	r3, [r0, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <_puts_r+0x14>
 80023cc:	f000 fa6e 	bl	80028ac <__sinit>
 80023d0:	69ab      	ldr	r3, [r5, #24]
 80023d2:	68ac      	ldr	r4, [r5, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_puts_r+0x22>
 80023d8:	0028      	movs	r0, r5
 80023da:	f000 fa67 	bl	80028ac <__sinit>
 80023de:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <_puts_r+0xd8>)
 80023e0:	429c      	cmp	r4, r3
 80023e2:	d122      	bne.n	800242a <_puts_r+0x6e>
 80023e4:	686c      	ldr	r4, [r5, #4]
 80023e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023e8:	07db      	lsls	r3, r3, #31
 80023ea:	d405      	bmi.n	80023f8 <_puts_r+0x3c>
 80023ec:	89a3      	ldrh	r3, [r4, #12]
 80023ee:	059b      	lsls	r3, r3, #22
 80023f0:	d402      	bmi.n	80023f8 <_puts_r+0x3c>
 80023f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023f4:	f000 fafb 	bl	80029ee <__retarget_lock_acquire_recursive>
 80023f8:	89a3      	ldrh	r3, [r4, #12]
 80023fa:	071b      	lsls	r3, r3, #28
 80023fc:	d502      	bpl.n	8002404 <_puts_r+0x48>
 80023fe:	6923      	ldr	r3, [r4, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d129      	bne.n	8002458 <_puts_r+0x9c>
 8002404:	0021      	movs	r1, r4
 8002406:	0028      	movs	r0, r5
 8002408:	f000 f8aa 	bl	8002560 <__swsetup_r>
 800240c:	2800      	cmp	r0, #0
 800240e:	d023      	beq.n	8002458 <_puts_r+0x9c>
 8002410:	2501      	movs	r5, #1
 8002412:	426d      	negs	r5, r5
 8002414:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002416:	07db      	lsls	r3, r3, #31
 8002418:	d405      	bmi.n	8002426 <_puts_r+0x6a>
 800241a:	89a3      	ldrh	r3, [r4, #12]
 800241c:	059b      	lsls	r3, r3, #22
 800241e:	d402      	bmi.n	8002426 <_puts_r+0x6a>
 8002420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002422:	f000 fae5 	bl	80029f0 <__retarget_lock_release_recursive>
 8002426:	0028      	movs	r0, r5
 8002428:	bd70      	pop	{r4, r5, r6, pc}
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <_puts_r+0xdc>)
 800242c:	429c      	cmp	r4, r3
 800242e:	d101      	bne.n	8002434 <_puts_r+0x78>
 8002430:	68ac      	ldr	r4, [r5, #8]
 8002432:	e7d8      	b.n	80023e6 <_puts_r+0x2a>
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <_puts_r+0xe0>)
 8002436:	429c      	cmp	r4, r3
 8002438:	d1d5      	bne.n	80023e6 <_puts_r+0x2a>
 800243a:	68ec      	ldr	r4, [r5, #12]
 800243c:	e7d3      	b.n	80023e6 <_puts_r+0x2a>
 800243e:	3601      	adds	r6, #1
 8002440:	60a3      	str	r3, [r4, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	da04      	bge.n	8002450 <_puts_r+0x94>
 8002446:	69a2      	ldr	r2, [r4, #24]
 8002448:	429a      	cmp	r2, r3
 800244a:	dc16      	bgt.n	800247a <_puts_r+0xbe>
 800244c:	290a      	cmp	r1, #10
 800244e:	d014      	beq.n	800247a <_puts_r+0xbe>
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	6022      	str	r2, [r4, #0]
 8002456:	7019      	strb	r1, [r3, #0]
 8002458:	68a3      	ldr	r3, [r4, #8]
 800245a:	7831      	ldrb	r1, [r6, #0]
 800245c:	3b01      	subs	r3, #1
 800245e:	2900      	cmp	r1, #0
 8002460:	d1ed      	bne.n	800243e <_puts_r+0x82>
 8002462:	60a3      	str	r3, [r4, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	da0f      	bge.n	8002488 <_puts_r+0xcc>
 8002468:	0028      	movs	r0, r5
 800246a:	0022      	movs	r2, r4
 800246c:	310a      	adds	r1, #10
 800246e:	f000 f821 	bl	80024b4 <__swbuf_r>
 8002472:	250a      	movs	r5, #10
 8002474:	1c43      	adds	r3, r0, #1
 8002476:	d1cd      	bne.n	8002414 <_puts_r+0x58>
 8002478:	e7ca      	b.n	8002410 <_puts_r+0x54>
 800247a:	0022      	movs	r2, r4
 800247c:	0028      	movs	r0, r5
 800247e:	f000 f819 	bl	80024b4 <__swbuf_r>
 8002482:	1c43      	adds	r3, r0, #1
 8002484:	d1e8      	bne.n	8002458 <_puts_r+0x9c>
 8002486:	e7c3      	b.n	8002410 <_puts_r+0x54>
 8002488:	250a      	movs	r5, #10
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	6022      	str	r2, [r4, #0]
 8002490:	701d      	strb	r5, [r3, #0]
 8002492:	e7bf      	b.n	8002414 <_puts_r+0x58>
 8002494:	08002f14 	.word	0x08002f14
 8002498:	08002f34 	.word	0x08002f34
 800249c:	08002ef4 	.word	0x08002ef4

080024a0 <puts>:
 80024a0:	b510      	push	{r4, lr}
 80024a2:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <puts+0x10>)
 80024a4:	0001      	movs	r1, r0
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	f7ff ff88 	bl	80023bc <_puts_r>
 80024ac:	bd10      	pop	{r4, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <__swbuf_r>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	0005      	movs	r5, r0
 80024b8:	000e      	movs	r6, r1
 80024ba:	0014      	movs	r4, r2
 80024bc:	2800      	cmp	r0, #0
 80024be:	d004      	beq.n	80024ca <__swbuf_r+0x16>
 80024c0:	6983      	ldr	r3, [r0, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <__swbuf_r+0x16>
 80024c6:	f000 f9f1 	bl	80028ac <__sinit>
 80024ca:	4b22      	ldr	r3, [pc, #136]	; (8002554 <__swbuf_r+0xa0>)
 80024cc:	429c      	cmp	r4, r3
 80024ce:	d12e      	bne.n	800252e <__swbuf_r+0x7a>
 80024d0:	686c      	ldr	r4, [r5, #4]
 80024d2:	69a3      	ldr	r3, [r4, #24]
 80024d4:	60a3      	str	r3, [r4, #8]
 80024d6:	89a3      	ldrh	r3, [r4, #12]
 80024d8:	071b      	lsls	r3, r3, #28
 80024da:	d532      	bpl.n	8002542 <__swbuf_r+0x8e>
 80024dc:	6923      	ldr	r3, [r4, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d02f      	beq.n	8002542 <__swbuf_r+0x8e>
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	6922      	ldr	r2, [r4, #16]
 80024e6:	b2f7      	uxtb	r7, r6
 80024e8:	1a98      	subs	r0, r3, r2
 80024ea:	6963      	ldr	r3, [r4, #20]
 80024ec:	b2f6      	uxtb	r6, r6
 80024ee:	4283      	cmp	r3, r0
 80024f0:	dc05      	bgt.n	80024fe <__swbuf_r+0x4a>
 80024f2:	0021      	movs	r1, r4
 80024f4:	0028      	movs	r0, r5
 80024f6:	f000 f937 	bl	8002768 <_fflush_r>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d127      	bne.n	800254e <__swbuf_r+0x9a>
 80024fe:	68a3      	ldr	r3, [r4, #8]
 8002500:	3001      	adds	r0, #1
 8002502:	3b01      	subs	r3, #1
 8002504:	60a3      	str	r3, [r4, #8]
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	6022      	str	r2, [r4, #0]
 800250c:	701f      	strb	r7, [r3, #0]
 800250e:	6963      	ldr	r3, [r4, #20]
 8002510:	4283      	cmp	r3, r0
 8002512:	d004      	beq.n	800251e <__swbuf_r+0x6a>
 8002514:	89a3      	ldrh	r3, [r4, #12]
 8002516:	07db      	lsls	r3, r3, #31
 8002518:	d507      	bpl.n	800252a <__swbuf_r+0x76>
 800251a:	2e0a      	cmp	r6, #10
 800251c:	d105      	bne.n	800252a <__swbuf_r+0x76>
 800251e:	0021      	movs	r1, r4
 8002520:	0028      	movs	r0, r5
 8002522:	f000 f921 	bl	8002768 <_fflush_r>
 8002526:	2800      	cmp	r0, #0
 8002528:	d111      	bne.n	800254e <__swbuf_r+0x9a>
 800252a:	0030      	movs	r0, r6
 800252c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <__swbuf_r+0xa4>)
 8002530:	429c      	cmp	r4, r3
 8002532:	d101      	bne.n	8002538 <__swbuf_r+0x84>
 8002534:	68ac      	ldr	r4, [r5, #8]
 8002536:	e7cc      	b.n	80024d2 <__swbuf_r+0x1e>
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <__swbuf_r+0xa8>)
 800253a:	429c      	cmp	r4, r3
 800253c:	d1c9      	bne.n	80024d2 <__swbuf_r+0x1e>
 800253e:	68ec      	ldr	r4, [r5, #12]
 8002540:	e7c7      	b.n	80024d2 <__swbuf_r+0x1e>
 8002542:	0021      	movs	r1, r4
 8002544:	0028      	movs	r0, r5
 8002546:	f000 f80b 	bl	8002560 <__swsetup_r>
 800254a:	2800      	cmp	r0, #0
 800254c:	d0c9      	beq.n	80024e2 <__swbuf_r+0x2e>
 800254e:	2601      	movs	r6, #1
 8002550:	4276      	negs	r6, r6
 8002552:	e7ea      	b.n	800252a <__swbuf_r+0x76>
 8002554:	08002f14 	.word	0x08002f14
 8002558:	08002f34 	.word	0x08002f34
 800255c:	08002ef4 	.word	0x08002ef4

08002560 <__swsetup_r>:
 8002560:	4b37      	ldr	r3, [pc, #220]	; (8002640 <__swsetup_r+0xe0>)
 8002562:	b570      	push	{r4, r5, r6, lr}
 8002564:	681d      	ldr	r5, [r3, #0]
 8002566:	0006      	movs	r6, r0
 8002568:	000c      	movs	r4, r1
 800256a:	2d00      	cmp	r5, #0
 800256c:	d005      	beq.n	800257a <__swsetup_r+0x1a>
 800256e:	69ab      	ldr	r3, [r5, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <__swsetup_r+0x1a>
 8002574:	0028      	movs	r0, r5
 8002576:	f000 f999 	bl	80028ac <__sinit>
 800257a:	4b32      	ldr	r3, [pc, #200]	; (8002644 <__swsetup_r+0xe4>)
 800257c:	429c      	cmp	r4, r3
 800257e:	d10f      	bne.n	80025a0 <__swsetup_r+0x40>
 8002580:	686c      	ldr	r4, [r5, #4]
 8002582:	230c      	movs	r3, #12
 8002584:	5ee2      	ldrsh	r2, [r4, r3]
 8002586:	b293      	uxth	r3, r2
 8002588:	0711      	lsls	r1, r2, #28
 800258a:	d42d      	bmi.n	80025e8 <__swsetup_r+0x88>
 800258c:	06d9      	lsls	r1, r3, #27
 800258e:	d411      	bmi.n	80025b4 <__swsetup_r+0x54>
 8002590:	2309      	movs	r3, #9
 8002592:	2001      	movs	r0, #1
 8002594:	6033      	str	r3, [r6, #0]
 8002596:	3337      	adds	r3, #55	; 0x37
 8002598:	4313      	orrs	r3, r2
 800259a:	81a3      	strh	r3, [r4, #12]
 800259c:	4240      	negs	r0, r0
 800259e:	bd70      	pop	{r4, r5, r6, pc}
 80025a0:	4b29      	ldr	r3, [pc, #164]	; (8002648 <__swsetup_r+0xe8>)
 80025a2:	429c      	cmp	r4, r3
 80025a4:	d101      	bne.n	80025aa <__swsetup_r+0x4a>
 80025a6:	68ac      	ldr	r4, [r5, #8]
 80025a8:	e7eb      	b.n	8002582 <__swsetup_r+0x22>
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <__swsetup_r+0xec>)
 80025ac:	429c      	cmp	r4, r3
 80025ae:	d1e8      	bne.n	8002582 <__swsetup_r+0x22>
 80025b0:	68ec      	ldr	r4, [r5, #12]
 80025b2:	e7e6      	b.n	8002582 <__swsetup_r+0x22>
 80025b4:	075b      	lsls	r3, r3, #29
 80025b6:	d513      	bpl.n	80025e0 <__swsetup_r+0x80>
 80025b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025ba:	2900      	cmp	r1, #0
 80025bc:	d008      	beq.n	80025d0 <__swsetup_r+0x70>
 80025be:	0023      	movs	r3, r4
 80025c0:	3344      	adds	r3, #68	; 0x44
 80025c2:	4299      	cmp	r1, r3
 80025c4:	d002      	beq.n	80025cc <__swsetup_r+0x6c>
 80025c6:	0030      	movs	r0, r6
 80025c8:	f000 fa80 	bl	8002acc <_free_r>
 80025cc:	2300      	movs	r3, #0
 80025ce:	6363      	str	r3, [r4, #52]	; 0x34
 80025d0:	2224      	movs	r2, #36	; 0x24
 80025d2:	89a3      	ldrh	r3, [r4, #12]
 80025d4:	4393      	bics	r3, r2
 80025d6:	81a3      	strh	r3, [r4, #12]
 80025d8:	2300      	movs	r3, #0
 80025da:	6063      	str	r3, [r4, #4]
 80025dc:	6923      	ldr	r3, [r4, #16]
 80025de:	6023      	str	r3, [r4, #0]
 80025e0:	2308      	movs	r3, #8
 80025e2:	89a2      	ldrh	r2, [r4, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	81a3      	strh	r3, [r4, #12]
 80025e8:	6923      	ldr	r3, [r4, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <__swsetup_r+0xa6>
 80025ee:	21a0      	movs	r1, #160	; 0xa0
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	89a3      	ldrh	r3, [r4, #12]
 80025f4:	0089      	lsls	r1, r1, #2
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	400b      	ands	r3, r1
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d003      	beq.n	8002606 <__swsetup_r+0xa6>
 80025fe:	0021      	movs	r1, r4
 8002600:	0030      	movs	r0, r6
 8002602:	f000 fa1f 	bl	8002a44 <__smakebuf_r>
 8002606:	220c      	movs	r2, #12
 8002608:	5ea3      	ldrsh	r3, [r4, r2]
 800260a:	2001      	movs	r0, #1
 800260c:	001a      	movs	r2, r3
 800260e:	b299      	uxth	r1, r3
 8002610:	4002      	ands	r2, r0
 8002612:	4203      	tst	r3, r0
 8002614:	d00f      	beq.n	8002636 <__swsetup_r+0xd6>
 8002616:	2200      	movs	r2, #0
 8002618:	60a2      	str	r2, [r4, #8]
 800261a:	6962      	ldr	r2, [r4, #20]
 800261c:	4252      	negs	r2, r2
 800261e:	61a2      	str	r2, [r4, #24]
 8002620:	2000      	movs	r0, #0
 8002622:	6922      	ldr	r2, [r4, #16]
 8002624:	4282      	cmp	r2, r0
 8002626:	d1ba      	bne.n	800259e <__swsetup_r+0x3e>
 8002628:	060a      	lsls	r2, r1, #24
 800262a:	d5b8      	bpl.n	800259e <__swsetup_r+0x3e>
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	4313      	orrs	r3, r2
 8002630:	81a3      	strh	r3, [r4, #12]
 8002632:	3801      	subs	r0, #1
 8002634:	e7b3      	b.n	800259e <__swsetup_r+0x3e>
 8002636:	0788      	lsls	r0, r1, #30
 8002638:	d400      	bmi.n	800263c <__swsetup_r+0xdc>
 800263a:	6962      	ldr	r2, [r4, #20]
 800263c:	60a2      	str	r2, [r4, #8]
 800263e:	e7ef      	b.n	8002620 <__swsetup_r+0xc0>
 8002640:	2000000c 	.word	0x2000000c
 8002644:	08002f14 	.word	0x08002f14
 8002648:	08002f34 	.word	0x08002f34
 800264c:	08002ef4 	.word	0x08002ef4

08002650 <__sflush_r>:
 8002650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002652:	898b      	ldrh	r3, [r1, #12]
 8002654:	0005      	movs	r5, r0
 8002656:	000c      	movs	r4, r1
 8002658:	071a      	lsls	r2, r3, #28
 800265a:	d45f      	bmi.n	800271c <__sflush_r+0xcc>
 800265c:	684a      	ldr	r2, [r1, #4]
 800265e:	2a00      	cmp	r2, #0
 8002660:	dc04      	bgt.n	800266c <__sflush_r+0x1c>
 8002662:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002664:	2a00      	cmp	r2, #0
 8002666:	dc01      	bgt.n	800266c <__sflush_r+0x1c>
 8002668:	2000      	movs	r0, #0
 800266a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800266c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800266e:	2f00      	cmp	r7, #0
 8002670:	d0fa      	beq.n	8002668 <__sflush_r+0x18>
 8002672:	2200      	movs	r2, #0
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	682e      	ldr	r6, [r5, #0]
 8002678:	602a      	str	r2, [r5, #0]
 800267a:	001a      	movs	r2, r3
 800267c:	0149      	lsls	r1, r1, #5
 800267e:	400a      	ands	r2, r1
 8002680:	420b      	tst	r3, r1
 8002682:	d034      	beq.n	80026ee <__sflush_r+0x9e>
 8002684:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002686:	89a3      	ldrh	r3, [r4, #12]
 8002688:	075b      	lsls	r3, r3, #29
 800268a:	d506      	bpl.n	800269a <__sflush_r+0x4a>
 800268c:	6863      	ldr	r3, [r4, #4]
 800268e:	1ac0      	subs	r0, r0, r3
 8002690:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <__sflush_r+0x4a>
 8002696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002698:	1ac0      	subs	r0, r0, r3
 800269a:	0002      	movs	r2, r0
 800269c:	6a21      	ldr	r1, [r4, #32]
 800269e:	2300      	movs	r3, #0
 80026a0:	0028      	movs	r0, r5
 80026a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80026a4:	47b8      	blx	r7
 80026a6:	89a1      	ldrh	r1, [r4, #12]
 80026a8:	1c43      	adds	r3, r0, #1
 80026aa:	d106      	bne.n	80026ba <__sflush_r+0x6a>
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	2b1d      	cmp	r3, #29
 80026b0:	d831      	bhi.n	8002716 <__sflush_r+0xc6>
 80026b2:	4a2c      	ldr	r2, [pc, #176]	; (8002764 <__sflush_r+0x114>)
 80026b4:	40da      	lsrs	r2, r3
 80026b6:	07d3      	lsls	r3, r2, #31
 80026b8:	d52d      	bpl.n	8002716 <__sflush_r+0xc6>
 80026ba:	2300      	movs	r3, #0
 80026bc:	6063      	str	r3, [r4, #4]
 80026be:	6923      	ldr	r3, [r4, #16]
 80026c0:	6023      	str	r3, [r4, #0]
 80026c2:	04cb      	lsls	r3, r1, #19
 80026c4:	d505      	bpl.n	80026d2 <__sflush_r+0x82>
 80026c6:	1c43      	adds	r3, r0, #1
 80026c8:	d102      	bne.n	80026d0 <__sflush_r+0x80>
 80026ca:	682b      	ldr	r3, [r5, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d100      	bne.n	80026d2 <__sflush_r+0x82>
 80026d0:	6560      	str	r0, [r4, #84]	; 0x54
 80026d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026d4:	602e      	str	r6, [r5, #0]
 80026d6:	2900      	cmp	r1, #0
 80026d8:	d0c6      	beq.n	8002668 <__sflush_r+0x18>
 80026da:	0023      	movs	r3, r4
 80026dc:	3344      	adds	r3, #68	; 0x44
 80026de:	4299      	cmp	r1, r3
 80026e0:	d002      	beq.n	80026e8 <__sflush_r+0x98>
 80026e2:	0028      	movs	r0, r5
 80026e4:	f000 f9f2 	bl	8002acc <_free_r>
 80026e8:	2000      	movs	r0, #0
 80026ea:	6360      	str	r0, [r4, #52]	; 0x34
 80026ec:	e7bd      	b.n	800266a <__sflush_r+0x1a>
 80026ee:	2301      	movs	r3, #1
 80026f0:	0028      	movs	r0, r5
 80026f2:	6a21      	ldr	r1, [r4, #32]
 80026f4:	47b8      	blx	r7
 80026f6:	1c43      	adds	r3, r0, #1
 80026f8:	d1c5      	bne.n	8002686 <__sflush_r+0x36>
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0c2      	beq.n	8002686 <__sflush_r+0x36>
 8002700:	2b1d      	cmp	r3, #29
 8002702:	d001      	beq.n	8002708 <__sflush_r+0xb8>
 8002704:	2b16      	cmp	r3, #22
 8002706:	d101      	bne.n	800270c <__sflush_r+0xbc>
 8002708:	602e      	str	r6, [r5, #0]
 800270a:	e7ad      	b.n	8002668 <__sflush_r+0x18>
 800270c:	2340      	movs	r3, #64	; 0x40
 800270e:	89a2      	ldrh	r2, [r4, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	81a3      	strh	r3, [r4, #12]
 8002714:	e7a9      	b.n	800266a <__sflush_r+0x1a>
 8002716:	2340      	movs	r3, #64	; 0x40
 8002718:	430b      	orrs	r3, r1
 800271a:	e7fa      	b.n	8002712 <__sflush_r+0xc2>
 800271c:	690f      	ldr	r7, [r1, #16]
 800271e:	2f00      	cmp	r7, #0
 8002720:	d0a2      	beq.n	8002668 <__sflush_r+0x18>
 8002722:	680a      	ldr	r2, [r1, #0]
 8002724:	600f      	str	r7, [r1, #0]
 8002726:	1bd2      	subs	r2, r2, r7
 8002728:	9201      	str	r2, [sp, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	079b      	lsls	r3, r3, #30
 800272e:	d100      	bne.n	8002732 <__sflush_r+0xe2>
 8002730:	694a      	ldr	r2, [r1, #20]
 8002732:	60a2      	str	r2, [r4, #8]
 8002734:	9b01      	ldr	r3, [sp, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	dc00      	bgt.n	800273c <__sflush_r+0xec>
 800273a:	e795      	b.n	8002668 <__sflush_r+0x18>
 800273c:	003a      	movs	r2, r7
 800273e:	0028      	movs	r0, r5
 8002740:	9b01      	ldr	r3, [sp, #4]
 8002742:	6a21      	ldr	r1, [r4, #32]
 8002744:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002746:	47b0      	blx	r6
 8002748:	2800      	cmp	r0, #0
 800274a:	dc06      	bgt.n	800275a <__sflush_r+0x10a>
 800274c:	2340      	movs	r3, #64	; 0x40
 800274e:	2001      	movs	r0, #1
 8002750:	89a2      	ldrh	r2, [r4, #12]
 8002752:	4240      	negs	r0, r0
 8002754:	4313      	orrs	r3, r2
 8002756:	81a3      	strh	r3, [r4, #12]
 8002758:	e787      	b.n	800266a <__sflush_r+0x1a>
 800275a:	9b01      	ldr	r3, [sp, #4]
 800275c:	183f      	adds	r7, r7, r0
 800275e:	1a1b      	subs	r3, r3, r0
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	e7e7      	b.n	8002734 <__sflush_r+0xe4>
 8002764:	20400001 	.word	0x20400001

08002768 <_fflush_r>:
 8002768:	690b      	ldr	r3, [r1, #16]
 800276a:	b570      	push	{r4, r5, r6, lr}
 800276c:	0005      	movs	r5, r0
 800276e:	000c      	movs	r4, r1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <_fflush_r+0x12>
 8002774:	2500      	movs	r5, #0
 8002776:	0028      	movs	r0, r5
 8002778:	bd70      	pop	{r4, r5, r6, pc}
 800277a:	2800      	cmp	r0, #0
 800277c:	d004      	beq.n	8002788 <_fflush_r+0x20>
 800277e:	6983      	ldr	r3, [r0, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <_fflush_r+0x20>
 8002784:	f000 f892 	bl	80028ac <__sinit>
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <_fflush_r+0x74>)
 800278a:	429c      	cmp	r4, r3
 800278c:	d11b      	bne.n	80027c6 <_fflush_r+0x5e>
 800278e:	686c      	ldr	r4, [r5, #4]
 8002790:	220c      	movs	r2, #12
 8002792:	5ea3      	ldrsh	r3, [r4, r2]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ed      	beq.n	8002774 <_fflush_r+0xc>
 8002798:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800279a:	07d2      	lsls	r2, r2, #31
 800279c:	d404      	bmi.n	80027a8 <_fflush_r+0x40>
 800279e:	059b      	lsls	r3, r3, #22
 80027a0:	d402      	bmi.n	80027a8 <_fflush_r+0x40>
 80027a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027a4:	f000 f923 	bl	80029ee <__retarget_lock_acquire_recursive>
 80027a8:	0028      	movs	r0, r5
 80027aa:	0021      	movs	r1, r4
 80027ac:	f7ff ff50 	bl	8002650 <__sflush_r>
 80027b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027b2:	0005      	movs	r5, r0
 80027b4:	07db      	lsls	r3, r3, #31
 80027b6:	d4de      	bmi.n	8002776 <_fflush_r+0xe>
 80027b8:	89a3      	ldrh	r3, [r4, #12]
 80027ba:	059b      	lsls	r3, r3, #22
 80027bc:	d4db      	bmi.n	8002776 <_fflush_r+0xe>
 80027be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027c0:	f000 f916 	bl	80029f0 <__retarget_lock_release_recursive>
 80027c4:	e7d7      	b.n	8002776 <_fflush_r+0xe>
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <_fflush_r+0x78>)
 80027c8:	429c      	cmp	r4, r3
 80027ca:	d101      	bne.n	80027d0 <_fflush_r+0x68>
 80027cc:	68ac      	ldr	r4, [r5, #8]
 80027ce:	e7df      	b.n	8002790 <_fflush_r+0x28>
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <_fflush_r+0x7c>)
 80027d2:	429c      	cmp	r4, r3
 80027d4:	d1dc      	bne.n	8002790 <_fflush_r+0x28>
 80027d6:	68ec      	ldr	r4, [r5, #12]
 80027d8:	e7da      	b.n	8002790 <_fflush_r+0x28>
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	08002f14 	.word	0x08002f14
 80027e0:	08002f34 	.word	0x08002f34
 80027e4:	08002ef4 	.word	0x08002ef4

080027e8 <std>:
 80027e8:	2300      	movs	r3, #0
 80027ea:	b510      	push	{r4, lr}
 80027ec:	0004      	movs	r4, r0
 80027ee:	6003      	str	r3, [r0, #0]
 80027f0:	6043      	str	r3, [r0, #4]
 80027f2:	6083      	str	r3, [r0, #8]
 80027f4:	8181      	strh	r1, [r0, #12]
 80027f6:	6643      	str	r3, [r0, #100]	; 0x64
 80027f8:	0019      	movs	r1, r3
 80027fa:	81c2      	strh	r2, [r0, #14]
 80027fc:	6103      	str	r3, [r0, #16]
 80027fe:	6143      	str	r3, [r0, #20]
 8002800:	6183      	str	r3, [r0, #24]
 8002802:	2208      	movs	r2, #8
 8002804:	305c      	adds	r0, #92	; 0x5c
 8002806:	f7ff fdd1 	bl	80023ac <memset>
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <std+0x38>)
 800280c:	6224      	str	r4, [r4, #32]
 800280e:	6263      	str	r3, [r4, #36]	; 0x24
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <std+0x3c>)
 8002812:	62a3      	str	r3, [r4, #40]	; 0x28
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <std+0x40>)
 8002816:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <std+0x44>)
 800281a:	6323      	str	r3, [r4, #48]	; 0x30
 800281c:	bd10      	pop	{r4, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	08002cb5 	.word	0x08002cb5
 8002824:	08002cdd 	.word	0x08002cdd
 8002828:	08002d15 	.word	0x08002d15
 800282c:	08002d41 	.word	0x08002d41

08002830 <_cleanup_r>:
 8002830:	b510      	push	{r4, lr}
 8002832:	4902      	ldr	r1, [pc, #8]	; (800283c <_cleanup_r+0xc>)
 8002834:	f000 f8ba 	bl	80029ac <_fwalk_reent>
 8002838:	bd10      	pop	{r4, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	08002769 	.word	0x08002769

08002840 <__sfmoreglue>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	2568      	movs	r5, #104	; 0x68
 8002844:	1e4a      	subs	r2, r1, #1
 8002846:	4355      	muls	r5, r2
 8002848:	000e      	movs	r6, r1
 800284a:	0029      	movs	r1, r5
 800284c:	3174      	adds	r1, #116	; 0x74
 800284e:	f000 f9a9 	bl	8002ba4 <_malloc_r>
 8002852:	1e04      	subs	r4, r0, #0
 8002854:	d008      	beq.n	8002868 <__sfmoreglue+0x28>
 8002856:	2100      	movs	r1, #0
 8002858:	002a      	movs	r2, r5
 800285a:	6001      	str	r1, [r0, #0]
 800285c:	6046      	str	r6, [r0, #4]
 800285e:	300c      	adds	r0, #12
 8002860:	60a0      	str	r0, [r4, #8]
 8002862:	3268      	adds	r2, #104	; 0x68
 8002864:	f7ff fda2 	bl	80023ac <memset>
 8002868:	0020      	movs	r0, r4
 800286a:	bd70      	pop	{r4, r5, r6, pc}

0800286c <__sfp_lock_acquire>:
 800286c:	b510      	push	{r4, lr}
 800286e:	4802      	ldr	r0, [pc, #8]	; (8002878 <__sfp_lock_acquire+0xc>)
 8002870:	f000 f8bd 	bl	80029ee <__retarget_lock_acquire_recursive>
 8002874:	bd10      	pop	{r4, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	20000129 	.word	0x20000129

0800287c <__sfp_lock_release>:
 800287c:	b510      	push	{r4, lr}
 800287e:	4802      	ldr	r0, [pc, #8]	; (8002888 <__sfp_lock_release+0xc>)
 8002880:	f000 f8b6 	bl	80029f0 <__retarget_lock_release_recursive>
 8002884:	bd10      	pop	{r4, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	20000129 	.word	0x20000129

0800288c <__sinit_lock_acquire>:
 800288c:	b510      	push	{r4, lr}
 800288e:	4802      	ldr	r0, [pc, #8]	; (8002898 <__sinit_lock_acquire+0xc>)
 8002890:	f000 f8ad 	bl	80029ee <__retarget_lock_acquire_recursive>
 8002894:	bd10      	pop	{r4, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	2000012a 	.word	0x2000012a

0800289c <__sinit_lock_release>:
 800289c:	b510      	push	{r4, lr}
 800289e:	4802      	ldr	r0, [pc, #8]	; (80028a8 <__sinit_lock_release+0xc>)
 80028a0:	f000 f8a6 	bl	80029f0 <__retarget_lock_release_recursive>
 80028a4:	bd10      	pop	{r4, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	2000012a 	.word	0x2000012a

080028ac <__sinit>:
 80028ac:	b513      	push	{r0, r1, r4, lr}
 80028ae:	0004      	movs	r4, r0
 80028b0:	f7ff ffec 	bl	800288c <__sinit_lock_acquire>
 80028b4:	69a3      	ldr	r3, [r4, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <__sinit+0x14>
 80028ba:	f7ff ffef 	bl	800289c <__sinit_lock_release>
 80028be:	bd13      	pop	{r0, r1, r4, pc}
 80028c0:	64a3      	str	r3, [r4, #72]	; 0x48
 80028c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80028c4:	6523      	str	r3, [r4, #80]	; 0x50
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <__sinit+0x68>)
 80028c8:	4a13      	ldr	r2, [pc, #76]	; (8002918 <__sinit+0x6c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	42a3      	cmp	r3, r4
 80028d2:	d101      	bne.n	80028d8 <__sinit+0x2c>
 80028d4:	2301      	movs	r3, #1
 80028d6:	61a3      	str	r3, [r4, #24]
 80028d8:	0020      	movs	r0, r4
 80028da:	f000 f81f 	bl	800291c <__sfp>
 80028de:	6060      	str	r0, [r4, #4]
 80028e0:	0020      	movs	r0, r4
 80028e2:	f000 f81b 	bl	800291c <__sfp>
 80028e6:	60a0      	str	r0, [r4, #8]
 80028e8:	0020      	movs	r0, r4
 80028ea:	f000 f817 	bl	800291c <__sfp>
 80028ee:	2200      	movs	r2, #0
 80028f0:	2104      	movs	r1, #4
 80028f2:	60e0      	str	r0, [r4, #12]
 80028f4:	6860      	ldr	r0, [r4, #4]
 80028f6:	f7ff ff77 	bl	80027e8 <std>
 80028fa:	2201      	movs	r2, #1
 80028fc:	2109      	movs	r1, #9
 80028fe:	68a0      	ldr	r0, [r4, #8]
 8002900:	f7ff ff72 	bl	80027e8 <std>
 8002904:	2202      	movs	r2, #2
 8002906:	2112      	movs	r1, #18
 8002908:	68e0      	ldr	r0, [r4, #12]
 800290a:	f7ff ff6d 	bl	80027e8 <std>
 800290e:	2301      	movs	r3, #1
 8002910:	61a3      	str	r3, [r4, #24]
 8002912:	e7d2      	b.n	80028ba <__sinit+0xe>
 8002914:	08002ef0 	.word	0x08002ef0
 8002918:	08002831 	.word	0x08002831

0800291c <__sfp>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	0007      	movs	r7, r0
 8002920:	f7ff ffa4 	bl	800286c <__sfp_lock_acquire>
 8002924:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <__sfp+0x88>)
 8002926:	681e      	ldr	r6, [r3, #0]
 8002928:	69b3      	ldr	r3, [r6, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <__sfp+0x18>
 800292e:	0030      	movs	r0, r6
 8002930:	f7ff ffbc 	bl	80028ac <__sinit>
 8002934:	3648      	adds	r6, #72	; 0x48
 8002936:	68b4      	ldr	r4, [r6, #8]
 8002938:	6873      	ldr	r3, [r6, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	d504      	bpl.n	8002948 <__sfp+0x2c>
 800293e:	6833      	ldr	r3, [r6, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d022      	beq.n	800298a <__sfp+0x6e>
 8002944:	6836      	ldr	r6, [r6, #0]
 8002946:	e7f6      	b.n	8002936 <__sfp+0x1a>
 8002948:	220c      	movs	r2, #12
 800294a:	5ea5      	ldrsh	r5, [r4, r2]
 800294c:	2d00      	cmp	r5, #0
 800294e:	d11a      	bne.n	8002986 <__sfp+0x6a>
 8002950:	0020      	movs	r0, r4
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <__sfp+0x8c>)
 8002954:	3058      	adds	r0, #88	; 0x58
 8002956:	60e3      	str	r3, [r4, #12]
 8002958:	6665      	str	r5, [r4, #100]	; 0x64
 800295a:	f000 f847 	bl	80029ec <__retarget_lock_init_recursive>
 800295e:	f7ff ff8d 	bl	800287c <__sfp_lock_release>
 8002962:	0020      	movs	r0, r4
 8002964:	2208      	movs	r2, #8
 8002966:	0029      	movs	r1, r5
 8002968:	6025      	str	r5, [r4, #0]
 800296a:	60a5      	str	r5, [r4, #8]
 800296c:	6065      	str	r5, [r4, #4]
 800296e:	6125      	str	r5, [r4, #16]
 8002970:	6165      	str	r5, [r4, #20]
 8002972:	61a5      	str	r5, [r4, #24]
 8002974:	305c      	adds	r0, #92	; 0x5c
 8002976:	f7ff fd19 	bl	80023ac <memset>
 800297a:	6365      	str	r5, [r4, #52]	; 0x34
 800297c:	63a5      	str	r5, [r4, #56]	; 0x38
 800297e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002980:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002982:	0020      	movs	r0, r4
 8002984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002986:	3468      	adds	r4, #104	; 0x68
 8002988:	e7d7      	b.n	800293a <__sfp+0x1e>
 800298a:	2104      	movs	r1, #4
 800298c:	0038      	movs	r0, r7
 800298e:	f7ff ff57 	bl	8002840 <__sfmoreglue>
 8002992:	1e04      	subs	r4, r0, #0
 8002994:	6030      	str	r0, [r6, #0]
 8002996:	d1d5      	bne.n	8002944 <__sfp+0x28>
 8002998:	f7ff ff70 	bl	800287c <__sfp_lock_release>
 800299c:	230c      	movs	r3, #12
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	e7ef      	b.n	8002982 <__sfp+0x66>
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	08002ef0 	.word	0x08002ef0
 80029a8:	ffff0001 	.word	0xffff0001

080029ac <_fwalk_reent>:
 80029ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029ae:	0004      	movs	r4, r0
 80029b0:	0006      	movs	r6, r0
 80029b2:	2700      	movs	r7, #0
 80029b4:	9101      	str	r1, [sp, #4]
 80029b6:	3448      	adds	r4, #72	; 0x48
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	68a5      	ldr	r5, [r4, #8]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	9b00      	ldr	r3, [sp, #0]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	d504      	bpl.n	80029d0 <_fwalk_reent+0x24>
 80029c6:	6824      	ldr	r4, [r4, #0]
 80029c8:	2c00      	cmp	r4, #0
 80029ca:	d1f5      	bne.n	80029b8 <_fwalk_reent+0xc>
 80029cc:	0038      	movs	r0, r7
 80029ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029d0:	89ab      	ldrh	r3, [r5, #12]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d908      	bls.n	80029e8 <_fwalk_reent+0x3c>
 80029d6:	220e      	movs	r2, #14
 80029d8:	5eab      	ldrsh	r3, [r5, r2]
 80029da:	3301      	adds	r3, #1
 80029dc:	d004      	beq.n	80029e8 <_fwalk_reent+0x3c>
 80029de:	0029      	movs	r1, r5
 80029e0:	0030      	movs	r0, r6
 80029e2:	9b01      	ldr	r3, [sp, #4]
 80029e4:	4798      	blx	r3
 80029e6:	4307      	orrs	r7, r0
 80029e8:	3568      	adds	r5, #104	; 0x68
 80029ea:	e7e8      	b.n	80029be <_fwalk_reent+0x12>

080029ec <__retarget_lock_init_recursive>:
 80029ec:	4770      	bx	lr

080029ee <__retarget_lock_acquire_recursive>:
 80029ee:	4770      	bx	lr

080029f0 <__retarget_lock_release_recursive>:
 80029f0:	4770      	bx	lr
	...

080029f4 <__swhatbuf_r>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	000e      	movs	r6, r1
 80029f8:	001d      	movs	r5, r3
 80029fa:	230e      	movs	r3, #14
 80029fc:	5ec9      	ldrsh	r1, [r1, r3]
 80029fe:	0014      	movs	r4, r2
 8002a00:	b096      	sub	sp, #88	; 0x58
 8002a02:	2900      	cmp	r1, #0
 8002a04:	da08      	bge.n	8002a18 <__swhatbuf_r+0x24>
 8002a06:	220c      	movs	r2, #12
 8002a08:	5eb3      	ldrsh	r3, [r6, r2]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	602a      	str	r2, [r5, #0]
 8002a0e:	061b      	lsls	r3, r3, #24
 8002a10:	d411      	bmi.n	8002a36 <__swhatbuf_r+0x42>
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	e00f      	b.n	8002a38 <__swhatbuf_r+0x44>
 8002a18:	466a      	mov	r2, sp
 8002a1a:	f000 f9bd 	bl	8002d98 <_fstat_r>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	dbf1      	blt.n	8002a06 <__swhatbuf_r+0x12>
 8002a22:	23f0      	movs	r3, #240	; 0xf0
 8002a24:	9901      	ldr	r1, [sp, #4]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	4019      	ands	r1, r3
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <__swhatbuf_r+0x4c>)
 8002a2c:	18c9      	adds	r1, r1, r3
 8002a2e:	424b      	negs	r3, r1
 8002a30:	4159      	adcs	r1, r3
 8002a32:	6029      	str	r1, [r5, #0]
 8002a34:	e7ed      	b.n	8002a12 <__swhatbuf_r+0x1e>
 8002a36:	2340      	movs	r3, #64	; 0x40
 8002a38:	2000      	movs	r0, #0
 8002a3a:	6023      	str	r3, [r4, #0]
 8002a3c:	b016      	add	sp, #88	; 0x58
 8002a3e:	bd70      	pop	{r4, r5, r6, pc}
 8002a40:	ffffe000 	.word	0xffffe000

08002a44 <__smakebuf_r>:
 8002a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a46:	2602      	movs	r6, #2
 8002a48:	898b      	ldrh	r3, [r1, #12]
 8002a4a:	0005      	movs	r5, r0
 8002a4c:	000c      	movs	r4, r1
 8002a4e:	4233      	tst	r3, r6
 8002a50:	d006      	beq.n	8002a60 <__smakebuf_r+0x1c>
 8002a52:	0023      	movs	r3, r4
 8002a54:	3347      	adds	r3, #71	; 0x47
 8002a56:	6023      	str	r3, [r4, #0]
 8002a58:	6123      	str	r3, [r4, #16]
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	6163      	str	r3, [r4, #20]
 8002a5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002a60:	466a      	mov	r2, sp
 8002a62:	ab01      	add	r3, sp, #4
 8002a64:	f7ff ffc6 	bl	80029f4 <__swhatbuf_r>
 8002a68:	9900      	ldr	r1, [sp, #0]
 8002a6a:	0007      	movs	r7, r0
 8002a6c:	0028      	movs	r0, r5
 8002a6e:	f000 f899 	bl	8002ba4 <_malloc_r>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d108      	bne.n	8002a88 <__smakebuf_r+0x44>
 8002a76:	220c      	movs	r2, #12
 8002a78:	5ea3      	ldrsh	r3, [r4, r2]
 8002a7a:	059a      	lsls	r2, r3, #22
 8002a7c:	d4ef      	bmi.n	8002a5e <__smakebuf_r+0x1a>
 8002a7e:	2203      	movs	r2, #3
 8002a80:	4393      	bics	r3, r2
 8002a82:	431e      	orrs	r6, r3
 8002a84:	81a6      	strh	r6, [r4, #12]
 8002a86:	e7e4      	b.n	8002a52 <__smakebuf_r+0xe>
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <__smakebuf_r+0x84>)
 8002a8a:	62ab      	str	r3, [r5, #40]	; 0x28
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	89a2      	ldrh	r2, [r4, #12]
 8002a90:	6020      	str	r0, [r4, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	81a3      	strh	r3, [r4, #12]
 8002a96:	9b00      	ldr	r3, [sp, #0]
 8002a98:	6120      	str	r0, [r4, #16]
 8002a9a:	6163      	str	r3, [r4, #20]
 8002a9c:	9b01      	ldr	r3, [sp, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <__smakebuf_r+0x7a>
 8002aa2:	0028      	movs	r0, r5
 8002aa4:	230e      	movs	r3, #14
 8002aa6:	5ee1      	ldrsh	r1, [r4, r3]
 8002aa8:	f000 f988 	bl	8002dbc <_isatty_r>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d006      	beq.n	8002abe <__smakebuf_r+0x7a>
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	2301      	movs	r3, #1
 8002aba:	4313      	orrs	r3, r2
 8002abc:	81a3      	strh	r3, [r4, #12]
 8002abe:	89a0      	ldrh	r0, [r4, #12]
 8002ac0:	4307      	orrs	r7, r0
 8002ac2:	81a7      	strh	r7, [r4, #12]
 8002ac4:	e7cb      	b.n	8002a5e <__smakebuf_r+0x1a>
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	08002831 	.word	0x08002831

08002acc <_free_r>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	0005      	movs	r5, r0
 8002ad0:	2900      	cmp	r1, #0
 8002ad2:	d010      	beq.n	8002af6 <_free_r+0x2a>
 8002ad4:	1f0c      	subs	r4, r1, #4
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da00      	bge.n	8002ade <_free_r+0x12>
 8002adc:	18e4      	adds	r4, r4, r3
 8002ade:	0028      	movs	r0, r5
 8002ae0:	f000 f992 	bl	8002e08 <__malloc_lock>
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <_free_r+0x90>)
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <_free_r+0x2c>
 8002aec:	6063      	str	r3, [r4, #4]
 8002aee:	6014      	str	r4, [r2, #0]
 8002af0:	0028      	movs	r0, r5
 8002af2:	f000 f991 	bl	8002e18 <__malloc_unlock>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	42a3      	cmp	r3, r4
 8002afa:	d908      	bls.n	8002b0e <_free_r+0x42>
 8002afc:	6821      	ldr	r1, [r4, #0]
 8002afe:	1860      	adds	r0, r4, r1
 8002b00:	4283      	cmp	r3, r0
 8002b02:	d1f3      	bne.n	8002aec <_free_r+0x20>
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	1841      	adds	r1, r0, r1
 8002b0a:	6021      	str	r1, [r4, #0]
 8002b0c:	e7ee      	b.n	8002aec <_free_r+0x20>
 8002b0e:	001a      	movs	r2, r3
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <_free_r+0x4e>
 8002b16:	42a3      	cmp	r3, r4
 8002b18:	d9f9      	bls.n	8002b0e <_free_r+0x42>
 8002b1a:	6811      	ldr	r1, [r2, #0]
 8002b1c:	1850      	adds	r0, r2, r1
 8002b1e:	42a0      	cmp	r0, r4
 8002b20:	d10b      	bne.n	8002b3a <_free_r+0x6e>
 8002b22:	6820      	ldr	r0, [r4, #0]
 8002b24:	1809      	adds	r1, r1, r0
 8002b26:	1850      	adds	r0, r2, r1
 8002b28:	6011      	str	r1, [r2, #0]
 8002b2a:	4283      	cmp	r3, r0
 8002b2c:	d1e0      	bne.n	8002af0 <_free_r+0x24>
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	1841      	adds	r1, r0, r1
 8002b34:	6011      	str	r1, [r2, #0]
 8002b36:	6053      	str	r3, [r2, #4]
 8002b38:	e7da      	b.n	8002af0 <_free_r+0x24>
 8002b3a:	42a0      	cmp	r0, r4
 8002b3c:	d902      	bls.n	8002b44 <_free_r+0x78>
 8002b3e:	230c      	movs	r3, #12
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	e7d5      	b.n	8002af0 <_free_r+0x24>
 8002b44:	6821      	ldr	r1, [r4, #0]
 8002b46:	1860      	adds	r0, r4, r1
 8002b48:	4283      	cmp	r3, r0
 8002b4a:	d103      	bne.n	8002b54 <_free_r+0x88>
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	1841      	adds	r1, r0, r1
 8002b52:	6021      	str	r1, [r4, #0]
 8002b54:	6063      	str	r3, [r4, #4]
 8002b56:	6054      	str	r4, [r2, #4]
 8002b58:	e7ca      	b.n	8002af0 <_free_r+0x24>
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	2000012c 	.word	0x2000012c

08002b60 <sbrk_aligned>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4e0f      	ldr	r6, [pc, #60]	; (8002ba0 <sbrk_aligned+0x40>)
 8002b64:	000d      	movs	r5, r1
 8002b66:	6831      	ldr	r1, [r6, #0]
 8002b68:	0004      	movs	r4, r0
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d102      	bne.n	8002b74 <sbrk_aligned+0x14>
 8002b6e:	f000 f88f 	bl	8002c90 <_sbrk_r>
 8002b72:	6030      	str	r0, [r6, #0]
 8002b74:	0029      	movs	r1, r5
 8002b76:	0020      	movs	r0, r4
 8002b78:	f000 f88a 	bl	8002c90 <_sbrk_r>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d00a      	beq.n	8002b96 <sbrk_aligned+0x36>
 8002b80:	2303      	movs	r3, #3
 8002b82:	1cc5      	adds	r5, r0, #3
 8002b84:	439d      	bics	r5, r3
 8002b86:	42a8      	cmp	r0, r5
 8002b88:	d007      	beq.n	8002b9a <sbrk_aligned+0x3a>
 8002b8a:	1a29      	subs	r1, r5, r0
 8002b8c:	0020      	movs	r0, r4
 8002b8e:	f000 f87f 	bl	8002c90 <_sbrk_r>
 8002b92:	1c43      	adds	r3, r0, #1
 8002b94:	d101      	bne.n	8002b9a <sbrk_aligned+0x3a>
 8002b96:	2501      	movs	r5, #1
 8002b98:	426d      	negs	r5, r5
 8002b9a:	0028      	movs	r0, r5
 8002b9c:	bd70      	pop	{r4, r5, r6, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	20000130 	.word	0x20000130

08002ba4 <_malloc_r>:
 8002ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	1ccb      	adds	r3, r1, #3
 8002baa:	4393      	bics	r3, r2
 8002bac:	3308      	adds	r3, #8
 8002bae:	0006      	movs	r6, r0
 8002bb0:	001f      	movs	r7, r3
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d232      	bcs.n	8002c1c <_malloc_r+0x78>
 8002bb6:	270c      	movs	r7, #12
 8002bb8:	42b9      	cmp	r1, r7
 8002bba:	d831      	bhi.n	8002c20 <_malloc_r+0x7c>
 8002bbc:	0030      	movs	r0, r6
 8002bbe:	f000 f923 	bl	8002e08 <__malloc_lock>
 8002bc2:	4d32      	ldr	r5, [pc, #200]	; (8002c8c <_malloc_r+0xe8>)
 8002bc4:	682b      	ldr	r3, [r5, #0]
 8002bc6:	001c      	movs	r4, r3
 8002bc8:	2c00      	cmp	r4, #0
 8002bca:	d12e      	bne.n	8002c2a <_malloc_r+0x86>
 8002bcc:	0039      	movs	r1, r7
 8002bce:	0030      	movs	r0, r6
 8002bd0:	f7ff ffc6 	bl	8002b60 <sbrk_aligned>
 8002bd4:	0004      	movs	r4, r0
 8002bd6:	1c43      	adds	r3, r0, #1
 8002bd8:	d11e      	bne.n	8002c18 <_malloc_r+0x74>
 8002bda:	682c      	ldr	r4, [r5, #0]
 8002bdc:	0025      	movs	r5, r4
 8002bde:	2d00      	cmp	r5, #0
 8002be0:	d14a      	bne.n	8002c78 <_malloc_r+0xd4>
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	0029      	movs	r1, r5
 8002be6:	18e3      	adds	r3, r4, r3
 8002be8:	0030      	movs	r0, r6
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	f000 f850 	bl	8002c90 <_sbrk_r>
 8002bf0:	9b01      	ldr	r3, [sp, #4]
 8002bf2:	4283      	cmp	r3, r0
 8002bf4:	d143      	bne.n	8002c7e <_malloc_r+0xda>
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	3703      	adds	r7, #3
 8002bfa:	1aff      	subs	r7, r7, r3
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	439f      	bics	r7, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	2f0c      	cmp	r7, #12
 8002c04:	d200      	bcs.n	8002c08 <_malloc_r+0x64>
 8002c06:	270c      	movs	r7, #12
 8002c08:	0039      	movs	r1, r7
 8002c0a:	0030      	movs	r0, r6
 8002c0c:	f7ff ffa8 	bl	8002b60 <sbrk_aligned>
 8002c10:	1c43      	adds	r3, r0, #1
 8002c12:	d034      	beq.n	8002c7e <_malloc_r+0xda>
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	19df      	adds	r7, r3, r7
 8002c18:	6027      	str	r7, [r4, #0]
 8002c1a:	e013      	b.n	8002c44 <_malloc_r+0xa0>
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	dacb      	bge.n	8002bb8 <_malloc_r+0x14>
 8002c20:	230c      	movs	r3, #12
 8002c22:	2500      	movs	r5, #0
 8002c24:	6033      	str	r3, [r6, #0]
 8002c26:	0028      	movs	r0, r5
 8002c28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	1bd1      	subs	r1, r2, r7
 8002c2e:	d420      	bmi.n	8002c72 <_malloc_r+0xce>
 8002c30:	290b      	cmp	r1, #11
 8002c32:	d917      	bls.n	8002c64 <_malloc_r+0xc0>
 8002c34:	19e2      	adds	r2, r4, r7
 8002c36:	6027      	str	r7, [r4, #0]
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	d111      	bne.n	8002c60 <_malloc_r+0xbc>
 8002c3c:	602a      	str	r2, [r5, #0]
 8002c3e:	6863      	ldr	r3, [r4, #4]
 8002c40:	6011      	str	r1, [r2, #0]
 8002c42:	6053      	str	r3, [r2, #4]
 8002c44:	0030      	movs	r0, r6
 8002c46:	0025      	movs	r5, r4
 8002c48:	f000 f8e6 	bl	8002e18 <__malloc_unlock>
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	350b      	adds	r5, #11
 8002c50:	1d23      	adds	r3, r4, #4
 8002c52:	4395      	bics	r5, r2
 8002c54:	1aea      	subs	r2, r5, r3
 8002c56:	429d      	cmp	r5, r3
 8002c58:	d0e5      	beq.n	8002c26 <_malloc_r+0x82>
 8002c5a:	1b5b      	subs	r3, r3, r5
 8002c5c:	50a3      	str	r3, [r4, r2]
 8002c5e:	e7e2      	b.n	8002c26 <_malloc_r+0x82>
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	e7ec      	b.n	8002c3e <_malloc_r+0x9a>
 8002c64:	6862      	ldr	r2, [r4, #4]
 8002c66:	42a3      	cmp	r3, r4
 8002c68:	d101      	bne.n	8002c6e <_malloc_r+0xca>
 8002c6a:	602a      	str	r2, [r5, #0]
 8002c6c:	e7ea      	b.n	8002c44 <_malloc_r+0xa0>
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	e7e8      	b.n	8002c44 <_malloc_r+0xa0>
 8002c72:	0023      	movs	r3, r4
 8002c74:	6864      	ldr	r4, [r4, #4]
 8002c76:	e7a7      	b.n	8002bc8 <_malloc_r+0x24>
 8002c78:	002c      	movs	r4, r5
 8002c7a:	686d      	ldr	r5, [r5, #4]
 8002c7c:	e7af      	b.n	8002bde <_malloc_r+0x3a>
 8002c7e:	230c      	movs	r3, #12
 8002c80:	0030      	movs	r0, r6
 8002c82:	6033      	str	r3, [r6, #0]
 8002c84:	f000 f8c8 	bl	8002e18 <__malloc_unlock>
 8002c88:	e7cd      	b.n	8002c26 <_malloc_r+0x82>
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	2000012c 	.word	0x2000012c

08002c90 <_sbrk_r>:
 8002c90:	2300      	movs	r3, #0
 8002c92:	b570      	push	{r4, r5, r6, lr}
 8002c94:	4d06      	ldr	r5, [pc, #24]	; (8002cb0 <_sbrk_r+0x20>)
 8002c96:	0004      	movs	r4, r0
 8002c98:	0008      	movs	r0, r1
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	f7fd fd3a 	bl	8000714 <_sbrk>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d103      	bne.n	8002cac <_sbrk_r+0x1c>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d000      	beq.n	8002cac <_sbrk_r+0x1c>
 8002caa:	6023      	str	r3, [r4, #0]
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000134 	.word	0x20000134

08002cb4 <__sread>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	000c      	movs	r4, r1
 8002cb8:	250e      	movs	r5, #14
 8002cba:	5f49      	ldrsh	r1, [r1, r5]
 8002cbc:	f000 f8b4 	bl	8002e28 <_read_r>
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	db03      	blt.n	8002ccc <__sread+0x18>
 8002cc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002cc6:	181b      	adds	r3, r3, r0
 8002cc8:	6563      	str	r3, [r4, #84]	; 0x54
 8002cca:	bd70      	pop	{r4, r5, r6, pc}
 8002ccc:	89a3      	ldrh	r3, [r4, #12]
 8002cce:	4a02      	ldr	r2, [pc, #8]	; (8002cd8 <__sread+0x24>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	81a3      	strh	r3, [r4, #12]
 8002cd4:	e7f9      	b.n	8002cca <__sread+0x16>
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	ffffefff 	.word	0xffffefff

08002cdc <__swrite>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	001f      	movs	r7, r3
 8002ce0:	898b      	ldrh	r3, [r1, #12]
 8002ce2:	0005      	movs	r5, r0
 8002ce4:	000c      	movs	r4, r1
 8002ce6:	0016      	movs	r6, r2
 8002ce8:	05db      	lsls	r3, r3, #23
 8002cea:	d505      	bpl.n	8002cf8 <__swrite+0x1c>
 8002cec:	230e      	movs	r3, #14
 8002cee:	5ec9      	ldrsh	r1, [r1, r3]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f000 f874 	bl	8002de0 <_lseek_r>
 8002cf8:	89a3      	ldrh	r3, [r4, #12]
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <__swrite+0x34>)
 8002cfc:	0028      	movs	r0, r5
 8002cfe:	4013      	ands	r3, r2
 8002d00:	81a3      	strh	r3, [r4, #12]
 8002d02:	0032      	movs	r2, r6
 8002d04:	230e      	movs	r3, #14
 8002d06:	5ee1      	ldrsh	r1, [r4, r3]
 8002d08:	003b      	movs	r3, r7
 8002d0a:	f000 f81f 	bl	8002d4c <_write_r>
 8002d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d10:	ffffefff 	.word	0xffffefff

08002d14 <__sseek>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	000c      	movs	r4, r1
 8002d18:	250e      	movs	r5, #14
 8002d1a:	5f49      	ldrsh	r1, [r1, r5]
 8002d1c:	f000 f860 	bl	8002de0 <_lseek_r>
 8002d20:	89a3      	ldrh	r3, [r4, #12]
 8002d22:	1c42      	adds	r2, r0, #1
 8002d24:	d103      	bne.n	8002d2e <__sseek+0x1a>
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <__sseek+0x28>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	81a3      	strh	r3, [r4, #12]
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	0152      	lsls	r2, r2, #5
 8002d32:	4313      	orrs	r3, r2
 8002d34:	81a3      	strh	r3, [r4, #12]
 8002d36:	6560      	str	r0, [r4, #84]	; 0x54
 8002d38:	e7f8      	b.n	8002d2c <__sseek+0x18>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	ffffefff 	.word	0xffffefff

08002d40 <__sclose>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	230e      	movs	r3, #14
 8002d44:	5ec9      	ldrsh	r1, [r1, r3]
 8002d46:	f000 f815 	bl	8002d74 <_close_r>
 8002d4a:	bd10      	pop	{r4, pc}

08002d4c <_write_r>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	0004      	movs	r4, r0
 8002d50:	0008      	movs	r0, r1
 8002d52:	0011      	movs	r1, r2
 8002d54:	001a      	movs	r2, r3
 8002d56:	2300      	movs	r3, #0
 8002d58:	4d05      	ldr	r5, [pc, #20]	; (8002d70 <_write_r+0x24>)
 8002d5a:	602b      	str	r3, [r5, #0]
 8002d5c:	f7fd fc92 	bl	8000684 <_write>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d103      	bne.n	8002d6c <_write_r+0x20>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d000      	beq.n	8002d6c <_write_r+0x20>
 8002d6a:	6023      	str	r3, [r4, #0]
 8002d6c:	bd70      	pop	{r4, r5, r6, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	20000134 	.word	0x20000134

08002d74 <_close_r>:
 8002d74:	2300      	movs	r3, #0
 8002d76:	b570      	push	{r4, r5, r6, lr}
 8002d78:	4d06      	ldr	r5, [pc, #24]	; (8002d94 <_close_r+0x20>)
 8002d7a:	0004      	movs	r4, r0
 8002d7c:	0008      	movs	r0, r1
 8002d7e:	602b      	str	r3, [r5, #0]
 8002d80:	f7fd fc9c 	bl	80006bc <_close>
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	d103      	bne.n	8002d90 <_close_r+0x1c>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d000      	beq.n	8002d90 <_close_r+0x1c>
 8002d8e:	6023      	str	r3, [r4, #0]
 8002d90:	bd70      	pop	{r4, r5, r6, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	20000134 	.word	0x20000134

08002d98 <_fstat_r>:
 8002d98:	2300      	movs	r3, #0
 8002d9a:	b570      	push	{r4, r5, r6, lr}
 8002d9c:	4d06      	ldr	r5, [pc, #24]	; (8002db8 <_fstat_r+0x20>)
 8002d9e:	0004      	movs	r4, r0
 8002da0:	0008      	movs	r0, r1
 8002da2:	0011      	movs	r1, r2
 8002da4:	602b      	str	r3, [r5, #0]
 8002da6:	f7fd fc93 	bl	80006d0 <_fstat>
 8002daa:	1c43      	adds	r3, r0, #1
 8002dac:	d103      	bne.n	8002db6 <_fstat_r+0x1e>
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d000      	beq.n	8002db6 <_fstat_r+0x1e>
 8002db4:	6023      	str	r3, [r4, #0]
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	20000134 	.word	0x20000134

08002dbc <_isatty_r>:
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	b570      	push	{r4, r5, r6, lr}
 8002dc0:	4d06      	ldr	r5, [pc, #24]	; (8002ddc <_isatty_r+0x20>)
 8002dc2:	0004      	movs	r4, r0
 8002dc4:	0008      	movs	r0, r1
 8002dc6:	602b      	str	r3, [r5, #0]
 8002dc8:	f7fd fc90 	bl	80006ec <_isatty>
 8002dcc:	1c43      	adds	r3, r0, #1
 8002dce:	d103      	bne.n	8002dd8 <_isatty_r+0x1c>
 8002dd0:	682b      	ldr	r3, [r5, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d000      	beq.n	8002dd8 <_isatty_r+0x1c>
 8002dd6:	6023      	str	r3, [r4, #0]
 8002dd8:	bd70      	pop	{r4, r5, r6, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	20000134 	.word	0x20000134

08002de0 <_lseek_r>:
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	0004      	movs	r4, r0
 8002de4:	0008      	movs	r0, r1
 8002de6:	0011      	movs	r1, r2
 8002de8:	001a      	movs	r2, r3
 8002dea:	2300      	movs	r3, #0
 8002dec:	4d05      	ldr	r5, [pc, #20]	; (8002e04 <_lseek_r+0x24>)
 8002dee:	602b      	str	r3, [r5, #0]
 8002df0:	f7fd fc85 	bl	80006fe <_lseek>
 8002df4:	1c43      	adds	r3, r0, #1
 8002df6:	d103      	bne.n	8002e00 <_lseek_r+0x20>
 8002df8:	682b      	ldr	r3, [r5, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d000      	beq.n	8002e00 <_lseek_r+0x20>
 8002dfe:	6023      	str	r3, [r4, #0]
 8002e00:	bd70      	pop	{r4, r5, r6, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	20000134 	.word	0x20000134

08002e08 <__malloc_lock>:
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	4802      	ldr	r0, [pc, #8]	; (8002e14 <__malloc_lock+0xc>)
 8002e0c:	f7ff fdef 	bl	80029ee <__retarget_lock_acquire_recursive>
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	20000128 	.word	0x20000128

08002e18 <__malloc_unlock>:
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	4802      	ldr	r0, [pc, #8]	; (8002e24 <__malloc_unlock+0xc>)
 8002e1c:	f7ff fde8 	bl	80029f0 <__retarget_lock_release_recursive>
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	20000128 	.word	0x20000128

08002e28 <_read_r>:
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	0004      	movs	r4, r0
 8002e2c:	0008      	movs	r0, r1
 8002e2e:	0011      	movs	r1, r2
 8002e30:	001a      	movs	r2, r3
 8002e32:	2300      	movs	r3, #0
 8002e34:	4d05      	ldr	r5, [pc, #20]	; (8002e4c <_read_r+0x24>)
 8002e36:	602b      	str	r3, [r5, #0]
 8002e38:	f7fd fc07 	bl	800064a <_read>
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d103      	bne.n	8002e48 <_read_r+0x20>
 8002e40:	682b      	ldr	r3, [r5, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d000      	beq.n	8002e48 <_read_r+0x20>
 8002e46:	6023      	str	r3, [r4, #0]
 8002e48:	bd70      	pop	{r4, r5, r6, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	20000134 	.word	0x20000134

08002e50 <_init>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e56:	bc08      	pop	{r3}
 8002e58:	469e      	mov	lr, r3
 8002e5a:	4770      	bx	lr

08002e5c <_fini>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr
