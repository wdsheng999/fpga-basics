
miniOSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d220  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000138c  0800d2e0  0800d2e0  0001d2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e66c  0800e66c  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800e66c  0800e66c  0001e66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e674  0800e674  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e674  0800e674  0001e674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e678  0800e678  0001e678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800e67c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed4  20000258  0800e8d4  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000112c  0800e8d4  0002112c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .debug_info   000252bf  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000459f  00000000  00000000  0004553f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000150c5  00000000  00000000  00049ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  0005eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001820  00000000  00000000  0005fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000195e8  00000000  00000000  00061558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e2b7  00000000  00000000  0007ab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0b9c  00000000  00000000  00098df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  00139993  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004394  00000000  00000000  00139a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000258 	.word	0x20000258
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d2c4 	.word	0x0800d2c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000025c 	.word	0x2000025c
 8000100:	0800d2c4 	.word	0x0800d2c4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 ff77 	bl	800232c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fec1 	bl	80021d0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 ff69 	bl	800232c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 ff5f 	bl	800232c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fee3 	bl	8002248 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fed9 	bl	8002248 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fc59 	bl	8000d64 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fbdd 	bl	8000c7c <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fc4b 	bl	8000d64 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc41 	bl	8000d64 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fbeb 	bl	8000ccc <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fbe1 	bl	8000ccc <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	1c08      	adds	r0, r1, #0
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	; (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f824 	bl	8000594 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff95 	bl	8000490 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 fd69 	bl	8003044 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f002 f9b2 	bl	80028e4 <__aeabi_dsub>
 8000580:	f002 fd60 	bl	8003044 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__udivmoddi4>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	4657      	mov	r7, sl
 8000598:	464e      	mov	r6, r9
 800059a:	4645      	mov	r5, r8
 800059c:	46de      	mov	lr, fp
 800059e:	b5e0      	push	{r5, r6, r7, lr}
 80005a0:	0004      	movs	r4, r0
 80005a2:	000d      	movs	r5, r1
 80005a4:	4692      	mov	sl, r2
 80005a6:	4699      	mov	r9, r3
 80005a8:	b083      	sub	sp, #12
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d830      	bhi.n	8000610 <__udivmoddi4+0x7c>
 80005ae:	d02d      	beq.n	800060c <__udivmoddi4+0x78>
 80005b0:	4649      	mov	r1, r9
 80005b2:	4650      	mov	r0, sl
 80005b4:	f002 fec0 	bl	8003338 <__clzdi2>
 80005b8:	0029      	movs	r1, r5
 80005ba:	0006      	movs	r6, r0
 80005bc:	0020      	movs	r0, r4
 80005be:	f002 febb 	bl	8003338 <__clzdi2>
 80005c2:	1a33      	subs	r3, r6, r0
 80005c4:	4698      	mov	r8, r3
 80005c6:	3b20      	subs	r3, #32
 80005c8:	469b      	mov	fp, r3
 80005ca:	d433      	bmi.n	8000634 <__udivmoddi4+0xa0>
 80005cc:	465a      	mov	r2, fp
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	4642      	mov	r2, r8
 80005d4:	001f      	movs	r7, r3
 80005d6:	4653      	mov	r3, sl
 80005d8:	4093      	lsls	r3, r2
 80005da:	001e      	movs	r6, r3
 80005dc:	42af      	cmp	r7, r5
 80005de:	d83a      	bhi.n	8000656 <__udivmoddi4+0xc2>
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d100      	bne.n	80005e6 <__udivmoddi4+0x52>
 80005e4:	e078      	b.n	80006d8 <__udivmoddi4+0x144>
 80005e6:	465b      	mov	r3, fp
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	41bd      	sbcs	r5, r7
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <__udivmoddi4+0x5e>
 80005f0:	e075      	b.n	80006de <__udivmoddi4+0x14a>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2300      	movs	r3, #0
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	465a      	mov	r2, fp
 80005fe:	4093      	lsls	r3, r2
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	4642      	mov	r2, r8
 8000606:	4093      	lsls	r3, r2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	e028      	b.n	800065e <__udivmoddi4+0xca>
 800060c:	4282      	cmp	r2, r0
 800060e:	d9cf      	bls.n	80005b0 <__udivmoddi4+0x1c>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <__udivmoddi4+0x8e>
 800061e:	601c      	str	r4, [r3, #0]
 8000620:	605d      	str	r5, [r3, #4]
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	b003      	add	sp, #12
 8000628:	bcf0      	pop	{r4, r5, r6, r7}
 800062a:	46bb      	mov	fp, r7
 800062c:	46b2      	mov	sl, r6
 800062e:	46a9      	mov	r9, r5
 8000630:	46a0      	mov	r8, r4
 8000632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	4652      	mov	r2, sl
 800063c:	40da      	lsrs	r2, r3
 800063e:	4641      	mov	r1, r8
 8000640:	0013      	movs	r3, r2
 8000642:	464a      	mov	r2, r9
 8000644:	408a      	lsls	r2, r1
 8000646:	0017      	movs	r7, r2
 8000648:	4642      	mov	r2, r8
 800064a:	431f      	orrs	r7, r3
 800064c:	4653      	mov	r3, sl
 800064e:	4093      	lsls	r3, r2
 8000650:	001e      	movs	r6, r3
 8000652:	42af      	cmp	r7, r5
 8000654:	d9c4      	bls.n	80005e0 <__udivmoddi4+0x4c>
 8000656:	2200      	movs	r2, #0
 8000658:	2300      	movs	r3, #0
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	4643      	mov	r3, r8
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0d9      	beq.n	8000618 <__udivmoddi4+0x84>
 8000664:	07fb      	lsls	r3, r7, #31
 8000666:	0872      	lsrs	r2, r6, #1
 8000668:	431a      	orrs	r2, r3
 800066a:	4646      	mov	r6, r8
 800066c:	087b      	lsrs	r3, r7, #1
 800066e:	e00e      	b.n	800068e <__udivmoddi4+0xfa>
 8000670:	42ab      	cmp	r3, r5
 8000672:	d101      	bne.n	8000678 <__udivmoddi4+0xe4>
 8000674:	42a2      	cmp	r2, r4
 8000676:	d80c      	bhi.n	8000692 <__udivmoddi4+0xfe>
 8000678:	1aa4      	subs	r4, r4, r2
 800067a:	419d      	sbcs	r5, r3
 800067c:	2001      	movs	r0, #1
 800067e:	1924      	adds	r4, r4, r4
 8000680:	416d      	adcs	r5, r5
 8000682:	2100      	movs	r1, #0
 8000684:	3e01      	subs	r6, #1
 8000686:	1824      	adds	r4, r4, r0
 8000688:	414d      	adcs	r5, r1
 800068a:	2e00      	cmp	r6, #0
 800068c:	d006      	beq.n	800069c <__udivmoddi4+0x108>
 800068e:	42ab      	cmp	r3, r5
 8000690:	d9ee      	bls.n	8000670 <__udivmoddi4+0xdc>
 8000692:	3e01      	subs	r6, #1
 8000694:	1924      	adds	r4, r4, r4
 8000696:	416d      	adcs	r5, r5
 8000698:	2e00      	cmp	r6, #0
 800069a:	d1f8      	bne.n	800068e <__udivmoddi4+0xfa>
 800069c:	9800      	ldr	r0, [sp, #0]
 800069e:	9901      	ldr	r1, [sp, #4]
 80006a0:	465b      	mov	r3, fp
 80006a2:	1900      	adds	r0, r0, r4
 80006a4:	4169      	adcs	r1, r5
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	db24      	blt.n	80006f4 <__udivmoddi4+0x160>
 80006aa:	002b      	movs	r3, r5
 80006ac:	465a      	mov	r2, fp
 80006ae:	4644      	mov	r4, r8
 80006b0:	40d3      	lsrs	r3, r2
 80006b2:	002a      	movs	r2, r5
 80006b4:	40e2      	lsrs	r2, r4
 80006b6:	001c      	movs	r4, r3
 80006b8:	465b      	mov	r3, fp
 80006ba:	0015      	movs	r5, r2
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db2a      	blt.n	8000716 <__udivmoddi4+0x182>
 80006c0:	0026      	movs	r6, r4
 80006c2:	409e      	lsls	r6, r3
 80006c4:	0033      	movs	r3, r6
 80006c6:	0026      	movs	r6, r4
 80006c8:	4647      	mov	r7, r8
 80006ca:	40be      	lsls	r6, r7
 80006cc:	0032      	movs	r2, r6
 80006ce:	1a80      	subs	r0, r0, r2
 80006d0:	4199      	sbcs	r1, r3
 80006d2:	9000      	str	r0, [sp, #0]
 80006d4:	9101      	str	r1, [sp, #4]
 80006d6:	e79f      	b.n	8000618 <__udivmoddi4+0x84>
 80006d8:	42a3      	cmp	r3, r4
 80006da:	d8bc      	bhi.n	8000656 <__udivmoddi4+0xc2>
 80006dc:	e783      	b.n	80005e6 <__udivmoddi4+0x52>
 80006de:	4642      	mov	r2, r8
 80006e0:	2320      	movs	r3, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	2200      	movs	r2, #0
 80006e8:	9100      	str	r1, [sp, #0]
 80006ea:	9201      	str	r2, [sp, #4]
 80006ec:	2201      	movs	r2, #1
 80006ee:	40da      	lsrs	r2, r3
 80006f0:	9201      	str	r2, [sp, #4]
 80006f2:	e786      	b.n	8000602 <__udivmoddi4+0x6e>
 80006f4:	4642      	mov	r2, r8
 80006f6:	2320      	movs	r3, #32
 80006f8:	1a9b      	subs	r3, r3, r2
 80006fa:	002a      	movs	r2, r5
 80006fc:	4646      	mov	r6, r8
 80006fe:	409a      	lsls	r2, r3
 8000700:	0023      	movs	r3, r4
 8000702:	40f3      	lsrs	r3, r6
 8000704:	4644      	mov	r4, r8
 8000706:	4313      	orrs	r3, r2
 8000708:	002a      	movs	r2, r5
 800070a:	40e2      	lsrs	r2, r4
 800070c:	001c      	movs	r4, r3
 800070e:	465b      	mov	r3, fp
 8000710:	0015      	movs	r5, r2
 8000712:	2b00      	cmp	r3, #0
 8000714:	dad4      	bge.n	80006c0 <__udivmoddi4+0x12c>
 8000716:	4642      	mov	r2, r8
 8000718:	002f      	movs	r7, r5
 800071a:	2320      	movs	r3, #32
 800071c:	0026      	movs	r6, r4
 800071e:	4097      	lsls	r7, r2
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	40de      	lsrs	r6, r3
 8000724:	003b      	movs	r3, r7
 8000726:	4333      	orrs	r3, r6
 8000728:	e7cd      	b.n	80006c6 <__udivmoddi4+0x132>
 800072a:	46c0      	nop			; (mov r8, r8)

0800072c <__aeabi_fadd>:
 800072c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072e:	4646      	mov	r6, r8
 8000730:	46d6      	mov	lr, sl
 8000732:	464f      	mov	r7, r9
 8000734:	024d      	lsls	r5, r1, #9
 8000736:	0242      	lsls	r2, r0, #9
 8000738:	b5c0      	push	{r6, r7, lr}
 800073a:	0a52      	lsrs	r2, r2, #9
 800073c:	0a6e      	lsrs	r6, r5, #9
 800073e:	0047      	lsls	r7, r0, #1
 8000740:	46b0      	mov	r8, r6
 8000742:	0e3f      	lsrs	r7, r7, #24
 8000744:	004e      	lsls	r6, r1, #1
 8000746:	0fc4      	lsrs	r4, r0, #31
 8000748:	00d0      	lsls	r0, r2, #3
 800074a:	4694      	mov	ip, r2
 800074c:	003b      	movs	r3, r7
 800074e:	4682      	mov	sl, r0
 8000750:	0e36      	lsrs	r6, r6, #24
 8000752:	0fc9      	lsrs	r1, r1, #31
 8000754:	09ad      	lsrs	r5, r5, #6
 8000756:	428c      	cmp	r4, r1
 8000758:	d06d      	beq.n	8000836 <__aeabi_fadd+0x10a>
 800075a:	1bb8      	subs	r0, r7, r6
 800075c:	4681      	mov	r9, r0
 800075e:	2800      	cmp	r0, #0
 8000760:	dd4d      	ble.n	80007fe <__aeabi_fadd+0xd2>
 8000762:	2e00      	cmp	r6, #0
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x3c>
 8000766:	e088      	b.n	800087a <__aeabi_fadd+0x14e>
 8000768:	2fff      	cmp	r7, #255	; 0xff
 800076a:	d05a      	beq.n	8000822 <__aeabi_fadd+0xf6>
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	04db      	lsls	r3, r3, #19
 8000770:	431d      	orrs	r5, r3
 8000772:	464b      	mov	r3, r9
 8000774:	2201      	movs	r2, #1
 8000776:	2b1b      	cmp	r3, #27
 8000778:	dc0a      	bgt.n	8000790 <__aeabi_fadd+0x64>
 800077a:	002b      	movs	r3, r5
 800077c:	464a      	mov	r2, r9
 800077e:	4649      	mov	r1, r9
 8000780:	40d3      	lsrs	r3, r2
 8000782:	2220      	movs	r2, #32
 8000784:	1a52      	subs	r2, r2, r1
 8000786:	4095      	lsls	r5, r2
 8000788:	002a      	movs	r2, r5
 800078a:	1e55      	subs	r5, r2, #1
 800078c:	41aa      	sbcs	r2, r5
 800078e:	431a      	orrs	r2, r3
 8000790:	4653      	mov	r3, sl
 8000792:	1a9a      	subs	r2, r3, r2
 8000794:	0153      	lsls	r3, r2, #5
 8000796:	d400      	bmi.n	800079a <__aeabi_fadd+0x6e>
 8000798:	e0b9      	b.n	800090e <__aeabi_fadd+0x1e2>
 800079a:	0192      	lsls	r2, r2, #6
 800079c:	0996      	lsrs	r6, r2, #6
 800079e:	0030      	movs	r0, r6
 80007a0:	f002 fdac 	bl	80032fc <__clzsi2>
 80007a4:	3805      	subs	r0, #5
 80007a6:	4086      	lsls	r6, r0
 80007a8:	4287      	cmp	r7, r0
 80007aa:	dd00      	ble.n	80007ae <__aeabi_fadd+0x82>
 80007ac:	e0d4      	b.n	8000958 <__aeabi_fadd+0x22c>
 80007ae:	0033      	movs	r3, r6
 80007b0:	1bc7      	subs	r7, r0, r7
 80007b2:	2020      	movs	r0, #32
 80007b4:	3701      	adds	r7, #1
 80007b6:	40fb      	lsrs	r3, r7
 80007b8:	1bc7      	subs	r7, r0, r7
 80007ba:	40be      	lsls	r6, r7
 80007bc:	0032      	movs	r2, r6
 80007be:	1e56      	subs	r6, r2, #1
 80007c0:	41b2      	sbcs	r2, r6
 80007c2:	2700      	movs	r7, #0
 80007c4:	431a      	orrs	r2, r3
 80007c6:	0753      	lsls	r3, r2, #29
 80007c8:	d004      	beq.n	80007d4 <__aeabi_fadd+0xa8>
 80007ca:	230f      	movs	r3, #15
 80007cc:	4013      	ands	r3, r2
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fadd+0xa8>
 80007d2:	3204      	adds	r2, #4
 80007d4:	0153      	lsls	r3, r2, #5
 80007d6:	d400      	bmi.n	80007da <__aeabi_fadd+0xae>
 80007d8:	e09c      	b.n	8000914 <__aeabi_fadd+0x1e8>
 80007da:	1c7b      	adds	r3, r7, #1
 80007dc:	2ffe      	cmp	r7, #254	; 0xfe
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0xb6>
 80007e0:	e09a      	b.n	8000918 <__aeabi_fadd+0x1ec>
 80007e2:	0192      	lsls	r2, r2, #6
 80007e4:	0a52      	lsrs	r2, r2, #9
 80007e6:	4694      	mov	ip, r2
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	05d8      	lsls	r0, r3, #23
 80007ec:	4663      	mov	r3, ip
 80007ee:	07e4      	lsls	r4, r4, #31
 80007f0:	4318      	orrs	r0, r3
 80007f2:	4320      	orrs	r0, r4
 80007f4:	bce0      	pop	{r5, r6, r7}
 80007f6:	46ba      	mov	sl, r7
 80007f8:	46b1      	mov	r9, r6
 80007fa:	46a8      	mov	r8, r5
 80007fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fe:	2800      	cmp	r0, #0
 8000800:	d049      	beq.n	8000896 <__aeabi_fadd+0x16a>
 8000802:	1bf3      	subs	r3, r6, r7
 8000804:	2f00      	cmp	r7, #0
 8000806:	d000      	beq.n	800080a <__aeabi_fadd+0xde>
 8000808:	e0b6      	b.n	8000978 <__aeabi_fadd+0x24c>
 800080a:	4652      	mov	r2, sl
 800080c:	2a00      	cmp	r2, #0
 800080e:	d060      	beq.n	80008d2 <__aeabi_fadd+0x1a6>
 8000810:	3b01      	subs	r3, #1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0xec>
 8000816:	e0fc      	b.n	8000a12 <__aeabi_fadd+0x2e6>
 8000818:	2eff      	cmp	r6, #255	; 0xff
 800081a:	d000      	beq.n	800081e <__aeabi_fadd+0xf2>
 800081c:	e0b4      	b.n	8000988 <__aeabi_fadd+0x25c>
 800081e:	000c      	movs	r4, r1
 8000820:	4642      	mov	r2, r8
 8000822:	2a00      	cmp	r2, #0
 8000824:	d078      	beq.n	8000918 <__aeabi_fadd+0x1ec>
 8000826:	2080      	movs	r0, #128	; 0x80
 8000828:	03c0      	lsls	r0, r0, #15
 800082a:	4310      	orrs	r0, r2
 800082c:	0242      	lsls	r2, r0, #9
 800082e:	0a53      	lsrs	r3, r2, #9
 8000830:	469c      	mov	ip, r3
 8000832:	23ff      	movs	r3, #255	; 0xff
 8000834:	e7d9      	b.n	80007ea <__aeabi_fadd+0xbe>
 8000836:	1bb9      	subs	r1, r7, r6
 8000838:	2900      	cmp	r1, #0
 800083a:	dd71      	ble.n	8000920 <__aeabi_fadd+0x1f4>
 800083c:	2e00      	cmp	r6, #0
 800083e:	d03f      	beq.n	80008c0 <__aeabi_fadd+0x194>
 8000840:	2fff      	cmp	r7, #255	; 0xff
 8000842:	d0ee      	beq.n	8000822 <__aeabi_fadd+0xf6>
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	04db      	lsls	r3, r3, #19
 8000848:	431d      	orrs	r5, r3
 800084a:	2201      	movs	r2, #1
 800084c:	291b      	cmp	r1, #27
 800084e:	dc07      	bgt.n	8000860 <__aeabi_fadd+0x134>
 8000850:	002a      	movs	r2, r5
 8000852:	2320      	movs	r3, #32
 8000854:	40ca      	lsrs	r2, r1
 8000856:	1a59      	subs	r1, r3, r1
 8000858:	408d      	lsls	r5, r1
 800085a:	1e6b      	subs	r3, r5, #1
 800085c:	419d      	sbcs	r5, r3
 800085e:	432a      	orrs	r2, r5
 8000860:	4452      	add	r2, sl
 8000862:	0153      	lsls	r3, r2, #5
 8000864:	d553      	bpl.n	800090e <__aeabi_fadd+0x1e2>
 8000866:	3701      	adds	r7, #1
 8000868:	2fff      	cmp	r7, #255	; 0xff
 800086a:	d055      	beq.n	8000918 <__aeabi_fadd+0x1ec>
 800086c:	2301      	movs	r3, #1
 800086e:	497b      	ldr	r1, [pc, #492]	; (8000a5c <__aeabi_fadd+0x330>)
 8000870:	4013      	ands	r3, r2
 8000872:	0852      	lsrs	r2, r2, #1
 8000874:	400a      	ands	r2, r1
 8000876:	431a      	orrs	r2, r3
 8000878:	e7a5      	b.n	80007c6 <__aeabi_fadd+0x9a>
 800087a:	2d00      	cmp	r5, #0
 800087c:	d02c      	beq.n	80008d8 <__aeabi_fadd+0x1ac>
 800087e:	2301      	movs	r3, #1
 8000880:	425b      	negs	r3, r3
 8000882:	469c      	mov	ip, r3
 8000884:	44e1      	add	r9, ip
 8000886:	464b      	mov	r3, r9
 8000888:	2b00      	cmp	r3, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x162>
 800088c:	e0ad      	b.n	80009ea <__aeabi_fadd+0x2be>
 800088e:	2fff      	cmp	r7, #255	; 0xff
 8000890:	d000      	beq.n	8000894 <__aeabi_fadd+0x168>
 8000892:	e76e      	b.n	8000772 <__aeabi_fadd+0x46>
 8000894:	e7c5      	b.n	8000822 <__aeabi_fadd+0xf6>
 8000896:	20fe      	movs	r0, #254	; 0xfe
 8000898:	1c7e      	adds	r6, r7, #1
 800089a:	4230      	tst	r0, r6
 800089c:	d160      	bne.n	8000960 <__aeabi_fadd+0x234>
 800089e:	2f00      	cmp	r7, #0
 80008a0:	d000      	beq.n	80008a4 <__aeabi_fadd+0x178>
 80008a2:	e093      	b.n	80009cc <__aeabi_fadd+0x2a0>
 80008a4:	4652      	mov	r2, sl
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x180>
 80008aa:	e0b6      	b.n	8000a1a <__aeabi_fadd+0x2ee>
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d09c      	beq.n	80007ea <__aeabi_fadd+0xbe>
 80008b0:	1b52      	subs	r2, r2, r5
 80008b2:	0150      	lsls	r0, r2, #5
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_fadd+0x18c>
 80008b6:	e0c3      	b.n	8000a40 <__aeabi_fadd+0x314>
 80008b8:	4653      	mov	r3, sl
 80008ba:	000c      	movs	r4, r1
 80008bc:	1aea      	subs	r2, r5, r3
 80008be:	e782      	b.n	80007c6 <__aeabi_fadd+0x9a>
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d009      	beq.n	80008d8 <__aeabi_fadd+0x1ac>
 80008c4:	3901      	subs	r1, #1
 80008c6:	2900      	cmp	r1, #0
 80008c8:	d100      	bne.n	80008cc <__aeabi_fadd+0x1a0>
 80008ca:	e08b      	b.n	80009e4 <__aeabi_fadd+0x2b8>
 80008cc:	2fff      	cmp	r7, #255	; 0xff
 80008ce:	d1bc      	bne.n	800084a <__aeabi_fadd+0x11e>
 80008d0:	e7a7      	b.n	8000822 <__aeabi_fadd+0xf6>
 80008d2:	000c      	movs	r4, r1
 80008d4:	4642      	mov	r2, r8
 80008d6:	0037      	movs	r7, r6
 80008d8:	2fff      	cmp	r7, #255	; 0xff
 80008da:	d0a2      	beq.n	8000822 <__aeabi_fadd+0xf6>
 80008dc:	0252      	lsls	r2, r2, #9
 80008de:	0a53      	lsrs	r3, r2, #9
 80008e0:	469c      	mov	ip, r3
 80008e2:	b2fb      	uxtb	r3, r7
 80008e4:	e781      	b.n	80007ea <__aeabi_fadd+0xbe>
 80008e6:	21fe      	movs	r1, #254	; 0xfe
 80008e8:	3701      	adds	r7, #1
 80008ea:	4239      	tst	r1, r7
 80008ec:	d165      	bne.n	80009ba <__aeabi_fadd+0x28e>
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d17e      	bne.n	80009f0 <__aeabi_fadd+0x2c4>
 80008f2:	2800      	cmp	r0, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x1cc>
 80008f6:	e0aa      	b.n	8000a4e <__aeabi_fadd+0x322>
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x1d2>
 80008fc:	e775      	b.n	80007ea <__aeabi_fadd+0xbe>
 80008fe:	002a      	movs	r2, r5
 8000900:	4452      	add	r2, sl
 8000902:	2700      	movs	r7, #0
 8000904:	0153      	lsls	r3, r2, #5
 8000906:	d502      	bpl.n	800090e <__aeabi_fadd+0x1e2>
 8000908:	4b55      	ldr	r3, [pc, #340]	; (8000a60 <__aeabi_fadd+0x334>)
 800090a:	3701      	adds	r7, #1
 800090c:	401a      	ands	r2, r3
 800090e:	0753      	lsls	r3, r2, #29
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x1e8>
 8000912:	e75a      	b.n	80007ca <__aeabi_fadd+0x9e>
 8000914:	08d2      	lsrs	r2, r2, #3
 8000916:	e7df      	b.n	80008d8 <__aeabi_fadd+0x1ac>
 8000918:	2200      	movs	r2, #0
 800091a:	23ff      	movs	r3, #255	; 0xff
 800091c:	4694      	mov	ip, r2
 800091e:	e764      	b.n	80007ea <__aeabi_fadd+0xbe>
 8000920:	2900      	cmp	r1, #0
 8000922:	d0e0      	beq.n	80008e6 <__aeabi_fadd+0x1ba>
 8000924:	1bf3      	subs	r3, r6, r7
 8000926:	2f00      	cmp	r7, #0
 8000928:	d03e      	beq.n	80009a8 <__aeabi_fadd+0x27c>
 800092a:	2eff      	cmp	r6, #255	; 0xff
 800092c:	d100      	bne.n	8000930 <__aeabi_fadd+0x204>
 800092e:	e777      	b.n	8000820 <__aeabi_fadd+0xf4>
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	0001      	movs	r1, r0
 8000934:	04d2      	lsls	r2, r2, #19
 8000936:	4311      	orrs	r1, r2
 8000938:	468a      	mov	sl, r1
 800093a:	2201      	movs	r2, #1
 800093c:	2b1b      	cmp	r3, #27
 800093e:	dc08      	bgt.n	8000952 <__aeabi_fadd+0x226>
 8000940:	4652      	mov	r2, sl
 8000942:	2120      	movs	r1, #32
 8000944:	4650      	mov	r0, sl
 8000946:	40da      	lsrs	r2, r3
 8000948:	1acb      	subs	r3, r1, r3
 800094a:	4098      	lsls	r0, r3
 800094c:	1e43      	subs	r3, r0, #1
 800094e:	4198      	sbcs	r0, r3
 8000950:	4302      	orrs	r2, r0
 8000952:	0037      	movs	r7, r6
 8000954:	1952      	adds	r2, r2, r5
 8000956:	e784      	b.n	8000862 <__aeabi_fadd+0x136>
 8000958:	4a41      	ldr	r2, [pc, #260]	; (8000a60 <__aeabi_fadd+0x334>)
 800095a:	1a3f      	subs	r7, r7, r0
 800095c:	4032      	ands	r2, r6
 800095e:	e732      	b.n	80007c6 <__aeabi_fadd+0x9a>
 8000960:	4653      	mov	r3, sl
 8000962:	1b5e      	subs	r6, r3, r5
 8000964:	0173      	lsls	r3, r6, #5
 8000966:	d42d      	bmi.n	80009c4 <__aeabi_fadd+0x298>
 8000968:	2e00      	cmp	r6, #0
 800096a:	d000      	beq.n	800096e <__aeabi_fadd+0x242>
 800096c:	e717      	b.n	800079e <__aeabi_fadd+0x72>
 800096e:	2200      	movs	r2, #0
 8000970:	2400      	movs	r4, #0
 8000972:	2300      	movs	r3, #0
 8000974:	4694      	mov	ip, r2
 8000976:	e738      	b.n	80007ea <__aeabi_fadd+0xbe>
 8000978:	2eff      	cmp	r6, #255	; 0xff
 800097a:	d100      	bne.n	800097e <__aeabi_fadd+0x252>
 800097c:	e74f      	b.n	800081e <__aeabi_fadd+0xf2>
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	4650      	mov	r0, sl
 8000982:	04d2      	lsls	r2, r2, #19
 8000984:	4310      	orrs	r0, r2
 8000986:	4682      	mov	sl, r0
 8000988:	2201      	movs	r2, #1
 800098a:	2b1b      	cmp	r3, #27
 800098c:	dc08      	bgt.n	80009a0 <__aeabi_fadd+0x274>
 800098e:	4652      	mov	r2, sl
 8000990:	2420      	movs	r4, #32
 8000992:	4650      	mov	r0, sl
 8000994:	40da      	lsrs	r2, r3
 8000996:	1ae3      	subs	r3, r4, r3
 8000998:	4098      	lsls	r0, r3
 800099a:	1e43      	subs	r3, r0, #1
 800099c:	4198      	sbcs	r0, r3
 800099e:	4302      	orrs	r2, r0
 80009a0:	000c      	movs	r4, r1
 80009a2:	0037      	movs	r7, r6
 80009a4:	1aaa      	subs	r2, r5, r2
 80009a6:	e6f5      	b.n	8000794 <__aeabi_fadd+0x68>
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d093      	beq.n	80008d4 <__aeabi_fadd+0x1a8>
 80009ac:	3b01      	subs	r3, #1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d04f      	beq.n	8000a52 <__aeabi_fadd+0x326>
 80009b2:	2eff      	cmp	r6, #255	; 0xff
 80009b4:	d1c1      	bne.n	800093a <__aeabi_fadd+0x20e>
 80009b6:	4642      	mov	r2, r8
 80009b8:	e733      	b.n	8000822 <__aeabi_fadd+0xf6>
 80009ba:	2fff      	cmp	r7, #255	; 0xff
 80009bc:	d0ac      	beq.n	8000918 <__aeabi_fadd+0x1ec>
 80009be:	4455      	add	r5, sl
 80009c0:	086a      	lsrs	r2, r5, #1
 80009c2:	e7a4      	b.n	800090e <__aeabi_fadd+0x1e2>
 80009c4:	4653      	mov	r3, sl
 80009c6:	000c      	movs	r4, r1
 80009c8:	1aee      	subs	r6, r5, r3
 80009ca:	e6e8      	b.n	800079e <__aeabi_fadd+0x72>
 80009cc:	4653      	mov	r3, sl
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d128      	bne.n	8000a24 <__aeabi_fadd+0x2f8>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d000      	beq.n	80009d8 <__aeabi_fadd+0x2ac>
 80009d6:	e722      	b.n	800081e <__aeabi_fadd+0xf2>
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	03db      	lsls	r3, r3, #15
 80009dc:	469c      	mov	ip, r3
 80009de:	2400      	movs	r4, #0
 80009e0:	23ff      	movs	r3, #255	; 0xff
 80009e2:	e702      	b.n	80007ea <__aeabi_fadd+0xbe>
 80009e4:	002a      	movs	r2, r5
 80009e6:	4452      	add	r2, sl
 80009e8:	e73b      	b.n	8000862 <__aeabi_fadd+0x136>
 80009ea:	4653      	mov	r3, sl
 80009ec:	1b5a      	subs	r2, r3, r5
 80009ee:	e6d1      	b.n	8000794 <__aeabi_fadd+0x68>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fadd+0x2ca>
 80009f4:	e714      	b.n	8000820 <__aeabi_fadd+0xf4>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_fadd+0x2d0>
 80009fa:	e712      	b.n	8000822 <__aeabi_fadd+0xf6>
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	03db      	lsls	r3, r3, #15
 8000a00:	421a      	tst	r2, r3
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fadd+0x2da>
 8000a04:	e70d      	b.n	8000822 <__aeabi_fadd+0xf6>
 8000a06:	4641      	mov	r1, r8
 8000a08:	4219      	tst	r1, r3
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fadd+0x2e2>
 8000a0c:	e709      	b.n	8000822 <__aeabi_fadd+0xf6>
 8000a0e:	4642      	mov	r2, r8
 8000a10:	e707      	b.n	8000822 <__aeabi_fadd+0xf6>
 8000a12:	000c      	movs	r4, r1
 8000a14:	0037      	movs	r7, r6
 8000a16:	1aaa      	subs	r2, r5, r2
 8000a18:	e6bc      	b.n	8000794 <__aeabi_fadd+0x68>
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d013      	beq.n	8000a46 <__aeabi_fadd+0x31a>
 8000a1e:	000c      	movs	r4, r1
 8000a20:	46c4      	mov	ip, r8
 8000a22:	e6e2      	b.n	80007ea <__aeabi_fadd+0xbe>
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	d100      	bne.n	8000a2a <__aeabi_fadd+0x2fe>
 8000a28:	e6fb      	b.n	8000822 <__aeabi_fadd+0xf6>
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	03db      	lsls	r3, r3, #15
 8000a2e:	421a      	tst	r2, r3
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fadd+0x308>
 8000a32:	e6f6      	b.n	8000822 <__aeabi_fadd+0xf6>
 8000a34:	4640      	mov	r0, r8
 8000a36:	4218      	tst	r0, r3
 8000a38:	d000      	beq.n	8000a3c <__aeabi_fadd+0x310>
 8000a3a:	e6f2      	b.n	8000822 <__aeabi_fadd+0xf6>
 8000a3c:	000c      	movs	r4, r1
 8000a3e:	e6ef      	b.n	8000820 <__aeabi_fadd+0xf4>
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d000      	beq.n	8000a46 <__aeabi_fadd+0x31a>
 8000a44:	e763      	b.n	800090e <__aeabi_fadd+0x1e2>
 8000a46:	2200      	movs	r2, #0
 8000a48:	2400      	movs	r4, #0
 8000a4a:	4694      	mov	ip, r2
 8000a4c:	e6cd      	b.n	80007ea <__aeabi_fadd+0xbe>
 8000a4e:	46c4      	mov	ip, r8
 8000a50:	e6cb      	b.n	80007ea <__aeabi_fadd+0xbe>
 8000a52:	002a      	movs	r2, r5
 8000a54:	0037      	movs	r7, r6
 8000a56:	4452      	add	r2, sl
 8000a58:	e703      	b.n	8000862 <__aeabi_fadd+0x136>
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	7dffffff 	.word	0x7dffffff
 8000a60:	fbffffff 	.word	0xfbffffff

08000a64 <__aeabi_fdiv>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	464f      	mov	r7, r9
 8000a68:	4646      	mov	r6, r8
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	0245      	lsls	r5, r0, #9
 8000a6e:	b5c0      	push	{r6, r7, lr}
 8000a70:	0047      	lsls	r7, r0, #1
 8000a72:	1c0c      	adds	r4, r1, #0
 8000a74:	0a6d      	lsrs	r5, r5, #9
 8000a76:	0e3f      	lsrs	r7, r7, #24
 8000a78:	0fc6      	lsrs	r6, r0, #31
 8000a7a:	2f00      	cmp	r7, #0
 8000a7c:	d066      	beq.n	8000b4c <__aeabi_fdiv+0xe8>
 8000a7e:	2fff      	cmp	r7, #255	; 0xff
 8000a80:	d06c      	beq.n	8000b5c <__aeabi_fdiv+0xf8>
 8000a82:	2300      	movs	r3, #0
 8000a84:	00ea      	lsls	r2, r5, #3
 8000a86:	2580      	movs	r5, #128	; 0x80
 8000a88:	4699      	mov	r9, r3
 8000a8a:	469a      	mov	sl, r3
 8000a8c:	04ed      	lsls	r5, r5, #19
 8000a8e:	4315      	orrs	r5, r2
 8000a90:	3f7f      	subs	r7, #127	; 0x7f
 8000a92:	0260      	lsls	r0, r4, #9
 8000a94:	0061      	lsls	r1, r4, #1
 8000a96:	0a43      	lsrs	r3, r0, #9
 8000a98:	4698      	mov	r8, r3
 8000a9a:	0e09      	lsrs	r1, r1, #24
 8000a9c:	0fe4      	lsrs	r4, r4, #31
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	d048      	beq.n	8000b34 <__aeabi_fdiv+0xd0>
 8000aa2:	29ff      	cmp	r1, #255	; 0xff
 8000aa4:	d010      	beq.n	8000ac8 <__aeabi_fdiv+0x64>
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	00d8      	lsls	r0, r3, #3
 8000aaa:	04d2      	lsls	r2, r2, #19
 8000aac:	4302      	orrs	r2, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	397f      	subs	r1, #127	; 0x7f
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	0033      	movs	r3, r6
 8000ab8:	1a7f      	subs	r7, r7, r1
 8000aba:	4302      	orrs	r2, r0
 8000abc:	496c      	ldr	r1, [pc, #432]	; (8000c70 <__aeabi_fdiv+0x20c>)
 8000abe:	0092      	lsls	r2, r2, #2
 8000ac0:	588a      	ldr	r2, [r1, r2]
 8000ac2:	4063      	eors	r3, r4
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4697      	mov	pc, r2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d16d      	bne.n	8000ba8 <__aeabi_fdiv+0x144>
 8000acc:	2002      	movs	r0, #2
 8000ace:	3fff      	subs	r7, #255	; 0xff
 8000ad0:	e033      	b.n	8000b3a <__aeabi_fdiv+0xd6>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	4698      	mov	r8, r3
 8000ad6:	0026      	movs	r6, r4
 8000ad8:	4645      	mov	r5, r8
 8000ada:	4682      	mov	sl, r0
 8000adc:	4653      	mov	r3, sl
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_fdiv+0x80>
 8000ae2:	e07f      	b.n	8000be4 <__aeabi_fdiv+0x180>
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d100      	bne.n	8000aea <__aeabi_fdiv+0x86>
 8000ae8:	e094      	b.n	8000c14 <__aeabi_fdiv+0x1b0>
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d017      	beq.n	8000b1e <__aeabi_fdiv+0xba>
 8000aee:	0038      	movs	r0, r7
 8000af0:	307f      	adds	r0, #127	; 0x7f
 8000af2:	2800      	cmp	r0, #0
 8000af4:	dd5f      	ble.n	8000bb6 <__aeabi_fdiv+0x152>
 8000af6:	076b      	lsls	r3, r5, #29
 8000af8:	d004      	beq.n	8000b04 <__aeabi_fdiv+0xa0>
 8000afa:	230f      	movs	r3, #15
 8000afc:	402b      	ands	r3, r5
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_fdiv+0xa0>
 8000b02:	3504      	adds	r5, #4
 8000b04:	012b      	lsls	r3, r5, #4
 8000b06:	d503      	bpl.n	8000b10 <__aeabi_fdiv+0xac>
 8000b08:	0038      	movs	r0, r7
 8000b0a:	4b5a      	ldr	r3, [pc, #360]	; (8000c74 <__aeabi_fdiv+0x210>)
 8000b0c:	3080      	adds	r0, #128	; 0x80
 8000b0e:	401d      	ands	r5, r3
 8000b10:	28fe      	cmp	r0, #254	; 0xfe
 8000b12:	dc67      	bgt.n	8000be4 <__aeabi_fdiv+0x180>
 8000b14:	01ad      	lsls	r5, r5, #6
 8000b16:	0a6d      	lsrs	r5, r5, #9
 8000b18:	b2c0      	uxtb	r0, r0
 8000b1a:	e002      	b.n	8000b22 <__aeabi_fdiv+0xbe>
 8000b1c:	001e      	movs	r6, r3
 8000b1e:	2000      	movs	r0, #0
 8000b20:	2500      	movs	r5, #0
 8000b22:	05c0      	lsls	r0, r0, #23
 8000b24:	4328      	orrs	r0, r5
 8000b26:	07f6      	lsls	r6, r6, #31
 8000b28:	4330      	orrs	r0, r6
 8000b2a:	bce0      	pop	{r5, r6, r7}
 8000b2c:	46ba      	mov	sl, r7
 8000b2e:	46b1      	mov	r9, r6
 8000b30:	46a8      	mov	r8, r5
 8000b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d12b      	bne.n	8000b90 <__aeabi_fdiv+0x12c>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	464a      	mov	r2, r9
 8000b3c:	0033      	movs	r3, r6
 8000b3e:	494e      	ldr	r1, [pc, #312]	; (8000c78 <__aeabi_fdiv+0x214>)
 8000b40:	4302      	orrs	r2, r0
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	588a      	ldr	r2, [r1, r2]
 8000b46:	4063      	eors	r3, r4
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4697      	mov	pc, r2
 8000b4c:	2d00      	cmp	r5, #0
 8000b4e:	d113      	bne.n	8000b78 <__aeabi_fdiv+0x114>
 8000b50:	2304      	movs	r3, #4
 8000b52:	4699      	mov	r9, r3
 8000b54:	3b03      	subs	r3, #3
 8000b56:	2700      	movs	r7, #0
 8000b58:	469a      	mov	sl, r3
 8000b5a:	e79a      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_fdiv+0x108>
 8000b60:	2308      	movs	r3, #8
 8000b62:	4699      	mov	r9, r3
 8000b64:	3b06      	subs	r3, #6
 8000b66:	27ff      	movs	r7, #255	; 0xff
 8000b68:	469a      	mov	sl, r3
 8000b6a:	e792      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	4699      	mov	r9, r3
 8000b70:	3b09      	subs	r3, #9
 8000b72:	27ff      	movs	r7, #255	; 0xff
 8000b74:	469a      	mov	sl, r3
 8000b76:	e78c      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b78:	0028      	movs	r0, r5
 8000b7a:	f002 fbbf 	bl	80032fc <__clzsi2>
 8000b7e:	2776      	movs	r7, #118	; 0x76
 8000b80:	1f43      	subs	r3, r0, #5
 8000b82:	409d      	lsls	r5, r3
 8000b84:	2300      	movs	r3, #0
 8000b86:	427f      	negs	r7, r7
 8000b88:	4699      	mov	r9, r3
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	1a3f      	subs	r7, r7, r0
 8000b8e:	e780      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b90:	0018      	movs	r0, r3
 8000b92:	f002 fbb3 	bl	80032fc <__clzsi2>
 8000b96:	4642      	mov	r2, r8
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	2176      	movs	r1, #118	; 0x76
 8000b9c:	409a      	lsls	r2, r3
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	4690      	mov	r8, r2
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e785      	b.n	8000ab4 <__aeabi_fdiv+0x50>
 8000ba8:	21ff      	movs	r1, #255	; 0xff
 8000baa:	2003      	movs	r0, #3
 8000bac:	e782      	b.n	8000ab4 <__aeabi_fdiv+0x50>
 8000bae:	001e      	movs	r6, r3
 8000bb0:	20ff      	movs	r0, #255	; 0xff
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	e7b5      	b.n	8000b22 <__aeabi_fdiv+0xbe>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	2b1b      	cmp	r3, #27
 8000bbc:	dcaf      	bgt.n	8000b1e <__aeabi_fdiv+0xba>
 8000bbe:	379e      	adds	r7, #158	; 0x9e
 8000bc0:	0029      	movs	r1, r5
 8000bc2:	40bd      	lsls	r5, r7
 8000bc4:	40d9      	lsrs	r1, r3
 8000bc6:	1e6a      	subs	r2, r5, #1
 8000bc8:	4195      	sbcs	r5, r2
 8000bca:	430d      	orrs	r5, r1
 8000bcc:	076b      	lsls	r3, r5, #29
 8000bce:	d004      	beq.n	8000bda <__aeabi_fdiv+0x176>
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	402b      	ands	r3, r5
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d000      	beq.n	8000bda <__aeabi_fdiv+0x176>
 8000bd8:	3504      	adds	r5, #4
 8000bda:	016b      	lsls	r3, r5, #5
 8000bdc:	d544      	bpl.n	8000c68 <__aeabi_fdiv+0x204>
 8000bde:	2001      	movs	r0, #1
 8000be0:	2500      	movs	r5, #0
 8000be2:	e79e      	b.n	8000b22 <__aeabi_fdiv+0xbe>
 8000be4:	20ff      	movs	r0, #255	; 0xff
 8000be6:	2500      	movs	r5, #0
 8000be8:	e79b      	b.n	8000b22 <__aeabi_fdiv+0xbe>
 8000bea:	2580      	movs	r5, #128	; 0x80
 8000bec:	2600      	movs	r6, #0
 8000bee:	20ff      	movs	r0, #255	; 0xff
 8000bf0:	03ed      	lsls	r5, r5, #15
 8000bf2:	e796      	b.n	8000b22 <__aeabi_fdiv+0xbe>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	2080      	movs	r0, #128	; 0x80
 8000bfa:	03c0      	lsls	r0, r0, #15
 8000bfc:	4205      	tst	r5, r0
 8000bfe:	d009      	beq.n	8000c14 <__aeabi_fdiv+0x1b0>
 8000c00:	4643      	mov	r3, r8
 8000c02:	4203      	tst	r3, r0
 8000c04:	d106      	bne.n	8000c14 <__aeabi_fdiv+0x1b0>
 8000c06:	4645      	mov	r5, r8
 8000c08:	4305      	orrs	r5, r0
 8000c0a:	026d      	lsls	r5, r5, #9
 8000c0c:	0026      	movs	r6, r4
 8000c0e:	20ff      	movs	r0, #255	; 0xff
 8000c10:	0a6d      	lsrs	r5, r5, #9
 8000c12:	e786      	b.n	8000b22 <__aeabi_fdiv+0xbe>
 8000c14:	2080      	movs	r0, #128	; 0x80
 8000c16:	03c0      	lsls	r0, r0, #15
 8000c18:	4305      	orrs	r5, r0
 8000c1a:	026d      	lsls	r5, r5, #9
 8000c1c:	20ff      	movs	r0, #255	; 0xff
 8000c1e:	0a6d      	lsrs	r5, r5, #9
 8000c20:	e77f      	b.n	8000b22 <__aeabi_fdiv+0xbe>
 8000c22:	4641      	mov	r1, r8
 8000c24:	016a      	lsls	r2, r5, #5
 8000c26:	0148      	lsls	r0, r1, #5
 8000c28:	4282      	cmp	r2, r0
 8000c2a:	d219      	bcs.n	8000c60 <__aeabi_fdiv+0x1fc>
 8000c2c:	211b      	movs	r1, #27
 8000c2e:	2500      	movs	r5, #0
 8000c30:	3f01      	subs	r7, #1
 8000c32:	2601      	movs	r6, #1
 8000c34:	0014      	movs	r4, r2
 8000c36:	006d      	lsls	r5, r5, #1
 8000c38:	0052      	lsls	r2, r2, #1
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	db01      	blt.n	8000c42 <__aeabi_fdiv+0x1de>
 8000c3e:	4290      	cmp	r0, r2
 8000c40:	d801      	bhi.n	8000c46 <__aeabi_fdiv+0x1e2>
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	4335      	orrs	r5, r6
 8000c46:	3901      	subs	r1, #1
 8000c48:	2900      	cmp	r1, #0
 8000c4a:	d1f3      	bne.n	8000c34 <__aeabi_fdiv+0x1d0>
 8000c4c:	1e50      	subs	r0, r2, #1
 8000c4e:	4182      	sbcs	r2, r0
 8000c50:	0038      	movs	r0, r7
 8000c52:	307f      	adds	r0, #127	; 0x7f
 8000c54:	001e      	movs	r6, r3
 8000c56:	4315      	orrs	r5, r2
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	dd00      	ble.n	8000c5e <__aeabi_fdiv+0x1fa>
 8000c5c:	e74b      	b.n	8000af6 <__aeabi_fdiv+0x92>
 8000c5e:	e7aa      	b.n	8000bb6 <__aeabi_fdiv+0x152>
 8000c60:	211a      	movs	r1, #26
 8000c62:	2501      	movs	r5, #1
 8000c64:	1a12      	subs	r2, r2, r0
 8000c66:	e7e4      	b.n	8000c32 <__aeabi_fdiv+0x1ce>
 8000c68:	01ad      	lsls	r5, r5, #6
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	0a6d      	lsrs	r5, r5, #9
 8000c6e:	e758      	b.n	8000b22 <__aeabi_fdiv+0xbe>
 8000c70:	0800d2e8 	.word	0x0800d2e8
 8000c74:	f7ffffff 	.word	0xf7ffffff
 8000c78:	0800d328 	.word	0x0800d328

08000c7c <__eqsf2>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	0042      	lsls	r2, r0, #1
 8000c80:	024e      	lsls	r6, r1, #9
 8000c82:	004c      	lsls	r4, r1, #1
 8000c84:	0245      	lsls	r5, r0, #9
 8000c86:	0a6d      	lsrs	r5, r5, #9
 8000c88:	0e12      	lsrs	r2, r2, #24
 8000c8a:	0fc3      	lsrs	r3, r0, #31
 8000c8c:	0a76      	lsrs	r6, r6, #9
 8000c8e:	0e24      	lsrs	r4, r4, #24
 8000c90:	0fc9      	lsrs	r1, r1, #31
 8000c92:	2aff      	cmp	r2, #255	; 0xff
 8000c94:	d00f      	beq.n	8000cb6 <__eqsf2+0x3a>
 8000c96:	2cff      	cmp	r4, #255	; 0xff
 8000c98:	d011      	beq.n	8000cbe <__eqsf2+0x42>
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	42a2      	cmp	r2, r4
 8000c9e:	d000      	beq.n	8000ca2 <__eqsf2+0x26>
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
 8000ca2:	42b5      	cmp	r5, r6
 8000ca4:	d1fc      	bne.n	8000ca0 <__eqsf2+0x24>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d00d      	beq.n	8000cc6 <__eqsf2+0x4a>
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d1f8      	bne.n	8000ca0 <__eqsf2+0x24>
 8000cae:	0028      	movs	r0, r5
 8000cb0:	1e45      	subs	r5, r0, #1
 8000cb2:	41a8      	sbcs	r0, r5
 8000cb4:	e7f4      	b.n	8000ca0 <__eqsf2+0x24>
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d1f1      	bne.n	8000ca0 <__eqsf2+0x24>
 8000cbc:	e7eb      	b.n	8000c96 <__eqsf2+0x1a>
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d1ed      	bne.n	8000ca0 <__eqsf2+0x24>
 8000cc4:	e7e9      	b.n	8000c9a <__eqsf2+0x1e>
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	e7ea      	b.n	8000ca0 <__eqsf2+0x24>
 8000cca:	46c0      	nop			; (mov r8, r8)

08000ccc <__gesf2>:
 8000ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cce:	0042      	lsls	r2, r0, #1
 8000cd0:	0246      	lsls	r6, r0, #9
 8000cd2:	024d      	lsls	r5, r1, #9
 8000cd4:	004c      	lsls	r4, r1, #1
 8000cd6:	0fc3      	lsrs	r3, r0, #31
 8000cd8:	0a76      	lsrs	r6, r6, #9
 8000cda:	0e12      	lsrs	r2, r2, #24
 8000cdc:	0a6d      	lsrs	r5, r5, #9
 8000cde:	0e24      	lsrs	r4, r4, #24
 8000ce0:	0fc8      	lsrs	r0, r1, #31
 8000ce2:	2aff      	cmp	r2, #255	; 0xff
 8000ce4:	d01f      	beq.n	8000d26 <__gesf2+0x5a>
 8000ce6:	2cff      	cmp	r4, #255	; 0xff
 8000ce8:	d010      	beq.n	8000d0c <__gesf2+0x40>
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d11f      	bne.n	8000d2e <__gesf2+0x62>
 8000cee:	4271      	negs	r1, r6
 8000cf0:	4171      	adcs	r1, r6
 8000cf2:	2c00      	cmp	r4, #0
 8000cf4:	d101      	bne.n	8000cfa <__gesf2+0x2e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d01e      	beq.n	8000d38 <__gesf2+0x6c>
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d10e      	bne.n	8000d1c <__gesf2+0x50>
 8000cfe:	4283      	cmp	r3, r0
 8000d00:	d01e      	beq.n	8000d40 <__gesf2+0x74>
 8000d02:	2102      	movs	r1, #2
 8000d04:	1e58      	subs	r0, r3, #1
 8000d06:	4008      	ands	r0, r1
 8000d08:	3801      	subs	r0, #1
 8000d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d126      	bne.n	8000d5e <__gesf2+0x92>
 8000d10:	2a00      	cmp	r2, #0
 8000d12:	d1f4      	bne.n	8000cfe <__gesf2+0x32>
 8000d14:	4271      	negs	r1, r6
 8000d16:	4171      	adcs	r1, r6
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d0f0      	beq.n	8000cfe <__gesf2+0x32>
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d1f4      	bne.n	8000d0a <__gesf2+0x3e>
 8000d20:	2001      	movs	r0, #1
 8000d22:	4240      	negs	r0, r0
 8000d24:	e7f1      	b.n	8000d0a <__gesf2+0x3e>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d119      	bne.n	8000d5e <__gesf2+0x92>
 8000d2a:	2cff      	cmp	r4, #255	; 0xff
 8000d2c:	d0ee      	beq.n	8000d0c <__gesf2+0x40>
 8000d2e:	2c00      	cmp	r4, #0
 8000d30:	d1e5      	bne.n	8000cfe <__gesf2+0x32>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d1e3      	bne.n	8000cfe <__gesf2+0x32>
 8000d36:	e7e4      	b.n	8000d02 <__gesf2+0x36>
 8000d38:	2000      	movs	r0, #0
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d0e5      	beq.n	8000d0a <__gesf2+0x3e>
 8000d3e:	e7e0      	b.n	8000d02 <__gesf2+0x36>
 8000d40:	42a2      	cmp	r2, r4
 8000d42:	dc05      	bgt.n	8000d50 <__gesf2+0x84>
 8000d44:	dbea      	blt.n	8000d1c <__gesf2+0x50>
 8000d46:	42ae      	cmp	r6, r5
 8000d48:	d802      	bhi.n	8000d50 <__gesf2+0x84>
 8000d4a:	d3e7      	bcc.n	8000d1c <__gesf2+0x50>
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	e7dc      	b.n	8000d0a <__gesf2+0x3e>
 8000d50:	4241      	negs	r1, r0
 8000d52:	4141      	adcs	r1, r0
 8000d54:	4248      	negs	r0, r1
 8000d56:	2102      	movs	r1, #2
 8000d58:	4008      	ands	r0, r1
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7d5      	b.n	8000d0a <__gesf2+0x3e>
 8000d5e:	2002      	movs	r0, #2
 8000d60:	4240      	negs	r0, r0
 8000d62:	e7d2      	b.n	8000d0a <__gesf2+0x3e>

08000d64 <__lesf2>:
 8000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d66:	0042      	lsls	r2, r0, #1
 8000d68:	0246      	lsls	r6, r0, #9
 8000d6a:	024d      	lsls	r5, r1, #9
 8000d6c:	004c      	lsls	r4, r1, #1
 8000d6e:	0fc3      	lsrs	r3, r0, #31
 8000d70:	0a76      	lsrs	r6, r6, #9
 8000d72:	0e12      	lsrs	r2, r2, #24
 8000d74:	0a6d      	lsrs	r5, r5, #9
 8000d76:	0e24      	lsrs	r4, r4, #24
 8000d78:	0fc8      	lsrs	r0, r1, #31
 8000d7a:	2aff      	cmp	r2, #255	; 0xff
 8000d7c:	d00d      	beq.n	8000d9a <__lesf2+0x36>
 8000d7e:	2cff      	cmp	r4, #255	; 0xff
 8000d80:	d00f      	beq.n	8000da2 <__lesf2+0x3e>
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d123      	bne.n	8000dce <__lesf2+0x6a>
 8000d86:	4271      	negs	r1, r6
 8000d88:	4171      	adcs	r1, r6
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d10f      	bne.n	8000dae <__lesf2+0x4a>
 8000d8e:	2d00      	cmp	r5, #0
 8000d90:	d10d      	bne.n	8000dae <__lesf2+0x4a>
 8000d92:	2000      	movs	r0, #0
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d014      	beq.n	8000dc2 <__lesf2+0x5e>
 8000d98:	e00d      	b.n	8000db6 <__lesf2+0x52>
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d110      	bne.n	8000dc0 <__lesf2+0x5c>
 8000d9e:	2cff      	cmp	r4, #255	; 0xff
 8000da0:	d115      	bne.n	8000dce <__lesf2+0x6a>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d10c      	bne.n	8000dc0 <__lesf2+0x5c>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d103      	bne.n	8000db2 <__lesf2+0x4e>
 8000daa:	4271      	negs	r1, r6
 8000dac:	4171      	adcs	r1, r6
 8000dae:	2900      	cmp	r1, #0
 8000db0:	d108      	bne.n	8000dc4 <__lesf2+0x60>
 8000db2:	4283      	cmp	r3, r0
 8000db4:	d010      	beq.n	8000dd8 <__lesf2+0x74>
 8000db6:	2102      	movs	r1, #2
 8000db8:	1e58      	subs	r0, r3, #1
 8000dba:	4008      	ands	r0, r1
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e000      	b.n	8000dc2 <__lesf2+0x5e>
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d1fc      	bne.n	8000dc2 <__lesf2+0x5e>
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4240      	negs	r0, r0
 8000dcc:	e7f9      	b.n	8000dc2 <__lesf2+0x5e>
 8000dce:	2c00      	cmp	r4, #0
 8000dd0:	d1ef      	bne.n	8000db2 <__lesf2+0x4e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d1ed      	bne.n	8000db2 <__lesf2+0x4e>
 8000dd6:	e7ee      	b.n	8000db6 <__lesf2+0x52>
 8000dd8:	42a2      	cmp	r2, r4
 8000dda:	dc05      	bgt.n	8000de8 <__lesf2+0x84>
 8000ddc:	dbf2      	blt.n	8000dc4 <__lesf2+0x60>
 8000dde:	42ae      	cmp	r6, r5
 8000de0:	d802      	bhi.n	8000de8 <__lesf2+0x84>
 8000de2:	d3ef      	bcc.n	8000dc4 <__lesf2+0x60>
 8000de4:	2000      	movs	r0, #0
 8000de6:	e7ec      	b.n	8000dc2 <__lesf2+0x5e>
 8000de8:	4241      	negs	r1, r0
 8000dea:	4141      	adcs	r1, r0
 8000dec:	4248      	negs	r0, r1
 8000dee:	2102      	movs	r1, #2
 8000df0:	4008      	ands	r0, r1
 8000df2:	3801      	subs	r0, #1
 8000df4:	e7e5      	b.n	8000dc2 <__lesf2+0x5e>
 8000df6:	46c0      	nop			; (mov r8, r8)

08000df8 <__aeabi_fmul>:
 8000df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfa:	4657      	mov	r7, sl
 8000dfc:	464e      	mov	r6, r9
 8000dfe:	4645      	mov	r5, r8
 8000e00:	46de      	mov	lr, fp
 8000e02:	0244      	lsls	r4, r0, #9
 8000e04:	b5e0      	push	{r5, r6, r7, lr}
 8000e06:	0045      	lsls	r5, r0, #1
 8000e08:	1c0f      	adds	r7, r1, #0
 8000e0a:	0a64      	lsrs	r4, r4, #9
 8000e0c:	0e2d      	lsrs	r5, r5, #24
 8000e0e:	0fc6      	lsrs	r6, r0, #31
 8000e10:	2d00      	cmp	r5, #0
 8000e12:	d047      	beq.n	8000ea4 <__aeabi_fmul+0xac>
 8000e14:	2dff      	cmp	r5, #255	; 0xff
 8000e16:	d04d      	beq.n	8000eb4 <__aeabi_fmul+0xbc>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2080      	movs	r0, #128	; 0x80
 8000e1c:	469a      	mov	sl, r3
 8000e1e:	469b      	mov	fp, r3
 8000e20:	00e4      	lsls	r4, r4, #3
 8000e22:	04c0      	lsls	r0, r0, #19
 8000e24:	4304      	orrs	r4, r0
 8000e26:	3d7f      	subs	r5, #127	; 0x7f
 8000e28:	0278      	lsls	r0, r7, #9
 8000e2a:	0a43      	lsrs	r3, r0, #9
 8000e2c:	4699      	mov	r9, r3
 8000e2e:	007a      	lsls	r2, r7, #1
 8000e30:	0ffb      	lsrs	r3, r7, #31
 8000e32:	4698      	mov	r8, r3
 8000e34:	0e12      	lsrs	r2, r2, #24
 8000e36:	464b      	mov	r3, r9
 8000e38:	d044      	beq.n	8000ec4 <__aeabi_fmul+0xcc>
 8000e3a:	2aff      	cmp	r2, #255	; 0xff
 8000e3c:	d011      	beq.n	8000e62 <__aeabi_fmul+0x6a>
 8000e3e:	00d8      	lsls	r0, r3, #3
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	04db      	lsls	r3, r3, #19
 8000e44:	4303      	orrs	r3, r0
 8000e46:	4699      	mov	r9, r3
 8000e48:	2000      	movs	r0, #0
 8000e4a:	3a7f      	subs	r2, #127	; 0x7f
 8000e4c:	18ad      	adds	r5, r5, r2
 8000e4e:	4647      	mov	r7, r8
 8000e50:	4653      	mov	r3, sl
 8000e52:	4077      	eors	r7, r6
 8000e54:	1c69      	adds	r1, r5, #1
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	d83f      	bhi.n	8000eda <__aeabi_fmul+0xe2>
 8000e5a:	4a72      	ldr	r2, [pc, #456]	; (8001024 <__aeabi_fmul+0x22c>)
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	58d3      	ldr	r3, [r2, r3]
 8000e60:	469f      	mov	pc, r3
 8000e62:	35ff      	adds	r5, #255	; 0xff
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d000      	beq.n	8000e6a <__aeabi_fmul+0x72>
 8000e68:	e079      	b.n	8000f5e <__aeabi_fmul+0x166>
 8000e6a:	4652      	mov	r2, sl
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	4692      	mov	sl, r2
 8000e72:	2002      	movs	r0, #2
 8000e74:	e7eb      	b.n	8000e4e <__aeabi_fmul+0x56>
 8000e76:	4647      	mov	r7, r8
 8000e78:	464c      	mov	r4, r9
 8000e7a:	4683      	mov	fp, r0
 8000e7c:	465b      	mov	r3, fp
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d028      	beq.n	8000ed4 <__aeabi_fmul+0xdc>
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d100      	bne.n	8000e88 <__aeabi_fmul+0x90>
 8000e86:	e0c6      	b.n	8001016 <__aeabi_fmul+0x21e>
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d14f      	bne.n	8000f2c <__aeabi_fmul+0x134>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	2400      	movs	r4, #0
 8000e90:	05c0      	lsls	r0, r0, #23
 8000e92:	07ff      	lsls	r7, r7, #31
 8000e94:	4320      	orrs	r0, r4
 8000e96:	4338      	orrs	r0, r7
 8000e98:	bcf0      	pop	{r4, r5, r6, r7}
 8000e9a:	46bb      	mov	fp, r7
 8000e9c:	46b2      	mov	sl, r6
 8000e9e:	46a9      	mov	r9, r5
 8000ea0:	46a0      	mov	r8, r4
 8000ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d171      	bne.n	8000f8c <__aeabi_fmul+0x194>
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	469a      	mov	sl, r3
 8000eac:	3b03      	subs	r3, #3
 8000eae:	2500      	movs	r5, #0
 8000eb0:	469b      	mov	fp, r3
 8000eb2:	e7b9      	b.n	8000e28 <__aeabi_fmul+0x30>
 8000eb4:	2c00      	cmp	r4, #0
 8000eb6:	d163      	bne.n	8000f80 <__aeabi_fmul+0x188>
 8000eb8:	2308      	movs	r3, #8
 8000eba:	469a      	mov	sl, r3
 8000ebc:	3b06      	subs	r3, #6
 8000ebe:	25ff      	movs	r5, #255	; 0xff
 8000ec0:	469b      	mov	fp, r3
 8000ec2:	e7b1      	b.n	8000e28 <__aeabi_fmul+0x30>
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d150      	bne.n	8000f6a <__aeabi_fmul+0x172>
 8000ec8:	4652      	mov	r2, sl
 8000eca:	3301      	adds	r3, #1
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	4692      	mov	sl, r2
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	e7bc      	b.n	8000e4e <__aeabi_fmul+0x56>
 8000ed4:	20ff      	movs	r0, #255	; 0xff
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	e7da      	b.n	8000e90 <__aeabi_fmul+0x98>
 8000eda:	4648      	mov	r0, r9
 8000edc:	0c26      	lsrs	r6, r4, #16
 8000ede:	0424      	lsls	r4, r4, #16
 8000ee0:	0c22      	lsrs	r2, r4, #16
 8000ee2:	0404      	lsls	r4, r0, #16
 8000ee4:	0c24      	lsrs	r4, r4, #16
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	0020      	movs	r0, r4
 8000eea:	0c1b      	lsrs	r3, r3, #16
 8000eec:	4350      	muls	r0, r2
 8000eee:	4374      	muls	r4, r6
 8000ef0:	435a      	muls	r2, r3
 8000ef2:	435e      	muls	r6, r3
 8000ef4:	1912      	adds	r2, r2, r4
 8000ef6:	0c03      	lsrs	r3, r0, #16
 8000ef8:	189b      	adds	r3, r3, r2
 8000efa:	429c      	cmp	r4, r3
 8000efc:	d903      	bls.n	8000f06 <__aeabi_fmul+0x10e>
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	0252      	lsls	r2, r2, #9
 8000f02:	4694      	mov	ip, r2
 8000f04:	4466      	add	r6, ip
 8000f06:	0400      	lsls	r0, r0, #16
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	0c00      	lsrs	r0, r0, #16
 8000f0c:	1812      	adds	r2, r2, r0
 8000f0e:	0194      	lsls	r4, r2, #6
 8000f10:	1e60      	subs	r0, r4, #1
 8000f12:	4184      	sbcs	r4, r0
 8000f14:	0c1b      	lsrs	r3, r3, #16
 8000f16:	0e92      	lsrs	r2, r2, #26
 8000f18:	199b      	adds	r3, r3, r6
 8000f1a:	4314      	orrs	r4, r2
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	431c      	orrs	r4, r3
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	d572      	bpl.n	800100a <__aeabi_fmul+0x212>
 8000f24:	2001      	movs	r0, #1
 8000f26:	0863      	lsrs	r3, r4, #1
 8000f28:	4004      	ands	r4, r0
 8000f2a:	431c      	orrs	r4, r3
 8000f2c:	0008      	movs	r0, r1
 8000f2e:	307f      	adds	r0, #127	; 0x7f
 8000f30:	2800      	cmp	r0, #0
 8000f32:	dd3c      	ble.n	8000fae <__aeabi_fmul+0x1b6>
 8000f34:	0763      	lsls	r3, r4, #29
 8000f36:	d004      	beq.n	8000f42 <__aeabi_fmul+0x14a>
 8000f38:	230f      	movs	r3, #15
 8000f3a:	4023      	ands	r3, r4
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d000      	beq.n	8000f42 <__aeabi_fmul+0x14a>
 8000f40:	3404      	adds	r4, #4
 8000f42:	0123      	lsls	r3, r4, #4
 8000f44:	d503      	bpl.n	8000f4e <__aeabi_fmul+0x156>
 8000f46:	3180      	adds	r1, #128	; 0x80
 8000f48:	0008      	movs	r0, r1
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <__aeabi_fmul+0x230>)
 8000f4c:	401c      	ands	r4, r3
 8000f4e:	28fe      	cmp	r0, #254	; 0xfe
 8000f50:	dcc0      	bgt.n	8000ed4 <__aeabi_fmul+0xdc>
 8000f52:	01a4      	lsls	r4, r4, #6
 8000f54:	0a64      	lsrs	r4, r4, #9
 8000f56:	b2c0      	uxtb	r0, r0
 8000f58:	e79a      	b.n	8000e90 <__aeabi_fmul+0x98>
 8000f5a:	0037      	movs	r7, r6
 8000f5c:	e78e      	b.n	8000e7c <__aeabi_fmul+0x84>
 8000f5e:	4652      	mov	r2, sl
 8000f60:	2303      	movs	r3, #3
 8000f62:	431a      	orrs	r2, r3
 8000f64:	4692      	mov	sl, r2
 8000f66:	2003      	movs	r0, #3
 8000f68:	e771      	b.n	8000e4e <__aeabi_fmul+0x56>
 8000f6a:	4648      	mov	r0, r9
 8000f6c:	f002 f9c6 	bl	80032fc <__clzsi2>
 8000f70:	464a      	mov	r2, r9
 8000f72:	1f43      	subs	r3, r0, #5
 8000f74:	409a      	lsls	r2, r3
 8000f76:	1a2d      	subs	r5, r5, r0
 8000f78:	4691      	mov	r9, r2
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	3d76      	subs	r5, #118	; 0x76
 8000f7e:	e766      	b.n	8000e4e <__aeabi_fmul+0x56>
 8000f80:	230c      	movs	r3, #12
 8000f82:	469a      	mov	sl, r3
 8000f84:	3b09      	subs	r3, #9
 8000f86:	25ff      	movs	r5, #255	; 0xff
 8000f88:	469b      	mov	fp, r3
 8000f8a:	e74d      	b.n	8000e28 <__aeabi_fmul+0x30>
 8000f8c:	0020      	movs	r0, r4
 8000f8e:	f002 f9b5 	bl	80032fc <__clzsi2>
 8000f92:	2576      	movs	r5, #118	; 0x76
 8000f94:	1f43      	subs	r3, r0, #5
 8000f96:	409c      	lsls	r4, r3
 8000f98:	2300      	movs	r3, #0
 8000f9a:	426d      	negs	r5, r5
 8000f9c:	469a      	mov	sl, r3
 8000f9e:	469b      	mov	fp, r3
 8000fa0:	1a2d      	subs	r5, r5, r0
 8000fa2:	e741      	b.n	8000e28 <__aeabi_fmul+0x30>
 8000fa4:	2480      	movs	r4, #128	; 0x80
 8000fa6:	2700      	movs	r7, #0
 8000fa8:	20ff      	movs	r0, #255	; 0xff
 8000faa:	03e4      	lsls	r4, r4, #15
 8000fac:	e770      	b.n	8000e90 <__aeabi_fmul+0x98>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	1a1b      	subs	r3, r3, r0
 8000fb2:	2b1b      	cmp	r3, #27
 8000fb4:	dd00      	ble.n	8000fb8 <__aeabi_fmul+0x1c0>
 8000fb6:	e769      	b.n	8000e8c <__aeabi_fmul+0x94>
 8000fb8:	319e      	adds	r1, #158	; 0x9e
 8000fba:	0020      	movs	r0, r4
 8000fbc:	408c      	lsls	r4, r1
 8000fbe:	40d8      	lsrs	r0, r3
 8000fc0:	1e63      	subs	r3, r4, #1
 8000fc2:	419c      	sbcs	r4, r3
 8000fc4:	4304      	orrs	r4, r0
 8000fc6:	0763      	lsls	r3, r4, #29
 8000fc8:	d004      	beq.n	8000fd4 <__aeabi_fmul+0x1dc>
 8000fca:	230f      	movs	r3, #15
 8000fcc:	4023      	ands	r3, r4
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d000      	beq.n	8000fd4 <__aeabi_fmul+0x1dc>
 8000fd2:	3404      	adds	r4, #4
 8000fd4:	0163      	lsls	r3, r4, #5
 8000fd6:	d51a      	bpl.n	800100e <__aeabi_fmul+0x216>
 8000fd8:	2001      	movs	r0, #1
 8000fda:	2400      	movs	r4, #0
 8000fdc:	e758      	b.n	8000e90 <__aeabi_fmul+0x98>
 8000fde:	2080      	movs	r0, #128	; 0x80
 8000fe0:	03c0      	lsls	r0, r0, #15
 8000fe2:	4204      	tst	r4, r0
 8000fe4:	d009      	beq.n	8000ffa <__aeabi_fmul+0x202>
 8000fe6:	464b      	mov	r3, r9
 8000fe8:	4203      	tst	r3, r0
 8000fea:	d106      	bne.n	8000ffa <__aeabi_fmul+0x202>
 8000fec:	464c      	mov	r4, r9
 8000fee:	4304      	orrs	r4, r0
 8000ff0:	0264      	lsls	r4, r4, #9
 8000ff2:	4647      	mov	r7, r8
 8000ff4:	20ff      	movs	r0, #255	; 0xff
 8000ff6:	0a64      	lsrs	r4, r4, #9
 8000ff8:	e74a      	b.n	8000e90 <__aeabi_fmul+0x98>
 8000ffa:	2080      	movs	r0, #128	; 0x80
 8000ffc:	03c0      	lsls	r0, r0, #15
 8000ffe:	4304      	orrs	r4, r0
 8001000:	0264      	lsls	r4, r4, #9
 8001002:	0037      	movs	r7, r6
 8001004:	20ff      	movs	r0, #255	; 0xff
 8001006:	0a64      	lsrs	r4, r4, #9
 8001008:	e742      	b.n	8000e90 <__aeabi_fmul+0x98>
 800100a:	0029      	movs	r1, r5
 800100c:	e78e      	b.n	8000f2c <__aeabi_fmul+0x134>
 800100e:	01a4      	lsls	r4, r4, #6
 8001010:	2000      	movs	r0, #0
 8001012:	0a64      	lsrs	r4, r4, #9
 8001014:	e73c      	b.n	8000e90 <__aeabi_fmul+0x98>
 8001016:	2080      	movs	r0, #128	; 0x80
 8001018:	03c0      	lsls	r0, r0, #15
 800101a:	4304      	orrs	r4, r0
 800101c:	0264      	lsls	r4, r4, #9
 800101e:	20ff      	movs	r0, #255	; 0xff
 8001020:	0a64      	lsrs	r4, r4, #9
 8001022:	e735      	b.n	8000e90 <__aeabi_fmul+0x98>
 8001024:	0800d368 	.word	0x0800d368
 8001028:	f7ffffff 	.word	0xf7ffffff

0800102c <__aeabi_fsub>:
 800102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102e:	4646      	mov	r6, r8
 8001030:	46d6      	mov	lr, sl
 8001032:	464f      	mov	r7, r9
 8001034:	0243      	lsls	r3, r0, #9
 8001036:	0a5b      	lsrs	r3, r3, #9
 8001038:	00da      	lsls	r2, r3, #3
 800103a:	4694      	mov	ip, r2
 800103c:	024a      	lsls	r2, r1, #9
 800103e:	b5c0      	push	{r6, r7, lr}
 8001040:	0044      	lsls	r4, r0, #1
 8001042:	0a56      	lsrs	r6, r2, #9
 8001044:	1c05      	adds	r5, r0, #0
 8001046:	46b0      	mov	r8, r6
 8001048:	0e24      	lsrs	r4, r4, #24
 800104a:	004e      	lsls	r6, r1, #1
 800104c:	0992      	lsrs	r2, r2, #6
 800104e:	001f      	movs	r7, r3
 8001050:	0020      	movs	r0, r4
 8001052:	4692      	mov	sl, r2
 8001054:	0fed      	lsrs	r5, r5, #31
 8001056:	0e36      	lsrs	r6, r6, #24
 8001058:	0fc9      	lsrs	r1, r1, #31
 800105a:	2eff      	cmp	r6, #255	; 0xff
 800105c:	d100      	bne.n	8001060 <__aeabi_fsub+0x34>
 800105e:	e07f      	b.n	8001160 <__aeabi_fsub+0x134>
 8001060:	2201      	movs	r2, #1
 8001062:	4051      	eors	r1, r2
 8001064:	428d      	cmp	r5, r1
 8001066:	d051      	beq.n	800110c <__aeabi_fsub+0xe0>
 8001068:	1ba2      	subs	r2, r4, r6
 800106a:	4691      	mov	r9, r2
 800106c:	2a00      	cmp	r2, #0
 800106e:	dc00      	bgt.n	8001072 <__aeabi_fsub+0x46>
 8001070:	e07e      	b.n	8001170 <__aeabi_fsub+0x144>
 8001072:	2e00      	cmp	r6, #0
 8001074:	d100      	bne.n	8001078 <__aeabi_fsub+0x4c>
 8001076:	e099      	b.n	80011ac <__aeabi_fsub+0x180>
 8001078:	2cff      	cmp	r4, #255	; 0xff
 800107a:	d100      	bne.n	800107e <__aeabi_fsub+0x52>
 800107c:	e08c      	b.n	8001198 <__aeabi_fsub+0x16c>
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	4652      	mov	r2, sl
 8001082:	04db      	lsls	r3, r3, #19
 8001084:	431a      	orrs	r2, r3
 8001086:	4692      	mov	sl, r2
 8001088:	464a      	mov	r2, r9
 800108a:	2301      	movs	r3, #1
 800108c:	2a1b      	cmp	r2, #27
 800108e:	dc08      	bgt.n	80010a2 <__aeabi_fsub+0x76>
 8001090:	4653      	mov	r3, sl
 8001092:	2120      	movs	r1, #32
 8001094:	40d3      	lsrs	r3, r2
 8001096:	1a89      	subs	r1, r1, r2
 8001098:	4652      	mov	r2, sl
 800109a:	408a      	lsls	r2, r1
 800109c:	1e51      	subs	r1, r2, #1
 800109e:	418a      	sbcs	r2, r1
 80010a0:	4313      	orrs	r3, r2
 80010a2:	4662      	mov	r2, ip
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	015a      	lsls	r2, r3, #5
 80010a8:	d400      	bmi.n	80010ac <__aeabi_fsub+0x80>
 80010aa:	e0f3      	b.n	8001294 <__aeabi_fsub+0x268>
 80010ac:	019b      	lsls	r3, r3, #6
 80010ae:	099e      	lsrs	r6, r3, #6
 80010b0:	0030      	movs	r0, r6
 80010b2:	f002 f923 	bl	80032fc <__clzsi2>
 80010b6:	3805      	subs	r0, #5
 80010b8:	4086      	lsls	r6, r0
 80010ba:	4284      	cmp	r4, r0
 80010bc:	dd00      	ble.n	80010c0 <__aeabi_fsub+0x94>
 80010be:	e0f7      	b.n	80012b0 <__aeabi_fsub+0x284>
 80010c0:	0032      	movs	r2, r6
 80010c2:	1b04      	subs	r4, r0, r4
 80010c4:	2020      	movs	r0, #32
 80010c6:	3401      	adds	r4, #1
 80010c8:	40e2      	lsrs	r2, r4
 80010ca:	1b04      	subs	r4, r0, r4
 80010cc:	40a6      	lsls	r6, r4
 80010ce:	0033      	movs	r3, r6
 80010d0:	1e5e      	subs	r6, r3, #1
 80010d2:	41b3      	sbcs	r3, r6
 80010d4:	2400      	movs	r4, #0
 80010d6:	4313      	orrs	r3, r2
 80010d8:	075a      	lsls	r2, r3, #29
 80010da:	d004      	beq.n	80010e6 <__aeabi_fsub+0xba>
 80010dc:	220f      	movs	r2, #15
 80010de:	401a      	ands	r2, r3
 80010e0:	2a04      	cmp	r2, #4
 80010e2:	d000      	beq.n	80010e6 <__aeabi_fsub+0xba>
 80010e4:	3304      	adds	r3, #4
 80010e6:	015a      	lsls	r2, r3, #5
 80010e8:	d400      	bmi.n	80010ec <__aeabi_fsub+0xc0>
 80010ea:	e0d6      	b.n	800129a <__aeabi_fsub+0x26e>
 80010ec:	1c62      	adds	r2, r4, #1
 80010ee:	2cfe      	cmp	r4, #254	; 0xfe
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0xc8>
 80010f2:	e0da      	b.n	80012aa <__aeabi_fsub+0x27e>
 80010f4:	019b      	lsls	r3, r3, #6
 80010f6:	0a5f      	lsrs	r7, r3, #9
 80010f8:	b2d0      	uxtb	r0, r2
 80010fa:	05c0      	lsls	r0, r0, #23
 80010fc:	4338      	orrs	r0, r7
 80010fe:	07ed      	lsls	r5, r5, #31
 8001100:	4328      	orrs	r0, r5
 8001102:	bce0      	pop	{r5, r6, r7}
 8001104:	46ba      	mov	sl, r7
 8001106:	46b1      	mov	r9, r6
 8001108:	46a8      	mov	r8, r5
 800110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800110c:	1ba2      	subs	r2, r4, r6
 800110e:	4691      	mov	r9, r2
 8001110:	2a00      	cmp	r2, #0
 8001112:	dd63      	ble.n	80011dc <__aeabi_fsub+0x1b0>
 8001114:	2e00      	cmp	r6, #0
 8001116:	d100      	bne.n	800111a <__aeabi_fsub+0xee>
 8001118:	e099      	b.n	800124e <__aeabi_fsub+0x222>
 800111a:	2cff      	cmp	r4, #255	; 0xff
 800111c:	d03c      	beq.n	8001198 <__aeabi_fsub+0x16c>
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	4652      	mov	r2, sl
 8001122:	04db      	lsls	r3, r3, #19
 8001124:	431a      	orrs	r2, r3
 8001126:	4692      	mov	sl, r2
 8001128:	464a      	mov	r2, r9
 800112a:	2301      	movs	r3, #1
 800112c:	2a1b      	cmp	r2, #27
 800112e:	dc08      	bgt.n	8001142 <__aeabi_fsub+0x116>
 8001130:	4653      	mov	r3, sl
 8001132:	2120      	movs	r1, #32
 8001134:	40d3      	lsrs	r3, r2
 8001136:	1a89      	subs	r1, r1, r2
 8001138:	4652      	mov	r2, sl
 800113a:	408a      	lsls	r2, r1
 800113c:	1e51      	subs	r1, r2, #1
 800113e:	418a      	sbcs	r2, r1
 8001140:	4313      	orrs	r3, r2
 8001142:	4463      	add	r3, ip
 8001144:	015a      	lsls	r2, r3, #5
 8001146:	d400      	bmi.n	800114a <__aeabi_fsub+0x11e>
 8001148:	e0a4      	b.n	8001294 <__aeabi_fsub+0x268>
 800114a:	3401      	adds	r4, #1
 800114c:	2cff      	cmp	r4, #255	; 0xff
 800114e:	d100      	bne.n	8001152 <__aeabi_fsub+0x126>
 8001150:	e0ab      	b.n	80012aa <__aeabi_fsub+0x27e>
 8001152:	2201      	movs	r2, #1
 8001154:	4997      	ldr	r1, [pc, #604]	; (80013b4 <__aeabi_fsub+0x388>)
 8001156:	401a      	ands	r2, r3
 8001158:	085b      	lsrs	r3, r3, #1
 800115a:	400b      	ands	r3, r1
 800115c:	4313      	orrs	r3, r2
 800115e:	e7bb      	b.n	80010d8 <__aeabi_fsub+0xac>
 8001160:	2a00      	cmp	r2, #0
 8001162:	d032      	beq.n	80011ca <__aeabi_fsub+0x19e>
 8001164:	428d      	cmp	r5, r1
 8001166:	d035      	beq.n	80011d4 <__aeabi_fsub+0x1a8>
 8001168:	22ff      	movs	r2, #255	; 0xff
 800116a:	4252      	negs	r2, r2
 800116c:	4691      	mov	r9, r2
 800116e:	44a1      	add	r9, r4
 8001170:	464a      	mov	r2, r9
 8001172:	2a00      	cmp	r2, #0
 8001174:	d051      	beq.n	800121a <__aeabi_fsub+0x1ee>
 8001176:	1b30      	subs	r0, r6, r4
 8001178:	2c00      	cmp	r4, #0
 800117a:	d000      	beq.n	800117e <__aeabi_fsub+0x152>
 800117c:	e09c      	b.n	80012b8 <__aeabi_fsub+0x28c>
 800117e:	4663      	mov	r3, ip
 8001180:	2b00      	cmp	r3, #0
 8001182:	d100      	bne.n	8001186 <__aeabi_fsub+0x15a>
 8001184:	e0df      	b.n	8001346 <__aeabi_fsub+0x31a>
 8001186:	3801      	subs	r0, #1
 8001188:	2800      	cmp	r0, #0
 800118a:	d100      	bne.n	800118e <__aeabi_fsub+0x162>
 800118c:	e0f7      	b.n	800137e <__aeabi_fsub+0x352>
 800118e:	2eff      	cmp	r6, #255	; 0xff
 8001190:	d000      	beq.n	8001194 <__aeabi_fsub+0x168>
 8001192:	e099      	b.n	80012c8 <__aeabi_fsub+0x29c>
 8001194:	000d      	movs	r5, r1
 8001196:	4643      	mov	r3, r8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x172>
 800119c:	e085      	b.n	80012aa <__aeabi_fsub+0x27e>
 800119e:	2780      	movs	r7, #128	; 0x80
 80011a0:	03ff      	lsls	r7, r7, #15
 80011a2:	431f      	orrs	r7, r3
 80011a4:	027f      	lsls	r7, r7, #9
 80011a6:	20ff      	movs	r0, #255	; 0xff
 80011a8:	0a7f      	lsrs	r7, r7, #9
 80011aa:	e7a6      	b.n	80010fa <__aeabi_fsub+0xce>
 80011ac:	4652      	mov	r2, sl
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	d074      	beq.n	800129c <__aeabi_fsub+0x270>
 80011b2:	2201      	movs	r2, #1
 80011b4:	4252      	negs	r2, r2
 80011b6:	4690      	mov	r8, r2
 80011b8:	44c1      	add	r9, r8
 80011ba:	464a      	mov	r2, r9
 80011bc:	2a00      	cmp	r2, #0
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x196>
 80011c0:	e0c8      	b.n	8001354 <__aeabi_fsub+0x328>
 80011c2:	2cff      	cmp	r4, #255	; 0xff
 80011c4:	d000      	beq.n	80011c8 <__aeabi_fsub+0x19c>
 80011c6:	e75f      	b.n	8001088 <__aeabi_fsub+0x5c>
 80011c8:	e7e6      	b.n	8001198 <__aeabi_fsub+0x16c>
 80011ca:	2201      	movs	r2, #1
 80011cc:	4051      	eors	r1, r2
 80011ce:	42a9      	cmp	r1, r5
 80011d0:	d000      	beq.n	80011d4 <__aeabi_fsub+0x1a8>
 80011d2:	e749      	b.n	8001068 <__aeabi_fsub+0x3c>
 80011d4:	22ff      	movs	r2, #255	; 0xff
 80011d6:	4252      	negs	r2, r2
 80011d8:	4691      	mov	r9, r2
 80011da:	44a1      	add	r9, r4
 80011dc:	464a      	mov	r2, r9
 80011de:	2a00      	cmp	r2, #0
 80011e0:	d043      	beq.n	800126a <__aeabi_fsub+0x23e>
 80011e2:	1b31      	subs	r1, r6, r4
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_fsub+0x1be>
 80011e8:	e08c      	b.n	8001304 <__aeabi_fsub+0x2d8>
 80011ea:	2eff      	cmp	r6, #255	; 0xff
 80011ec:	d100      	bne.n	80011f0 <__aeabi_fsub+0x1c4>
 80011ee:	e092      	b.n	8001316 <__aeabi_fsub+0x2ea>
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	4662      	mov	r2, ip
 80011f4:	04db      	lsls	r3, r3, #19
 80011f6:	431a      	orrs	r2, r3
 80011f8:	4694      	mov	ip, r2
 80011fa:	2301      	movs	r3, #1
 80011fc:	291b      	cmp	r1, #27
 80011fe:	dc09      	bgt.n	8001214 <__aeabi_fsub+0x1e8>
 8001200:	2020      	movs	r0, #32
 8001202:	4663      	mov	r3, ip
 8001204:	4662      	mov	r2, ip
 8001206:	40cb      	lsrs	r3, r1
 8001208:	1a41      	subs	r1, r0, r1
 800120a:	408a      	lsls	r2, r1
 800120c:	0011      	movs	r1, r2
 800120e:	1e48      	subs	r0, r1, #1
 8001210:	4181      	sbcs	r1, r0
 8001212:	430b      	orrs	r3, r1
 8001214:	0034      	movs	r4, r6
 8001216:	4453      	add	r3, sl
 8001218:	e794      	b.n	8001144 <__aeabi_fsub+0x118>
 800121a:	22fe      	movs	r2, #254	; 0xfe
 800121c:	1c66      	adds	r6, r4, #1
 800121e:	4232      	tst	r2, r6
 8001220:	d164      	bne.n	80012ec <__aeabi_fsub+0x2c0>
 8001222:	2c00      	cmp	r4, #0
 8001224:	d000      	beq.n	8001228 <__aeabi_fsub+0x1fc>
 8001226:	e082      	b.n	800132e <__aeabi_fsub+0x302>
 8001228:	4663      	mov	r3, ip
 800122a:	2b00      	cmp	r3, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_fsub+0x204>
 800122e:	e0ab      	b.n	8001388 <__aeabi_fsub+0x35c>
 8001230:	4653      	mov	r3, sl
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <__aeabi_fsub+0x20c>
 8001236:	e760      	b.n	80010fa <__aeabi_fsub+0xce>
 8001238:	4663      	mov	r3, ip
 800123a:	4652      	mov	r2, sl
 800123c:	1a9b      	subs	r3, r3, r2
 800123e:	015a      	lsls	r2, r3, #5
 8001240:	d400      	bmi.n	8001244 <__aeabi_fsub+0x218>
 8001242:	e0aa      	b.n	800139a <__aeabi_fsub+0x36e>
 8001244:	4663      	mov	r3, ip
 8001246:	4652      	mov	r2, sl
 8001248:	000d      	movs	r5, r1
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	e744      	b.n	80010d8 <__aeabi_fsub+0xac>
 800124e:	4652      	mov	r2, sl
 8001250:	2a00      	cmp	r2, #0
 8001252:	d023      	beq.n	800129c <__aeabi_fsub+0x270>
 8001254:	2201      	movs	r2, #1
 8001256:	4252      	negs	r2, r2
 8001258:	4690      	mov	r8, r2
 800125a:	44c1      	add	r9, r8
 800125c:	464a      	mov	r2, r9
 800125e:	2a00      	cmp	r2, #0
 8001260:	d075      	beq.n	800134e <__aeabi_fsub+0x322>
 8001262:	2cff      	cmp	r4, #255	; 0xff
 8001264:	d000      	beq.n	8001268 <__aeabi_fsub+0x23c>
 8001266:	e75f      	b.n	8001128 <__aeabi_fsub+0xfc>
 8001268:	e796      	b.n	8001198 <__aeabi_fsub+0x16c>
 800126a:	26fe      	movs	r6, #254	; 0xfe
 800126c:	3401      	adds	r4, #1
 800126e:	4226      	tst	r6, r4
 8001270:	d153      	bne.n	800131a <__aeabi_fsub+0x2ee>
 8001272:	2800      	cmp	r0, #0
 8001274:	d172      	bne.n	800135c <__aeabi_fsub+0x330>
 8001276:	4663      	mov	r3, ip
 8001278:	2b00      	cmp	r3, #0
 800127a:	d100      	bne.n	800127e <__aeabi_fsub+0x252>
 800127c:	e093      	b.n	80013a6 <__aeabi_fsub+0x37a>
 800127e:	4653      	mov	r3, sl
 8001280:	2b00      	cmp	r3, #0
 8001282:	d100      	bne.n	8001286 <__aeabi_fsub+0x25a>
 8001284:	e739      	b.n	80010fa <__aeabi_fsub+0xce>
 8001286:	4463      	add	r3, ip
 8001288:	2400      	movs	r4, #0
 800128a:	015a      	lsls	r2, r3, #5
 800128c:	d502      	bpl.n	8001294 <__aeabi_fsub+0x268>
 800128e:	4a4a      	ldr	r2, [pc, #296]	; (80013b8 <__aeabi_fsub+0x38c>)
 8001290:	3401      	adds	r4, #1
 8001292:	4013      	ands	r3, r2
 8001294:	075a      	lsls	r2, r3, #29
 8001296:	d000      	beq.n	800129a <__aeabi_fsub+0x26e>
 8001298:	e720      	b.n	80010dc <__aeabi_fsub+0xb0>
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	2cff      	cmp	r4, #255	; 0xff
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x276>
 80012a0:	e77a      	b.n	8001198 <__aeabi_fsub+0x16c>
 80012a2:	025b      	lsls	r3, r3, #9
 80012a4:	0a5f      	lsrs	r7, r3, #9
 80012a6:	b2e0      	uxtb	r0, r4
 80012a8:	e727      	b.n	80010fa <__aeabi_fsub+0xce>
 80012aa:	20ff      	movs	r0, #255	; 0xff
 80012ac:	2700      	movs	r7, #0
 80012ae:	e724      	b.n	80010fa <__aeabi_fsub+0xce>
 80012b0:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <__aeabi_fsub+0x38c>)
 80012b2:	1a24      	subs	r4, r4, r0
 80012b4:	4033      	ands	r3, r6
 80012b6:	e70f      	b.n	80010d8 <__aeabi_fsub+0xac>
 80012b8:	2eff      	cmp	r6, #255	; 0xff
 80012ba:	d100      	bne.n	80012be <__aeabi_fsub+0x292>
 80012bc:	e76a      	b.n	8001194 <__aeabi_fsub+0x168>
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	4662      	mov	r2, ip
 80012c2:	04db      	lsls	r3, r3, #19
 80012c4:	431a      	orrs	r2, r3
 80012c6:	4694      	mov	ip, r2
 80012c8:	2301      	movs	r3, #1
 80012ca:	281b      	cmp	r0, #27
 80012cc:	dc09      	bgt.n	80012e2 <__aeabi_fsub+0x2b6>
 80012ce:	2420      	movs	r4, #32
 80012d0:	4663      	mov	r3, ip
 80012d2:	4662      	mov	r2, ip
 80012d4:	40c3      	lsrs	r3, r0
 80012d6:	1a20      	subs	r0, r4, r0
 80012d8:	4082      	lsls	r2, r0
 80012da:	0010      	movs	r0, r2
 80012dc:	1e44      	subs	r4, r0, #1
 80012de:	41a0      	sbcs	r0, r4
 80012e0:	4303      	orrs	r3, r0
 80012e2:	4652      	mov	r2, sl
 80012e4:	000d      	movs	r5, r1
 80012e6:	0034      	movs	r4, r6
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	e6dc      	b.n	80010a6 <__aeabi_fsub+0x7a>
 80012ec:	4663      	mov	r3, ip
 80012ee:	4652      	mov	r2, sl
 80012f0:	1a9e      	subs	r6, r3, r2
 80012f2:	0173      	lsls	r3, r6, #5
 80012f4:	d417      	bmi.n	8001326 <__aeabi_fsub+0x2fa>
 80012f6:	2e00      	cmp	r6, #0
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0x2d0>
 80012fa:	e6d9      	b.n	80010b0 <__aeabi_fsub+0x84>
 80012fc:	2500      	movs	r5, #0
 80012fe:	2000      	movs	r0, #0
 8001300:	2700      	movs	r7, #0
 8001302:	e6fa      	b.n	80010fa <__aeabi_fsub+0xce>
 8001304:	4663      	mov	r3, ip
 8001306:	2b00      	cmp	r3, #0
 8001308:	d044      	beq.n	8001394 <__aeabi_fsub+0x368>
 800130a:	3901      	subs	r1, #1
 800130c:	2900      	cmp	r1, #0
 800130e:	d04c      	beq.n	80013aa <__aeabi_fsub+0x37e>
 8001310:	2eff      	cmp	r6, #255	; 0xff
 8001312:	d000      	beq.n	8001316 <__aeabi_fsub+0x2ea>
 8001314:	e771      	b.n	80011fa <__aeabi_fsub+0x1ce>
 8001316:	4643      	mov	r3, r8
 8001318:	e73e      	b.n	8001198 <__aeabi_fsub+0x16c>
 800131a:	2cff      	cmp	r4, #255	; 0xff
 800131c:	d0c5      	beq.n	80012aa <__aeabi_fsub+0x27e>
 800131e:	4652      	mov	r2, sl
 8001320:	4462      	add	r2, ip
 8001322:	0853      	lsrs	r3, r2, #1
 8001324:	e7b6      	b.n	8001294 <__aeabi_fsub+0x268>
 8001326:	4663      	mov	r3, ip
 8001328:	000d      	movs	r5, r1
 800132a:	1ad6      	subs	r6, r2, r3
 800132c:	e6c0      	b.n	80010b0 <__aeabi_fsub+0x84>
 800132e:	4662      	mov	r2, ip
 8001330:	2a00      	cmp	r2, #0
 8001332:	d116      	bne.n	8001362 <__aeabi_fsub+0x336>
 8001334:	4653      	mov	r3, sl
 8001336:	2b00      	cmp	r3, #0
 8001338:	d000      	beq.n	800133c <__aeabi_fsub+0x310>
 800133a:	e72b      	b.n	8001194 <__aeabi_fsub+0x168>
 800133c:	2780      	movs	r7, #128	; 0x80
 800133e:	2500      	movs	r5, #0
 8001340:	20ff      	movs	r0, #255	; 0xff
 8001342:	03ff      	lsls	r7, r7, #15
 8001344:	e6d9      	b.n	80010fa <__aeabi_fsub+0xce>
 8001346:	000d      	movs	r5, r1
 8001348:	4643      	mov	r3, r8
 800134a:	0034      	movs	r4, r6
 800134c:	e7a6      	b.n	800129c <__aeabi_fsub+0x270>
 800134e:	4653      	mov	r3, sl
 8001350:	4463      	add	r3, ip
 8001352:	e6f7      	b.n	8001144 <__aeabi_fsub+0x118>
 8001354:	4663      	mov	r3, ip
 8001356:	4652      	mov	r2, sl
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	e6a4      	b.n	80010a6 <__aeabi_fsub+0x7a>
 800135c:	4662      	mov	r2, ip
 800135e:	2a00      	cmp	r2, #0
 8001360:	d0d9      	beq.n	8001316 <__aeabi_fsub+0x2ea>
 8001362:	4652      	mov	r2, sl
 8001364:	2a00      	cmp	r2, #0
 8001366:	d100      	bne.n	800136a <__aeabi_fsub+0x33e>
 8001368:	e716      	b.n	8001198 <__aeabi_fsub+0x16c>
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	03d2      	lsls	r2, r2, #15
 800136e:	4213      	tst	r3, r2
 8001370:	d100      	bne.n	8001374 <__aeabi_fsub+0x348>
 8001372:	e711      	b.n	8001198 <__aeabi_fsub+0x16c>
 8001374:	4640      	mov	r0, r8
 8001376:	4210      	tst	r0, r2
 8001378:	d000      	beq.n	800137c <__aeabi_fsub+0x350>
 800137a:	e70d      	b.n	8001198 <__aeabi_fsub+0x16c>
 800137c:	e70a      	b.n	8001194 <__aeabi_fsub+0x168>
 800137e:	4652      	mov	r2, sl
 8001380:	000d      	movs	r5, r1
 8001382:	0034      	movs	r4, r6
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	e68e      	b.n	80010a6 <__aeabi_fsub+0x7a>
 8001388:	4653      	mov	r3, sl
 800138a:	2b00      	cmp	r3, #0
 800138c:	d008      	beq.n	80013a0 <__aeabi_fsub+0x374>
 800138e:	000d      	movs	r5, r1
 8001390:	4647      	mov	r7, r8
 8001392:	e6b2      	b.n	80010fa <__aeabi_fsub+0xce>
 8001394:	4643      	mov	r3, r8
 8001396:	0034      	movs	r4, r6
 8001398:	e780      	b.n	800129c <__aeabi_fsub+0x270>
 800139a:	2b00      	cmp	r3, #0
 800139c:	d000      	beq.n	80013a0 <__aeabi_fsub+0x374>
 800139e:	e779      	b.n	8001294 <__aeabi_fsub+0x268>
 80013a0:	2500      	movs	r5, #0
 80013a2:	2700      	movs	r7, #0
 80013a4:	e6a9      	b.n	80010fa <__aeabi_fsub+0xce>
 80013a6:	4647      	mov	r7, r8
 80013a8:	e6a7      	b.n	80010fa <__aeabi_fsub+0xce>
 80013aa:	4653      	mov	r3, sl
 80013ac:	0034      	movs	r4, r6
 80013ae:	4463      	add	r3, ip
 80013b0:	e6c8      	b.n	8001144 <__aeabi_fsub+0x118>
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	7dffffff 	.word	0x7dffffff
 80013b8:	fbffffff 	.word	0xfbffffff

080013bc <__aeabi_fcmpun>:
 80013bc:	0242      	lsls	r2, r0, #9
 80013be:	024b      	lsls	r3, r1, #9
 80013c0:	0040      	lsls	r0, r0, #1
 80013c2:	0049      	lsls	r1, r1, #1
 80013c4:	0a52      	lsrs	r2, r2, #9
 80013c6:	0a5b      	lsrs	r3, r3, #9
 80013c8:	0e09      	lsrs	r1, r1, #24
 80013ca:	0e00      	lsrs	r0, r0, #24
 80013cc:	28ff      	cmp	r0, #255	; 0xff
 80013ce:	d006      	beq.n	80013de <__aeabi_fcmpun+0x22>
 80013d0:	2000      	movs	r0, #0
 80013d2:	29ff      	cmp	r1, #255	; 0xff
 80013d4:	d102      	bne.n	80013dc <__aeabi_fcmpun+0x20>
 80013d6:	0018      	movs	r0, r3
 80013d8:	1e43      	subs	r3, r0, #1
 80013da:	4198      	sbcs	r0, r3
 80013dc:	4770      	bx	lr
 80013de:	38fe      	subs	r0, #254	; 0xfe
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	d1fb      	bne.n	80013dc <__aeabi_fcmpun+0x20>
 80013e4:	e7f4      	b.n	80013d0 <__aeabi_fcmpun+0x14>
 80013e6:	46c0      	nop			; (mov r8, r8)

080013e8 <__aeabi_f2iz>:
 80013e8:	0241      	lsls	r1, r0, #9
 80013ea:	0042      	lsls	r2, r0, #1
 80013ec:	0fc3      	lsrs	r3, r0, #31
 80013ee:	0a49      	lsrs	r1, r1, #9
 80013f0:	2000      	movs	r0, #0
 80013f2:	0e12      	lsrs	r2, r2, #24
 80013f4:	2a7e      	cmp	r2, #126	; 0x7e
 80013f6:	d903      	bls.n	8001400 <__aeabi_f2iz+0x18>
 80013f8:	2a9d      	cmp	r2, #157	; 0x9d
 80013fa:	d902      	bls.n	8001402 <__aeabi_f2iz+0x1a>
 80013fc:	4a09      	ldr	r2, [pc, #36]	; (8001424 <__aeabi_f2iz+0x3c>)
 80013fe:	1898      	adds	r0, r3, r2
 8001400:	4770      	bx	lr
 8001402:	2080      	movs	r0, #128	; 0x80
 8001404:	0400      	lsls	r0, r0, #16
 8001406:	4301      	orrs	r1, r0
 8001408:	2a95      	cmp	r2, #149	; 0x95
 800140a:	dc07      	bgt.n	800141c <__aeabi_f2iz+0x34>
 800140c:	2096      	movs	r0, #150	; 0x96
 800140e:	1a82      	subs	r2, r0, r2
 8001410:	40d1      	lsrs	r1, r2
 8001412:	4248      	negs	r0, r1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f3      	bne.n	8001400 <__aeabi_f2iz+0x18>
 8001418:	0008      	movs	r0, r1
 800141a:	e7f1      	b.n	8001400 <__aeabi_f2iz+0x18>
 800141c:	3a96      	subs	r2, #150	; 0x96
 800141e:	4091      	lsls	r1, r2
 8001420:	e7f7      	b.n	8001412 <__aeabi_f2iz+0x2a>
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	7fffffff 	.word	0x7fffffff

08001428 <__aeabi_i2f>:
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	2800      	cmp	r0, #0
 800142c:	d013      	beq.n	8001456 <__aeabi_i2f+0x2e>
 800142e:	17c3      	asrs	r3, r0, #31
 8001430:	18c5      	adds	r5, r0, r3
 8001432:	405d      	eors	r5, r3
 8001434:	0fc4      	lsrs	r4, r0, #31
 8001436:	0028      	movs	r0, r5
 8001438:	f001 ff60 	bl	80032fc <__clzsi2>
 800143c:	239e      	movs	r3, #158	; 0x9e
 800143e:	0001      	movs	r1, r0
 8001440:	1a1b      	subs	r3, r3, r0
 8001442:	2b96      	cmp	r3, #150	; 0x96
 8001444:	dc0f      	bgt.n	8001466 <__aeabi_i2f+0x3e>
 8001446:	2808      	cmp	r0, #8
 8001448:	dd01      	ble.n	800144e <__aeabi_i2f+0x26>
 800144a:	3908      	subs	r1, #8
 800144c:	408d      	lsls	r5, r1
 800144e:	026d      	lsls	r5, r5, #9
 8001450:	0a6d      	lsrs	r5, r5, #9
 8001452:	b2d8      	uxtb	r0, r3
 8001454:	e002      	b.n	800145c <__aeabi_i2f+0x34>
 8001456:	2400      	movs	r4, #0
 8001458:	2000      	movs	r0, #0
 800145a:	2500      	movs	r5, #0
 800145c:	05c0      	lsls	r0, r0, #23
 800145e:	4328      	orrs	r0, r5
 8001460:	07e4      	lsls	r4, r4, #31
 8001462:	4320      	orrs	r0, r4
 8001464:	bd70      	pop	{r4, r5, r6, pc}
 8001466:	2b99      	cmp	r3, #153	; 0x99
 8001468:	dd0b      	ble.n	8001482 <__aeabi_i2f+0x5a>
 800146a:	2205      	movs	r2, #5
 800146c:	002e      	movs	r6, r5
 800146e:	1a12      	subs	r2, r2, r0
 8001470:	40d6      	lsrs	r6, r2
 8001472:	0002      	movs	r2, r0
 8001474:	321b      	adds	r2, #27
 8001476:	4095      	lsls	r5, r2
 8001478:	0028      	movs	r0, r5
 800147a:	1e45      	subs	r5, r0, #1
 800147c:	41a8      	sbcs	r0, r5
 800147e:	0035      	movs	r5, r6
 8001480:	4305      	orrs	r5, r0
 8001482:	2905      	cmp	r1, #5
 8001484:	dd01      	ble.n	800148a <__aeabi_i2f+0x62>
 8001486:	1f4a      	subs	r2, r1, #5
 8001488:	4095      	lsls	r5, r2
 800148a:	002a      	movs	r2, r5
 800148c:	4e08      	ldr	r6, [pc, #32]	; (80014b0 <__aeabi_i2f+0x88>)
 800148e:	4032      	ands	r2, r6
 8001490:	0768      	lsls	r0, r5, #29
 8001492:	d009      	beq.n	80014a8 <__aeabi_i2f+0x80>
 8001494:	200f      	movs	r0, #15
 8001496:	4028      	ands	r0, r5
 8001498:	2804      	cmp	r0, #4
 800149a:	d005      	beq.n	80014a8 <__aeabi_i2f+0x80>
 800149c:	3204      	adds	r2, #4
 800149e:	0150      	lsls	r0, r2, #5
 80014a0:	d502      	bpl.n	80014a8 <__aeabi_i2f+0x80>
 80014a2:	239f      	movs	r3, #159	; 0x9f
 80014a4:	4032      	ands	r2, r6
 80014a6:	1a5b      	subs	r3, r3, r1
 80014a8:	0192      	lsls	r2, r2, #6
 80014aa:	0a55      	lsrs	r5, r2, #9
 80014ac:	b2d8      	uxtb	r0, r3
 80014ae:	e7d5      	b.n	800145c <__aeabi_i2f+0x34>
 80014b0:	fbffffff 	.word	0xfbffffff

080014b4 <__aeabi_ui2f>:
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	1e05      	subs	r5, r0, #0
 80014b8:	d00e      	beq.n	80014d8 <__aeabi_ui2f+0x24>
 80014ba:	f001 ff1f 	bl	80032fc <__clzsi2>
 80014be:	239e      	movs	r3, #158	; 0x9e
 80014c0:	0004      	movs	r4, r0
 80014c2:	1a1b      	subs	r3, r3, r0
 80014c4:	2b96      	cmp	r3, #150	; 0x96
 80014c6:	dc0c      	bgt.n	80014e2 <__aeabi_ui2f+0x2e>
 80014c8:	2808      	cmp	r0, #8
 80014ca:	dd01      	ble.n	80014d0 <__aeabi_ui2f+0x1c>
 80014cc:	3c08      	subs	r4, #8
 80014ce:	40a5      	lsls	r5, r4
 80014d0:	026d      	lsls	r5, r5, #9
 80014d2:	0a6d      	lsrs	r5, r5, #9
 80014d4:	b2d8      	uxtb	r0, r3
 80014d6:	e001      	b.n	80014dc <__aeabi_ui2f+0x28>
 80014d8:	2000      	movs	r0, #0
 80014da:	2500      	movs	r5, #0
 80014dc:	05c0      	lsls	r0, r0, #23
 80014de:	4328      	orrs	r0, r5
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
 80014e2:	2b99      	cmp	r3, #153	; 0x99
 80014e4:	dd09      	ble.n	80014fa <__aeabi_ui2f+0x46>
 80014e6:	0002      	movs	r2, r0
 80014e8:	0029      	movs	r1, r5
 80014ea:	321b      	adds	r2, #27
 80014ec:	4091      	lsls	r1, r2
 80014ee:	1e4a      	subs	r2, r1, #1
 80014f0:	4191      	sbcs	r1, r2
 80014f2:	2205      	movs	r2, #5
 80014f4:	1a12      	subs	r2, r2, r0
 80014f6:	40d5      	lsrs	r5, r2
 80014f8:	430d      	orrs	r5, r1
 80014fa:	2c05      	cmp	r4, #5
 80014fc:	dd01      	ble.n	8001502 <__aeabi_ui2f+0x4e>
 80014fe:	1f62      	subs	r2, r4, #5
 8001500:	4095      	lsls	r5, r2
 8001502:	0029      	movs	r1, r5
 8001504:	4e08      	ldr	r6, [pc, #32]	; (8001528 <__aeabi_ui2f+0x74>)
 8001506:	4031      	ands	r1, r6
 8001508:	076a      	lsls	r2, r5, #29
 800150a:	d009      	beq.n	8001520 <__aeabi_ui2f+0x6c>
 800150c:	200f      	movs	r0, #15
 800150e:	4028      	ands	r0, r5
 8001510:	2804      	cmp	r0, #4
 8001512:	d005      	beq.n	8001520 <__aeabi_ui2f+0x6c>
 8001514:	3104      	adds	r1, #4
 8001516:	014a      	lsls	r2, r1, #5
 8001518:	d502      	bpl.n	8001520 <__aeabi_ui2f+0x6c>
 800151a:	239f      	movs	r3, #159	; 0x9f
 800151c:	4031      	ands	r1, r6
 800151e:	1b1b      	subs	r3, r3, r4
 8001520:	0189      	lsls	r1, r1, #6
 8001522:	0a4d      	lsrs	r5, r1, #9
 8001524:	b2d8      	uxtb	r0, r3
 8001526:	e7d9      	b.n	80014dc <__aeabi_ui2f+0x28>
 8001528:	fbffffff 	.word	0xfbffffff

0800152c <__aeabi_dadd>:
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	464f      	mov	r7, r9
 8001530:	46d6      	mov	lr, sl
 8001532:	4646      	mov	r6, r8
 8001534:	000d      	movs	r5, r1
 8001536:	0001      	movs	r1, r0
 8001538:	0018      	movs	r0, r3
 800153a:	b5c0      	push	{r6, r7, lr}
 800153c:	0017      	movs	r7, r2
 800153e:	032b      	lsls	r3, r5, #12
 8001540:	0a5a      	lsrs	r2, r3, #9
 8001542:	0f4b      	lsrs	r3, r1, #29
 8001544:	4313      	orrs	r3, r2
 8001546:	00ca      	lsls	r2, r1, #3
 8001548:	4691      	mov	r9, r2
 800154a:	0302      	lsls	r2, r0, #12
 800154c:	006e      	lsls	r6, r5, #1
 800154e:	0041      	lsls	r1, r0, #1
 8001550:	0a52      	lsrs	r2, r2, #9
 8001552:	0fec      	lsrs	r4, r5, #31
 8001554:	0f7d      	lsrs	r5, r7, #29
 8001556:	4315      	orrs	r5, r2
 8001558:	0d76      	lsrs	r6, r6, #21
 800155a:	0d49      	lsrs	r1, r1, #21
 800155c:	0fc0      	lsrs	r0, r0, #31
 800155e:	4682      	mov	sl, r0
 8001560:	46ac      	mov	ip, r5
 8001562:	00ff      	lsls	r7, r7, #3
 8001564:	1a72      	subs	r2, r6, r1
 8001566:	4284      	cmp	r4, r0
 8001568:	d100      	bne.n	800156c <__aeabi_dadd+0x40>
 800156a:	e098      	b.n	800169e <__aeabi_dadd+0x172>
 800156c:	2a00      	cmp	r2, #0
 800156e:	dc00      	bgt.n	8001572 <__aeabi_dadd+0x46>
 8001570:	e081      	b.n	8001676 <__aeabi_dadd+0x14a>
 8001572:	2900      	cmp	r1, #0
 8001574:	d100      	bne.n	8001578 <__aeabi_dadd+0x4c>
 8001576:	e0b6      	b.n	80016e6 <__aeabi_dadd+0x1ba>
 8001578:	49c9      	ldr	r1, [pc, #804]	; (80018a0 <__aeabi_dadd+0x374>)
 800157a:	428e      	cmp	r6, r1
 800157c:	d100      	bne.n	8001580 <__aeabi_dadd+0x54>
 800157e:	e172      	b.n	8001866 <__aeabi_dadd+0x33a>
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0028      	movs	r0, r5
 8001584:	0409      	lsls	r1, r1, #16
 8001586:	4308      	orrs	r0, r1
 8001588:	4684      	mov	ip, r0
 800158a:	2a38      	cmp	r2, #56	; 0x38
 800158c:	dd00      	ble.n	8001590 <__aeabi_dadd+0x64>
 800158e:	e15e      	b.n	800184e <__aeabi_dadd+0x322>
 8001590:	2a1f      	cmp	r2, #31
 8001592:	dd00      	ble.n	8001596 <__aeabi_dadd+0x6a>
 8001594:	e1ee      	b.n	8001974 <__aeabi_dadd+0x448>
 8001596:	2020      	movs	r0, #32
 8001598:	0039      	movs	r1, r7
 800159a:	4665      	mov	r5, ip
 800159c:	1a80      	subs	r0, r0, r2
 800159e:	4087      	lsls	r7, r0
 80015a0:	40d1      	lsrs	r1, r2
 80015a2:	4085      	lsls	r5, r0
 80015a4:	430d      	orrs	r5, r1
 80015a6:	0039      	movs	r1, r7
 80015a8:	1e4f      	subs	r7, r1, #1
 80015aa:	41b9      	sbcs	r1, r7
 80015ac:	4667      	mov	r7, ip
 80015ae:	40d7      	lsrs	r7, r2
 80015b0:	4329      	orrs	r1, r5
 80015b2:	1bdb      	subs	r3, r3, r7
 80015b4:	464a      	mov	r2, r9
 80015b6:	1a55      	subs	r5, r2, r1
 80015b8:	45a9      	cmp	r9, r5
 80015ba:	4189      	sbcs	r1, r1
 80015bc:	4249      	negs	r1, r1
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	4698      	mov	r8, r3
 80015c2:	4643      	mov	r3, r8
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	d400      	bmi.n	80015ca <__aeabi_dadd+0x9e>
 80015c8:	e0cc      	b.n	8001764 <__aeabi_dadd+0x238>
 80015ca:	4643      	mov	r3, r8
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	0a5b      	lsrs	r3, r3, #9
 80015d0:	4698      	mov	r8, r3
 80015d2:	4643      	mov	r3, r8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dadd+0xae>
 80015d8:	e12c      	b.n	8001834 <__aeabi_dadd+0x308>
 80015da:	4640      	mov	r0, r8
 80015dc:	f001 fe8e 	bl	80032fc <__clzsi2>
 80015e0:	0001      	movs	r1, r0
 80015e2:	3908      	subs	r1, #8
 80015e4:	2220      	movs	r2, #32
 80015e6:	0028      	movs	r0, r5
 80015e8:	4643      	mov	r3, r8
 80015ea:	1a52      	subs	r2, r2, r1
 80015ec:	408b      	lsls	r3, r1
 80015ee:	40d0      	lsrs	r0, r2
 80015f0:	408d      	lsls	r5, r1
 80015f2:	4303      	orrs	r3, r0
 80015f4:	428e      	cmp	r6, r1
 80015f6:	dd00      	ble.n	80015fa <__aeabi_dadd+0xce>
 80015f8:	e117      	b.n	800182a <__aeabi_dadd+0x2fe>
 80015fa:	1b8e      	subs	r6, r1, r6
 80015fc:	1c72      	adds	r2, r6, #1
 80015fe:	2a1f      	cmp	r2, #31
 8001600:	dd00      	ble.n	8001604 <__aeabi_dadd+0xd8>
 8001602:	e1a7      	b.n	8001954 <__aeabi_dadd+0x428>
 8001604:	2120      	movs	r1, #32
 8001606:	0018      	movs	r0, r3
 8001608:	002e      	movs	r6, r5
 800160a:	1a89      	subs	r1, r1, r2
 800160c:	408d      	lsls	r5, r1
 800160e:	4088      	lsls	r0, r1
 8001610:	40d6      	lsrs	r6, r2
 8001612:	40d3      	lsrs	r3, r2
 8001614:	1e69      	subs	r1, r5, #1
 8001616:	418d      	sbcs	r5, r1
 8001618:	4330      	orrs	r0, r6
 800161a:	4698      	mov	r8, r3
 800161c:	2600      	movs	r6, #0
 800161e:	4305      	orrs	r5, r0
 8001620:	076b      	lsls	r3, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_dadd+0x10c>
 8001624:	230f      	movs	r3, #15
 8001626:	402b      	ands	r3, r5
 8001628:	2b04      	cmp	r3, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_dadd+0x10c>
 800162c:	1d2b      	adds	r3, r5, #4
 800162e:	42ab      	cmp	r3, r5
 8001630:	41ad      	sbcs	r5, r5
 8001632:	426d      	negs	r5, r5
 8001634:	44a8      	add	r8, r5
 8001636:	001d      	movs	r5, r3
 8001638:	4643      	mov	r3, r8
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	d400      	bmi.n	8001640 <__aeabi_dadd+0x114>
 800163e:	e094      	b.n	800176a <__aeabi_dadd+0x23e>
 8001640:	4b97      	ldr	r3, [pc, #604]	; (80018a0 <__aeabi_dadd+0x374>)
 8001642:	1c72      	adds	r2, r6, #1
 8001644:	429a      	cmp	r2, r3
 8001646:	d100      	bne.n	800164a <__aeabi_dadd+0x11e>
 8001648:	e09d      	b.n	8001786 <__aeabi_dadd+0x25a>
 800164a:	4641      	mov	r1, r8
 800164c:	4b95      	ldr	r3, [pc, #596]	; (80018a4 <__aeabi_dadd+0x378>)
 800164e:	08ed      	lsrs	r5, r5, #3
 8001650:	4019      	ands	r1, r3
 8001652:	000b      	movs	r3, r1
 8001654:	0552      	lsls	r2, r2, #21
 8001656:	0749      	lsls	r1, r1, #29
 8001658:	025b      	lsls	r3, r3, #9
 800165a:	4329      	orrs	r1, r5
 800165c:	0b1b      	lsrs	r3, r3, #12
 800165e:	0d52      	lsrs	r2, r2, #21
 8001660:	0512      	lsls	r2, r2, #20
 8001662:	4313      	orrs	r3, r2
 8001664:	07e4      	lsls	r4, r4, #31
 8001666:	4323      	orrs	r3, r4
 8001668:	0008      	movs	r0, r1
 800166a:	0019      	movs	r1, r3
 800166c:	bce0      	pop	{r5, r6, r7}
 800166e:	46ba      	mov	sl, r7
 8001670:	46b1      	mov	r9, r6
 8001672:	46a8      	mov	r8, r5
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	2a00      	cmp	r2, #0
 8001678:	d043      	beq.n	8001702 <__aeabi_dadd+0x1d6>
 800167a:	1b8a      	subs	r2, r1, r6
 800167c:	2e00      	cmp	r6, #0
 800167e:	d000      	beq.n	8001682 <__aeabi_dadd+0x156>
 8001680:	e12a      	b.n	80018d8 <__aeabi_dadd+0x3ac>
 8001682:	464c      	mov	r4, r9
 8001684:	431c      	orrs	r4, r3
 8001686:	d100      	bne.n	800168a <__aeabi_dadd+0x15e>
 8001688:	e1d1      	b.n	8001a2e <__aeabi_dadd+0x502>
 800168a:	1e54      	subs	r4, r2, #1
 800168c:	2a01      	cmp	r2, #1
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x166>
 8001690:	e21f      	b.n	8001ad2 <__aeabi_dadd+0x5a6>
 8001692:	4d83      	ldr	r5, [pc, #524]	; (80018a0 <__aeabi_dadd+0x374>)
 8001694:	42aa      	cmp	r2, r5
 8001696:	d100      	bne.n	800169a <__aeabi_dadd+0x16e>
 8001698:	e272      	b.n	8001b80 <__aeabi_dadd+0x654>
 800169a:	0022      	movs	r2, r4
 800169c:	e123      	b.n	80018e6 <__aeabi_dadd+0x3ba>
 800169e:	2a00      	cmp	r2, #0
 80016a0:	dc00      	bgt.n	80016a4 <__aeabi_dadd+0x178>
 80016a2:	e098      	b.n	80017d6 <__aeabi_dadd+0x2aa>
 80016a4:	2900      	cmp	r1, #0
 80016a6:	d042      	beq.n	800172e <__aeabi_dadd+0x202>
 80016a8:	497d      	ldr	r1, [pc, #500]	; (80018a0 <__aeabi_dadd+0x374>)
 80016aa:	428e      	cmp	r6, r1
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dadd+0x184>
 80016ae:	e0da      	b.n	8001866 <__aeabi_dadd+0x33a>
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0028      	movs	r0, r5
 80016b4:	0409      	lsls	r1, r1, #16
 80016b6:	4308      	orrs	r0, r1
 80016b8:	4684      	mov	ip, r0
 80016ba:	2a38      	cmp	r2, #56	; 0x38
 80016bc:	dd00      	ble.n	80016c0 <__aeabi_dadd+0x194>
 80016be:	e129      	b.n	8001914 <__aeabi_dadd+0x3e8>
 80016c0:	2a1f      	cmp	r2, #31
 80016c2:	dc00      	bgt.n	80016c6 <__aeabi_dadd+0x19a>
 80016c4:	e187      	b.n	80019d6 <__aeabi_dadd+0x4aa>
 80016c6:	0011      	movs	r1, r2
 80016c8:	4665      	mov	r5, ip
 80016ca:	3920      	subs	r1, #32
 80016cc:	40cd      	lsrs	r5, r1
 80016ce:	2a20      	cmp	r2, #32
 80016d0:	d004      	beq.n	80016dc <__aeabi_dadd+0x1b0>
 80016d2:	2040      	movs	r0, #64	; 0x40
 80016d4:	4661      	mov	r1, ip
 80016d6:	1a82      	subs	r2, r0, r2
 80016d8:	4091      	lsls	r1, r2
 80016da:	430f      	orrs	r7, r1
 80016dc:	0039      	movs	r1, r7
 80016de:	1e4f      	subs	r7, r1, #1
 80016e0:	41b9      	sbcs	r1, r7
 80016e2:	430d      	orrs	r5, r1
 80016e4:	e11b      	b.n	800191e <__aeabi_dadd+0x3f2>
 80016e6:	0029      	movs	r1, r5
 80016e8:	4339      	orrs	r1, r7
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x1c2>
 80016ec:	e0b5      	b.n	800185a <__aeabi_dadd+0x32e>
 80016ee:	1e51      	subs	r1, r2, #1
 80016f0:	2a01      	cmp	r2, #1
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dadd+0x1ca>
 80016f4:	e1ab      	b.n	8001a4e <__aeabi_dadd+0x522>
 80016f6:	486a      	ldr	r0, [pc, #424]	; (80018a0 <__aeabi_dadd+0x374>)
 80016f8:	4282      	cmp	r2, r0
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x1d2>
 80016fc:	e1b2      	b.n	8001a64 <__aeabi_dadd+0x538>
 80016fe:	000a      	movs	r2, r1
 8001700:	e743      	b.n	800158a <__aeabi_dadd+0x5e>
 8001702:	4969      	ldr	r1, [pc, #420]	; (80018a8 <__aeabi_dadd+0x37c>)
 8001704:	1c75      	adds	r5, r6, #1
 8001706:	420d      	tst	r5, r1
 8001708:	d000      	beq.n	800170c <__aeabi_dadd+0x1e0>
 800170a:	e0cf      	b.n	80018ac <__aeabi_dadd+0x380>
 800170c:	2e00      	cmp	r6, #0
 800170e:	d000      	beq.n	8001712 <__aeabi_dadd+0x1e6>
 8001710:	e193      	b.n	8001a3a <__aeabi_dadd+0x50e>
 8001712:	4649      	mov	r1, r9
 8001714:	4319      	orrs	r1, r3
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x1ee>
 8001718:	e1d1      	b.n	8001abe <__aeabi_dadd+0x592>
 800171a:	4661      	mov	r1, ip
 800171c:	4339      	orrs	r1, r7
 800171e:	d000      	beq.n	8001722 <__aeabi_dadd+0x1f6>
 8001720:	e1e3      	b.n	8001aea <__aeabi_dadd+0x5be>
 8001722:	4649      	mov	r1, r9
 8001724:	0758      	lsls	r0, r3, #29
 8001726:	08c9      	lsrs	r1, r1, #3
 8001728:	4301      	orrs	r1, r0
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	e026      	b.n	800177c <__aeabi_dadd+0x250>
 800172e:	0029      	movs	r1, r5
 8001730:	4339      	orrs	r1, r7
 8001732:	d100      	bne.n	8001736 <__aeabi_dadd+0x20a>
 8001734:	e091      	b.n	800185a <__aeabi_dadd+0x32e>
 8001736:	1e51      	subs	r1, r2, #1
 8001738:	2a01      	cmp	r2, #1
 800173a:	d005      	beq.n	8001748 <__aeabi_dadd+0x21c>
 800173c:	4858      	ldr	r0, [pc, #352]	; (80018a0 <__aeabi_dadd+0x374>)
 800173e:	4282      	cmp	r2, r0
 8001740:	d100      	bne.n	8001744 <__aeabi_dadd+0x218>
 8001742:	e18f      	b.n	8001a64 <__aeabi_dadd+0x538>
 8001744:	000a      	movs	r2, r1
 8001746:	e7b8      	b.n	80016ba <__aeabi_dadd+0x18e>
 8001748:	003d      	movs	r5, r7
 800174a:	444d      	add	r5, r9
 800174c:	454d      	cmp	r5, r9
 800174e:	4189      	sbcs	r1, r1
 8001750:	4463      	add	r3, ip
 8001752:	4698      	mov	r8, r3
 8001754:	4249      	negs	r1, r1
 8001756:	4488      	add	r8, r1
 8001758:	4643      	mov	r3, r8
 800175a:	2602      	movs	r6, #2
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	d500      	bpl.n	8001762 <__aeabi_dadd+0x236>
 8001760:	e0eb      	b.n	800193a <__aeabi_dadd+0x40e>
 8001762:	3e01      	subs	r6, #1
 8001764:	076b      	lsls	r3, r5, #29
 8001766:	d000      	beq.n	800176a <__aeabi_dadd+0x23e>
 8001768:	e75c      	b.n	8001624 <__aeabi_dadd+0xf8>
 800176a:	4643      	mov	r3, r8
 800176c:	08e9      	lsrs	r1, r5, #3
 800176e:	075a      	lsls	r2, r3, #29
 8001770:	4311      	orrs	r1, r2
 8001772:	0032      	movs	r2, r6
 8001774:	08db      	lsrs	r3, r3, #3
 8001776:	484a      	ldr	r0, [pc, #296]	; (80018a0 <__aeabi_dadd+0x374>)
 8001778:	4282      	cmp	r2, r0
 800177a:	d021      	beq.n	80017c0 <__aeabi_dadd+0x294>
 800177c:	031b      	lsls	r3, r3, #12
 800177e:	0552      	lsls	r2, r2, #21
 8001780:	0b1b      	lsrs	r3, r3, #12
 8001782:	0d52      	lsrs	r2, r2, #21
 8001784:	e76c      	b.n	8001660 <__aeabi_dadd+0x134>
 8001786:	2300      	movs	r3, #0
 8001788:	2100      	movs	r1, #0
 800178a:	e769      	b.n	8001660 <__aeabi_dadd+0x134>
 800178c:	002a      	movs	r2, r5
 800178e:	433a      	orrs	r2, r7
 8001790:	d069      	beq.n	8001866 <__aeabi_dadd+0x33a>
 8001792:	464a      	mov	r2, r9
 8001794:	0758      	lsls	r0, r3, #29
 8001796:	08d1      	lsrs	r1, r2, #3
 8001798:	08da      	lsrs	r2, r3, #3
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	031b      	lsls	r3, r3, #12
 800179e:	4308      	orrs	r0, r1
 80017a0:	421a      	tst	r2, r3
 80017a2:	d007      	beq.n	80017b4 <__aeabi_dadd+0x288>
 80017a4:	0029      	movs	r1, r5
 80017a6:	08ed      	lsrs	r5, r5, #3
 80017a8:	421d      	tst	r5, r3
 80017aa:	d103      	bne.n	80017b4 <__aeabi_dadd+0x288>
 80017ac:	002a      	movs	r2, r5
 80017ae:	08ff      	lsrs	r7, r7, #3
 80017b0:	0748      	lsls	r0, r1, #29
 80017b2:	4338      	orrs	r0, r7
 80017b4:	0f43      	lsrs	r3, r0, #29
 80017b6:	00c1      	lsls	r1, r0, #3
 80017b8:	075b      	lsls	r3, r3, #29
 80017ba:	08c9      	lsrs	r1, r1, #3
 80017bc:	4319      	orrs	r1, r3
 80017be:	0013      	movs	r3, r2
 80017c0:	000a      	movs	r2, r1
 80017c2:	431a      	orrs	r2, r3
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dadd+0x29c>
 80017c6:	e213      	b.n	8001bf0 <__aeabi_dadd+0x6c4>
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	0312      	lsls	r2, r2, #12
 80017cc:	4313      	orrs	r3, r2
 80017ce:	031b      	lsls	r3, r3, #12
 80017d0:	4a33      	ldr	r2, [pc, #204]	; (80018a0 <__aeabi_dadd+0x374>)
 80017d2:	0b1b      	lsrs	r3, r3, #12
 80017d4:	e744      	b.n	8001660 <__aeabi_dadd+0x134>
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d04b      	beq.n	8001872 <__aeabi_dadd+0x346>
 80017da:	1b8a      	subs	r2, r1, r6
 80017dc:	2e00      	cmp	r6, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dadd+0x2b6>
 80017e0:	e0e7      	b.n	80019b2 <__aeabi_dadd+0x486>
 80017e2:	482f      	ldr	r0, [pc, #188]	; (80018a0 <__aeabi_dadd+0x374>)
 80017e4:	4281      	cmp	r1, r0
 80017e6:	d100      	bne.n	80017ea <__aeabi_dadd+0x2be>
 80017e8:	e195      	b.n	8001b16 <__aeabi_dadd+0x5ea>
 80017ea:	2080      	movs	r0, #128	; 0x80
 80017ec:	0400      	lsls	r0, r0, #16
 80017ee:	4303      	orrs	r3, r0
 80017f0:	2a38      	cmp	r2, #56	; 0x38
 80017f2:	dd00      	ble.n	80017f6 <__aeabi_dadd+0x2ca>
 80017f4:	e143      	b.n	8001a7e <__aeabi_dadd+0x552>
 80017f6:	2a1f      	cmp	r2, #31
 80017f8:	dd00      	ble.n	80017fc <__aeabi_dadd+0x2d0>
 80017fa:	e1db      	b.n	8001bb4 <__aeabi_dadd+0x688>
 80017fc:	2020      	movs	r0, #32
 80017fe:	001d      	movs	r5, r3
 8001800:	464e      	mov	r6, r9
 8001802:	1a80      	subs	r0, r0, r2
 8001804:	4085      	lsls	r5, r0
 8001806:	40d6      	lsrs	r6, r2
 8001808:	4335      	orrs	r5, r6
 800180a:	464e      	mov	r6, r9
 800180c:	4086      	lsls	r6, r0
 800180e:	0030      	movs	r0, r6
 8001810:	40d3      	lsrs	r3, r2
 8001812:	1e46      	subs	r6, r0, #1
 8001814:	41b0      	sbcs	r0, r6
 8001816:	449c      	add	ip, r3
 8001818:	4305      	orrs	r5, r0
 800181a:	19ed      	adds	r5, r5, r7
 800181c:	42bd      	cmp	r5, r7
 800181e:	419b      	sbcs	r3, r3
 8001820:	425b      	negs	r3, r3
 8001822:	4463      	add	r3, ip
 8001824:	4698      	mov	r8, r3
 8001826:	000e      	movs	r6, r1
 8001828:	e07f      	b.n	800192a <__aeabi_dadd+0x3fe>
 800182a:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <__aeabi_dadd+0x378>)
 800182c:	1a76      	subs	r6, r6, r1
 800182e:	4013      	ands	r3, r2
 8001830:	4698      	mov	r8, r3
 8001832:	e6f5      	b.n	8001620 <__aeabi_dadd+0xf4>
 8001834:	0028      	movs	r0, r5
 8001836:	f001 fd61 	bl	80032fc <__clzsi2>
 800183a:	0001      	movs	r1, r0
 800183c:	3118      	adds	r1, #24
 800183e:	291f      	cmp	r1, #31
 8001840:	dc00      	bgt.n	8001844 <__aeabi_dadd+0x318>
 8001842:	e6cf      	b.n	80015e4 <__aeabi_dadd+0xb8>
 8001844:	002b      	movs	r3, r5
 8001846:	3808      	subs	r0, #8
 8001848:	4083      	lsls	r3, r0
 800184a:	2500      	movs	r5, #0
 800184c:	e6d2      	b.n	80015f4 <__aeabi_dadd+0xc8>
 800184e:	4662      	mov	r2, ip
 8001850:	433a      	orrs	r2, r7
 8001852:	0011      	movs	r1, r2
 8001854:	1e4f      	subs	r7, r1, #1
 8001856:	41b9      	sbcs	r1, r7
 8001858:	e6ac      	b.n	80015b4 <__aeabi_dadd+0x88>
 800185a:	4649      	mov	r1, r9
 800185c:	0758      	lsls	r0, r3, #29
 800185e:	08c9      	lsrs	r1, r1, #3
 8001860:	4301      	orrs	r1, r0
 8001862:	08db      	lsrs	r3, r3, #3
 8001864:	e787      	b.n	8001776 <__aeabi_dadd+0x24a>
 8001866:	4649      	mov	r1, r9
 8001868:	075a      	lsls	r2, r3, #29
 800186a:	08c9      	lsrs	r1, r1, #3
 800186c:	4311      	orrs	r1, r2
 800186e:	08db      	lsrs	r3, r3, #3
 8001870:	e7a6      	b.n	80017c0 <__aeabi_dadd+0x294>
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <__aeabi_dadd+0x37c>)
 8001874:	1c70      	adds	r0, r6, #1
 8001876:	4208      	tst	r0, r1
 8001878:	d000      	beq.n	800187c <__aeabi_dadd+0x350>
 800187a:	e0bb      	b.n	80019f4 <__aeabi_dadd+0x4c8>
 800187c:	2e00      	cmp	r6, #0
 800187e:	d000      	beq.n	8001882 <__aeabi_dadd+0x356>
 8001880:	e114      	b.n	8001aac <__aeabi_dadd+0x580>
 8001882:	4649      	mov	r1, r9
 8001884:	4319      	orrs	r1, r3
 8001886:	d100      	bne.n	800188a <__aeabi_dadd+0x35e>
 8001888:	e175      	b.n	8001b76 <__aeabi_dadd+0x64a>
 800188a:	0029      	movs	r1, r5
 800188c:	4339      	orrs	r1, r7
 800188e:	d000      	beq.n	8001892 <__aeabi_dadd+0x366>
 8001890:	e17e      	b.n	8001b90 <__aeabi_dadd+0x664>
 8001892:	4649      	mov	r1, r9
 8001894:	0758      	lsls	r0, r3, #29
 8001896:	08c9      	lsrs	r1, r1, #3
 8001898:	4301      	orrs	r1, r0
 800189a:	08db      	lsrs	r3, r3, #3
 800189c:	e76e      	b.n	800177c <__aeabi_dadd+0x250>
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	000007ff 	.word	0x000007ff
 80018a4:	ff7fffff 	.word	0xff7fffff
 80018a8:	000007fe 	.word	0x000007fe
 80018ac:	4649      	mov	r1, r9
 80018ae:	1bcd      	subs	r5, r1, r7
 80018b0:	4661      	mov	r1, ip
 80018b2:	1a58      	subs	r0, r3, r1
 80018b4:	45a9      	cmp	r9, r5
 80018b6:	4189      	sbcs	r1, r1
 80018b8:	4249      	negs	r1, r1
 80018ba:	4688      	mov	r8, r1
 80018bc:	0001      	movs	r1, r0
 80018be:	4640      	mov	r0, r8
 80018c0:	1a09      	subs	r1, r1, r0
 80018c2:	4688      	mov	r8, r1
 80018c4:	0209      	lsls	r1, r1, #8
 80018c6:	d500      	bpl.n	80018ca <__aeabi_dadd+0x39e>
 80018c8:	e0a6      	b.n	8001a18 <__aeabi_dadd+0x4ec>
 80018ca:	4641      	mov	r1, r8
 80018cc:	4329      	orrs	r1, r5
 80018ce:	d000      	beq.n	80018d2 <__aeabi_dadd+0x3a6>
 80018d0:	e67f      	b.n	80015d2 <__aeabi_dadd+0xa6>
 80018d2:	2300      	movs	r3, #0
 80018d4:	2400      	movs	r4, #0
 80018d6:	e751      	b.n	800177c <__aeabi_dadd+0x250>
 80018d8:	4cc7      	ldr	r4, [pc, #796]	; (8001bf8 <__aeabi_dadd+0x6cc>)
 80018da:	42a1      	cmp	r1, r4
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dadd+0x3b4>
 80018de:	e0c7      	b.n	8001a70 <__aeabi_dadd+0x544>
 80018e0:	2480      	movs	r4, #128	; 0x80
 80018e2:	0424      	lsls	r4, r4, #16
 80018e4:	4323      	orrs	r3, r4
 80018e6:	2a38      	cmp	r2, #56	; 0x38
 80018e8:	dc54      	bgt.n	8001994 <__aeabi_dadd+0x468>
 80018ea:	2a1f      	cmp	r2, #31
 80018ec:	dd00      	ble.n	80018f0 <__aeabi_dadd+0x3c4>
 80018ee:	e0cc      	b.n	8001a8a <__aeabi_dadd+0x55e>
 80018f0:	2420      	movs	r4, #32
 80018f2:	4648      	mov	r0, r9
 80018f4:	1aa4      	subs	r4, r4, r2
 80018f6:	001d      	movs	r5, r3
 80018f8:	464e      	mov	r6, r9
 80018fa:	40a0      	lsls	r0, r4
 80018fc:	40d6      	lsrs	r6, r2
 80018fe:	40a5      	lsls	r5, r4
 8001900:	0004      	movs	r4, r0
 8001902:	40d3      	lsrs	r3, r2
 8001904:	4662      	mov	r2, ip
 8001906:	4335      	orrs	r5, r6
 8001908:	1e66      	subs	r6, r4, #1
 800190a:	41b4      	sbcs	r4, r6
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	469c      	mov	ip, r3
 8001910:	4325      	orrs	r5, r4
 8001912:	e044      	b.n	800199e <__aeabi_dadd+0x472>
 8001914:	4662      	mov	r2, ip
 8001916:	433a      	orrs	r2, r7
 8001918:	0015      	movs	r5, r2
 800191a:	1e6f      	subs	r7, r5, #1
 800191c:	41bd      	sbcs	r5, r7
 800191e:	444d      	add	r5, r9
 8001920:	454d      	cmp	r5, r9
 8001922:	4189      	sbcs	r1, r1
 8001924:	4249      	negs	r1, r1
 8001926:	4688      	mov	r8, r1
 8001928:	4498      	add	r8, r3
 800192a:	4643      	mov	r3, r8
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	d400      	bmi.n	8001932 <__aeabi_dadd+0x406>
 8001930:	e718      	b.n	8001764 <__aeabi_dadd+0x238>
 8001932:	4bb1      	ldr	r3, [pc, #708]	; (8001bf8 <__aeabi_dadd+0x6cc>)
 8001934:	3601      	adds	r6, #1
 8001936:	429e      	cmp	r6, r3
 8001938:	d049      	beq.n	80019ce <__aeabi_dadd+0x4a2>
 800193a:	4642      	mov	r2, r8
 800193c:	4baf      	ldr	r3, [pc, #700]	; (8001bfc <__aeabi_dadd+0x6d0>)
 800193e:	2101      	movs	r1, #1
 8001940:	401a      	ands	r2, r3
 8001942:	0013      	movs	r3, r2
 8001944:	086a      	lsrs	r2, r5, #1
 8001946:	400d      	ands	r5, r1
 8001948:	4315      	orrs	r5, r2
 800194a:	07d9      	lsls	r1, r3, #31
 800194c:	085b      	lsrs	r3, r3, #1
 800194e:	4698      	mov	r8, r3
 8001950:	430d      	orrs	r5, r1
 8001952:	e665      	b.n	8001620 <__aeabi_dadd+0xf4>
 8001954:	0018      	movs	r0, r3
 8001956:	3e1f      	subs	r6, #31
 8001958:	40f0      	lsrs	r0, r6
 800195a:	2a20      	cmp	r2, #32
 800195c:	d003      	beq.n	8001966 <__aeabi_dadd+0x43a>
 800195e:	2140      	movs	r1, #64	; 0x40
 8001960:	1a8a      	subs	r2, r1, r2
 8001962:	4093      	lsls	r3, r2
 8001964:	431d      	orrs	r5, r3
 8001966:	1e69      	subs	r1, r5, #1
 8001968:	418d      	sbcs	r5, r1
 800196a:	2300      	movs	r3, #0
 800196c:	2600      	movs	r6, #0
 800196e:	4698      	mov	r8, r3
 8001970:	4305      	orrs	r5, r0
 8001972:	e6f7      	b.n	8001764 <__aeabi_dadd+0x238>
 8001974:	0011      	movs	r1, r2
 8001976:	4665      	mov	r5, ip
 8001978:	3920      	subs	r1, #32
 800197a:	40cd      	lsrs	r5, r1
 800197c:	2a20      	cmp	r2, #32
 800197e:	d004      	beq.n	800198a <__aeabi_dadd+0x45e>
 8001980:	2040      	movs	r0, #64	; 0x40
 8001982:	4661      	mov	r1, ip
 8001984:	1a82      	subs	r2, r0, r2
 8001986:	4091      	lsls	r1, r2
 8001988:	430f      	orrs	r7, r1
 800198a:	0039      	movs	r1, r7
 800198c:	1e4f      	subs	r7, r1, #1
 800198e:	41b9      	sbcs	r1, r7
 8001990:	4329      	orrs	r1, r5
 8001992:	e60f      	b.n	80015b4 <__aeabi_dadd+0x88>
 8001994:	464a      	mov	r2, r9
 8001996:	4313      	orrs	r3, r2
 8001998:	001d      	movs	r5, r3
 800199a:	1e6b      	subs	r3, r5, #1
 800199c:	419d      	sbcs	r5, r3
 800199e:	1b7d      	subs	r5, r7, r5
 80019a0:	42af      	cmp	r7, r5
 80019a2:	419b      	sbcs	r3, r3
 80019a4:	4662      	mov	r2, ip
 80019a6:	425b      	negs	r3, r3
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	4698      	mov	r8, r3
 80019ac:	4654      	mov	r4, sl
 80019ae:	000e      	movs	r6, r1
 80019b0:	e607      	b.n	80015c2 <__aeabi_dadd+0x96>
 80019b2:	4648      	mov	r0, r9
 80019b4:	4318      	orrs	r0, r3
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x48e>
 80019b8:	e0b3      	b.n	8001b22 <__aeabi_dadd+0x5f6>
 80019ba:	1e50      	subs	r0, r2, #1
 80019bc:	2a01      	cmp	r2, #1
 80019be:	d100      	bne.n	80019c2 <__aeabi_dadd+0x496>
 80019c0:	e10d      	b.n	8001bde <__aeabi_dadd+0x6b2>
 80019c2:	4d8d      	ldr	r5, [pc, #564]	; (8001bf8 <__aeabi_dadd+0x6cc>)
 80019c4:	42aa      	cmp	r2, r5
 80019c6:	d100      	bne.n	80019ca <__aeabi_dadd+0x49e>
 80019c8:	e0a5      	b.n	8001b16 <__aeabi_dadd+0x5ea>
 80019ca:	0002      	movs	r2, r0
 80019cc:	e710      	b.n	80017f0 <__aeabi_dadd+0x2c4>
 80019ce:	0032      	movs	r2, r6
 80019d0:	2300      	movs	r3, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	e644      	b.n	8001660 <__aeabi_dadd+0x134>
 80019d6:	2120      	movs	r1, #32
 80019d8:	0038      	movs	r0, r7
 80019da:	1a89      	subs	r1, r1, r2
 80019dc:	4665      	mov	r5, ip
 80019de:	408f      	lsls	r7, r1
 80019e0:	408d      	lsls	r5, r1
 80019e2:	40d0      	lsrs	r0, r2
 80019e4:	1e79      	subs	r1, r7, #1
 80019e6:	418f      	sbcs	r7, r1
 80019e8:	4305      	orrs	r5, r0
 80019ea:	433d      	orrs	r5, r7
 80019ec:	4667      	mov	r7, ip
 80019ee:	40d7      	lsrs	r7, r2
 80019f0:	19db      	adds	r3, r3, r7
 80019f2:	e794      	b.n	800191e <__aeabi_dadd+0x3f2>
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <__aeabi_dadd+0x6cc>)
 80019f6:	4290      	cmp	r0, r2
 80019f8:	d100      	bne.n	80019fc <__aeabi_dadd+0x4d0>
 80019fa:	e0ec      	b.n	8001bd6 <__aeabi_dadd+0x6aa>
 80019fc:	0039      	movs	r1, r7
 80019fe:	4449      	add	r1, r9
 8001a00:	4549      	cmp	r1, r9
 8001a02:	4192      	sbcs	r2, r2
 8001a04:	4463      	add	r3, ip
 8001a06:	4252      	negs	r2, r2
 8001a08:	189b      	adds	r3, r3, r2
 8001a0a:	07dd      	lsls	r5, r3, #31
 8001a0c:	0849      	lsrs	r1, r1, #1
 8001a0e:	085b      	lsrs	r3, r3, #1
 8001a10:	4698      	mov	r8, r3
 8001a12:	0006      	movs	r6, r0
 8001a14:	430d      	orrs	r5, r1
 8001a16:	e6a5      	b.n	8001764 <__aeabi_dadd+0x238>
 8001a18:	464a      	mov	r2, r9
 8001a1a:	1abd      	subs	r5, r7, r2
 8001a1c:	42af      	cmp	r7, r5
 8001a1e:	4189      	sbcs	r1, r1
 8001a20:	4662      	mov	r2, ip
 8001a22:	4249      	negs	r1, r1
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	1a5b      	subs	r3, r3, r1
 8001a28:	4698      	mov	r8, r3
 8001a2a:	4654      	mov	r4, sl
 8001a2c:	e5d1      	b.n	80015d2 <__aeabi_dadd+0xa6>
 8001a2e:	076c      	lsls	r4, r5, #29
 8001a30:	08f9      	lsrs	r1, r7, #3
 8001a32:	4321      	orrs	r1, r4
 8001a34:	08eb      	lsrs	r3, r5, #3
 8001a36:	0004      	movs	r4, r0
 8001a38:	e69d      	b.n	8001776 <__aeabi_dadd+0x24a>
 8001a3a:	464a      	mov	r2, r9
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	d175      	bne.n	8001b2c <__aeabi_dadd+0x600>
 8001a40:	4661      	mov	r1, ip
 8001a42:	4339      	orrs	r1, r7
 8001a44:	d114      	bne.n	8001a70 <__aeabi_dadd+0x544>
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	2400      	movs	r4, #0
 8001a4a:	031b      	lsls	r3, r3, #12
 8001a4c:	e6bc      	b.n	80017c8 <__aeabi_dadd+0x29c>
 8001a4e:	464a      	mov	r2, r9
 8001a50:	1bd5      	subs	r5, r2, r7
 8001a52:	45a9      	cmp	r9, r5
 8001a54:	4189      	sbcs	r1, r1
 8001a56:	4662      	mov	r2, ip
 8001a58:	4249      	negs	r1, r1
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	1a5b      	subs	r3, r3, r1
 8001a5e:	4698      	mov	r8, r3
 8001a60:	2601      	movs	r6, #1
 8001a62:	e5ae      	b.n	80015c2 <__aeabi_dadd+0x96>
 8001a64:	464a      	mov	r2, r9
 8001a66:	08d1      	lsrs	r1, r2, #3
 8001a68:	075a      	lsls	r2, r3, #29
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	e6a7      	b.n	80017c0 <__aeabi_dadd+0x294>
 8001a70:	4663      	mov	r3, ip
 8001a72:	08f9      	lsrs	r1, r7, #3
 8001a74:	075a      	lsls	r2, r3, #29
 8001a76:	4654      	mov	r4, sl
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	08db      	lsrs	r3, r3, #3
 8001a7c:	e6a0      	b.n	80017c0 <__aeabi_dadd+0x294>
 8001a7e:	464a      	mov	r2, r9
 8001a80:	4313      	orrs	r3, r2
 8001a82:	001d      	movs	r5, r3
 8001a84:	1e6b      	subs	r3, r5, #1
 8001a86:	419d      	sbcs	r5, r3
 8001a88:	e6c7      	b.n	800181a <__aeabi_dadd+0x2ee>
 8001a8a:	0014      	movs	r4, r2
 8001a8c:	001e      	movs	r6, r3
 8001a8e:	3c20      	subs	r4, #32
 8001a90:	40e6      	lsrs	r6, r4
 8001a92:	2a20      	cmp	r2, #32
 8001a94:	d005      	beq.n	8001aa2 <__aeabi_dadd+0x576>
 8001a96:	2440      	movs	r4, #64	; 0x40
 8001a98:	1aa2      	subs	r2, r4, r2
 8001a9a:	4093      	lsls	r3, r2
 8001a9c:	464a      	mov	r2, r9
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	4691      	mov	r9, r2
 8001aa2:	464d      	mov	r5, r9
 8001aa4:	1e6b      	subs	r3, r5, #1
 8001aa6:	419d      	sbcs	r5, r3
 8001aa8:	4335      	orrs	r5, r6
 8001aaa:	e778      	b.n	800199e <__aeabi_dadd+0x472>
 8001aac:	464a      	mov	r2, r9
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	d000      	beq.n	8001ab4 <__aeabi_dadd+0x588>
 8001ab2:	e66b      	b.n	800178c <__aeabi_dadd+0x260>
 8001ab4:	076b      	lsls	r3, r5, #29
 8001ab6:	08f9      	lsrs	r1, r7, #3
 8001ab8:	4319      	orrs	r1, r3
 8001aba:	08eb      	lsrs	r3, r5, #3
 8001abc:	e680      	b.n	80017c0 <__aeabi_dadd+0x294>
 8001abe:	4661      	mov	r1, ip
 8001ac0:	4339      	orrs	r1, r7
 8001ac2:	d054      	beq.n	8001b6e <__aeabi_dadd+0x642>
 8001ac4:	4663      	mov	r3, ip
 8001ac6:	08f9      	lsrs	r1, r7, #3
 8001ac8:	075c      	lsls	r4, r3, #29
 8001aca:	4321      	orrs	r1, r4
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	0004      	movs	r4, r0
 8001ad0:	e654      	b.n	800177c <__aeabi_dadd+0x250>
 8001ad2:	464a      	mov	r2, r9
 8001ad4:	1abd      	subs	r5, r7, r2
 8001ad6:	42af      	cmp	r7, r5
 8001ad8:	4189      	sbcs	r1, r1
 8001ada:	4662      	mov	r2, ip
 8001adc:	4249      	negs	r1, r1
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	1a5b      	subs	r3, r3, r1
 8001ae2:	4698      	mov	r8, r3
 8001ae4:	0004      	movs	r4, r0
 8001ae6:	2601      	movs	r6, #1
 8001ae8:	e56b      	b.n	80015c2 <__aeabi_dadd+0x96>
 8001aea:	464a      	mov	r2, r9
 8001aec:	1bd5      	subs	r5, r2, r7
 8001aee:	45a9      	cmp	r9, r5
 8001af0:	4189      	sbcs	r1, r1
 8001af2:	4662      	mov	r2, ip
 8001af4:	4249      	negs	r1, r1
 8001af6:	1a9a      	subs	r2, r3, r2
 8001af8:	1a52      	subs	r2, r2, r1
 8001afa:	4690      	mov	r8, r2
 8001afc:	0212      	lsls	r2, r2, #8
 8001afe:	d532      	bpl.n	8001b66 <__aeabi_dadd+0x63a>
 8001b00:	464a      	mov	r2, r9
 8001b02:	1abd      	subs	r5, r7, r2
 8001b04:	42af      	cmp	r7, r5
 8001b06:	4189      	sbcs	r1, r1
 8001b08:	4662      	mov	r2, ip
 8001b0a:	4249      	negs	r1, r1
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	1a5b      	subs	r3, r3, r1
 8001b10:	4698      	mov	r8, r3
 8001b12:	0004      	movs	r4, r0
 8001b14:	e584      	b.n	8001620 <__aeabi_dadd+0xf4>
 8001b16:	4663      	mov	r3, ip
 8001b18:	08f9      	lsrs	r1, r7, #3
 8001b1a:	075a      	lsls	r2, r3, #29
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	08db      	lsrs	r3, r3, #3
 8001b20:	e64e      	b.n	80017c0 <__aeabi_dadd+0x294>
 8001b22:	08f9      	lsrs	r1, r7, #3
 8001b24:	0768      	lsls	r0, r5, #29
 8001b26:	4301      	orrs	r1, r0
 8001b28:	08eb      	lsrs	r3, r5, #3
 8001b2a:	e624      	b.n	8001776 <__aeabi_dadd+0x24a>
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	433a      	orrs	r2, r7
 8001b30:	d100      	bne.n	8001b34 <__aeabi_dadd+0x608>
 8001b32:	e698      	b.n	8001866 <__aeabi_dadd+0x33a>
 8001b34:	464a      	mov	r2, r9
 8001b36:	08d1      	lsrs	r1, r2, #3
 8001b38:	075a      	lsls	r2, r3, #29
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	08da      	lsrs	r2, r3, #3
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	031b      	lsls	r3, r3, #12
 8001b42:	421a      	tst	r2, r3
 8001b44:	d008      	beq.n	8001b58 <__aeabi_dadd+0x62c>
 8001b46:	4660      	mov	r0, ip
 8001b48:	08c5      	lsrs	r5, r0, #3
 8001b4a:	421d      	tst	r5, r3
 8001b4c:	d104      	bne.n	8001b58 <__aeabi_dadd+0x62c>
 8001b4e:	4654      	mov	r4, sl
 8001b50:	002a      	movs	r2, r5
 8001b52:	08f9      	lsrs	r1, r7, #3
 8001b54:	0743      	lsls	r3, r0, #29
 8001b56:	4319      	orrs	r1, r3
 8001b58:	0f4b      	lsrs	r3, r1, #29
 8001b5a:	00c9      	lsls	r1, r1, #3
 8001b5c:	075b      	lsls	r3, r3, #29
 8001b5e:	08c9      	lsrs	r1, r1, #3
 8001b60:	4319      	orrs	r1, r3
 8001b62:	0013      	movs	r3, r2
 8001b64:	e62c      	b.n	80017c0 <__aeabi_dadd+0x294>
 8001b66:	4641      	mov	r1, r8
 8001b68:	4329      	orrs	r1, r5
 8001b6a:	d000      	beq.n	8001b6e <__aeabi_dadd+0x642>
 8001b6c:	e5fa      	b.n	8001764 <__aeabi_dadd+0x238>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	000a      	movs	r2, r1
 8001b72:	2400      	movs	r4, #0
 8001b74:	e602      	b.n	800177c <__aeabi_dadd+0x250>
 8001b76:	076b      	lsls	r3, r5, #29
 8001b78:	08f9      	lsrs	r1, r7, #3
 8001b7a:	4319      	orrs	r1, r3
 8001b7c:	08eb      	lsrs	r3, r5, #3
 8001b7e:	e5fd      	b.n	800177c <__aeabi_dadd+0x250>
 8001b80:	4663      	mov	r3, ip
 8001b82:	08f9      	lsrs	r1, r7, #3
 8001b84:	075b      	lsls	r3, r3, #29
 8001b86:	4319      	orrs	r1, r3
 8001b88:	4663      	mov	r3, ip
 8001b8a:	0004      	movs	r4, r0
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	e617      	b.n	80017c0 <__aeabi_dadd+0x294>
 8001b90:	003d      	movs	r5, r7
 8001b92:	444d      	add	r5, r9
 8001b94:	4463      	add	r3, ip
 8001b96:	454d      	cmp	r5, r9
 8001b98:	4189      	sbcs	r1, r1
 8001b9a:	4698      	mov	r8, r3
 8001b9c:	4249      	negs	r1, r1
 8001b9e:	4488      	add	r8, r1
 8001ba0:	4643      	mov	r3, r8
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	d400      	bmi.n	8001ba8 <__aeabi_dadd+0x67c>
 8001ba6:	e5dd      	b.n	8001764 <__aeabi_dadd+0x238>
 8001ba8:	4642      	mov	r2, r8
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <__aeabi_dadd+0x6d0>)
 8001bac:	2601      	movs	r6, #1
 8001bae:	401a      	ands	r2, r3
 8001bb0:	4690      	mov	r8, r2
 8001bb2:	e5d7      	b.n	8001764 <__aeabi_dadd+0x238>
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	001e      	movs	r6, r3
 8001bb8:	3820      	subs	r0, #32
 8001bba:	40c6      	lsrs	r6, r0
 8001bbc:	2a20      	cmp	r2, #32
 8001bbe:	d005      	beq.n	8001bcc <__aeabi_dadd+0x6a0>
 8001bc0:	2040      	movs	r0, #64	; 0x40
 8001bc2:	1a82      	subs	r2, r0, r2
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	464a      	mov	r2, r9
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	4691      	mov	r9, r2
 8001bcc:	464d      	mov	r5, r9
 8001bce:	1e6b      	subs	r3, r5, #1
 8001bd0:	419d      	sbcs	r5, r3
 8001bd2:	4335      	orrs	r5, r6
 8001bd4:	e621      	b.n	800181a <__aeabi_dadd+0x2ee>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	e540      	b.n	8001660 <__aeabi_dadd+0x134>
 8001bde:	464a      	mov	r2, r9
 8001be0:	19d5      	adds	r5, r2, r7
 8001be2:	42bd      	cmp	r5, r7
 8001be4:	4189      	sbcs	r1, r1
 8001be6:	4463      	add	r3, ip
 8001be8:	4698      	mov	r8, r3
 8001bea:	4249      	negs	r1, r1
 8001bec:	4488      	add	r8, r1
 8001bee:	e5b3      	b.n	8001758 <__aeabi_dadd+0x22c>
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4a01      	ldr	r2, [pc, #4]	; (8001bf8 <__aeabi_dadd+0x6cc>)
 8001bf4:	000b      	movs	r3, r1
 8001bf6:	e533      	b.n	8001660 <__aeabi_dadd+0x134>
 8001bf8:	000007ff 	.word	0x000007ff
 8001bfc:	ff7fffff 	.word	0xff7fffff

08001c00 <__aeabi_ddiv>:
 8001c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c02:	4657      	mov	r7, sl
 8001c04:	464e      	mov	r6, r9
 8001c06:	4645      	mov	r5, r8
 8001c08:	46de      	mov	lr, fp
 8001c0a:	b5e0      	push	{r5, r6, r7, lr}
 8001c0c:	4681      	mov	r9, r0
 8001c0e:	0005      	movs	r5, r0
 8001c10:	030c      	lsls	r4, r1, #12
 8001c12:	0048      	lsls	r0, r1, #1
 8001c14:	4692      	mov	sl, r2
 8001c16:	001f      	movs	r7, r3
 8001c18:	b085      	sub	sp, #20
 8001c1a:	0b24      	lsrs	r4, r4, #12
 8001c1c:	0d40      	lsrs	r0, r0, #21
 8001c1e:	0fce      	lsrs	r6, r1, #31
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d059      	beq.n	8001cd8 <__aeabi_ddiv+0xd8>
 8001c24:	4b87      	ldr	r3, [pc, #540]	; (8001e44 <__aeabi_ddiv+0x244>)
 8001c26:	4298      	cmp	r0, r3
 8001c28:	d100      	bne.n	8001c2c <__aeabi_ddiv+0x2c>
 8001c2a:	e098      	b.n	8001d5e <__aeabi_ddiv+0x15e>
 8001c2c:	0f6b      	lsrs	r3, r5, #29
 8001c2e:	00e4      	lsls	r4, r4, #3
 8001c30:	431c      	orrs	r4, r3
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	041b      	lsls	r3, r3, #16
 8001c36:	4323      	orrs	r3, r4
 8001c38:	4698      	mov	r8, r3
 8001c3a:	4b83      	ldr	r3, [pc, #524]	; (8001e48 <__aeabi_ddiv+0x248>)
 8001c3c:	00ed      	lsls	r5, r5, #3
 8001c3e:	469b      	mov	fp, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	4699      	mov	r9, r3
 8001c44:	4483      	add	fp, r0
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	033c      	lsls	r4, r7, #12
 8001c4a:	007b      	lsls	r3, r7, #1
 8001c4c:	4650      	mov	r0, sl
 8001c4e:	0b24      	lsrs	r4, r4, #12
 8001c50:	0d5b      	lsrs	r3, r3, #21
 8001c52:	0fff      	lsrs	r7, r7, #31
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d067      	beq.n	8001d28 <__aeabi_ddiv+0x128>
 8001c58:	4a7a      	ldr	r2, [pc, #488]	; (8001e44 <__aeabi_ddiv+0x244>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <__aeabi_ddiv+0x90>
 8001c5e:	497a      	ldr	r1, [pc, #488]	; (8001e48 <__aeabi_ddiv+0x248>)
 8001c60:	0f42      	lsrs	r2, r0, #29
 8001c62:	468c      	mov	ip, r1
 8001c64:	00e4      	lsls	r4, r4, #3
 8001c66:	4659      	mov	r1, fp
 8001c68:	4314      	orrs	r4, r2
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	4463      	add	r3, ip
 8001c6e:	0412      	lsls	r2, r2, #16
 8001c70:	1acb      	subs	r3, r1, r3
 8001c72:	4314      	orrs	r4, r2
 8001c74:	469b      	mov	fp, r3
 8001c76:	00c2      	lsls	r2, r0, #3
 8001c78:	2000      	movs	r0, #0
 8001c7a:	0033      	movs	r3, r6
 8001c7c:	407b      	eors	r3, r7
 8001c7e:	469a      	mov	sl, r3
 8001c80:	464b      	mov	r3, r9
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	d900      	bls.n	8001c88 <__aeabi_ddiv+0x88>
 8001c86:	e0ef      	b.n	8001e68 <__aeabi_ddiv+0x268>
 8001c88:	4970      	ldr	r1, [pc, #448]	; (8001e4c <__aeabi_ddiv+0x24c>)
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	58cb      	ldr	r3, [r1, r3]
 8001c8e:	469f      	mov	pc, r3
 8001c90:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <__aeabi_ddiv+0x250>)
 8001c92:	4652      	mov	r2, sl
 8001c94:	469c      	mov	ip, r3
 8001c96:	4322      	orrs	r2, r4
 8001c98:	44e3      	add	fp, ip
 8001c9a:	2a00      	cmp	r2, #0
 8001c9c:	d000      	beq.n	8001ca0 <__aeabi_ddiv+0xa0>
 8001c9e:	e095      	b.n	8001dcc <__aeabi_ddiv+0x1cc>
 8001ca0:	4649      	mov	r1, r9
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	4319      	orrs	r1, r3
 8001ca6:	4689      	mov	r9, r1
 8001ca8:	2400      	movs	r4, #0
 8001caa:	2002      	movs	r0, #2
 8001cac:	e7e5      	b.n	8001c7a <__aeabi_ddiv+0x7a>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	2500      	movs	r5, #0
 8001cb4:	4652      	mov	r2, sl
 8001cb6:	051b      	lsls	r3, r3, #20
 8001cb8:	4323      	orrs	r3, r4
 8001cba:	07d2      	lsls	r2, r2, #31
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	0028      	movs	r0, r5
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	b005      	add	sp, #20
 8001cc4:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc6:	46bb      	mov	fp, r7
 8001cc8:	46b2      	mov	sl, r6
 8001cca:	46a9      	mov	r9, r5
 8001ccc:	46a0      	mov	r8, r4
 8001cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd0:	2400      	movs	r4, #0
 8001cd2:	2500      	movs	r5, #0
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <__aeabi_ddiv+0x244>)
 8001cd6:	e7ed      	b.n	8001cb4 <__aeabi_ddiv+0xb4>
 8001cd8:	464b      	mov	r3, r9
 8001cda:	4323      	orrs	r3, r4
 8001cdc:	4698      	mov	r8, r3
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_ddiv+0xe2>
 8001ce0:	e089      	b.n	8001df6 <__aeabi_ddiv+0x1f6>
 8001ce2:	2c00      	cmp	r4, #0
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_ddiv+0xe8>
 8001ce6:	e1e0      	b.n	80020aa <__aeabi_ddiv+0x4aa>
 8001ce8:	0020      	movs	r0, r4
 8001cea:	f001 fb07 	bl	80032fc <__clzsi2>
 8001cee:	0001      	movs	r1, r0
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	390b      	subs	r1, #11
 8001cf4:	231d      	movs	r3, #29
 8001cf6:	1a5b      	subs	r3, r3, r1
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	0010      	movs	r0, r2
 8001cfc:	40d9      	lsrs	r1, r3
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4084      	lsls	r4, r0
 8001d02:	000b      	movs	r3, r1
 8001d04:	464d      	mov	r5, r9
 8001d06:	4323      	orrs	r3, r4
 8001d08:	4698      	mov	r8, r3
 8001d0a:	4085      	lsls	r5, r0
 8001d0c:	4851      	ldr	r0, [pc, #324]	; (8001e54 <__aeabi_ddiv+0x254>)
 8001d0e:	033c      	lsls	r4, r7, #12
 8001d10:	1a83      	subs	r3, r0, r2
 8001d12:	469b      	mov	fp, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	4699      	mov	r9, r3
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	007b      	lsls	r3, r7, #1
 8001d1c:	4650      	mov	r0, sl
 8001d1e:	0b24      	lsrs	r4, r4, #12
 8001d20:	0d5b      	lsrs	r3, r3, #21
 8001d22:	0fff      	lsrs	r7, r7, #31
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d197      	bne.n	8001c58 <__aeabi_ddiv+0x58>
 8001d28:	4652      	mov	r2, sl
 8001d2a:	4322      	orrs	r2, r4
 8001d2c:	d055      	beq.n	8001dda <__aeabi_ddiv+0x1da>
 8001d2e:	2c00      	cmp	r4, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_ddiv+0x134>
 8001d32:	e1ca      	b.n	80020ca <__aeabi_ddiv+0x4ca>
 8001d34:	0020      	movs	r0, r4
 8001d36:	f001 fae1 	bl	80032fc <__clzsi2>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	3a0b      	subs	r2, #11
 8001d3e:	231d      	movs	r3, #29
 8001d40:	0001      	movs	r1, r0
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	4652      	mov	r2, sl
 8001d46:	3908      	subs	r1, #8
 8001d48:	40da      	lsrs	r2, r3
 8001d4a:	408c      	lsls	r4, r1
 8001d4c:	4314      	orrs	r4, r2
 8001d4e:	4652      	mov	r2, sl
 8001d50:	408a      	lsls	r2, r1
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <__aeabi_ddiv+0x258>)
 8001d54:	4458      	add	r0, fp
 8001d56:	469b      	mov	fp, r3
 8001d58:	4483      	add	fp, r0
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	e78d      	b.n	8001c7a <__aeabi_ddiv+0x7a>
 8001d5e:	464b      	mov	r3, r9
 8001d60:	4323      	orrs	r3, r4
 8001d62:	4698      	mov	r8, r3
 8001d64:	d140      	bne.n	8001de8 <__aeabi_ddiv+0x1e8>
 8001d66:	2308      	movs	r3, #8
 8001d68:	4699      	mov	r9, r3
 8001d6a:	3b06      	subs	r3, #6
 8001d6c:	2500      	movs	r5, #0
 8001d6e:	4683      	mov	fp, r0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	e769      	b.n	8001c48 <__aeabi_ddiv+0x48>
 8001d74:	46b2      	mov	sl, r6
 8001d76:	9b00      	ldr	r3, [sp, #0]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d0a9      	beq.n	8001cd0 <__aeabi_ddiv+0xd0>
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_ddiv+0x182>
 8001d80:	e211      	b.n	80021a6 <__aeabi_ddiv+0x5a6>
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d093      	beq.n	8001cae <__aeabi_ddiv+0xae>
 8001d86:	4a35      	ldr	r2, [pc, #212]	; (8001e5c <__aeabi_ddiv+0x25c>)
 8001d88:	445a      	add	r2, fp
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	dc00      	bgt.n	8001d90 <__aeabi_ddiv+0x190>
 8001d8e:	e13c      	b.n	800200a <__aeabi_ddiv+0x40a>
 8001d90:	076b      	lsls	r3, r5, #29
 8001d92:	d000      	beq.n	8001d96 <__aeabi_ddiv+0x196>
 8001d94:	e1a7      	b.n	80020e6 <__aeabi_ddiv+0x4e6>
 8001d96:	08ed      	lsrs	r5, r5, #3
 8001d98:	4643      	mov	r3, r8
 8001d9a:	01db      	lsls	r3, r3, #7
 8001d9c:	d506      	bpl.n	8001dac <__aeabi_ddiv+0x1ac>
 8001d9e:	4642      	mov	r2, r8
 8001da0:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <__aeabi_ddiv+0x260>)
 8001da2:	401a      	ands	r2, r3
 8001da4:	4690      	mov	r8, r2
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	00d2      	lsls	r2, r2, #3
 8001daa:	445a      	add	r2, fp
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <__aeabi_ddiv+0x264>)
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dc8e      	bgt.n	8001cd0 <__aeabi_ddiv+0xd0>
 8001db2:	4643      	mov	r3, r8
 8001db4:	0552      	lsls	r2, r2, #21
 8001db6:	0758      	lsls	r0, r3, #29
 8001db8:	025c      	lsls	r4, r3, #9
 8001dba:	4305      	orrs	r5, r0
 8001dbc:	0b24      	lsrs	r4, r4, #12
 8001dbe:	0d53      	lsrs	r3, r2, #21
 8001dc0:	e778      	b.n	8001cb4 <__aeabi_ddiv+0xb4>
 8001dc2:	46ba      	mov	sl, r7
 8001dc4:	46a0      	mov	r8, r4
 8001dc6:	0015      	movs	r5, r2
 8001dc8:	9000      	str	r0, [sp, #0]
 8001dca:	e7d4      	b.n	8001d76 <__aeabi_ddiv+0x176>
 8001dcc:	464a      	mov	r2, r9
 8001dce:	2303      	movs	r3, #3
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	4691      	mov	r9, r2
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	4652      	mov	r2, sl
 8001dd8:	e74f      	b.n	8001c7a <__aeabi_ddiv+0x7a>
 8001dda:	4649      	mov	r1, r9
 8001ddc:	2301      	movs	r3, #1
 8001dde:	4319      	orrs	r1, r3
 8001de0:	4689      	mov	r9, r1
 8001de2:	2400      	movs	r4, #0
 8001de4:	2001      	movs	r0, #1
 8001de6:	e748      	b.n	8001c7a <__aeabi_ddiv+0x7a>
 8001de8:	230c      	movs	r3, #12
 8001dea:	4699      	mov	r9, r3
 8001dec:	3b09      	subs	r3, #9
 8001dee:	46a0      	mov	r8, r4
 8001df0:	4683      	mov	fp, r0
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	e728      	b.n	8001c48 <__aeabi_ddiv+0x48>
 8001df6:	2304      	movs	r3, #4
 8001df8:	4699      	mov	r9, r3
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	469b      	mov	fp, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	2500      	movs	r5, #0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	e720      	b.n	8001c48 <__aeabi_ddiv+0x48>
 8001e06:	2300      	movs	r3, #0
 8001e08:	2480      	movs	r4, #128	; 0x80
 8001e0a:	469a      	mov	sl, r3
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <__aeabi_ddiv+0x244>)
 8001e10:	0324      	lsls	r4, r4, #12
 8001e12:	e74f      	b.n	8001cb4 <__aeabi_ddiv+0xb4>
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	4641      	mov	r1, r8
 8001e18:	031b      	lsls	r3, r3, #12
 8001e1a:	4219      	tst	r1, r3
 8001e1c:	d008      	beq.n	8001e30 <__aeabi_ddiv+0x230>
 8001e1e:	421c      	tst	r4, r3
 8001e20:	d106      	bne.n	8001e30 <__aeabi_ddiv+0x230>
 8001e22:	431c      	orrs	r4, r3
 8001e24:	0324      	lsls	r4, r4, #12
 8001e26:	46ba      	mov	sl, r7
 8001e28:	0015      	movs	r5, r2
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <__aeabi_ddiv+0x244>)
 8001e2c:	0b24      	lsrs	r4, r4, #12
 8001e2e:	e741      	b.n	8001cb4 <__aeabi_ddiv+0xb4>
 8001e30:	2480      	movs	r4, #128	; 0x80
 8001e32:	4643      	mov	r3, r8
 8001e34:	0324      	lsls	r4, r4, #12
 8001e36:	431c      	orrs	r4, r3
 8001e38:	0324      	lsls	r4, r4, #12
 8001e3a:	46b2      	mov	sl, r6
 8001e3c:	4b01      	ldr	r3, [pc, #4]	; (8001e44 <__aeabi_ddiv+0x244>)
 8001e3e:	0b24      	lsrs	r4, r4, #12
 8001e40:	e738      	b.n	8001cb4 <__aeabi_ddiv+0xb4>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	000007ff 	.word	0x000007ff
 8001e48:	fffffc01 	.word	0xfffffc01
 8001e4c:	0800d3a8 	.word	0x0800d3a8
 8001e50:	fffff801 	.word	0xfffff801
 8001e54:	fffffc0d 	.word	0xfffffc0d
 8001e58:	000003f3 	.word	0x000003f3
 8001e5c:	000003ff 	.word	0x000003ff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	4544      	cmp	r4, r8
 8001e6a:	d200      	bcs.n	8001e6e <__aeabi_ddiv+0x26e>
 8001e6c:	e116      	b.n	800209c <__aeabi_ddiv+0x49c>
 8001e6e:	d100      	bne.n	8001e72 <__aeabi_ddiv+0x272>
 8001e70:	e111      	b.n	8002096 <__aeabi_ddiv+0x496>
 8001e72:	2301      	movs	r3, #1
 8001e74:	425b      	negs	r3, r3
 8001e76:	469c      	mov	ip, r3
 8001e78:	002e      	movs	r6, r5
 8001e7a:	4640      	mov	r0, r8
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	44e3      	add	fp, ip
 8001e80:	0223      	lsls	r3, r4, #8
 8001e82:	0e14      	lsrs	r4, r2, #24
 8001e84:	431c      	orrs	r4, r3
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	4699      	mov	r9, r3
 8001e8a:	0423      	lsls	r3, r4, #16
 8001e8c:	0c1f      	lsrs	r7, r3, #16
 8001e8e:	0212      	lsls	r2, r2, #8
 8001e90:	4649      	mov	r1, r9
 8001e92:	9200      	str	r2, [sp, #0]
 8001e94:	9701      	str	r7, [sp, #4]
 8001e96:	f7fe f9d7 	bl	8000248 <__aeabi_uidivmod>
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	437a      	muls	r2, r7
 8001e9e:	040b      	lsls	r3, r1, #16
 8001ea0:	0c31      	lsrs	r1, r6, #16
 8001ea2:	4680      	mov	r8, r0
 8001ea4:	4319      	orrs	r1, r3
 8001ea6:	428a      	cmp	r2, r1
 8001ea8:	d90b      	bls.n	8001ec2 <__aeabi_ddiv+0x2c2>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	425b      	negs	r3, r3
 8001eae:	469c      	mov	ip, r3
 8001eb0:	1909      	adds	r1, r1, r4
 8001eb2:	44e0      	add	r8, ip
 8001eb4:	428c      	cmp	r4, r1
 8001eb6:	d804      	bhi.n	8001ec2 <__aeabi_ddiv+0x2c2>
 8001eb8:	428a      	cmp	r2, r1
 8001eba:	d902      	bls.n	8001ec2 <__aeabi_ddiv+0x2c2>
 8001ebc:	1e83      	subs	r3, r0, #2
 8001ebe:	4698      	mov	r8, r3
 8001ec0:	1909      	adds	r1, r1, r4
 8001ec2:	1a88      	subs	r0, r1, r2
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	f7fe f9bf 	bl	8000248 <__aeabi_uidivmod>
 8001eca:	0409      	lsls	r1, r1, #16
 8001ecc:	468c      	mov	ip, r1
 8001ece:	0431      	lsls	r1, r6, #16
 8001ed0:	4666      	mov	r6, ip
 8001ed2:	9a01      	ldr	r2, [sp, #4]
 8001ed4:	0c09      	lsrs	r1, r1, #16
 8001ed6:	4342      	muls	r2, r0
 8001ed8:	0003      	movs	r3, r0
 8001eda:	4331      	orrs	r1, r6
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d904      	bls.n	8001eea <__aeabi_ddiv+0x2ea>
 8001ee0:	1909      	adds	r1, r1, r4
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	428c      	cmp	r4, r1
 8001ee6:	d800      	bhi.n	8001eea <__aeabi_ddiv+0x2ea>
 8001ee8:	e111      	b.n	800210e <__aeabi_ddiv+0x50e>
 8001eea:	1a89      	subs	r1, r1, r2
 8001eec:	4642      	mov	r2, r8
 8001eee:	9e00      	ldr	r6, [sp, #0]
 8001ef0:	0412      	lsls	r2, r2, #16
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	0c33      	lsrs	r3, r6, #16
 8001ef6:	001f      	movs	r7, r3
 8001ef8:	0c10      	lsrs	r0, r2, #16
 8001efa:	4690      	mov	r8, r2
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	0413      	lsls	r3, r2, #16
 8001f00:	0432      	lsls	r2, r6, #16
 8001f02:	0c16      	lsrs	r6, r2, #16
 8001f04:	0032      	movs	r2, r6
 8001f06:	0c1b      	lsrs	r3, r3, #16
 8001f08:	435a      	muls	r2, r3
 8001f0a:	9603      	str	r6, [sp, #12]
 8001f0c:	437b      	muls	r3, r7
 8001f0e:	4346      	muls	r6, r0
 8001f10:	4378      	muls	r0, r7
 8001f12:	0c17      	lsrs	r7, r2, #16
 8001f14:	46bc      	mov	ip, r7
 8001f16:	199b      	adds	r3, r3, r6
 8001f18:	4463      	add	r3, ip
 8001f1a:	429e      	cmp	r6, r3
 8001f1c:	d903      	bls.n	8001f26 <__aeabi_ddiv+0x326>
 8001f1e:	2680      	movs	r6, #128	; 0x80
 8001f20:	0276      	lsls	r6, r6, #9
 8001f22:	46b4      	mov	ip, r6
 8001f24:	4460      	add	r0, ip
 8001f26:	0c1e      	lsrs	r6, r3, #16
 8001f28:	1830      	adds	r0, r6, r0
 8001f2a:	0416      	lsls	r6, r2, #16
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	0c36      	lsrs	r6, r6, #16
 8001f30:	199e      	adds	r6, r3, r6
 8001f32:	4281      	cmp	r1, r0
 8001f34:	d200      	bcs.n	8001f38 <__aeabi_ddiv+0x338>
 8001f36:	e09c      	b.n	8002072 <__aeabi_ddiv+0x472>
 8001f38:	d100      	bne.n	8001f3c <__aeabi_ddiv+0x33c>
 8001f3a:	e097      	b.n	800206c <__aeabi_ddiv+0x46c>
 8001f3c:	1bae      	subs	r6, r5, r6
 8001f3e:	1a09      	subs	r1, r1, r0
 8001f40:	42b5      	cmp	r5, r6
 8001f42:	4180      	sbcs	r0, r0
 8001f44:	4240      	negs	r0, r0
 8001f46:	1a08      	subs	r0, r1, r0
 8001f48:	4284      	cmp	r4, r0
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_ddiv+0x34e>
 8001f4c:	e111      	b.n	8002172 <__aeabi_ddiv+0x572>
 8001f4e:	4649      	mov	r1, r9
 8001f50:	f7fe f97a 	bl	8000248 <__aeabi_uidivmod>
 8001f54:	9a01      	ldr	r2, [sp, #4]
 8001f56:	040b      	lsls	r3, r1, #16
 8001f58:	4342      	muls	r2, r0
 8001f5a:	0c31      	lsrs	r1, r6, #16
 8001f5c:	0005      	movs	r5, r0
 8001f5e:	4319      	orrs	r1, r3
 8001f60:	428a      	cmp	r2, r1
 8001f62:	d907      	bls.n	8001f74 <__aeabi_ddiv+0x374>
 8001f64:	1909      	adds	r1, r1, r4
 8001f66:	3d01      	subs	r5, #1
 8001f68:	428c      	cmp	r4, r1
 8001f6a:	d803      	bhi.n	8001f74 <__aeabi_ddiv+0x374>
 8001f6c:	428a      	cmp	r2, r1
 8001f6e:	d901      	bls.n	8001f74 <__aeabi_ddiv+0x374>
 8001f70:	1e85      	subs	r5, r0, #2
 8001f72:	1909      	adds	r1, r1, r4
 8001f74:	1a88      	subs	r0, r1, r2
 8001f76:	4649      	mov	r1, r9
 8001f78:	f7fe f966 	bl	8000248 <__aeabi_uidivmod>
 8001f7c:	0409      	lsls	r1, r1, #16
 8001f7e:	468c      	mov	ip, r1
 8001f80:	0431      	lsls	r1, r6, #16
 8001f82:	4666      	mov	r6, ip
 8001f84:	9a01      	ldr	r2, [sp, #4]
 8001f86:	0c09      	lsrs	r1, r1, #16
 8001f88:	4342      	muls	r2, r0
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	4331      	orrs	r1, r6
 8001f8e:	428a      	cmp	r2, r1
 8001f90:	d907      	bls.n	8001fa2 <__aeabi_ddiv+0x3a2>
 8001f92:	1909      	adds	r1, r1, r4
 8001f94:	3b01      	subs	r3, #1
 8001f96:	428c      	cmp	r4, r1
 8001f98:	d803      	bhi.n	8001fa2 <__aeabi_ddiv+0x3a2>
 8001f9a:	428a      	cmp	r2, r1
 8001f9c:	d901      	bls.n	8001fa2 <__aeabi_ddiv+0x3a2>
 8001f9e:	1e83      	subs	r3, r0, #2
 8001fa0:	1909      	adds	r1, r1, r4
 8001fa2:	9e03      	ldr	r6, [sp, #12]
 8001fa4:	1a89      	subs	r1, r1, r2
 8001fa6:	0032      	movs	r2, r6
 8001fa8:	042d      	lsls	r5, r5, #16
 8001faa:	431d      	orrs	r5, r3
 8001fac:	9f02      	ldr	r7, [sp, #8]
 8001fae:	042b      	lsls	r3, r5, #16
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	435a      	muls	r2, r3
 8001fb4:	437b      	muls	r3, r7
 8001fb6:	469c      	mov	ip, r3
 8001fb8:	0c28      	lsrs	r0, r5, #16
 8001fba:	4346      	muls	r6, r0
 8001fbc:	0c13      	lsrs	r3, r2, #16
 8001fbe:	44b4      	add	ip, r6
 8001fc0:	4463      	add	r3, ip
 8001fc2:	4378      	muls	r0, r7
 8001fc4:	429e      	cmp	r6, r3
 8001fc6:	d903      	bls.n	8001fd0 <__aeabi_ddiv+0x3d0>
 8001fc8:	2680      	movs	r6, #128	; 0x80
 8001fca:	0276      	lsls	r6, r6, #9
 8001fcc:	46b4      	mov	ip, r6
 8001fce:	4460      	add	r0, ip
 8001fd0:	0c1e      	lsrs	r6, r3, #16
 8001fd2:	0412      	lsls	r2, r2, #16
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	0c12      	lsrs	r2, r2, #16
 8001fd8:	1830      	adds	r0, r6, r0
 8001fda:	189b      	adds	r3, r3, r2
 8001fdc:	4281      	cmp	r1, r0
 8001fde:	d306      	bcc.n	8001fee <__aeabi_ddiv+0x3ee>
 8001fe0:	d002      	beq.n	8001fe8 <__aeabi_ddiv+0x3e8>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	431d      	orrs	r5, r3
 8001fe6:	e6ce      	b.n	8001d86 <__aeabi_ddiv+0x186>
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d100      	bne.n	8001fee <__aeabi_ddiv+0x3ee>
 8001fec:	e6cb      	b.n	8001d86 <__aeabi_ddiv+0x186>
 8001fee:	1861      	adds	r1, r4, r1
 8001ff0:	1e6e      	subs	r6, r5, #1
 8001ff2:	42a1      	cmp	r1, r4
 8001ff4:	d200      	bcs.n	8001ff8 <__aeabi_ddiv+0x3f8>
 8001ff6:	e0a4      	b.n	8002142 <__aeabi_ddiv+0x542>
 8001ff8:	4281      	cmp	r1, r0
 8001ffa:	d200      	bcs.n	8001ffe <__aeabi_ddiv+0x3fe>
 8001ffc:	e0c9      	b.n	8002192 <__aeabi_ddiv+0x592>
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0x402>
 8002000:	e0d9      	b.n	80021b6 <__aeabi_ddiv+0x5b6>
 8002002:	0035      	movs	r5, r6
 8002004:	e7ed      	b.n	8001fe2 <__aeabi_ddiv+0x3e2>
 8002006:	2501      	movs	r5, #1
 8002008:	426d      	negs	r5, r5
 800200a:	2101      	movs	r1, #1
 800200c:	1a89      	subs	r1, r1, r2
 800200e:	2938      	cmp	r1, #56	; 0x38
 8002010:	dd00      	ble.n	8002014 <__aeabi_ddiv+0x414>
 8002012:	e64c      	b.n	8001cae <__aeabi_ddiv+0xae>
 8002014:	291f      	cmp	r1, #31
 8002016:	dc00      	bgt.n	800201a <__aeabi_ddiv+0x41a>
 8002018:	e07f      	b.n	800211a <__aeabi_ddiv+0x51a>
 800201a:	231f      	movs	r3, #31
 800201c:	425b      	negs	r3, r3
 800201e:	1a9a      	subs	r2, r3, r2
 8002020:	4643      	mov	r3, r8
 8002022:	40d3      	lsrs	r3, r2
 8002024:	2920      	cmp	r1, #32
 8002026:	d004      	beq.n	8002032 <__aeabi_ddiv+0x432>
 8002028:	4644      	mov	r4, r8
 800202a:	4a65      	ldr	r2, [pc, #404]	; (80021c0 <__aeabi_ddiv+0x5c0>)
 800202c:	445a      	add	r2, fp
 800202e:	4094      	lsls	r4, r2
 8002030:	4325      	orrs	r5, r4
 8002032:	1e6a      	subs	r2, r5, #1
 8002034:	4195      	sbcs	r5, r2
 8002036:	2207      	movs	r2, #7
 8002038:	432b      	orrs	r3, r5
 800203a:	0015      	movs	r5, r2
 800203c:	2400      	movs	r4, #0
 800203e:	401d      	ands	r5, r3
 8002040:	421a      	tst	r2, r3
 8002042:	d100      	bne.n	8002046 <__aeabi_ddiv+0x446>
 8002044:	e0a1      	b.n	800218a <__aeabi_ddiv+0x58a>
 8002046:	220f      	movs	r2, #15
 8002048:	2400      	movs	r4, #0
 800204a:	401a      	ands	r2, r3
 800204c:	2a04      	cmp	r2, #4
 800204e:	d100      	bne.n	8002052 <__aeabi_ddiv+0x452>
 8002050:	e098      	b.n	8002184 <__aeabi_ddiv+0x584>
 8002052:	1d1a      	adds	r2, r3, #4
 8002054:	429a      	cmp	r2, r3
 8002056:	419b      	sbcs	r3, r3
 8002058:	425b      	negs	r3, r3
 800205a:	18e4      	adds	r4, r4, r3
 800205c:	0013      	movs	r3, r2
 800205e:	0222      	lsls	r2, r4, #8
 8002060:	d400      	bmi.n	8002064 <__aeabi_ddiv+0x464>
 8002062:	e08f      	b.n	8002184 <__aeabi_ddiv+0x584>
 8002064:	2301      	movs	r3, #1
 8002066:	2400      	movs	r4, #0
 8002068:	2500      	movs	r5, #0
 800206a:	e623      	b.n	8001cb4 <__aeabi_ddiv+0xb4>
 800206c:	42b5      	cmp	r5, r6
 800206e:	d300      	bcc.n	8002072 <__aeabi_ddiv+0x472>
 8002070:	e764      	b.n	8001f3c <__aeabi_ddiv+0x33c>
 8002072:	4643      	mov	r3, r8
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	9b00      	ldr	r3, [sp, #0]
 8002078:	469c      	mov	ip, r3
 800207a:	4465      	add	r5, ip
 800207c:	001f      	movs	r7, r3
 800207e:	429d      	cmp	r5, r3
 8002080:	419b      	sbcs	r3, r3
 8002082:	425b      	negs	r3, r3
 8002084:	191b      	adds	r3, r3, r4
 8002086:	18c9      	adds	r1, r1, r3
 8002088:	428c      	cmp	r4, r1
 800208a:	d23a      	bcs.n	8002102 <__aeabi_ddiv+0x502>
 800208c:	4288      	cmp	r0, r1
 800208e:	d863      	bhi.n	8002158 <__aeabi_ddiv+0x558>
 8002090:	d060      	beq.n	8002154 <__aeabi_ddiv+0x554>
 8002092:	4690      	mov	r8, r2
 8002094:	e752      	b.n	8001f3c <__aeabi_ddiv+0x33c>
 8002096:	42aa      	cmp	r2, r5
 8002098:	d900      	bls.n	800209c <__aeabi_ddiv+0x49c>
 800209a:	e6ea      	b.n	8001e72 <__aeabi_ddiv+0x272>
 800209c:	4643      	mov	r3, r8
 800209e:	07de      	lsls	r6, r3, #31
 80020a0:	0858      	lsrs	r0, r3, #1
 80020a2:	086b      	lsrs	r3, r5, #1
 80020a4:	431e      	orrs	r6, r3
 80020a6:	07ed      	lsls	r5, r5, #31
 80020a8:	e6ea      	b.n	8001e80 <__aeabi_ddiv+0x280>
 80020aa:	4648      	mov	r0, r9
 80020ac:	f001 f926 	bl	80032fc <__clzsi2>
 80020b0:	0001      	movs	r1, r0
 80020b2:	0002      	movs	r2, r0
 80020b4:	3115      	adds	r1, #21
 80020b6:	3220      	adds	r2, #32
 80020b8:	291c      	cmp	r1, #28
 80020ba:	dc00      	bgt.n	80020be <__aeabi_ddiv+0x4be>
 80020bc:	e61a      	b.n	8001cf4 <__aeabi_ddiv+0xf4>
 80020be:	464b      	mov	r3, r9
 80020c0:	3808      	subs	r0, #8
 80020c2:	4083      	lsls	r3, r0
 80020c4:	2500      	movs	r5, #0
 80020c6:	4698      	mov	r8, r3
 80020c8:	e620      	b.n	8001d0c <__aeabi_ddiv+0x10c>
 80020ca:	f001 f917 	bl	80032fc <__clzsi2>
 80020ce:	0003      	movs	r3, r0
 80020d0:	001a      	movs	r2, r3
 80020d2:	3215      	adds	r2, #21
 80020d4:	3020      	adds	r0, #32
 80020d6:	2a1c      	cmp	r2, #28
 80020d8:	dc00      	bgt.n	80020dc <__aeabi_ddiv+0x4dc>
 80020da:	e630      	b.n	8001d3e <__aeabi_ddiv+0x13e>
 80020dc:	4654      	mov	r4, sl
 80020de:	3b08      	subs	r3, #8
 80020e0:	2200      	movs	r2, #0
 80020e2:	409c      	lsls	r4, r3
 80020e4:	e635      	b.n	8001d52 <__aeabi_ddiv+0x152>
 80020e6:	230f      	movs	r3, #15
 80020e8:	402b      	ands	r3, r5
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d100      	bne.n	80020f0 <__aeabi_ddiv+0x4f0>
 80020ee:	e652      	b.n	8001d96 <__aeabi_ddiv+0x196>
 80020f0:	2305      	movs	r3, #5
 80020f2:	425b      	negs	r3, r3
 80020f4:	42ab      	cmp	r3, r5
 80020f6:	419b      	sbcs	r3, r3
 80020f8:	3504      	adds	r5, #4
 80020fa:	425b      	negs	r3, r3
 80020fc:	08ed      	lsrs	r5, r5, #3
 80020fe:	4498      	add	r8, r3
 8002100:	e64a      	b.n	8001d98 <__aeabi_ddiv+0x198>
 8002102:	428c      	cmp	r4, r1
 8002104:	d1c5      	bne.n	8002092 <__aeabi_ddiv+0x492>
 8002106:	42af      	cmp	r7, r5
 8002108:	d9c0      	bls.n	800208c <__aeabi_ddiv+0x48c>
 800210a:	4690      	mov	r8, r2
 800210c:	e716      	b.n	8001f3c <__aeabi_ddiv+0x33c>
 800210e:	428a      	cmp	r2, r1
 8002110:	d800      	bhi.n	8002114 <__aeabi_ddiv+0x514>
 8002112:	e6ea      	b.n	8001eea <__aeabi_ddiv+0x2ea>
 8002114:	1e83      	subs	r3, r0, #2
 8002116:	1909      	adds	r1, r1, r4
 8002118:	e6e7      	b.n	8001eea <__aeabi_ddiv+0x2ea>
 800211a:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <__aeabi_ddiv+0x5c4>)
 800211c:	0028      	movs	r0, r5
 800211e:	445a      	add	r2, fp
 8002120:	4643      	mov	r3, r8
 8002122:	4095      	lsls	r5, r2
 8002124:	4093      	lsls	r3, r2
 8002126:	40c8      	lsrs	r0, r1
 8002128:	1e6a      	subs	r2, r5, #1
 800212a:	4195      	sbcs	r5, r2
 800212c:	4644      	mov	r4, r8
 800212e:	4303      	orrs	r3, r0
 8002130:	432b      	orrs	r3, r5
 8002132:	40cc      	lsrs	r4, r1
 8002134:	075a      	lsls	r2, r3, #29
 8002136:	d092      	beq.n	800205e <__aeabi_ddiv+0x45e>
 8002138:	220f      	movs	r2, #15
 800213a:	401a      	ands	r2, r3
 800213c:	2a04      	cmp	r2, #4
 800213e:	d188      	bne.n	8002052 <__aeabi_ddiv+0x452>
 8002140:	e78d      	b.n	800205e <__aeabi_ddiv+0x45e>
 8002142:	0035      	movs	r5, r6
 8002144:	4281      	cmp	r1, r0
 8002146:	d000      	beq.n	800214a <__aeabi_ddiv+0x54a>
 8002148:	e74b      	b.n	8001fe2 <__aeabi_ddiv+0x3e2>
 800214a:	9a00      	ldr	r2, [sp, #0]
 800214c:	4293      	cmp	r3, r2
 800214e:	d000      	beq.n	8002152 <__aeabi_ddiv+0x552>
 8002150:	e747      	b.n	8001fe2 <__aeabi_ddiv+0x3e2>
 8002152:	e618      	b.n	8001d86 <__aeabi_ddiv+0x186>
 8002154:	42ae      	cmp	r6, r5
 8002156:	d99c      	bls.n	8002092 <__aeabi_ddiv+0x492>
 8002158:	2302      	movs	r3, #2
 800215a:	425b      	negs	r3, r3
 800215c:	469c      	mov	ip, r3
 800215e:	9b00      	ldr	r3, [sp, #0]
 8002160:	44e0      	add	r8, ip
 8002162:	469c      	mov	ip, r3
 8002164:	4465      	add	r5, ip
 8002166:	429d      	cmp	r5, r3
 8002168:	419b      	sbcs	r3, r3
 800216a:	425b      	negs	r3, r3
 800216c:	191b      	adds	r3, r3, r4
 800216e:	18c9      	adds	r1, r1, r3
 8002170:	e6e4      	b.n	8001f3c <__aeabi_ddiv+0x33c>
 8002172:	4a15      	ldr	r2, [pc, #84]	; (80021c8 <__aeabi_ddiv+0x5c8>)
 8002174:	445a      	add	r2, fp
 8002176:	2a00      	cmp	r2, #0
 8002178:	dc00      	bgt.n	800217c <__aeabi_ddiv+0x57c>
 800217a:	e744      	b.n	8002006 <__aeabi_ddiv+0x406>
 800217c:	2301      	movs	r3, #1
 800217e:	2500      	movs	r5, #0
 8002180:	4498      	add	r8, r3
 8002182:	e609      	b.n	8001d98 <__aeabi_ddiv+0x198>
 8002184:	0765      	lsls	r5, r4, #29
 8002186:	0264      	lsls	r4, r4, #9
 8002188:	0b24      	lsrs	r4, r4, #12
 800218a:	08db      	lsrs	r3, r3, #3
 800218c:	431d      	orrs	r5, r3
 800218e:	2300      	movs	r3, #0
 8002190:	e590      	b.n	8001cb4 <__aeabi_ddiv+0xb4>
 8002192:	9e00      	ldr	r6, [sp, #0]
 8002194:	3d02      	subs	r5, #2
 8002196:	0072      	lsls	r2, r6, #1
 8002198:	42b2      	cmp	r2, r6
 800219a:	41bf      	sbcs	r7, r7
 800219c:	427f      	negs	r7, r7
 800219e:	193c      	adds	r4, r7, r4
 80021a0:	1909      	adds	r1, r1, r4
 80021a2:	9200      	str	r2, [sp, #0]
 80021a4:	e7ce      	b.n	8002144 <__aeabi_ddiv+0x544>
 80021a6:	2480      	movs	r4, #128	; 0x80
 80021a8:	4643      	mov	r3, r8
 80021aa:	0324      	lsls	r4, r4, #12
 80021ac:	431c      	orrs	r4, r3
 80021ae:	0324      	lsls	r4, r4, #12
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <__aeabi_ddiv+0x5cc>)
 80021b2:	0b24      	lsrs	r4, r4, #12
 80021b4:	e57e      	b.n	8001cb4 <__aeabi_ddiv+0xb4>
 80021b6:	9a00      	ldr	r2, [sp, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d3ea      	bcc.n	8002192 <__aeabi_ddiv+0x592>
 80021bc:	0035      	movs	r5, r6
 80021be:	e7c4      	b.n	800214a <__aeabi_ddiv+0x54a>
 80021c0:	0000043e 	.word	0x0000043e
 80021c4:	0000041e 	.word	0x0000041e
 80021c8:	000003ff 	.word	0x000003ff
 80021cc:	000007ff 	.word	0x000007ff

080021d0 <__eqdf2>:
 80021d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d2:	464f      	mov	r7, r9
 80021d4:	4646      	mov	r6, r8
 80021d6:	46d6      	mov	lr, sl
 80021d8:	4694      	mov	ip, r2
 80021da:	4691      	mov	r9, r2
 80021dc:	031a      	lsls	r2, r3, #12
 80021de:	0b12      	lsrs	r2, r2, #12
 80021e0:	4d18      	ldr	r5, [pc, #96]	; (8002244 <__eqdf2+0x74>)
 80021e2:	b5c0      	push	{r6, r7, lr}
 80021e4:	004c      	lsls	r4, r1, #1
 80021e6:	030f      	lsls	r7, r1, #12
 80021e8:	4692      	mov	sl, r2
 80021ea:	005a      	lsls	r2, r3, #1
 80021ec:	0006      	movs	r6, r0
 80021ee:	4680      	mov	r8, r0
 80021f0:	0b3f      	lsrs	r7, r7, #12
 80021f2:	2001      	movs	r0, #1
 80021f4:	0d64      	lsrs	r4, r4, #21
 80021f6:	0fc9      	lsrs	r1, r1, #31
 80021f8:	0d52      	lsrs	r2, r2, #21
 80021fa:	0fdb      	lsrs	r3, r3, #31
 80021fc:	42ac      	cmp	r4, r5
 80021fe:	d00a      	beq.n	8002216 <__eqdf2+0x46>
 8002200:	42aa      	cmp	r2, r5
 8002202:	d003      	beq.n	800220c <__eqdf2+0x3c>
 8002204:	4294      	cmp	r4, r2
 8002206:	d101      	bne.n	800220c <__eqdf2+0x3c>
 8002208:	4557      	cmp	r7, sl
 800220a:	d00d      	beq.n	8002228 <__eqdf2+0x58>
 800220c:	bce0      	pop	{r5, r6, r7}
 800220e:	46ba      	mov	sl, r7
 8002210:	46b1      	mov	r9, r6
 8002212:	46a8      	mov	r8, r5
 8002214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002216:	003d      	movs	r5, r7
 8002218:	4335      	orrs	r5, r6
 800221a:	d1f7      	bne.n	800220c <__eqdf2+0x3c>
 800221c:	42a2      	cmp	r2, r4
 800221e:	d1f5      	bne.n	800220c <__eqdf2+0x3c>
 8002220:	4652      	mov	r2, sl
 8002222:	4665      	mov	r5, ip
 8002224:	432a      	orrs	r2, r5
 8002226:	d1f1      	bne.n	800220c <__eqdf2+0x3c>
 8002228:	2001      	movs	r0, #1
 800222a:	45c8      	cmp	r8, r9
 800222c:	d1ee      	bne.n	800220c <__eqdf2+0x3c>
 800222e:	4299      	cmp	r1, r3
 8002230:	d006      	beq.n	8002240 <__eqdf2+0x70>
 8002232:	2c00      	cmp	r4, #0
 8002234:	d1ea      	bne.n	800220c <__eqdf2+0x3c>
 8002236:	433e      	orrs	r6, r7
 8002238:	0030      	movs	r0, r6
 800223a:	1e46      	subs	r6, r0, #1
 800223c:	41b0      	sbcs	r0, r6
 800223e:	e7e5      	b.n	800220c <__eqdf2+0x3c>
 8002240:	2000      	movs	r0, #0
 8002242:	e7e3      	b.n	800220c <__eqdf2+0x3c>
 8002244:	000007ff 	.word	0x000007ff

08002248 <__gedf2>:
 8002248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224a:	464e      	mov	r6, r9
 800224c:	4645      	mov	r5, r8
 800224e:	4657      	mov	r7, sl
 8002250:	46de      	mov	lr, fp
 8002252:	0004      	movs	r4, r0
 8002254:	0018      	movs	r0, r3
 8002256:	b5e0      	push	{r5, r6, r7, lr}
 8002258:	0016      	movs	r6, r2
 800225a:	031b      	lsls	r3, r3, #12
 800225c:	0b1b      	lsrs	r3, r3, #12
 800225e:	4d32      	ldr	r5, [pc, #200]	; (8002328 <__gedf2+0xe0>)
 8002260:	030f      	lsls	r7, r1, #12
 8002262:	004a      	lsls	r2, r1, #1
 8002264:	4699      	mov	r9, r3
 8002266:	0043      	lsls	r3, r0, #1
 8002268:	46a4      	mov	ip, r4
 800226a:	46b0      	mov	r8, r6
 800226c:	0b3f      	lsrs	r7, r7, #12
 800226e:	0d52      	lsrs	r2, r2, #21
 8002270:	0fc9      	lsrs	r1, r1, #31
 8002272:	0d5b      	lsrs	r3, r3, #21
 8002274:	0fc0      	lsrs	r0, r0, #31
 8002276:	42aa      	cmp	r2, r5
 8002278:	d029      	beq.n	80022ce <__gedf2+0x86>
 800227a:	42ab      	cmp	r3, r5
 800227c:	d018      	beq.n	80022b0 <__gedf2+0x68>
 800227e:	2a00      	cmp	r2, #0
 8002280:	d12a      	bne.n	80022d8 <__gedf2+0x90>
 8002282:	433c      	orrs	r4, r7
 8002284:	46a3      	mov	fp, r4
 8002286:	4265      	negs	r5, r4
 8002288:	4165      	adcs	r5, r4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <__gedf2+0x4c>
 800228e:	464c      	mov	r4, r9
 8002290:	4326      	orrs	r6, r4
 8002292:	d027      	beq.n	80022e4 <__gedf2+0x9c>
 8002294:	2d00      	cmp	r5, #0
 8002296:	d115      	bne.n	80022c4 <__gedf2+0x7c>
 8002298:	4281      	cmp	r1, r0
 800229a:	d028      	beq.n	80022ee <__gedf2+0xa6>
 800229c:	2002      	movs	r0, #2
 800229e:	3901      	subs	r1, #1
 80022a0:	4008      	ands	r0, r1
 80022a2:	3801      	subs	r0, #1
 80022a4:	bcf0      	pop	{r4, r5, r6, r7}
 80022a6:	46bb      	mov	fp, r7
 80022a8:	46b2      	mov	sl, r6
 80022aa:	46a9      	mov	r9, r5
 80022ac:	46a0      	mov	r8, r4
 80022ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b0:	464d      	mov	r5, r9
 80022b2:	432e      	orrs	r6, r5
 80022b4:	d12f      	bne.n	8002316 <__gedf2+0xce>
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	d1ee      	bne.n	8002298 <__gedf2+0x50>
 80022ba:	433c      	orrs	r4, r7
 80022bc:	4265      	negs	r5, r4
 80022be:	4165      	adcs	r5, r4
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	d0e9      	beq.n	8002298 <__gedf2+0x50>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d1ed      	bne.n	80022a4 <__gedf2+0x5c>
 80022c8:	2001      	movs	r0, #1
 80022ca:	4240      	negs	r0, r0
 80022cc:	e7ea      	b.n	80022a4 <__gedf2+0x5c>
 80022ce:	003d      	movs	r5, r7
 80022d0:	4325      	orrs	r5, r4
 80022d2:	d120      	bne.n	8002316 <__gedf2+0xce>
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d0eb      	beq.n	80022b0 <__gedf2+0x68>
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1dd      	bne.n	8002298 <__gedf2+0x50>
 80022dc:	464c      	mov	r4, r9
 80022de:	4326      	orrs	r6, r4
 80022e0:	d1da      	bne.n	8002298 <__gedf2+0x50>
 80022e2:	e7db      	b.n	800229c <__gedf2+0x54>
 80022e4:	465b      	mov	r3, fp
 80022e6:	2000      	movs	r0, #0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0db      	beq.n	80022a4 <__gedf2+0x5c>
 80022ec:	e7d6      	b.n	800229c <__gedf2+0x54>
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dc0a      	bgt.n	8002308 <__gedf2+0xc0>
 80022f2:	dbe7      	blt.n	80022c4 <__gedf2+0x7c>
 80022f4:	454f      	cmp	r7, r9
 80022f6:	d8d1      	bhi.n	800229c <__gedf2+0x54>
 80022f8:	d010      	beq.n	800231c <__gedf2+0xd4>
 80022fa:	2000      	movs	r0, #0
 80022fc:	454f      	cmp	r7, r9
 80022fe:	d2d1      	bcs.n	80022a4 <__gedf2+0x5c>
 8002300:	2900      	cmp	r1, #0
 8002302:	d0e1      	beq.n	80022c8 <__gedf2+0x80>
 8002304:	0008      	movs	r0, r1
 8002306:	e7cd      	b.n	80022a4 <__gedf2+0x5c>
 8002308:	4243      	negs	r3, r0
 800230a:	4158      	adcs	r0, r3
 800230c:	2302      	movs	r3, #2
 800230e:	4240      	negs	r0, r0
 8002310:	4018      	ands	r0, r3
 8002312:	3801      	subs	r0, #1
 8002314:	e7c6      	b.n	80022a4 <__gedf2+0x5c>
 8002316:	2002      	movs	r0, #2
 8002318:	4240      	negs	r0, r0
 800231a:	e7c3      	b.n	80022a4 <__gedf2+0x5c>
 800231c:	45c4      	cmp	ip, r8
 800231e:	d8bd      	bhi.n	800229c <__gedf2+0x54>
 8002320:	2000      	movs	r0, #0
 8002322:	45c4      	cmp	ip, r8
 8002324:	d2be      	bcs.n	80022a4 <__gedf2+0x5c>
 8002326:	e7eb      	b.n	8002300 <__gedf2+0xb8>
 8002328:	000007ff 	.word	0x000007ff

0800232c <__ledf2>:
 800232c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232e:	464e      	mov	r6, r9
 8002330:	4645      	mov	r5, r8
 8002332:	4657      	mov	r7, sl
 8002334:	46de      	mov	lr, fp
 8002336:	0004      	movs	r4, r0
 8002338:	0018      	movs	r0, r3
 800233a:	b5e0      	push	{r5, r6, r7, lr}
 800233c:	0016      	movs	r6, r2
 800233e:	031b      	lsls	r3, r3, #12
 8002340:	0b1b      	lsrs	r3, r3, #12
 8002342:	4d31      	ldr	r5, [pc, #196]	; (8002408 <__ledf2+0xdc>)
 8002344:	030f      	lsls	r7, r1, #12
 8002346:	004a      	lsls	r2, r1, #1
 8002348:	4699      	mov	r9, r3
 800234a:	0043      	lsls	r3, r0, #1
 800234c:	46a4      	mov	ip, r4
 800234e:	46b0      	mov	r8, r6
 8002350:	0b3f      	lsrs	r7, r7, #12
 8002352:	0d52      	lsrs	r2, r2, #21
 8002354:	0fc9      	lsrs	r1, r1, #31
 8002356:	0d5b      	lsrs	r3, r3, #21
 8002358:	0fc0      	lsrs	r0, r0, #31
 800235a:	42aa      	cmp	r2, r5
 800235c:	d011      	beq.n	8002382 <__ledf2+0x56>
 800235e:	42ab      	cmp	r3, r5
 8002360:	d014      	beq.n	800238c <__ledf2+0x60>
 8002362:	2a00      	cmp	r2, #0
 8002364:	d12f      	bne.n	80023c6 <__ledf2+0x9a>
 8002366:	433c      	orrs	r4, r7
 8002368:	46a3      	mov	fp, r4
 800236a:	4265      	negs	r5, r4
 800236c:	4165      	adcs	r5, r4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d114      	bne.n	800239c <__ledf2+0x70>
 8002372:	464c      	mov	r4, r9
 8002374:	4326      	orrs	r6, r4
 8002376:	d111      	bne.n	800239c <__ledf2+0x70>
 8002378:	465b      	mov	r3, fp
 800237a:	2000      	movs	r0, #0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d017      	beq.n	80023b0 <__ledf2+0x84>
 8002380:	e010      	b.n	80023a4 <__ledf2+0x78>
 8002382:	003d      	movs	r5, r7
 8002384:	4325      	orrs	r5, r4
 8002386:	d112      	bne.n	80023ae <__ledf2+0x82>
 8002388:	4293      	cmp	r3, r2
 800238a:	d11c      	bne.n	80023c6 <__ledf2+0x9a>
 800238c:	464d      	mov	r5, r9
 800238e:	432e      	orrs	r6, r5
 8002390:	d10d      	bne.n	80023ae <__ledf2+0x82>
 8002392:	2a00      	cmp	r2, #0
 8002394:	d104      	bne.n	80023a0 <__ledf2+0x74>
 8002396:	433c      	orrs	r4, r7
 8002398:	4265      	negs	r5, r4
 800239a:	4165      	adcs	r5, r4
 800239c:	2d00      	cmp	r5, #0
 800239e:	d10d      	bne.n	80023bc <__ledf2+0x90>
 80023a0:	4281      	cmp	r1, r0
 80023a2:	d016      	beq.n	80023d2 <__ledf2+0xa6>
 80023a4:	2002      	movs	r0, #2
 80023a6:	3901      	subs	r1, #1
 80023a8:	4008      	ands	r0, r1
 80023aa:	3801      	subs	r0, #1
 80023ac:	e000      	b.n	80023b0 <__ledf2+0x84>
 80023ae:	2002      	movs	r0, #2
 80023b0:	bcf0      	pop	{r4, r5, r6, r7}
 80023b2:	46bb      	mov	fp, r7
 80023b4:	46b2      	mov	sl, r6
 80023b6:	46a9      	mov	r9, r5
 80023b8:	46a0      	mov	r8, r4
 80023ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023bc:	2800      	cmp	r0, #0
 80023be:	d1f7      	bne.n	80023b0 <__ledf2+0x84>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e7f4      	b.n	80023b0 <__ledf2+0x84>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1ea      	bne.n	80023a0 <__ledf2+0x74>
 80023ca:	464c      	mov	r4, r9
 80023cc:	4326      	orrs	r6, r4
 80023ce:	d1e7      	bne.n	80023a0 <__ledf2+0x74>
 80023d0:	e7e8      	b.n	80023a4 <__ledf2+0x78>
 80023d2:	429a      	cmp	r2, r3
 80023d4:	dd06      	ble.n	80023e4 <__ledf2+0xb8>
 80023d6:	4243      	negs	r3, r0
 80023d8:	4158      	adcs	r0, r3
 80023da:	2302      	movs	r3, #2
 80023dc:	4240      	negs	r0, r0
 80023de:	4018      	ands	r0, r3
 80023e0:	3801      	subs	r0, #1
 80023e2:	e7e5      	b.n	80023b0 <__ledf2+0x84>
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbe9      	blt.n	80023bc <__ledf2+0x90>
 80023e8:	454f      	cmp	r7, r9
 80023ea:	d8db      	bhi.n	80023a4 <__ledf2+0x78>
 80023ec:	d006      	beq.n	80023fc <__ledf2+0xd0>
 80023ee:	2000      	movs	r0, #0
 80023f0:	454f      	cmp	r7, r9
 80023f2:	d2dd      	bcs.n	80023b0 <__ledf2+0x84>
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d0e3      	beq.n	80023c0 <__ledf2+0x94>
 80023f8:	0008      	movs	r0, r1
 80023fa:	e7d9      	b.n	80023b0 <__ledf2+0x84>
 80023fc:	45c4      	cmp	ip, r8
 80023fe:	d8d1      	bhi.n	80023a4 <__ledf2+0x78>
 8002400:	2000      	movs	r0, #0
 8002402:	45c4      	cmp	ip, r8
 8002404:	d2d4      	bcs.n	80023b0 <__ledf2+0x84>
 8002406:	e7f5      	b.n	80023f4 <__ledf2+0xc8>
 8002408:	000007ff 	.word	0x000007ff

0800240c <__aeabi_dmul>:
 800240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240e:	4657      	mov	r7, sl
 8002410:	464e      	mov	r6, r9
 8002412:	4645      	mov	r5, r8
 8002414:	46de      	mov	lr, fp
 8002416:	b5e0      	push	{r5, r6, r7, lr}
 8002418:	4698      	mov	r8, r3
 800241a:	030c      	lsls	r4, r1, #12
 800241c:	004b      	lsls	r3, r1, #1
 800241e:	0006      	movs	r6, r0
 8002420:	4692      	mov	sl, r2
 8002422:	b087      	sub	sp, #28
 8002424:	0b24      	lsrs	r4, r4, #12
 8002426:	0d5b      	lsrs	r3, r3, #21
 8002428:	0fcf      	lsrs	r7, r1, #31
 800242a:	2b00      	cmp	r3, #0
 800242c:	d06c      	beq.n	8002508 <__aeabi_dmul+0xfc>
 800242e:	4add      	ldr	r2, [pc, #884]	; (80027a4 <__aeabi_dmul+0x398>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d100      	bne.n	8002436 <__aeabi_dmul+0x2a>
 8002434:	e086      	b.n	8002544 <__aeabi_dmul+0x138>
 8002436:	0f42      	lsrs	r2, r0, #29
 8002438:	00e4      	lsls	r4, r4, #3
 800243a:	4314      	orrs	r4, r2
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	0412      	lsls	r2, r2, #16
 8002440:	4314      	orrs	r4, r2
 8002442:	4ad9      	ldr	r2, [pc, #868]	; (80027a8 <__aeabi_dmul+0x39c>)
 8002444:	00c5      	lsls	r5, r0, #3
 8002446:	4694      	mov	ip, r2
 8002448:	4463      	add	r3, ip
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2300      	movs	r3, #0
 800244e:	4699      	mov	r9, r3
 8002450:	469b      	mov	fp, r3
 8002452:	4643      	mov	r3, r8
 8002454:	4642      	mov	r2, r8
 8002456:	031e      	lsls	r6, r3, #12
 8002458:	0fd2      	lsrs	r2, r2, #31
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4650      	mov	r0, sl
 800245e:	4690      	mov	r8, r2
 8002460:	0b36      	lsrs	r6, r6, #12
 8002462:	0d5b      	lsrs	r3, r3, #21
 8002464:	d100      	bne.n	8002468 <__aeabi_dmul+0x5c>
 8002466:	e078      	b.n	800255a <__aeabi_dmul+0x14e>
 8002468:	4ace      	ldr	r2, [pc, #824]	; (80027a4 <__aeabi_dmul+0x398>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01d      	beq.n	80024aa <__aeabi_dmul+0x9e>
 800246e:	49ce      	ldr	r1, [pc, #824]	; (80027a8 <__aeabi_dmul+0x39c>)
 8002470:	0f42      	lsrs	r2, r0, #29
 8002472:	468c      	mov	ip, r1
 8002474:	9900      	ldr	r1, [sp, #0]
 8002476:	4463      	add	r3, ip
 8002478:	00f6      	lsls	r6, r6, #3
 800247a:	468c      	mov	ip, r1
 800247c:	4316      	orrs	r6, r2
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	449c      	add	ip, r3
 8002482:	0412      	lsls	r2, r2, #16
 8002484:	4663      	mov	r3, ip
 8002486:	4316      	orrs	r6, r2
 8002488:	00c2      	lsls	r2, r0, #3
 800248a:	2000      	movs	r0, #0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	9900      	ldr	r1, [sp, #0]
 8002490:	4643      	mov	r3, r8
 8002492:	3101      	adds	r1, #1
 8002494:	468c      	mov	ip, r1
 8002496:	4649      	mov	r1, r9
 8002498:	407b      	eors	r3, r7
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	290f      	cmp	r1, #15
 800249e:	d900      	bls.n	80024a2 <__aeabi_dmul+0x96>
 80024a0:	e07e      	b.n	80025a0 <__aeabi_dmul+0x194>
 80024a2:	4bc2      	ldr	r3, [pc, #776]	; (80027ac <__aeabi_dmul+0x3a0>)
 80024a4:	0089      	lsls	r1, r1, #2
 80024a6:	5859      	ldr	r1, [r3, r1]
 80024a8:	468f      	mov	pc, r1
 80024aa:	4652      	mov	r2, sl
 80024ac:	9b00      	ldr	r3, [sp, #0]
 80024ae:	4332      	orrs	r2, r6
 80024b0:	d000      	beq.n	80024b4 <__aeabi_dmul+0xa8>
 80024b2:	e156      	b.n	8002762 <__aeabi_dmul+0x356>
 80024b4:	49bb      	ldr	r1, [pc, #748]	; (80027a4 <__aeabi_dmul+0x398>)
 80024b6:	2600      	movs	r6, #0
 80024b8:	468c      	mov	ip, r1
 80024ba:	4463      	add	r3, ip
 80024bc:	4649      	mov	r1, r9
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2302      	movs	r3, #2
 80024c2:	4319      	orrs	r1, r3
 80024c4:	4689      	mov	r9, r1
 80024c6:	2002      	movs	r0, #2
 80024c8:	e7e1      	b.n	800248e <__aeabi_dmul+0x82>
 80024ca:	4643      	mov	r3, r8
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	0034      	movs	r4, r6
 80024d0:	0015      	movs	r5, r2
 80024d2:	4683      	mov	fp, r0
 80024d4:	465b      	mov	r3, fp
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d05e      	beq.n	8002598 <__aeabi_dmul+0x18c>
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dmul+0xd4>
 80024de:	e1f3      	b.n	80028c8 <__aeabi_dmul+0x4bc>
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d000      	beq.n	80024e6 <__aeabi_dmul+0xda>
 80024e4:	e118      	b.n	8002718 <__aeabi_dmul+0x30c>
 80024e6:	2200      	movs	r2, #0
 80024e8:	2400      	movs	r4, #0
 80024ea:	2500      	movs	r5, #0
 80024ec:	9b01      	ldr	r3, [sp, #4]
 80024ee:	0512      	lsls	r2, r2, #20
 80024f0:	4322      	orrs	r2, r4
 80024f2:	07db      	lsls	r3, r3, #31
 80024f4:	431a      	orrs	r2, r3
 80024f6:	0028      	movs	r0, r5
 80024f8:	0011      	movs	r1, r2
 80024fa:	b007      	add	sp, #28
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	0025      	movs	r5, r4
 800250a:	4305      	orrs	r5, r0
 800250c:	d100      	bne.n	8002510 <__aeabi_dmul+0x104>
 800250e:	e141      	b.n	8002794 <__aeabi_dmul+0x388>
 8002510:	2c00      	cmp	r4, #0
 8002512:	d100      	bne.n	8002516 <__aeabi_dmul+0x10a>
 8002514:	e1ad      	b.n	8002872 <__aeabi_dmul+0x466>
 8002516:	0020      	movs	r0, r4
 8002518:	f000 fef0 	bl	80032fc <__clzsi2>
 800251c:	0001      	movs	r1, r0
 800251e:	0002      	movs	r2, r0
 8002520:	390b      	subs	r1, #11
 8002522:	231d      	movs	r3, #29
 8002524:	0010      	movs	r0, r2
 8002526:	1a5b      	subs	r3, r3, r1
 8002528:	0031      	movs	r1, r6
 800252a:	0035      	movs	r5, r6
 800252c:	3808      	subs	r0, #8
 800252e:	4084      	lsls	r4, r0
 8002530:	40d9      	lsrs	r1, r3
 8002532:	4085      	lsls	r5, r0
 8002534:	430c      	orrs	r4, r1
 8002536:	489e      	ldr	r0, [pc, #632]	; (80027b0 <__aeabi_dmul+0x3a4>)
 8002538:	1a83      	subs	r3, r0, r2
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2300      	movs	r3, #0
 800253e:	4699      	mov	r9, r3
 8002540:	469b      	mov	fp, r3
 8002542:	e786      	b.n	8002452 <__aeabi_dmul+0x46>
 8002544:	0005      	movs	r5, r0
 8002546:	4325      	orrs	r5, r4
 8002548:	d000      	beq.n	800254c <__aeabi_dmul+0x140>
 800254a:	e11c      	b.n	8002786 <__aeabi_dmul+0x37a>
 800254c:	2208      	movs	r2, #8
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2302      	movs	r3, #2
 8002552:	2400      	movs	r4, #0
 8002554:	4691      	mov	r9, r2
 8002556:	469b      	mov	fp, r3
 8002558:	e77b      	b.n	8002452 <__aeabi_dmul+0x46>
 800255a:	4652      	mov	r2, sl
 800255c:	4332      	orrs	r2, r6
 800255e:	d100      	bne.n	8002562 <__aeabi_dmul+0x156>
 8002560:	e10a      	b.n	8002778 <__aeabi_dmul+0x36c>
 8002562:	2e00      	cmp	r6, #0
 8002564:	d100      	bne.n	8002568 <__aeabi_dmul+0x15c>
 8002566:	e176      	b.n	8002856 <__aeabi_dmul+0x44a>
 8002568:	0030      	movs	r0, r6
 800256a:	f000 fec7 	bl	80032fc <__clzsi2>
 800256e:	0002      	movs	r2, r0
 8002570:	3a0b      	subs	r2, #11
 8002572:	231d      	movs	r3, #29
 8002574:	0001      	movs	r1, r0
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	4652      	mov	r2, sl
 800257a:	3908      	subs	r1, #8
 800257c:	40da      	lsrs	r2, r3
 800257e:	408e      	lsls	r6, r1
 8002580:	4316      	orrs	r6, r2
 8002582:	4652      	mov	r2, sl
 8002584:	408a      	lsls	r2, r1
 8002586:	9b00      	ldr	r3, [sp, #0]
 8002588:	4989      	ldr	r1, [pc, #548]	; (80027b0 <__aeabi_dmul+0x3a4>)
 800258a:	1a18      	subs	r0, r3, r0
 800258c:	0003      	movs	r3, r0
 800258e:	468c      	mov	ip, r1
 8002590:	4463      	add	r3, ip
 8002592:	2000      	movs	r0, #0
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	e77a      	b.n	800248e <__aeabi_dmul+0x82>
 8002598:	2400      	movs	r4, #0
 800259a:	2500      	movs	r5, #0
 800259c:	4a81      	ldr	r2, [pc, #516]	; (80027a4 <__aeabi_dmul+0x398>)
 800259e:	e7a5      	b.n	80024ec <__aeabi_dmul+0xe0>
 80025a0:	0c2f      	lsrs	r7, r5, #16
 80025a2:	042d      	lsls	r5, r5, #16
 80025a4:	0c2d      	lsrs	r5, r5, #16
 80025a6:	002b      	movs	r3, r5
 80025a8:	0c11      	lsrs	r1, r2, #16
 80025aa:	0412      	lsls	r2, r2, #16
 80025ac:	0c12      	lsrs	r2, r2, #16
 80025ae:	4353      	muls	r3, r2
 80025b0:	4698      	mov	r8, r3
 80025b2:	0013      	movs	r3, r2
 80025b4:	0028      	movs	r0, r5
 80025b6:	437b      	muls	r3, r7
 80025b8:	4699      	mov	r9, r3
 80025ba:	4348      	muls	r0, r1
 80025bc:	4448      	add	r0, r9
 80025be:	4683      	mov	fp, r0
 80025c0:	4640      	mov	r0, r8
 80025c2:	000b      	movs	r3, r1
 80025c4:	0c00      	lsrs	r0, r0, #16
 80025c6:	4682      	mov	sl, r0
 80025c8:	4658      	mov	r0, fp
 80025ca:	437b      	muls	r3, r7
 80025cc:	4450      	add	r0, sl
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	4581      	cmp	r9, r0
 80025d2:	d906      	bls.n	80025e2 <__aeabi_dmul+0x1d6>
 80025d4:	469a      	mov	sl, r3
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	025b      	lsls	r3, r3, #9
 80025da:	4699      	mov	r9, r3
 80025dc:	44ca      	add	sl, r9
 80025de:	4653      	mov	r3, sl
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	0c03      	lsrs	r3, r0, #16
 80025e4:	469b      	mov	fp, r3
 80025e6:	4643      	mov	r3, r8
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	0400      	lsls	r0, r0, #16
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	4698      	mov	r8, r3
 80025f0:	0003      	movs	r3, r0
 80025f2:	4443      	add	r3, r8
 80025f4:	9304      	str	r3, [sp, #16]
 80025f6:	0c33      	lsrs	r3, r6, #16
 80025f8:	4699      	mov	r9, r3
 80025fa:	002b      	movs	r3, r5
 80025fc:	0436      	lsls	r6, r6, #16
 80025fe:	0c36      	lsrs	r6, r6, #16
 8002600:	4373      	muls	r3, r6
 8002602:	4698      	mov	r8, r3
 8002604:	0033      	movs	r3, r6
 8002606:	437b      	muls	r3, r7
 8002608:	469a      	mov	sl, r3
 800260a:	464b      	mov	r3, r9
 800260c:	435d      	muls	r5, r3
 800260e:	435f      	muls	r7, r3
 8002610:	4643      	mov	r3, r8
 8002612:	4455      	add	r5, sl
 8002614:	0c18      	lsrs	r0, r3, #16
 8002616:	1940      	adds	r0, r0, r5
 8002618:	4582      	cmp	sl, r0
 800261a:	d903      	bls.n	8002624 <__aeabi_dmul+0x218>
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	025b      	lsls	r3, r3, #9
 8002620:	469a      	mov	sl, r3
 8002622:	4457      	add	r7, sl
 8002624:	0c05      	lsrs	r5, r0, #16
 8002626:	19eb      	adds	r3, r5, r7
 8002628:	9305      	str	r3, [sp, #20]
 800262a:	4643      	mov	r3, r8
 800262c:	041d      	lsls	r5, r3, #16
 800262e:	0c2d      	lsrs	r5, r5, #16
 8002630:	0400      	lsls	r0, r0, #16
 8002632:	1940      	adds	r0, r0, r5
 8002634:	0c25      	lsrs	r5, r4, #16
 8002636:	0424      	lsls	r4, r4, #16
 8002638:	0c24      	lsrs	r4, r4, #16
 800263a:	0027      	movs	r7, r4
 800263c:	4357      	muls	r7, r2
 800263e:	436a      	muls	r2, r5
 8002640:	4690      	mov	r8, r2
 8002642:	002a      	movs	r2, r5
 8002644:	0c3b      	lsrs	r3, r7, #16
 8002646:	469a      	mov	sl, r3
 8002648:	434a      	muls	r2, r1
 800264a:	4361      	muls	r1, r4
 800264c:	4441      	add	r1, r8
 800264e:	4451      	add	r1, sl
 8002650:	4483      	add	fp, r0
 8002652:	4588      	cmp	r8, r1
 8002654:	d903      	bls.n	800265e <__aeabi_dmul+0x252>
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	025b      	lsls	r3, r3, #9
 800265a:	4698      	mov	r8, r3
 800265c:	4442      	add	r2, r8
 800265e:	043f      	lsls	r7, r7, #16
 8002660:	0c0b      	lsrs	r3, r1, #16
 8002662:	0c3f      	lsrs	r7, r7, #16
 8002664:	0409      	lsls	r1, r1, #16
 8002666:	19c9      	adds	r1, r1, r7
 8002668:	0027      	movs	r7, r4
 800266a:	4698      	mov	r8, r3
 800266c:	464b      	mov	r3, r9
 800266e:	4377      	muls	r7, r6
 8002670:	435c      	muls	r4, r3
 8002672:	436e      	muls	r6, r5
 8002674:	435d      	muls	r5, r3
 8002676:	0c3b      	lsrs	r3, r7, #16
 8002678:	4699      	mov	r9, r3
 800267a:	19a4      	adds	r4, r4, r6
 800267c:	444c      	add	r4, r9
 800267e:	4442      	add	r2, r8
 8002680:	9503      	str	r5, [sp, #12]
 8002682:	42a6      	cmp	r6, r4
 8002684:	d904      	bls.n	8002690 <__aeabi_dmul+0x284>
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	025b      	lsls	r3, r3, #9
 800268a:	4698      	mov	r8, r3
 800268c:	4445      	add	r5, r8
 800268e:	9503      	str	r5, [sp, #12]
 8002690:	9b02      	ldr	r3, [sp, #8]
 8002692:	043f      	lsls	r7, r7, #16
 8002694:	445b      	add	r3, fp
 8002696:	001e      	movs	r6, r3
 8002698:	4283      	cmp	r3, r0
 800269a:	4180      	sbcs	r0, r0
 800269c:	0423      	lsls	r3, r4, #16
 800269e:	4698      	mov	r8, r3
 80026a0:	9b05      	ldr	r3, [sp, #20]
 80026a2:	0c3f      	lsrs	r7, r7, #16
 80026a4:	4447      	add	r7, r8
 80026a6:	4698      	mov	r8, r3
 80026a8:	1876      	adds	r6, r6, r1
 80026aa:	428e      	cmp	r6, r1
 80026ac:	4189      	sbcs	r1, r1
 80026ae:	4447      	add	r7, r8
 80026b0:	4240      	negs	r0, r0
 80026b2:	183d      	adds	r5, r7, r0
 80026b4:	46a8      	mov	r8, r5
 80026b6:	4693      	mov	fp, r2
 80026b8:	4249      	negs	r1, r1
 80026ba:	468a      	mov	sl, r1
 80026bc:	44c3      	add	fp, r8
 80026be:	429f      	cmp	r7, r3
 80026c0:	41bf      	sbcs	r7, r7
 80026c2:	4580      	cmp	r8, r0
 80026c4:	4180      	sbcs	r0, r0
 80026c6:	9b03      	ldr	r3, [sp, #12]
 80026c8:	44da      	add	sl, fp
 80026ca:	4698      	mov	r8, r3
 80026cc:	4653      	mov	r3, sl
 80026ce:	4240      	negs	r0, r0
 80026d0:	427f      	negs	r7, r7
 80026d2:	4307      	orrs	r7, r0
 80026d4:	0c24      	lsrs	r4, r4, #16
 80026d6:	4593      	cmp	fp, r2
 80026d8:	4192      	sbcs	r2, r2
 80026da:	458a      	cmp	sl, r1
 80026dc:	4189      	sbcs	r1, r1
 80026de:	193f      	adds	r7, r7, r4
 80026e0:	0ddc      	lsrs	r4, r3, #23
 80026e2:	9b04      	ldr	r3, [sp, #16]
 80026e4:	0275      	lsls	r5, r6, #9
 80026e6:	431d      	orrs	r5, r3
 80026e8:	1e68      	subs	r0, r5, #1
 80026ea:	4185      	sbcs	r5, r0
 80026ec:	4653      	mov	r3, sl
 80026ee:	4252      	negs	r2, r2
 80026f0:	4249      	negs	r1, r1
 80026f2:	430a      	orrs	r2, r1
 80026f4:	18bf      	adds	r7, r7, r2
 80026f6:	4447      	add	r7, r8
 80026f8:	0df6      	lsrs	r6, r6, #23
 80026fa:	027f      	lsls	r7, r7, #9
 80026fc:	4335      	orrs	r5, r6
 80026fe:	025a      	lsls	r2, r3, #9
 8002700:	433c      	orrs	r4, r7
 8002702:	4315      	orrs	r5, r2
 8002704:	01fb      	lsls	r3, r7, #7
 8002706:	d400      	bmi.n	800270a <__aeabi_dmul+0x2fe>
 8002708:	e0c1      	b.n	800288e <__aeabi_dmul+0x482>
 800270a:	2101      	movs	r1, #1
 800270c:	086a      	lsrs	r2, r5, #1
 800270e:	400d      	ands	r5, r1
 8002710:	4315      	orrs	r5, r2
 8002712:	07e2      	lsls	r2, r4, #31
 8002714:	4315      	orrs	r5, r2
 8002716:	0864      	lsrs	r4, r4, #1
 8002718:	4926      	ldr	r1, [pc, #152]	; (80027b4 <__aeabi_dmul+0x3a8>)
 800271a:	4461      	add	r1, ip
 800271c:	2900      	cmp	r1, #0
 800271e:	dd56      	ble.n	80027ce <__aeabi_dmul+0x3c2>
 8002720:	076b      	lsls	r3, r5, #29
 8002722:	d009      	beq.n	8002738 <__aeabi_dmul+0x32c>
 8002724:	220f      	movs	r2, #15
 8002726:	402a      	ands	r2, r5
 8002728:	2a04      	cmp	r2, #4
 800272a:	d005      	beq.n	8002738 <__aeabi_dmul+0x32c>
 800272c:	1d2a      	adds	r2, r5, #4
 800272e:	42aa      	cmp	r2, r5
 8002730:	41ad      	sbcs	r5, r5
 8002732:	426d      	negs	r5, r5
 8002734:	1964      	adds	r4, r4, r5
 8002736:	0015      	movs	r5, r2
 8002738:	01e3      	lsls	r3, r4, #7
 800273a:	d504      	bpl.n	8002746 <__aeabi_dmul+0x33a>
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <__aeabi_dmul+0x3ac>)
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	4014      	ands	r4, r2
 8002744:	4461      	add	r1, ip
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <__aeabi_dmul+0x3b0>)
 8002748:	4291      	cmp	r1, r2
 800274a:	dd00      	ble.n	800274e <__aeabi_dmul+0x342>
 800274c:	e724      	b.n	8002598 <__aeabi_dmul+0x18c>
 800274e:	0762      	lsls	r2, r4, #29
 8002750:	08ed      	lsrs	r5, r5, #3
 8002752:	0264      	lsls	r4, r4, #9
 8002754:	0549      	lsls	r1, r1, #21
 8002756:	4315      	orrs	r5, r2
 8002758:	0b24      	lsrs	r4, r4, #12
 800275a:	0d4a      	lsrs	r2, r1, #21
 800275c:	e6c6      	b.n	80024ec <__aeabi_dmul+0xe0>
 800275e:	9701      	str	r7, [sp, #4]
 8002760:	e6b8      	b.n	80024d4 <__aeabi_dmul+0xc8>
 8002762:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <__aeabi_dmul+0x398>)
 8002764:	2003      	movs	r0, #3
 8002766:	4694      	mov	ip, r2
 8002768:	4463      	add	r3, ip
 800276a:	464a      	mov	r2, r9
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2303      	movs	r3, #3
 8002770:	431a      	orrs	r2, r3
 8002772:	4691      	mov	r9, r2
 8002774:	4652      	mov	r2, sl
 8002776:	e68a      	b.n	800248e <__aeabi_dmul+0x82>
 8002778:	4649      	mov	r1, r9
 800277a:	2301      	movs	r3, #1
 800277c:	4319      	orrs	r1, r3
 800277e:	4689      	mov	r9, r1
 8002780:	2600      	movs	r6, #0
 8002782:	2001      	movs	r0, #1
 8002784:	e683      	b.n	800248e <__aeabi_dmul+0x82>
 8002786:	220c      	movs	r2, #12
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	2303      	movs	r3, #3
 800278c:	0005      	movs	r5, r0
 800278e:	4691      	mov	r9, r2
 8002790:	469b      	mov	fp, r3
 8002792:	e65e      	b.n	8002452 <__aeabi_dmul+0x46>
 8002794:	2304      	movs	r3, #4
 8002796:	4699      	mov	r9, r3
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	2400      	movs	r4, #0
 80027a0:	469b      	mov	fp, r3
 80027a2:	e656      	b.n	8002452 <__aeabi_dmul+0x46>
 80027a4:	000007ff 	.word	0x000007ff
 80027a8:	fffffc01 	.word	0xfffffc01
 80027ac:	0800d3e8 	.word	0x0800d3e8
 80027b0:	fffffc0d 	.word	0xfffffc0d
 80027b4:	000003ff 	.word	0x000003ff
 80027b8:	feffffff 	.word	0xfeffffff
 80027bc:	000007fe 	.word	0x000007fe
 80027c0:	2300      	movs	r3, #0
 80027c2:	2480      	movs	r4, #128	; 0x80
 80027c4:	2500      	movs	r5, #0
 80027c6:	4a44      	ldr	r2, [pc, #272]	; (80028d8 <__aeabi_dmul+0x4cc>)
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	0324      	lsls	r4, r4, #12
 80027cc:	e68e      	b.n	80024ec <__aeabi_dmul+0xe0>
 80027ce:	2001      	movs	r0, #1
 80027d0:	1a40      	subs	r0, r0, r1
 80027d2:	2838      	cmp	r0, #56	; 0x38
 80027d4:	dd00      	ble.n	80027d8 <__aeabi_dmul+0x3cc>
 80027d6:	e686      	b.n	80024e6 <__aeabi_dmul+0xda>
 80027d8:	281f      	cmp	r0, #31
 80027da:	dd5b      	ble.n	8002894 <__aeabi_dmul+0x488>
 80027dc:	221f      	movs	r2, #31
 80027de:	0023      	movs	r3, r4
 80027e0:	4252      	negs	r2, r2
 80027e2:	1a51      	subs	r1, r2, r1
 80027e4:	40cb      	lsrs	r3, r1
 80027e6:	0019      	movs	r1, r3
 80027e8:	2820      	cmp	r0, #32
 80027ea:	d003      	beq.n	80027f4 <__aeabi_dmul+0x3e8>
 80027ec:	4a3b      	ldr	r2, [pc, #236]	; (80028dc <__aeabi_dmul+0x4d0>)
 80027ee:	4462      	add	r2, ip
 80027f0:	4094      	lsls	r4, r2
 80027f2:	4325      	orrs	r5, r4
 80027f4:	1e6a      	subs	r2, r5, #1
 80027f6:	4195      	sbcs	r5, r2
 80027f8:	002a      	movs	r2, r5
 80027fa:	430a      	orrs	r2, r1
 80027fc:	2107      	movs	r1, #7
 80027fe:	000d      	movs	r5, r1
 8002800:	2400      	movs	r4, #0
 8002802:	4015      	ands	r5, r2
 8002804:	4211      	tst	r1, r2
 8002806:	d05b      	beq.n	80028c0 <__aeabi_dmul+0x4b4>
 8002808:	210f      	movs	r1, #15
 800280a:	2400      	movs	r4, #0
 800280c:	4011      	ands	r1, r2
 800280e:	2904      	cmp	r1, #4
 8002810:	d053      	beq.n	80028ba <__aeabi_dmul+0x4ae>
 8002812:	1d11      	adds	r1, r2, #4
 8002814:	4291      	cmp	r1, r2
 8002816:	4192      	sbcs	r2, r2
 8002818:	4252      	negs	r2, r2
 800281a:	18a4      	adds	r4, r4, r2
 800281c:	000a      	movs	r2, r1
 800281e:	0223      	lsls	r3, r4, #8
 8002820:	d54b      	bpl.n	80028ba <__aeabi_dmul+0x4ae>
 8002822:	2201      	movs	r2, #1
 8002824:	2400      	movs	r4, #0
 8002826:	2500      	movs	r5, #0
 8002828:	e660      	b.n	80024ec <__aeabi_dmul+0xe0>
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	031b      	lsls	r3, r3, #12
 800282e:	421c      	tst	r4, r3
 8002830:	d009      	beq.n	8002846 <__aeabi_dmul+0x43a>
 8002832:	421e      	tst	r6, r3
 8002834:	d107      	bne.n	8002846 <__aeabi_dmul+0x43a>
 8002836:	4333      	orrs	r3, r6
 8002838:	031c      	lsls	r4, r3, #12
 800283a:	4643      	mov	r3, r8
 800283c:	0015      	movs	r5, r2
 800283e:	0b24      	lsrs	r4, r4, #12
 8002840:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <__aeabi_dmul+0x4cc>)
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	e652      	b.n	80024ec <__aeabi_dmul+0xe0>
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	0312      	lsls	r2, r2, #12
 800284a:	4314      	orrs	r4, r2
 800284c:	0324      	lsls	r4, r4, #12
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <__aeabi_dmul+0x4cc>)
 8002850:	0b24      	lsrs	r4, r4, #12
 8002852:	9701      	str	r7, [sp, #4]
 8002854:	e64a      	b.n	80024ec <__aeabi_dmul+0xe0>
 8002856:	f000 fd51 	bl	80032fc <__clzsi2>
 800285a:	0003      	movs	r3, r0
 800285c:	001a      	movs	r2, r3
 800285e:	3215      	adds	r2, #21
 8002860:	3020      	adds	r0, #32
 8002862:	2a1c      	cmp	r2, #28
 8002864:	dc00      	bgt.n	8002868 <__aeabi_dmul+0x45c>
 8002866:	e684      	b.n	8002572 <__aeabi_dmul+0x166>
 8002868:	4656      	mov	r6, sl
 800286a:	3b08      	subs	r3, #8
 800286c:	2200      	movs	r2, #0
 800286e:	409e      	lsls	r6, r3
 8002870:	e689      	b.n	8002586 <__aeabi_dmul+0x17a>
 8002872:	f000 fd43 	bl	80032fc <__clzsi2>
 8002876:	0001      	movs	r1, r0
 8002878:	0002      	movs	r2, r0
 800287a:	3115      	adds	r1, #21
 800287c:	3220      	adds	r2, #32
 800287e:	291c      	cmp	r1, #28
 8002880:	dc00      	bgt.n	8002884 <__aeabi_dmul+0x478>
 8002882:	e64e      	b.n	8002522 <__aeabi_dmul+0x116>
 8002884:	0034      	movs	r4, r6
 8002886:	3808      	subs	r0, #8
 8002888:	2500      	movs	r5, #0
 800288a:	4084      	lsls	r4, r0
 800288c:	e653      	b.n	8002536 <__aeabi_dmul+0x12a>
 800288e:	9b00      	ldr	r3, [sp, #0]
 8002890:	469c      	mov	ip, r3
 8002892:	e741      	b.n	8002718 <__aeabi_dmul+0x30c>
 8002894:	4912      	ldr	r1, [pc, #72]	; (80028e0 <__aeabi_dmul+0x4d4>)
 8002896:	0022      	movs	r2, r4
 8002898:	4461      	add	r1, ip
 800289a:	002e      	movs	r6, r5
 800289c:	408d      	lsls	r5, r1
 800289e:	408a      	lsls	r2, r1
 80028a0:	40c6      	lsrs	r6, r0
 80028a2:	1e69      	subs	r1, r5, #1
 80028a4:	418d      	sbcs	r5, r1
 80028a6:	4332      	orrs	r2, r6
 80028a8:	432a      	orrs	r2, r5
 80028aa:	40c4      	lsrs	r4, r0
 80028ac:	0753      	lsls	r3, r2, #29
 80028ae:	d0b6      	beq.n	800281e <__aeabi_dmul+0x412>
 80028b0:	210f      	movs	r1, #15
 80028b2:	4011      	ands	r1, r2
 80028b4:	2904      	cmp	r1, #4
 80028b6:	d1ac      	bne.n	8002812 <__aeabi_dmul+0x406>
 80028b8:	e7b1      	b.n	800281e <__aeabi_dmul+0x412>
 80028ba:	0765      	lsls	r5, r4, #29
 80028bc:	0264      	lsls	r4, r4, #9
 80028be:	0b24      	lsrs	r4, r4, #12
 80028c0:	08d2      	lsrs	r2, r2, #3
 80028c2:	4315      	orrs	r5, r2
 80028c4:	2200      	movs	r2, #0
 80028c6:	e611      	b.n	80024ec <__aeabi_dmul+0xe0>
 80028c8:	2280      	movs	r2, #128	; 0x80
 80028ca:	0312      	lsls	r2, r2, #12
 80028cc:	4314      	orrs	r4, r2
 80028ce:	0324      	lsls	r4, r4, #12
 80028d0:	4a01      	ldr	r2, [pc, #4]	; (80028d8 <__aeabi_dmul+0x4cc>)
 80028d2:	0b24      	lsrs	r4, r4, #12
 80028d4:	e60a      	b.n	80024ec <__aeabi_dmul+0xe0>
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	000007ff 	.word	0x000007ff
 80028dc:	0000043e 	.word	0x0000043e
 80028e0:	0000041e 	.word	0x0000041e

080028e4 <__aeabi_dsub>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	4657      	mov	r7, sl
 80028e8:	464e      	mov	r6, r9
 80028ea:	4645      	mov	r5, r8
 80028ec:	46de      	mov	lr, fp
 80028ee:	0004      	movs	r4, r0
 80028f0:	b5e0      	push	{r5, r6, r7, lr}
 80028f2:	001f      	movs	r7, r3
 80028f4:	0010      	movs	r0, r2
 80028f6:	030b      	lsls	r3, r1, #12
 80028f8:	0f62      	lsrs	r2, r4, #29
 80028fa:	004e      	lsls	r6, r1, #1
 80028fc:	0fcd      	lsrs	r5, r1, #31
 80028fe:	0a5b      	lsrs	r3, r3, #9
 8002900:	0339      	lsls	r1, r7, #12
 8002902:	4313      	orrs	r3, r2
 8002904:	0a49      	lsrs	r1, r1, #9
 8002906:	00e2      	lsls	r2, r4, #3
 8002908:	0f44      	lsrs	r4, r0, #29
 800290a:	4321      	orrs	r1, r4
 800290c:	4cc2      	ldr	r4, [pc, #776]	; (8002c18 <__aeabi_dsub+0x334>)
 800290e:	4691      	mov	r9, r2
 8002910:	4692      	mov	sl, r2
 8002912:	00c0      	lsls	r0, r0, #3
 8002914:	007a      	lsls	r2, r7, #1
 8002916:	4680      	mov	r8, r0
 8002918:	0d76      	lsrs	r6, r6, #21
 800291a:	0d52      	lsrs	r2, r2, #21
 800291c:	0fff      	lsrs	r7, r7, #31
 800291e:	42a2      	cmp	r2, r4
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x40>
 8002922:	e0b4      	b.n	8002a8e <__aeabi_dsub+0x1aa>
 8002924:	2401      	movs	r4, #1
 8002926:	4067      	eors	r7, r4
 8002928:	46bb      	mov	fp, r7
 800292a:	42bd      	cmp	r5, r7
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x4c>
 800292e:	e088      	b.n	8002a42 <__aeabi_dsub+0x15e>
 8002930:	1ab4      	subs	r4, r6, r2
 8002932:	46a4      	mov	ip, r4
 8002934:	2c00      	cmp	r4, #0
 8002936:	dc00      	bgt.n	800293a <__aeabi_dsub+0x56>
 8002938:	e0b2      	b.n	8002aa0 <__aeabi_dsub+0x1bc>
 800293a:	2a00      	cmp	r2, #0
 800293c:	d100      	bne.n	8002940 <__aeabi_dsub+0x5c>
 800293e:	e0c5      	b.n	8002acc <__aeabi_dsub+0x1e8>
 8002940:	4ab5      	ldr	r2, [pc, #724]	; (8002c18 <__aeabi_dsub+0x334>)
 8002942:	4296      	cmp	r6, r2
 8002944:	d100      	bne.n	8002948 <__aeabi_dsub+0x64>
 8002946:	e28b      	b.n	8002e60 <__aeabi_dsub+0x57c>
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	0412      	lsls	r2, r2, #16
 800294c:	4311      	orrs	r1, r2
 800294e:	4662      	mov	r2, ip
 8002950:	2a38      	cmp	r2, #56	; 0x38
 8002952:	dd00      	ble.n	8002956 <__aeabi_dsub+0x72>
 8002954:	e1a1      	b.n	8002c9a <__aeabi_dsub+0x3b6>
 8002956:	2a1f      	cmp	r2, #31
 8002958:	dd00      	ble.n	800295c <__aeabi_dsub+0x78>
 800295a:	e216      	b.n	8002d8a <__aeabi_dsub+0x4a6>
 800295c:	2720      	movs	r7, #32
 800295e:	000c      	movs	r4, r1
 8002960:	1abf      	subs	r7, r7, r2
 8002962:	40bc      	lsls	r4, r7
 8002964:	0002      	movs	r2, r0
 8002966:	46a0      	mov	r8, r4
 8002968:	4664      	mov	r4, ip
 800296a:	40b8      	lsls	r0, r7
 800296c:	40e2      	lsrs	r2, r4
 800296e:	4644      	mov	r4, r8
 8002970:	4314      	orrs	r4, r2
 8002972:	0002      	movs	r2, r0
 8002974:	1e50      	subs	r0, r2, #1
 8002976:	4182      	sbcs	r2, r0
 8002978:	4660      	mov	r0, ip
 800297a:	40c1      	lsrs	r1, r0
 800297c:	4322      	orrs	r2, r4
 800297e:	1a5b      	subs	r3, r3, r1
 8002980:	4649      	mov	r1, r9
 8002982:	1a8c      	subs	r4, r1, r2
 8002984:	45a1      	cmp	r9, r4
 8002986:	4192      	sbcs	r2, r2
 8002988:	4252      	negs	r2, r2
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	4698      	mov	r8, r3
 800298e:	4643      	mov	r3, r8
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	d400      	bmi.n	8002996 <__aeabi_dsub+0xb2>
 8002994:	e117      	b.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002996:	4643      	mov	r3, r8
 8002998:	025b      	lsls	r3, r3, #9
 800299a:	0a5b      	lsrs	r3, r3, #9
 800299c:	4698      	mov	r8, r3
 800299e:	4643      	mov	r3, r8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0xc2>
 80029a4:	e16c      	b.n	8002c80 <__aeabi_dsub+0x39c>
 80029a6:	4640      	mov	r0, r8
 80029a8:	f000 fca8 	bl	80032fc <__clzsi2>
 80029ac:	0002      	movs	r2, r0
 80029ae:	3a08      	subs	r2, #8
 80029b0:	2120      	movs	r1, #32
 80029b2:	0020      	movs	r0, r4
 80029b4:	4643      	mov	r3, r8
 80029b6:	1a89      	subs	r1, r1, r2
 80029b8:	4093      	lsls	r3, r2
 80029ba:	40c8      	lsrs	r0, r1
 80029bc:	4094      	lsls	r4, r2
 80029be:	4303      	orrs	r3, r0
 80029c0:	4296      	cmp	r6, r2
 80029c2:	dd00      	ble.n	80029c6 <__aeabi_dsub+0xe2>
 80029c4:	e157      	b.n	8002c76 <__aeabi_dsub+0x392>
 80029c6:	1b96      	subs	r6, r2, r6
 80029c8:	1c71      	adds	r1, r6, #1
 80029ca:	291f      	cmp	r1, #31
 80029cc:	dd00      	ble.n	80029d0 <__aeabi_dsub+0xec>
 80029ce:	e1cb      	b.n	8002d68 <__aeabi_dsub+0x484>
 80029d0:	2220      	movs	r2, #32
 80029d2:	0018      	movs	r0, r3
 80029d4:	0026      	movs	r6, r4
 80029d6:	1a52      	subs	r2, r2, r1
 80029d8:	4094      	lsls	r4, r2
 80029da:	4090      	lsls	r0, r2
 80029dc:	40ce      	lsrs	r6, r1
 80029de:	40cb      	lsrs	r3, r1
 80029e0:	1e62      	subs	r2, r4, #1
 80029e2:	4194      	sbcs	r4, r2
 80029e4:	4330      	orrs	r0, r6
 80029e6:	4698      	mov	r8, r3
 80029e8:	2600      	movs	r6, #0
 80029ea:	4304      	orrs	r4, r0
 80029ec:	0763      	lsls	r3, r4, #29
 80029ee:	d009      	beq.n	8002a04 <__aeabi_dsub+0x120>
 80029f0:	230f      	movs	r3, #15
 80029f2:	4023      	ands	r3, r4
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d005      	beq.n	8002a04 <__aeabi_dsub+0x120>
 80029f8:	1d23      	adds	r3, r4, #4
 80029fa:	42a3      	cmp	r3, r4
 80029fc:	41a4      	sbcs	r4, r4
 80029fe:	4264      	negs	r4, r4
 8002a00:	44a0      	add	r8, r4
 8002a02:	001c      	movs	r4, r3
 8002a04:	4643      	mov	r3, r8
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	d400      	bmi.n	8002a0c <__aeabi_dsub+0x128>
 8002a0a:	e0df      	b.n	8002bcc <__aeabi_dsub+0x2e8>
 8002a0c:	4b82      	ldr	r3, [pc, #520]	; (8002c18 <__aeabi_dsub+0x334>)
 8002a0e:	3601      	adds	r6, #1
 8002a10:	429e      	cmp	r6, r3
 8002a12:	d100      	bne.n	8002a16 <__aeabi_dsub+0x132>
 8002a14:	e0fb      	b.n	8002c0e <__aeabi_dsub+0x32a>
 8002a16:	4642      	mov	r2, r8
 8002a18:	4b80      	ldr	r3, [pc, #512]	; (8002c1c <__aeabi_dsub+0x338>)
 8002a1a:	08e4      	lsrs	r4, r4, #3
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	0013      	movs	r3, r2
 8002a20:	0571      	lsls	r1, r6, #21
 8002a22:	0752      	lsls	r2, r2, #29
 8002a24:	025b      	lsls	r3, r3, #9
 8002a26:	4322      	orrs	r2, r4
 8002a28:	0b1b      	lsrs	r3, r3, #12
 8002a2a:	0d49      	lsrs	r1, r1, #21
 8002a2c:	0509      	lsls	r1, r1, #20
 8002a2e:	07ed      	lsls	r5, r5, #31
 8002a30:	4319      	orrs	r1, r3
 8002a32:	4329      	orrs	r1, r5
 8002a34:	0010      	movs	r0, r2
 8002a36:	bcf0      	pop	{r4, r5, r6, r7}
 8002a38:	46bb      	mov	fp, r7
 8002a3a:	46b2      	mov	sl, r6
 8002a3c:	46a9      	mov	r9, r5
 8002a3e:	46a0      	mov	r8, r4
 8002a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a42:	1ab4      	subs	r4, r6, r2
 8002a44:	46a4      	mov	ip, r4
 8002a46:	2c00      	cmp	r4, #0
 8002a48:	dd58      	ble.n	8002afc <__aeabi_dsub+0x218>
 8002a4a:	2a00      	cmp	r2, #0
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x16c>
 8002a4e:	e09e      	b.n	8002b8e <__aeabi_dsub+0x2aa>
 8002a50:	4a71      	ldr	r2, [pc, #452]	; (8002c18 <__aeabi_dsub+0x334>)
 8002a52:	4296      	cmp	r6, r2
 8002a54:	d100      	bne.n	8002a58 <__aeabi_dsub+0x174>
 8002a56:	e13b      	b.n	8002cd0 <__aeabi_dsub+0x3ec>
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	0412      	lsls	r2, r2, #16
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	4662      	mov	r2, ip
 8002a60:	2a38      	cmp	r2, #56	; 0x38
 8002a62:	dd00      	ble.n	8002a66 <__aeabi_dsub+0x182>
 8002a64:	e0c1      	b.n	8002bea <__aeabi_dsub+0x306>
 8002a66:	2a1f      	cmp	r2, #31
 8002a68:	dc00      	bgt.n	8002a6c <__aeabi_dsub+0x188>
 8002a6a:	e1bb      	b.n	8002de4 <__aeabi_dsub+0x500>
 8002a6c:	000c      	movs	r4, r1
 8002a6e:	3a20      	subs	r2, #32
 8002a70:	40d4      	lsrs	r4, r2
 8002a72:	0022      	movs	r2, r4
 8002a74:	4664      	mov	r4, ip
 8002a76:	2c20      	cmp	r4, #32
 8002a78:	d004      	beq.n	8002a84 <__aeabi_dsub+0x1a0>
 8002a7a:	2740      	movs	r7, #64	; 0x40
 8002a7c:	1b3f      	subs	r7, r7, r4
 8002a7e:	40b9      	lsls	r1, r7
 8002a80:	4308      	orrs	r0, r1
 8002a82:	4680      	mov	r8, r0
 8002a84:	4644      	mov	r4, r8
 8002a86:	1e61      	subs	r1, r4, #1
 8002a88:	418c      	sbcs	r4, r1
 8002a8a:	4314      	orrs	r4, r2
 8002a8c:	e0b1      	b.n	8002bf2 <__aeabi_dsub+0x30e>
 8002a8e:	000c      	movs	r4, r1
 8002a90:	4304      	orrs	r4, r0
 8002a92:	d02a      	beq.n	8002aea <__aeabi_dsub+0x206>
 8002a94:	46bb      	mov	fp, r7
 8002a96:	42bd      	cmp	r5, r7
 8002a98:	d02d      	beq.n	8002af6 <__aeabi_dsub+0x212>
 8002a9a:	4c61      	ldr	r4, [pc, #388]	; (8002c20 <__aeabi_dsub+0x33c>)
 8002a9c:	46a4      	mov	ip, r4
 8002a9e:	44b4      	add	ip, r6
 8002aa0:	4664      	mov	r4, ip
 8002aa2:	2c00      	cmp	r4, #0
 8002aa4:	d05c      	beq.n	8002b60 <__aeabi_dsub+0x27c>
 8002aa6:	1b94      	subs	r4, r2, r6
 8002aa8:	46a4      	mov	ip, r4
 8002aaa:	2e00      	cmp	r6, #0
 8002aac:	d000      	beq.n	8002ab0 <__aeabi_dsub+0x1cc>
 8002aae:	e115      	b.n	8002cdc <__aeabi_dsub+0x3f8>
 8002ab0:	464d      	mov	r5, r9
 8002ab2:	431d      	orrs	r5, r3
 8002ab4:	d100      	bne.n	8002ab8 <__aeabi_dsub+0x1d4>
 8002ab6:	e1c3      	b.n	8002e40 <__aeabi_dsub+0x55c>
 8002ab8:	1e65      	subs	r5, r4, #1
 8002aba:	2c01      	cmp	r4, #1
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x1dc>
 8002abe:	e20c      	b.n	8002eda <__aeabi_dsub+0x5f6>
 8002ac0:	4e55      	ldr	r6, [pc, #340]	; (8002c18 <__aeabi_dsub+0x334>)
 8002ac2:	42b4      	cmp	r4, r6
 8002ac4:	d100      	bne.n	8002ac8 <__aeabi_dsub+0x1e4>
 8002ac6:	e1f8      	b.n	8002eba <__aeabi_dsub+0x5d6>
 8002ac8:	46ac      	mov	ip, r5
 8002aca:	e10e      	b.n	8002cea <__aeabi_dsub+0x406>
 8002acc:	000a      	movs	r2, r1
 8002ace:	4302      	orrs	r2, r0
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x1f0>
 8002ad2:	e136      	b.n	8002d42 <__aeabi_dsub+0x45e>
 8002ad4:	0022      	movs	r2, r4
 8002ad6:	3a01      	subs	r2, #1
 8002ad8:	2c01      	cmp	r4, #1
 8002ada:	d100      	bne.n	8002ade <__aeabi_dsub+0x1fa>
 8002adc:	e1c6      	b.n	8002e6c <__aeabi_dsub+0x588>
 8002ade:	4c4e      	ldr	r4, [pc, #312]	; (8002c18 <__aeabi_dsub+0x334>)
 8002ae0:	45a4      	cmp	ip, r4
 8002ae2:	d100      	bne.n	8002ae6 <__aeabi_dsub+0x202>
 8002ae4:	e0f4      	b.n	8002cd0 <__aeabi_dsub+0x3ec>
 8002ae6:	4694      	mov	ip, r2
 8002ae8:	e731      	b.n	800294e <__aeabi_dsub+0x6a>
 8002aea:	2401      	movs	r4, #1
 8002aec:	4067      	eors	r7, r4
 8002aee:	46bb      	mov	fp, r7
 8002af0:	42bd      	cmp	r5, r7
 8002af2:	d000      	beq.n	8002af6 <__aeabi_dsub+0x212>
 8002af4:	e71c      	b.n	8002930 <__aeabi_dsub+0x4c>
 8002af6:	4c4a      	ldr	r4, [pc, #296]	; (8002c20 <__aeabi_dsub+0x33c>)
 8002af8:	46a4      	mov	ip, r4
 8002afa:	44b4      	add	ip, r6
 8002afc:	4664      	mov	r4, ip
 8002afe:	2c00      	cmp	r4, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x220>
 8002b02:	e0cf      	b.n	8002ca4 <__aeabi_dsub+0x3c0>
 8002b04:	1b94      	subs	r4, r2, r6
 8002b06:	46a4      	mov	ip, r4
 8002b08:	2e00      	cmp	r6, #0
 8002b0a:	d100      	bne.n	8002b0e <__aeabi_dsub+0x22a>
 8002b0c:	e15c      	b.n	8002dc8 <__aeabi_dsub+0x4e4>
 8002b0e:	4e42      	ldr	r6, [pc, #264]	; (8002c18 <__aeabi_dsub+0x334>)
 8002b10:	42b2      	cmp	r2, r6
 8002b12:	d100      	bne.n	8002b16 <__aeabi_dsub+0x232>
 8002b14:	e1ec      	b.n	8002ef0 <__aeabi_dsub+0x60c>
 8002b16:	2680      	movs	r6, #128	; 0x80
 8002b18:	0436      	lsls	r6, r6, #16
 8002b1a:	4333      	orrs	r3, r6
 8002b1c:	4664      	mov	r4, ip
 8002b1e:	2c38      	cmp	r4, #56	; 0x38
 8002b20:	dd00      	ble.n	8002b24 <__aeabi_dsub+0x240>
 8002b22:	e1b3      	b.n	8002e8c <__aeabi_dsub+0x5a8>
 8002b24:	2c1f      	cmp	r4, #31
 8002b26:	dd00      	ble.n	8002b2a <__aeabi_dsub+0x246>
 8002b28:	e238      	b.n	8002f9c <__aeabi_dsub+0x6b8>
 8002b2a:	2620      	movs	r6, #32
 8002b2c:	1b36      	subs	r6, r6, r4
 8002b2e:	001c      	movs	r4, r3
 8002b30:	40b4      	lsls	r4, r6
 8002b32:	464f      	mov	r7, r9
 8002b34:	46a0      	mov	r8, r4
 8002b36:	4664      	mov	r4, ip
 8002b38:	40e7      	lsrs	r7, r4
 8002b3a:	4644      	mov	r4, r8
 8002b3c:	433c      	orrs	r4, r7
 8002b3e:	464f      	mov	r7, r9
 8002b40:	40b7      	lsls	r7, r6
 8002b42:	003e      	movs	r6, r7
 8002b44:	1e77      	subs	r7, r6, #1
 8002b46:	41be      	sbcs	r6, r7
 8002b48:	4334      	orrs	r4, r6
 8002b4a:	4666      	mov	r6, ip
 8002b4c:	40f3      	lsrs	r3, r6
 8002b4e:	18c9      	adds	r1, r1, r3
 8002b50:	1824      	adds	r4, r4, r0
 8002b52:	4284      	cmp	r4, r0
 8002b54:	419b      	sbcs	r3, r3
 8002b56:	425b      	negs	r3, r3
 8002b58:	4698      	mov	r8, r3
 8002b5a:	0016      	movs	r6, r2
 8002b5c:	4488      	add	r8, r1
 8002b5e:	e04e      	b.n	8002bfe <__aeabi_dsub+0x31a>
 8002b60:	4a30      	ldr	r2, [pc, #192]	; (8002c24 <__aeabi_dsub+0x340>)
 8002b62:	1c74      	adds	r4, r6, #1
 8002b64:	4214      	tst	r4, r2
 8002b66:	d000      	beq.n	8002b6a <__aeabi_dsub+0x286>
 8002b68:	e0d6      	b.n	8002d18 <__aeabi_dsub+0x434>
 8002b6a:	464a      	mov	r2, r9
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	2e00      	cmp	r6, #0
 8002b70:	d000      	beq.n	8002b74 <__aeabi_dsub+0x290>
 8002b72:	e15b      	b.n	8002e2c <__aeabi_dsub+0x548>
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d100      	bne.n	8002b7a <__aeabi_dsub+0x296>
 8002b78:	e1a5      	b.n	8002ec6 <__aeabi_dsub+0x5e2>
 8002b7a:	000a      	movs	r2, r1
 8002b7c:	4302      	orrs	r2, r0
 8002b7e:	d000      	beq.n	8002b82 <__aeabi_dsub+0x29e>
 8002b80:	e1bb      	b.n	8002efa <__aeabi_dsub+0x616>
 8002b82:	464a      	mov	r2, r9
 8002b84:	0759      	lsls	r1, r3, #29
 8002b86:	08d2      	lsrs	r2, r2, #3
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	08db      	lsrs	r3, r3, #3
 8002b8c:	e027      	b.n	8002bde <__aeabi_dsub+0x2fa>
 8002b8e:	000a      	movs	r2, r1
 8002b90:	4302      	orrs	r2, r0
 8002b92:	d100      	bne.n	8002b96 <__aeabi_dsub+0x2b2>
 8002b94:	e174      	b.n	8002e80 <__aeabi_dsub+0x59c>
 8002b96:	0022      	movs	r2, r4
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	2c01      	cmp	r4, #1
 8002b9c:	d005      	beq.n	8002baa <__aeabi_dsub+0x2c6>
 8002b9e:	4c1e      	ldr	r4, [pc, #120]	; (8002c18 <__aeabi_dsub+0x334>)
 8002ba0:	45a4      	cmp	ip, r4
 8002ba2:	d100      	bne.n	8002ba6 <__aeabi_dsub+0x2c2>
 8002ba4:	e094      	b.n	8002cd0 <__aeabi_dsub+0x3ec>
 8002ba6:	4694      	mov	ip, r2
 8002ba8:	e759      	b.n	8002a5e <__aeabi_dsub+0x17a>
 8002baa:	4448      	add	r0, r9
 8002bac:	4548      	cmp	r0, r9
 8002bae:	4192      	sbcs	r2, r2
 8002bb0:	185b      	adds	r3, r3, r1
 8002bb2:	4698      	mov	r8, r3
 8002bb4:	0004      	movs	r4, r0
 8002bb6:	4252      	negs	r2, r2
 8002bb8:	4490      	add	r8, r2
 8002bba:	4643      	mov	r3, r8
 8002bbc:	2602      	movs	r6, #2
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	d500      	bpl.n	8002bc4 <__aeabi_dsub+0x2e0>
 8002bc2:	e0c4      	b.n	8002d4e <__aeabi_dsub+0x46a>
 8002bc4:	3e01      	subs	r6, #1
 8002bc6:	0763      	lsls	r3, r4, #29
 8002bc8:	d000      	beq.n	8002bcc <__aeabi_dsub+0x2e8>
 8002bca:	e711      	b.n	80029f0 <__aeabi_dsub+0x10c>
 8002bcc:	4643      	mov	r3, r8
 8002bce:	46b4      	mov	ip, r6
 8002bd0:	0759      	lsls	r1, r3, #29
 8002bd2:	08e2      	lsrs	r2, r4, #3
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	490f      	ldr	r1, [pc, #60]	; (8002c18 <__aeabi_dsub+0x334>)
 8002bda:	458c      	cmp	ip, r1
 8002bdc:	d040      	beq.n	8002c60 <__aeabi_dsub+0x37c>
 8002bde:	4661      	mov	r1, ip
 8002be0:	031b      	lsls	r3, r3, #12
 8002be2:	0549      	lsls	r1, r1, #21
 8002be4:	0b1b      	lsrs	r3, r3, #12
 8002be6:	0d49      	lsrs	r1, r1, #21
 8002be8:	e720      	b.n	8002a2c <__aeabi_dsub+0x148>
 8002bea:	4301      	orrs	r1, r0
 8002bec:	000c      	movs	r4, r1
 8002bee:	1e61      	subs	r1, r4, #1
 8002bf0:	418c      	sbcs	r4, r1
 8002bf2:	444c      	add	r4, r9
 8002bf4:	454c      	cmp	r4, r9
 8002bf6:	4192      	sbcs	r2, r2
 8002bf8:	4252      	negs	r2, r2
 8002bfa:	4690      	mov	r8, r2
 8002bfc:	4498      	add	r8, r3
 8002bfe:	4643      	mov	r3, r8
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	d5e0      	bpl.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <__aeabi_dsub+0x334>)
 8002c06:	3601      	adds	r6, #1
 8002c08:	429e      	cmp	r6, r3
 8002c0a:	d000      	beq.n	8002c0e <__aeabi_dsub+0x32a>
 8002c0c:	e09f      	b.n	8002d4e <__aeabi_dsub+0x46a>
 8002c0e:	0031      	movs	r1, r6
 8002c10:	2300      	movs	r3, #0
 8002c12:	2200      	movs	r2, #0
 8002c14:	e70a      	b.n	8002a2c <__aeabi_dsub+0x148>
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	000007ff 	.word	0x000007ff
 8002c1c:	ff7fffff 	.word	0xff7fffff
 8002c20:	fffff801 	.word	0xfffff801
 8002c24:	000007fe 	.word	0x000007fe
 8002c28:	2a00      	cmp	r2, #0
 8002c2a:	d100      	bne.n	8002c2e <__aeabi_dsub+0x34a>
 8002c2c:	e160      	b.n	8002ef0 <__aeabi_dsub+0x60c>
 8002c2e:	000a      	movs	r2, r1
 8002c30:	4302      	orrs	r2, r0
 8002c32:	d04d      	beq.n	8002cd0 <__aeabi_dsub+0x3ec>
 8002c34:	464a      	mov	r2, r9
 8002c36:	075c      	lsls	r4, r3, #29
 8002c38:	08d2      	lsrs	r2, r2, #3
 8002c3a:	4322      	orrs	r2, r4
 8002c3c:	2480      	movs	r4, #128	; 0x80
 8002c3e:	08db      	lsrs	r3, r3, #3
 8002c40:	0324      	lsls	r4, r4, #12
 8002c42:	4223      	tst	r3, r4
 8002c44:	d007      	beq.n	8002c56 <__aeabi_dsub+0x372>
 8002c46:	08ce      	lsrs	r6, r1, #3
 8002c48:	4226      	tst	r6, r4
 8002c4a:	d104      	bne.n	8002c56 <__aeabi_dsub+0x372>
 8002c4c:	465d      	mov	r5, fp
 8002c4e:	0033      	movs	r3, r6
 8002c50:	08c2      	lsrs	r2, r0, #3
 8002c52:	0749      	lsls	r1, r1, #29
 8002c54:	430a      	orrs	r2, r1
 8002c56:	0f51      	lsrs	r1, r2, #29
 8002c58:	00d2      	lsls	r2, r2, #3
 8002c5a:	08d2      	lsrs	r2, r2, #3
 8002c5c:	0749      	lsls	r1, r1, #29
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	0011      	movs	r1, r2
 8002c62:	4319      	orrs	r1, r3
 8002c64:	d100      	bne.n	8002c68 <__aeabi_dsub+0x384>
 8002c66:	e1c8      	b.n	8002ffa <__aeabi_dsub+0x716>
 8002c68:	2180      	movs	r1, #128	; 0x80
 8002c6a:	0309      	lsls	r1, r1, #12
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	031b      	lsls	r3, r3, #12
 8002c70:	49d5      	ldr	r1, [pc, #852]	; (8002fc8 <__aeabi_dsub+0x6e4>)
 8002c72:	0b1b      	lsrs	r3, r3, #12
 8002c74:	e6da      	b.n	8002a2c <__aeabi_dsub+0x148>
 8002c76:	49d5      	ldr	r1, [pc, #852]	; (8002fcc <__aeabi_dsub+0x6e8>)
 8002c78:	1ab6      	subs	r6, r6, r2
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	4698      	mov	r8, r3
 8002c7e:	e6b5      	b.n	80029ec <__aeabi_dsub+0x108>
 8002c80:	0020      	movs	r0, r4
 8002c82:	f000 fb3b 	bl	80032fc <__clzsi2>
 8002c86:	0002      	movs	r2, r0
 8002c88:	3218      	adds	r2, #24
 8002c8a:	2a1f      	cmp	r2, #31
 8002c8c:	dc00      	bgt.n	8002c90 <__aeabi_dsub+0x3ac>
 8002c8e:	e68f      	b.n	80029b0 <__aeabi_dsub+0xcc>
 8002c90:	0023      	movs	r3, r4
 8002c92:	3808      	subs	r0, #8
 8002c94:	4083      	lsls	r3, r0
 8002c96:	2400      	movs	r4, #0
 8002c98:	e692      	b.n	80029c0 <__aeabi_dsub+0xdc>
 8002c9a:	4308      	orrs	r0, r1
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	1e50      	subs	r0, r2, #1
 8002ca0:	4182      	sbcs	r2, r0
 8002ca2:	e66d      	b.n	8002980 <__aeabi_dsub+0x9c>
 8002ca4:	4cca      	ldr	r4, [pc, #808]	; (8002fd0 <__aeabi_dsub+0x6ec>)
 8002ca6:	1c72      	adds	r2, r6, #1
 8002ca8:	4222      	tst	r2, r4
 8002caa:	d000      	beq.n	8002cae <__aeabi_dsub+0x3ca>
 8002cac:	e0ad      	b.n	8002e0a <__aeabi_dsub+0x526>
 8002cae:	464a      	mov	r2, r9
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	2e00      	cmp	r6, #0
 8002cb4:	d1b8      	bne.n	8002c28 <__aeabi_dsub+0x344>
 8002cb6:	2a00      	cmp	r2, #0
 8002cb8:	d100      	bne.n	8002cbc <__aeabi_dsub+0x3d8>
 8002cba:	e158      	b.n	8002f6e <__aeabi_dsub+0x68a>
 8002cbc:	000a      	movs	r2, r1
 8002cbe:	4302      	orrs	r2, r0
 8002cc0:	d000      	beq.n	8002cc4 <__aeabi_dsub+0x3e0>
 8002cc2:	e159      	b.n	8002f78 <__aeabi_dsub+0x694>
 8002cc4:	464a      	mov	r2, r9
 8002cc6:	0759      	lsls	r1, r3, #29
 8002cc8:	08d2      	lsrs	r2, r2, #3
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	e786      	b.n	8002bde <__aeabi_dsub+0x2fa>
 8002cd0:	464a      	mov	r2, r9
 8002cd2:	0759      	lsls	r1, r3, #29
 8002cd4:	08d2      	lsrs	r2, r2, #3
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	08db      	lsrs	r3, r3, #3
 8002cda:	e7c1      	b.n	8002c60 <__aeabi_dsub+0x37c>
 8002cdc:	4dba      	ldr	r5, [pc, #744]	; (8002fc8 <__aeabi_dsub+0x6e4>)
 8002cde:	42aa      	cmp	r2, r5
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x400>
 8002ce2:	e11e      	b.n	8002f22 <__aeabi_dsub+0x63e>
 8002ce4:	2580      	movs	r5, #128	; 0x80
 8002ce6:	042d      	lsls	r5, r5, #16
 8002ce8:	432b      	orrs	r3, r5
 8002cea:	4664      	mov	r4, ip
 8002cec:	2c38      	cmp	r4, #56	; 0x38
 8002cee:	dc5d      	bgt.n	8002dac <__aeabi_dsub+0x4c8>
 8002cf0:	2c1f      	cmp	r4, #31
 8002cf2:	dd00      	ble.n	8002cf6 <__aeabi_dsub+0x412>
 8002cf4:	e0d0      	b.n	8002e98 <__aeabi_dsub+0x5b4>
 8002cf6:	2520      	movs	r5, #32
 8002cf8:	4667      	mov	r7, ip
 8002cfa:	1b2d      	subs	r5, r5, r4
 8002cfc:	464e      	mov	r6, r9
 8002cfe:	001c      	movs	r4, r3
 8002d00:	40fe      	lsrs	r6, r7
 8002d02:	40ac      	lsls	r4, r5
 8002d04:	4334      	orrs	r4, r6
 8002d06:	464e      	mov	r6, r9
 8002d08:	40ae      	lsls	r6, r5
 8002d0a:	0035      	movs	r5, r6
 8002d0c:	40fb      	lsrs	r3, r7
 8002d0e:	1e6e      	subs	r6, r5, #1
 8002d10:	41b5      	sbcs	r5, r6
 8002d12:	1ac9      	subs	r1, r1, r3
 8002d14:	432c      	orrs	r4, r5
 8002d16:	e04e      	b.n	8002db6 <__aeabi_dsub+0x4d2>
 8002d18:	464a      	mov	r2, r9
 8002d1a:	1a14      	subs	r4, r2, r0
 8002d1c:	45a1      	cmp	r9, r4
 8002d1e:	4192      	sbcs	r2, r2
 8002d20:	4252      	negs	r2, r2
 8002d22:	4690      	mov	r8, r2
 8002d24:	1a5f      	subs	r7, r3, r1
 8002d26:	003a      	movs	r2, r7
 8002d28:	4647      	mov	r7, r8
 8002d2a:	1bd2      	subs	r2, r2, r7
 8002d2c:	4690      	mov	r8, r2
 8002d2e:	0212      	lsls	r2, r2, #8
 8002d30:	d500      	bpl.n	8002d34 <__aeabi_dsub+0x450>
 8002d32:	e08b      	b.n	8002e4c <__aeabi_dsub+0x568>
 8002d34:	4642      	mov	r2, r8
 8002d36:	4322      	orrs	r2, r4
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x458>
 8002d3a:	e630      	b.n	800299e <__aeabi_dsub+0xba>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2500      	movs	r5, #0
 8002d40:	e74d      	b.n	8002bde <__aeabi_dsub+0x2fa>
 8002d42:	464a      	mov	r2, r9
 8002d44:	0759      	lsls	r1, r3, #29
 8002d46:	08d2      	lsrs	r2, r2, #3
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	08db      	lsrs	r3, r3, #3
 8002d4c:	e744      	b.n	8002bd8 <__aeabi_dsub+0x2f4>
 8002d4e:	4642      	mov	r2, r8
 8002d50:	4b9e      	ldr	r3, [pc, #632]	; (8002fcc <__aeabi_dsub+0x6e8>)
 8002d52:	0861      	lsrs	r1, r4, #1
 8002d54:	401a      	ands	r2, r3
 8002d56:	0013      	movs	r3, r2
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4014      	ands	r4, r2
 8002d5c:	430c      	orrs	r4, r1
 8002d5e:	07da      	lsls	r2, r3, #31
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	4698      	mov	r8, r3
 8002d64:	4314      	orrs	r4, r2
 8002d66:	e641      	b.n	80029ec <__aeabi_dsub+0x108>
 8002d68:	001a      	movs	r2, r3
 8002d6a:	3e1f      	subs	r6, #31
 8002d6c:	40f2      	lsrs	r2, r6
 8002d6e:	0016      	movs	r6, r2
 8002d70:	2920      	cmp	r1, #32
 8002d72:	d003      	beq.n	8002d7c <__aeabi_dsub+0x498>
 8002d74:	2240      	movs	r2, #64	; 0x40
 8002d76:	1a51      	subs	r1, r2, r1
 8002d78:	408b      	lsls	r3, r1
 8002d7a:	431c      	orrs	r4, r3
 8002d7c:	1e62      	subs	r2, r4, #1
 8002d7e:	4194      	sbcs	r4, r2
 8002d80:	2300      	movs	r3, #0
 8002d82:	4334      	orrs	r4, r6
 8002d84:	4698      	mov	r8, r3
 8002d86:	2600      	movs	r6, #0
 8002d88:	e71d      	b.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002d8a:	000c      	movs	r4, r1
 8002d8c:	3a20      	subs	r2, #32
 8002d8e:	40d4      	lsrs	r4, r2
 8002d90:	0022      	movs	r2, r4
 8002d92:	4664      	mov	r4, ip
 8002d94:	2c20      	cmp	r4, #32
 8002d96:	d004      	beq.n	8002da2 <__aeabi_dsub+0x4be>
 8002d98:	2740      	movs	r7, #64	; 0x40
 8002d9a:	1b3f      	subs	r7, r7, r4
 8002d9c:	40b9      	lsls	r1, r7
 8002d9e:	4308      	orrs	r0, r1
 8002da0:	4680      	mov	r8, r0
 8002da2:	4644      	mov	r4, r8
 8002da4:	1e61      	subs	r1, r4, #1
 8002da6:	418c      	sbcs	r4, r1
 8002da8:	4322      	orrs	r2, r4
 8002daa:	e5e9      	b.n	8002980 <__aeabi_dsub+0x9c>
 8002dac:	464c      	mov	r4, r9
 8002dae:	4323      	orrs	r3, r4
 8002db0:	001c      	movs	r4, r3
 8002db2:	1e63      	subs	r3, r4, #1
 8002db4:	419c      	sbcs	r4, r3
 8002db6:	1b04      	subs	r4, r0, r4
 8002db8:	42a0      	cmp	r0, r4
 8002dba:	419b      	sbcs	r3, r3
 8002dbc:	425b      	negs	r3, r3
 8002dbe:	1acb      	subs	r3, r1, r3
 8002dc0:	4698      	mov	r8, r3
 8002dc2:	465d      	mov	r5, fp
 8002dc4:	0016      	movs	r6, r2
 8002dc6:	e5e2      	b.n	800298e <__aeabi_dsub+0xaa>
 8002dc8:	464e      	mov	r6, r9
 8002dca:	431e      	orrs	r6, r3
 8002dcc:	d100      	bne.n	8002dd0 <__aeabi_dsub+0x4ec>
 8002dce:	e0ae      	b.n	8002f2e <__aeabi_dsub+0x64a>
 8002dd0:	1e66      	subs	r6, r4, #1
 8002dd2:	2c01      	cmp	r4, #1
 8002dd4:	d100      	bne.n	8002dd8 <__aeabi_dsub+0x4f4>
 8002dd6:	e0fd      	b.n	8002fd4 <__aeabi_dsub+0x6f0>
 8002dd8:	4f7b      	ldr	r7, [pc, #492]	; (8002fc8 <__aeabi_dsub+0x6e4>)
 8002dda:	42bc      	cmp	r4, r7
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x4fc>
 8002dde:	e107      	b.n	8002ff0 <__aeabi_dsub+0x70c>
 8002de0:	46b4      	mov	ip, r6
 8002de2:	e69b      	b.n	8002b1c <__aeabi_dsub+0x238>
 8002de4:	4664      	mov	r4, ip
 8002de6:	2220      	movs	r2, #32
 8002de8:	1b12      	subs	r2, r2, r4
 8002dea:	000c      	movs	r4, r1
 8002dec:	4094      	lsls	r4, r2
 8002dee:	0007      	movs	r7, r0
 8002df0:	4090      	lsls	r0, r2
 8002df2:	46a0      	mov	r8, r4
 8002df4:	4664      	mov	r4, ip
 8002df6:	1e42      	subs	r2, r0, #1
 8002df8:	4190      	sbcs	r0, r2
 8002dfa:	4662      	mov	r2, ip
 8002dfc:	40e7      	lsrs	r7, r4
 8002dfe:	4644      	mov	r4, r8
 8002e00:	40d1      	lsrs	r1, r2
 8002e02:	433c      	orrs	r4, r7
 8002e04:	4304      	orrs	r4, r0
 8002e06:	185b      	adds	r3, r3, r1
 8002e08:	e6f3      	b.n	8002bf2 <__aeabi_dsub+0x30e>
 8002e0a:	4c6f      	ldr	r4, [pc, #444]	; (8002fc8 <__aeabi_dsub+0x6e4>)
 8002e0c:	42a2      	cmp	r2, r4
 8002e0e:	d100      	bne.n	8002e12 <__aeabi_dsub+0x52e>
 8002e10:	e0d5      	b.n	8002fbe <__aeabi_dsub+0x6da>
 8002e12:	4448      	add	r0, r9
 8002e14:	185b      	adds	r3, r3, r1
 8002e16:	4548      	cmp	r0, r9
 8002e18:	4189      	sbcs	r1, r1
 8002e1a:	4249      	negs	r1, r1
 8002e1c:	185b      	adds	r3, r3, r1
 8002e1e:	07dc      	lsls	r4, r3, #31
 8002e20:	0840      	lsrs	r0, r0, #1
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	4698      	mov	r8, r3
 8002e26:	0016      	movs	r6, r2
 8002e28:	4304      	orrs	r4, r0
 8002e2a:	e6cc      	b.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	d000      	beq.n	8002e32 <__aeabi_dsub+0x54e>
 8002e30:	e082      	b.n	8002f38 <__aeabi_dsub+0x654>
 8002e32:	000a      	movs	r2, r1
 8002e34:	4302      	orrs	r2, r0
 8002e36:	d140      	bne.n	8002eba <__aeabi_dsub+0x5d6>
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	031b      	lsls	r3, r3, #12
 8002e3e:	e713      	b.n	8002c68 <__aeabi_dsub+0x384>
 8002e40:	074b      	lsls	r3, r1, #29
 8002e42:	08c2      	lsrs	r2, r0, #3
 8002e44:	431a      	orrs	r2, r3
 8002e46:	465d      	mov	r5, fp
 8002e48:	08cb      	lsrs	r3, r1, #3
 8002e4a:	e6c5      	b.n	8002bd8 <__aeabi_dsub+0x2f4>
 8002e4c:	464a      	mov	r2, r9
 8002e4e:	1a84      	subs	r4, r0, r2
 8002e50:	42a0      	cmp	r0, r4
 8002e52:	4192      	sbcs	r2, r2
 8002e54:	1acb      	subs	r3, r1, r3
 8002e56:	4252      	negs	r2, r2
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	4698      	mov	r8, r3
 8002e5c:	465d      	mov	r5, fp
 8002e5e:	e59e      	b.n	800299e <__aeabi_dsub+0xba>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0759      	lsls	r1, r3, #29
 8002e64:	08d2      	lsrs	r2, r2, #3
 8002e66:	430a      	orrs	r2, r1
 8002e68:	08db      	lsrs	r3, r3, #3
 8002e6a:	e6f9      	b.n	8002c60 <__aeabi_dsub+0x37c>
 8002e6c:	464a      	mov	r2, r9
 8002e6e:	1a14      	subs	r4, r2, r0
 8002e70:	45a1      	cmp	r9, r4
 8002e72:	4192      	sbcs	r2, r2
 8002e74:	1a5b      	subs	r3, r3, r1
 8002e76:	4252      	negs	r2, r2
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	4698      	mov	r8, r3
 8002e7c:	2601      	movs	r6, #1
 8002e7e:	e586      	b.n	800298e <__aeabi_dsub+0xaa>
 8002e80:	464a      	mov	r2, r9
 8002e82:	0759      	lsls	r1, r3, #29
 8002e84:	08d2      	lsrs	r2, r2, #3
 8002e86:	430a      	orrs	r2, r1
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	e6a5      	b.n	8002bd8 <__aeabi_dsub+0x2f4>
 8002e8c:	464c      	mov	r4, r9
 8002e8e:	4323      	orrs	r3, r4
 8002e90:	001c      	movs	r4, r3
 8002e92:	1e63      	subs	r3, r4, #1
 8002e94:	419c      	sbcs	r4, r3
 8002e96:	e65b      	b.n	8002b50 <__aeabi_dsub+0x26c>
 8002e98:	4665      	mov	r5, ip
 8002e9a:	001e      	movs	r6, r3
 8002e9c:	3d20      	subs	r5, #32
 8002e9e:	40ee      	lsrs	r6, r5
 8002ea0:	2c20      	cmp	r4, #32
 8002ea2:	d005      	beq.n	8002eb0 <__aeabi_dsub+0x5cc>
 8002ea4:	2540      	movs	r5, #64	; 0x40
 8002ea6:	1b2d      	subs	r5, r5, r4
 8002ea8:	40ab      	lsls	r3, r5
 8002eaa:	464c      	mov	r4, r9
 8002eac:	431c      	orrs	r4, r3
 8002eae:	46a2      	mov	sl, r4
 8002eb0:	4654      	mov	r4, sl
 8002eb2:	1e63      	subs	r3, r4, #1
 8002eb4:	419c      	sbcs	r4, r3
 8002eb6:	4334      	orrs	r4, r6
 8002eb8:	e77d      	b.n	8002db6 <__aeabi_dsub+0x4d2>
 8002eba:	074b      	lsls	r3, r1, #29
 8002ebc:	08c2      	lsrs	r2, r0, #3
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	465d      	mov	r5, fp
 8002ec2:	08cb      	lsrs	r3, r1, #3
 8002ec4:	e6cc      	b.n	8002c60 <__aeabi_dsub+0x37c>
 8002ec6:	000a      	movs	r2, r1
 8002ec8:	4302      	orrs	r2, r0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x5ea>
 8002ecc:	e736      	b.n	8002d3c <__aeabi_dsub+0x458>
 8002ece:	074b      	lsls	r3, r1, #29
 8002ed0:	08c2      	lsrs	r2, r0, #3
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	465d      	mov	r5, fp
 8002ed6:	08cb      	lsrs	r3, r1, #3
 8002ed8:	e681      	b.n	8002bde <__aeabi_dsub+0x2fa>
 8002eda:	464a      	mov	r2, r9
 8002edc:	1a84      	subs	r4, r0, r2
 8002ede:	42a0      	cmp	r0, r4
 8002ee0:	4192      	sbcs	r2, r2
 8002ee2:	1acb      	subs	r3, r1, r3
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	4698      	mov	r8, r3
 8002eea:	465d      	mov	r5, fp
 8002eec:	2601      	movs	r6, #1
 8002eee:	e54e      	b.n	800298e <__aeabi_dsub+0xaa>
 8002ef0:	074b      	lsls	r3, r1, #29
 8002ef2:	08c2      	lsrs	r2, r0, #3
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	08cb      	lsrs	r3, r1, #3
 8002ef8:	e6b2      	b.n	8002c60 <__aeabi_dsub+0x37c>
 8002efa:	464a      	mov	r2, r9
 8002efc:	1a14      	subs	r4, r2, r0
 8002efe:	45a1      	cmp	r9, r4
 8002f00:	4192      	sbcs	r2, r2
 8002f02:	1a5f      	subs	r7, r3, r1
 8002f04:	4252      	negs	r2, r2
 8002f06:	1aba      	subs	r2, r7, r2
 8002f08:	4690      	mov	r8, r2
 8002f0a:	0212      	lsls	r2, r2, #8
 8002f0c:	d56b      	bpl.n	8002fe6 <__aeabi_dsub+0x702>
 8002f0e:	464a      	mov	r2, r9
 8002f10:	1a84      	subs	r4, r0, r2
 8002f12:	42a0      	cmp	r0, r4
 8002f14:	4192      	sbcs	r2, r2
 8002f16:	1acb      	subs	r3, r1, r3
 8002f18:	4252      	negs	r2, r2
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	465d      	mov	r5, fp
 8002f20:	e564      	b.n	80029ec <__aeabi_dsub+0x108>
 8002f22:	074b      	lsls	r3, r1, #29
 8002f24:	08c2      	lsrs	r2, r0, #3
 8002f26:	431a      	orrs	r2, r3
 8002f28:	465d      	mov	r5, fp
 8002f2a:	08cb      	lsrs	r3, r1, #3
 8002f2c:	e698      	b.n	8002c60 <__aeabi_dsub+0x37c>
 8002f2e:	074b      	lsls	r3, r1, #29
 8002f30:	08c2      	lsrs	r2, r0, #3
 8002f32:	431a      	orrs	r2, r3
 8002f34:	08cb      	lsrs	r3, r1, #3
 8002f36:	e64f      	b.n	8002bd8 <__aeabi_dsub+0x2f4>
 8002f38:	000a      	movs	r2, r1
 8002f3a:	4302      	orrs	r2, r0
 8002f3c:	d090      	beq.n	8002e60 <__aeabi_dsub+0x57c>
 8002f3e:	464a      	mov	r2, r9
 8002f40:	075c      	lsls	r4, r3, #29
 8002f42:	08d2      	lsrs	r2, r2, #3
 8002f44:	4314      	orrs	r4, r2
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	0312      	lsls	r2, r2, #12
 8002f4c:	4213      	tst	r3, r2
 8002f4e:	d008      	beq.n	8002f62 <__aeabi_dsub+0x67e>
 8002f50:	08ce      	lsrs	r6, r1, #3
 8002f52:	4216      	tst	r6, r2
 8002f54:	d105      	bne.n	8002f62 <__aeabi_dsub+0x67e>
 8002f56:	08c0      	lsrs	r0, r0, #3
 8002f58:	0749      	lsls	r1, r1, #29
 8002f5a:	4308      	orrs	r0, r1
 8002f5c:	0004      	movs	r4, r0
 8002f5e:	465d      	mov	r5, fp
 8002f60:	0033      	movs	r3, r6
 8002f62:	0f61      	lsrs	r1, r4, #29
 8002f64:	00e2      	lsls	r2, r4, #3
 8002f66:	0749      	lsls	r1, r1, #29
 8002f68:	08d2      	lsrs	r2, r2, #3
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	e678      	b.n	8002c60 <__aeabi_dsub+0x37c>
 8002f6e:	074b      	lsls	r3, r1, #29
 8002f70:	08c2      	lsrs	r2, r0, #3
 8002f72:	431a      	orrs	r2, r3
 8002f74:	08cb      	lsrs	r3, r1, #3
 8002f76:	e632      	b.n	8002bde <__aeabi_dsub+0x2fa>
 8002f78:	4448      	add	r0, r9
 8002f7a:	185b      	adds	r3, r3, r1
 8002f7c:	4548      	cmp	r0, r9
 8002f7e:	4192      	sbcs	r2, r2
 8002f80:	4698      	mov	r8, r3
 8002f82:	4252      	negs	r2, r2
 8002f84:	4490      	add	r8, r2
 8002f86:	4643      	mov	r3, r8
 8002f88:	0004      	movs	r4, r0
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	d400      	bmi.n	8002f90 <__aeabi_dsub+0x6ac>
 8002f8e:	e61a      	b.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002f90:	4642      	mov	r2, r8
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <__aeabi_dsub+0x6e8>)
 8002f94:	2601      	movs	r6, #1
 8002f96:	401a      	ands	r2, r3
 8002f98:	4690      	mov	r8, r2
 8002f9a:	e614      	b.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002f9c:	4666      	mov	r6, ip
 8002f9e:	001f      	movs	r7, r3
 8002fa0:	3e20      	subs	r6, #32
 8002fa2:	40f7      	lsrs	r7, r6
 8002fa4:	2c20      	cmp	r4, #32
 8002fa6:	d005      	beq.n	8002fb4 <__aeabi_dsub+0x6d0>
 8002fa8:	2640      	movs	r6, #64	; 0x40
 8002faa:	1b36      	subs	r6, r6, r4
 8002fac:	40b3      	lsls	r3, r6
 8002fae:	464c      	mov	r4, r9
 8002fb0:	431c      	orrs	r4, r3
 8002fb2:	46a2      	mov	sl, r4
 8002fb4:	4654      	mov	r4, sl
 8002fb6:	1e63      	subs	r3, r4, #1
 8002fb8:	419c      	sbcs	r4, r3
 8002fba:	433c      	orrs	r4, r7
 8002fbc:	e5c8      	b.n	8002b50 <__aeabi_dsub+0x26c>
 8002fbe:	0011      	movs	r1, r2
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	e532      	b.n	8002a2c <__aeabi_dsub+0x148>
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	000007ff 	.word	0x000007ff
 8002fcc:	ff7fffff 	.word	0xff7fffff
 8002fd0:	000007fe 	.word	0x000007fe
 8002fd4:	464a      	mov	r2, r9
 8002fd6:	1814      	adds	r4, r2, r0
 8002fd8:	4284      	cmp	r4, r0
 8002fda:	4192      	sbcs	r2, r2
 8002fdc:	185b      	adds	r3, r3, r1
 8002fde:	4698      	mov	r8, r3
 8002fe0:	4252      	negs	r2, r2
 8002fe2:	4490      	add	r8, r2
 8002fe4:	e5e9      	b.n	8002bba <__aeabi_dsub+0x2d6>
 8002fe6:	4642      	mov	r2, r8
 8002fe8:	4322      	orrs	r2, r4
 8002fea:	d100      	bne.n	8002fee <__aeabi_dsub+0x70a>
 8002fec:	e6a6      	b.n	8002d3c <__aeabi_dsub+0x458>
 8002fee:	e5ea      	b.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002ff0:	074b      	lsls	r3, r1, #29
 8002ff2:	08c2      	lsrs	r2, r0, #3
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	08cb      	lsrs	r3, r1, #3
 8002ff8:	e632      	b.n	8002c60 <__aeabi_dsub+0x37c>
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	4901      	ldr	r1, [pc, #4]	; (8003004 <__aeabi_dsub+0x720>)
 8002ffe:	0013      	movs	r3, r2
 8003000:	e514      	b.n	8002a2c <__aeabi_dsub+0x148>
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	000007ff 	.word	0x000007ff

08003008 <__aeabi_dcmpun>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	0005      	movs	r5, r0
 800300c:	480c      	ldr	r0, [pc, #48]	; (8003040 <__aeabi_dcmpun+0x38>)
 800300e:	030c      	lsls	r4, r1, #12
 8003010:	0016      	movs	r6, r2
 8003012:	0049      	lsls	r1, r1, #1
 8003014:	031a      	lsls	r2, r3, #12
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	0b24      	lsrs	r4, r4, #12
 800301a:	0d49      	lsrs	r1, r1, #21
 800301c:	0b12      	lsrs	r2, r2, #12
 800301e:	0d5b      	lsrs	r3, r3, #21
 8003020:	4281      	cmp	r1, r0
 8003022:	d008      	beq.n	8003036 <__aeabi_dcmpun+0x2e>
 8003024:	4906      	ldr	r1, [pc, #24]	; (8003040 <__aeabi_dcmpun+0x38>)
 8003026:	2000      	movs	r0, #0
 8003028:	428b      	cmp	r3, r1
 800302a:	d103      	bne.n	8003034 <__aeabi_dcmpun+0x2c>
 800302c:	4332      	orrs	r2, r6
 800302e:	0010      	movs	r0, r2
 8003030:	1e42      	subs	r2, r0, #1
 8003032:	4190      	sbcs	r0, r2
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	2001      	movs	r0, #1
 8003038:	432c      	orrs	r4, r5
 800303a:	d1fb      	bne.n	8003034 <__aeabi_dcmpun+0x2c>
 800303c:	e7f2      	b.n	8003024 <__aeabi_dcmpun+0x1c>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	000007ff 	.word	0x000007ff

08003044 <__aeabi_d2iz>:
 8003044:	000a      	movs	r2, r1
 8003046:	b530      	push	{r4, r5, lr}
 8003048:	4c13      	ldr	r4, [pc, #76]	; (8003098 <__aeabi_d2iz+0x54>)
 800304a:	0053      	lsls	r3, r2, #1
 800304c:	0309      	lsls	r1, r1, #12
 800304e:	0005      	movs	r5, r0
 8003050:	0b09      	lsrs	r1, r1, #12
 8003052:	2000      	movs	r0, #0
 8003054:	0d5b      	lsrs	r3, r3, #21
 8003056:	0fd2      	lsrs	r2, r2, #31
 8003058:	42a3      	cmp	r3, r4
 800305a:	dd04      	ble.n	8003066 <__aeabi_d2iz+0x22>
 800305c:	480f      	ldr	r0, [pc, #60]	; (800309c <__aeabi_d2iz+0x58>)
 800305e:	4283      	cmp	r3, r0
 8003060:	dd02      	ble.n	8003068 <__aeabi_d2iz+0x24>
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <__aeabi_d2iz+0x5c>)
 8003064:	18d0      	adds	r0, r2, r3
 8003066:	bd30      	pop	{r4, r5, pc}
 8003068:	2080      	movs	r0, #128	; 0x80
 800306a:	0340      	lsls	r0, r0, #13
 800306c:	4301      	orrs	r1, r0
 800306e:	480d      	ldr	r0, [pc, #52]	; (80030a4 <__aeabi_d2iz+0x60>)
 8003070:	1ac0      	subs	r0, r0, r3
 8003072:	281f      	cmp	r0, #31
 8003074:	dd08      	ble.n	8003088 <__aeabi_d2iz+0x44>
 8003076:	480c      	ldr	r0, [pc, #48]	; (80030a8 <__aeabi_d2iz+0x64>)
 8003078:	1ac3      	subs	r3, r0, r3
 800307a:	40d9      	lsrs	r1, r3
 800307c:	000b      	movs	r3, r1
 800307e:	4258      	negs	r0, r3
 8003080:	2a00      	cmp	r2, #0
 8003082:	d1f0      	bne.n	8003066 <__aeabi_d2iz+0x22>
 8003084:	0018      	movs	r0, r3
 8003086:	e7ee      	b.n	8003066 <__aeabi_d2iz+0x22>
 8003088:	4c08      	ldr	r4, [pc, #32]	; (80030ac <__aeabi_d2iz+0x68>)
 800308a:	40c5      	lsrs	r5, r0
 800308c:	46a4      	mov	ip, r4
 800308e:	4463      	add	r3, ip
 8003090:	4099      	lsls	r1, r3
 8003092:	000b      	movs	r3, r1
 8003094:	432b      	orrs	r3, r5
 8003096:	e7f2      	b.n	800307e <__aeabi_d2iz+0x3a>
 8003098:	000003fe 	.word	0x000003fe
 800309c:	0000041d 	.word	0x0000041d
 80030a0:	7fffffff 	.word	0x7fffffff
 80030a4:	00000433 	.word	0x00000433
 80030a8:	00000413 	.word	0x00000413
 80030ac:	fffffbed 	.word	0xfffffbed

080030b0 <__aeabi_i2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d016      	beq.n	80030e4 <__aeabi_i2d+0x34>
 80030b6:	17c3      	asrs	r3, r0, #31
 80030b8:	18c5      	adds	r5, r0, r3
 80030ba:	405d      	eors	r5, r3
 80030bc:	0fc4      	lsrs	r4, r0, #31
 80030be:	0028      	movs	r0, r5
 80030c0:	f000 f91c 	bl	80032fc <__clzsi2>
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <__aeabi_i2d+0x5c>)
 80030c6:	1a12      	subs	r2, r2, r0
 80030c8:	280a      	cmp	r0, #10
 80030ca:	dc16      	bgt.n	80030fa <__aeabi_i2d+0x4a>
 80030cc:	0003      	movs	r3, r0
 80030ce:	002e      	movs	r6, r5
 80030d0:	3315      	adds	r3, #21
 80030d2:	409e      	lsls	r6, r3
 80030d4:	230b      	movs	r3, #11
 80030d6:	1a18      	subs	r0, r3, r0
 80030d8:	40c5      	lsrs	r5, r0
 80030da:	0553      	lsls	r3, r2, #21
 80030dc:	032d      	lsls	r5, r5, #12
 80030de:	0b2d      	lsrs	r5, r5, #12
 80030e0:	0d5b      	lsrs	r3, r3, #21
 80030e2:	e003      	b.n	80030ec <__aeabi_i2d+0x3c>
 80030e4:	2400      	movs	r4, #0
 80030e6:	2300      	movs	r3, #0
 80030e8:	2500      	movs	r5, #0
 80030ea:	2600      	movs	r6, #0
 80030ec:	051b      	lsls	r3, r3, #20
 80030ee:	432b      	orrs	r3, r5
 80030f0:	07e4      	lsls	r4, r4, #31
 80030f2:	4323      	orrs	r3, r4
 80030f4:	0030      	movs	r0, r6
 80030f6:	0019      	movs	r1, r3
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	380b      	subs	r0, #11
 80030fc:	4085      	lsls	r5, r0
 80030fe:	0553      	lsls	r3, r2, #21
 8003100:	032d      	lsls	r5, r5, #12
 8003102:	2600      	movs	r6, #0
 8003104:	0b2d      	lsrs	r5, r5, #12
 8003106:	0d5b      	lsrs	r3, r3, #21
 8003108:	e7f0      	b.n	80030ec <__aeabi_i2d+0x3c>
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	0000041e 	.word	0x0000041e

08003110 <__aeabi_ui2d>:
 8003110:	b510      	push	{r4, lr}
 8003112:	1e04      	subs	r4, r0, #0
 8003114:	d010      	beq.n	8003138 <__aeabi_ui2d+0x28>
 8003116:	f000 f8f1 	bl	80032fc <__clzsi2>
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <__aeabi_ui2d+0x48>)
 800311c:	1a1b      	subs	r3, r3, r0
 800311e:	280a      	cmp	r0, #10
 8003120:	dc11      	bgt.n	8003146 <__aeabi_ui2d+0x36>
 8003122:	220b      	movs	r2, #11
 8003124:	0021      	movs	r1, r4
 8003126:	1a12      	subs	r2, r2, r0
 8003128:	40d1      	lsrs	r1, r2
 800312a:	3015      	adds	r0, #21
 800312c:	030a      	lsls	r2, r1, #12
 800312e:	055b      	lsls	r3, r3, #21
 8003130:	4084      	lsls	r4, r0
 8003132:	0b12      	lsrs	r2, r2, #12
 8003134:	0d5b      	lsrs	r3, r3, #21
 8003136:	e001      	b.n	800313c <__aeabi_ui2d+0x2c>
 8003138:	2300      	movs	r3, #0
 800313a:	2200      	movs	r2, #0
 800313c:	051b      	lsls	r3, r3, #20
 800313e:	4313      	orrs	r3, r2
 8003140:	0020      	movs	r0, r4
 8003142:	0019      	movs	r1, r3
 8003144:	bd10      	pop	{r4, pc}
 8003146:	0022      	movs	r2, r4
 8003148:	380b      	subs	r0, #11
 800314a:	4082      	lsls	r2, r0
 800314c:	055b      	lsls	r3, r3, #21
 800314e:	0312      	lsls	r2, r2, #12
 8003150:	2400      	movs	r4, #0
 8003152:	0b12      	lsrs	r2, r2, #12
 8003154:	0d5b      	lsrs	r3, r3, #21
 8003156:	e7f1      	b.n	800313c <__aeabi_ui2d+0x2c>
 8003158:	0000041e 	.word	0x0000041e

0800315c <__aeabi_f2d>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	0043      	lsls	r3, r0, #1
 8003160:	0246      	lsls	r6, r0, #9
 8003162:	0fc4      	lsrs	r4, r0, #31
 8003164:	20fe      	movs	r0, #254	; 0xfe
 8003166:	0e1b      	lsrs	r3, r3, #24
 8003168:	1c59      	adds	r1, r3, #1
 800316a:	0a75      	lsrs	r5, r6, #9
 800316c:	4208      	tst	r0, r1
 800316e:	d00c      	beq.n	800318a <__aeabi_f2d+0x2e>
 8003170:	22e0      	movs	r2, #224	; 0xe0
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4694      	mov	ip, r2
 8003176:	076d      	lsls	r5, r5, #29
 8003178:	0b36      	lsrs	r6, r6, #12
 800317a:	4463      	add	r3, ip
 800317c:	051b      	lsls	r3, r3, #20
 800317e:	4333      	orrs	r3, r6
 8003180:	07e4      	lsls	r4, r4, #31
 8003182:	4323      	orrs	r3, r4
 8003184:	0028      	movs	r0, r5
 8003186:	0019      	movs	r1, r3
 8003188:	bd70      	pop	{r4, r5, r6, pc}
 800318a:	2b00      	cmp	r3, #0
 800318c:	d114      	bne.n	80031b8 <__aeabi_f2d+0x5c>
 800318e:	2d00      	cmp	r5, #0
 8003190:	d01b      	beq.n	80031ca <__aeabi_f2d+0x6e>
 8003192:	0028      	movs	r0, r5
 8003194:	f000 f8b2 	bl	80032fc <__clzsi2>
 8003198:	280a      	cmp	r0, #10
 800319a:	dc1c      	bgt.n	80031d6 <__aeabi_f2d+0x7a>
 800319c:	230b      	movs	r3, #11
 800319e:	002a      	movs	r2, r5
 80031a0:	1a1b      	subs	r3, r3, r0
 80031a2:	40da      	lsrs	r2, r3
 80031a4:	0003      	movs	r3, r0
 80031a6:	3315      	adds	r3, #21
 80031a8:	409d      	lsls	r5, r3
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <__aeabi_f2d+0x88>)
 80031ac:	0312      	lsls	r2, r2, #12
 80031ae:	1a1b      	subs	r3, r3, r0
 80031b0:	055b      	lsls	r3, r3, #21
 80031b2:	0b16      	lsrs	r6, r2, #12
 80031b4:	0d5b      	lsrs	r3, r3, #21
 80031b6:	e7e1      	b.n	800317c <__aeabi_f2d+0x20>
 80031b8:	2d00      	cmp	r5, #0
 80031ba:	d009      	beq.n	80031d0 <__aeabi_f2d+0x74>
 80031bc:	0b32      	lsrs	r2, r6, #12
 80031be:	2680      	movs	r6, #128	; 0x80
 80031c0:	0336      	lsls	r6, r6, #12
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <__aeabi_f2d+0x8c>)
 80031c4:	076d      	lsls	r5, r5, #29
 80031c6:	4316      	orrs	r6, r2
 80031c8:	e7d8      	b.n	800317c <__aeabi_f2d+0x20>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2600      	movs	r6, #0
 80031ce:	e7d5      	b.n	800317c <__aeabi_f2d+0x20>
 80031d0:	2600      	movs	r6, #0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <__aeabi_f2d+0x8c>)
 80031d4:	e7d2      	b.n	800317c <__aeabi_f2d+0x20>
 80031d6:	0003      	movs	r3, r0
 80031d8:	002a      	movs	r2, r5
 80031da:	3b0b      	subs	r3, #11
 80031dc:	409a      	lsls	r2, r3
 80031de:	2500      	movs	r5, #0
 80031e0:	e7e3      	b.n	80031aa <__aeabi_f2d+0x4e>
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	00000389 	.word	0x00000389
 80031e8:	000007ff 	.word	0x000007ff

080031ec <__aeabi_d2f>:
 80031ec:	0002      	movs	r2, r0
 80031ee:	004b      	lsls	r3, r1, #1
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	0308      	lsls	r0, r1, #12
 80031f4:	0d5b      	lsrs	r3, r3, #21
 80031f6:	4e3d      	ldr	r6, [pc, #244]	; (80032ec <__aeabi_d2f+0x100>)
 80031f8:	0fcc      	lsrs	r4, r1, #31
 80031fa:	0a40      	lsrs	r0, r0, #9
 80031fc:	0f51      	lsrs	r1, r2, #29
 80031fe:	1c5f      	adds	r7, r3, #1
 8003200:	4308      	orrs	r0, r1
 8003202:	00d5      	lsls	r5, r2, #3
 8003204:	4237      	tst	r7, r6
 8003206:	d00a      	beq.n	800321e <__aeabi_d2f+0x32>
 8003208:	4939      	ldr	r1, [pc, #228]	; (80032f0 <__aeabi_d2f+0x104>)
 800320a:	185e      	adds	r6, r3, r1
 800320c:	2efe      	cmp	r6, #254	; 0xfe
 800320e:	dd16      	ble.n	800323e <__aeabi_d2f+0x52>
 8003210:	23ff      	movs	r3, #255	; 0xff
 8003212:	2100      	movs	r1, #0
 8003214:	05db      	lsls	r3, r3, #23
 8003216:	430b      	orrs	r3, r1
 8003218:	07e0      	lsls	r0, r4, #31
 800321a:	4318      	orrs	r0, r3
 800321c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <__aeabi_d2f+0x44>
 8003222:	4328      	orrs	r0, r5
 8003224:	d027      	beq.n	8003276 <__aeabi_d2f+0x8a>
 8003226:	2105      	movs	r1, #5
 8003228:	0189      	lsls	r1, r1, #6
 800322a:	0a49      	lsrs	r1, r1, #9
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e7f1      	b.n	8003214 <__aeabi_d2f+0x28>
 8003230:	4305      	orrs	r5, r0
 8003232:	d0ed      	beq.n	8003210 <__aeabi_d2f+0x24>
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	03c9      	lsls	r1, r1, #15
 8003238:	23ff      	movs	r3, #255	; 0xff
 800323a:	4301      	orrs	r1, r0
 800323c:	e7ea      	b.n	8003214 <__aeabi_d2f+0x28>
 800323e:	2e00      	cmp	r6, #0
 8003240:	dd1c      	ble.n	800327c <__aeabi_d2f+0x90>
 8003242:	0192      	lsls	r2, r2, #6
 8003244:	0011      	movs	r1, r2
 8003246:	1e4a      	subs	r2, r1, #1
 8003248:	4191      	sbcs	r1, r2
 800324a:	00c0      	lsls	r0, r0, #3
 800324c:	0f6d      	lsrs	r5, r5, #29
 800324e:	4301      	orrs	r1, r0
 8003250:	4329      	orrs	r1, r5
 8003252:	074b      	lsls	r3, r1, #29
 8003254:	d048      	beq.n	80032e8 <__aeabi_d2f+0xfc>
 8003256:	230f      	movs	r3, #15
 8003258:	400b      	ands	r3, r1
 800325a:	2b04      	cmp	r3, #4
 800325c:	d000      	beq.n	8003260 <__aeabi_d2f+0x74>
 800325e:	3104      	adds	r1, #4
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	04db      	lsls	r3, r3, #19
 8003264:	400b      	ands	r3, r1
 8003266:	d03f      	beq.n	80032e8 <__aeabi_d2f+0xfc>
 8003268:	1c72      	adds	r2, r6, #1
 800326a:	2efe      	cmp	r6, #254	; 0xfe
 800326c:	d0d0      	beq.n	8003210 <__aeabi_d2f+0x24>
 800326e:	0189      	lsls	r1, r1, #6
 8003270:	0a49      	lsrs	r1, r1, #9
 8003272:	b2d3      	uxtb	r3, r2
 8003274:	e7ce      	b.n	8003214 <__aeabi_d2f+0x28>
 8003276:	2300      	movs	r3, #0
 8003278:	2100      	movs	r1, #0
 800327a:	e7cb      	b.n	8003214 <__aeabi_d2f+0x28>
 800327c:	0032      	movs	r2, r6
 800327e:	3217      	adds	r2, #23
 8003280:	db22      	blt.n	80032c8 <__aeabi_d2f+0xdc>
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	221e      	movs	r2, #30
 8003286:	0409      	lsls	r1, r1, #16
 8003288:	4308      	orrs	r0, r1
 800328a:	1b92      	subs	r2, r2, r6
 800328c:	2a1f      	cmp	r2, #31
 800328e:	dd1d      	ble.n	80032cc <__aeabi_d2f+0xe0>
 8003290:	2102      	movs	r1, #2
 8003292:	4249      	negs	r1, r1
 8003294:	1b8e      	subs	r6, r1, r6
 8003296:	0001      	movs	r1, r0
 8003298:	40f1      	lsrs	r1, r6
 800329a:	000e      	movs	r6, r1
 800329c:	2a20      	cmp	r2, #32
 800329e:	d004      	beq.n	80032aa <__aeabi_d2f+0xbe>
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <__aeabi_d2f+0x108>)
 80032a2:	4694      	mov	ip, r2
 80032a4:	4463      	add	r3, ip
 80032a6:	4098      	lsls	r0, r3
 80032a8:	4305      	orrs	r5, r0
 80032aa:	0029      	movs	r1, r5
 80032ac:	1e4d      	subs	r5, r1, #1
 80032ae:	41a9      	sbcs	r1, r5
 80032b0:	4331      	orrs	r1, r6
 80032b2:	2600      	movs	r6, #0
 80032b4:	074b      	lsls	r3, r1, #29
 80032b6:	d1ce      	bne.n	8003256 <__aeabi_d2f+0x6a>
 80032b8:	2080      	movs	r0, #128	; 0x80
 80032ba:	000b      	movs	r3, r1
 80032bc:	04c0      	lsls	r0, r0, #19
 80032be:	2201      	movs	r2, #1
 80032c0:	4003      	ands	r3, r0
 80032c2:	4201      	tst	r1, r0
 80032c4:	d1d3      	bne.n	800326e <__aeabi_d2f+0x82>
 80032c6:	e7af      	b.n	8003228 <__aeabi_d2f+0x3c>
 80032c8:	2300      	movs	r3, #0
 80032ca:	e7ac      	b.n	8003226 <__aeabi_d2f+0x3a>
 80032cc:	490a      	ldr	r1, [pc, #40]	; (80032f8 <__aeabi_d2f+0x10c>)
 80032ce:	468c      	mov	ip, r1
 80032d0:	0029      	movs	r1, r5
 80032d2:	4463      	add	r3, ip
 80032d4:	40d1      	lsrs	r1, r2
 80032d6:	409d      	lsls	r5, r3
 80032d8:	000a      	movs	r2, r1
 80032da:	0029      	movs	r1, r5
 80032dc:	4098      	lsls	r0, r3
 80032de:	1e4d      	subs	r5, r1, #1
 80032e0:	41a9      	sbcs	r1, r5
 80032e2:	4301      	orrs	r1, r0
 80032e4:	4311      	orrs	r1, r2
 80032e6:	e7e4      	b.n	80032b2 <__aeabi_d2f+0xc6>
 80032e8:	0033      	movs	r3, r6
 80032ea:	e79d      	b.n	8003228 <__aeabi_d2f+0x3c>
 80032ec:	000007fe 	.word	0x000007fe
 80032f0:	fffffc80 	.word	0xfffffc80
 80032f4:	fffffca2 	.word	0xfffffca2
 80032f8:	fffffc82 	.word	0xfffffc82

080032fc <__clzsi2>:
 80032fc:	211c      	movs	r1, #28
 80032fe:	2301      	movs	r3, #1
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	4298      	cmp	r0, r3
 8003304:	d301      	bcc.n	800330a <__clzsi2+0xe>
 8003306:	0c00      	lsrs	r0, r0, #16
 8003308:	3910      	subs	r1, #16
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	4298      	cmp	r0, r3
 800330e:	d301      	bcc.n	8003314 <__clzsi2+0x18>
 8003310:	0a00      	lsrs	r0, r0, #8
 8003312:	3908      	subs	r1, #8
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	4298      	cmp	r0, r3
 8003318:	d301      	bcc.n	800331e <__clzsi2+0x22>
 800331a:	0900      	lsrs	r0, r0, #4
 800331c:	3904      	subs	r1, #4
 800331e:	a202      	add	r2, pc, #8	; (adr r2, 8003328 <__clzsi2+0x2c>)
 8003320:	5c10      	ldrb	r0, [r2, r0]
 8003322:	1840      	adds	r0, r0, r1
 8003324:	4770      	bx	lr
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	02020304 	.word	0x02020304
 800332c:	01010101 	.word	0x01010101
	...

08003338 <__clzdi2>:
 8003338:	b510      	push	{r4, lr}
 800333a:	2900      	cmp	r1, #0
 800333c:	d103      	bne.n	8003346 <__clzdi2+0xe>
 800333e:	f7ff ffdd 	bl	80032fc <__clzsi2>
 8003342:	3020      	adds	r0, #32
 8003344:	e002      	b.n	800334c <__clzdi2+0x14>
 8003346:	1c08      	adds	r0, r1, #0
 8003348:	f7ff ffd8 	bl	80032fc <__clzsi2>
 800334c:	bd10      	pop	{r4, pc}
 800334e:	46c0      	nop			; (mov r8, r8)

08003350 <Update_DDS>:
 *        40000->50
 *
 */

void Update_DDS(int16_t amp, int16_t offset, uint8_t mode)
{
 8003350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003352:	46de      	mov	lr, fp
 8003354:	4657      	mov	r7, sl
 8003356:	464e      	mov	r6, r9
 8003358:	4645      	mov	r5, r8
 800335a:	b5e0      	push	{r5, r6, r7, lr}
 800335c:	b085      	sub	sp, #20
  int16_t temp;
  switch (mode)
 800335e:	2a01      	cmp	r2, #1
 8003360:	d049      	beq.n	80033f6 <Update_DDS+0xa6>
 8003362:	2a02      	cmp	r2, #2
 8003364:	d100      	bne.n	8003368 <Update_DDS+0x18>
 8003366:	e087      	b.n	8003478 <Update_DDS+0x128>
 8003368:	2a00      	cmp	r2, #0
 800336a:	d006      	beq.n	800337a <Update_DDS+0x2a>
      }
      break;
    default:
      break;
  }
}
 800336c:	b005      	add	sp, #20
 800336e:	bcf0      	pop	{r4, r5, r6, r7}
 8003370:	46bb      	mov	fp, r7
 8003372:	46b2      	mov	sl, r6
 8003374:	46a9      	mov	r9, r5
 8003376:	46a0      	mov	r8, r4
 8003378:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = tmp_ampl*sinf(tmp_phase*PI/16.0)+tmp_offset;
 800337a:	4b57      	ldr	r3, [pc, #348]	; (80034d8 <Update_DDS+0x188>)
 800337c:	2000      	movs	r0, #0
 800337e:	5e18      	ldrsh	r0, [r3, r0]
 8003380:	f7fe f852 	bl	8001428 <__aeabi_i2f>
 8003384:	4680      	mov	r8, r0
 8003386:	4b55      	ldr	r3, [pc, #340]	; (80034dc <Update_DDS+0x18c>)
 8003388:	2000      	movs	r0, #0
 800338a:	5e18      	ldrsh	r0, [r3, r0]
 800338c:	f7fe f84c 	bl	8001428 <__aeabi_i2f>
 8003390:	4d53      	ldr	r5, [pc, #332]	; (80034e0 <Update_DDS+0x190>)
 8003392:	2400      	movs	r4, #0
 8003394:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <Update_DDS+0x194>)
 8003396:	469b      	mov	fp, r3
 8003398:	23f6      	movs	r3, #246	; 0xf6
 800339a:	059b      	lsls	r3, r3, #22
 800339c:	469a      	mov	sl, r3
        tmp_sinTable[tmp_phase] =(uint16_t)temp;
 800339e:	2780      	movs	r7, #128	; 0x80
 80033a0:	007f      	lsls	r7, r7, #1
 80033a2:	466b      	mov	r3, sp
 80033a4:	801f      	strh	r7, [r3, #0]
 80033a6:	4646      	mov	r6, r8
 80033a8:	4680      	mov	r8, r0
 80033aa:	e005      	b.n	80033b8 <Update_DDS+0x68>
 80033ac:	b280      	uxth	r0, r0
 80033ae:	c501      	stmia	r5!, {r0}
      for (tmp_phase = 0; tmp_phase < 32; tmp_phase++)
 80033b0:	3401      	adds	r4, #1
 80033b2:	2c20      	cmp	r4, #32
 80033b4:	d100      	bne.n	80033b8 <Update_DDS+0x68>
 80033b6:	e08a      	b.n	80034ce <Update_DDS+0x17e>
        temp = tmp_ampl*sinf(tmp_phase*PI/16.0)+tmp_offset;
 80033b8:	b220      	sxth	r0, r4
 80033ba:	f7fe f835 	bl	8001428 <__aeabi_i2f>
 80033be:	4659      	mov	r1, fp
 80033c0:	f7fd fd1a 	bl	8000df8 <__aeabi_fmul>
 80033c4:	4651      	mov	r1, sl
 80033c6:	f7fd fd17 	bl	8000df8 <__aeabi_fmul>
 80033ca:	f009 f923 	bl	800c614 <sinf>
 80033ce:	1c01      	adds	r1, r0, #0
 80033d0:	1c30      	adds	r0, r6, #0
 80033d2:	f7fd fd11 	bl	8000df8 <__aeabi_fmul>
 80033d6:	4641      	mov	r1, r8
 80033d8:	f7fd f9a8 	bl	800072c <__aeabi_fadd>
 80033dc:	f7fe f804 	bl	80013e8 <__aeabi_f2iz>
 80033e0:	0002      	movs	r2, r0
        temp = temp>256 ? 256 : temp<0 ? 0 : temp;
 80033e2:	b200      	sxth	r0, r0
 80033e4:	43c0      	mvns	r0, r0
 80033e6:	17c0      	asrs	r0, r0, #31
 80033e8:	4010      	ands	r0, r2
        tmp_sinTable[tmp_phase] =(uint16_t)temp;
 80033ea:	b203      	sxth	r3, r0
 80033ec:	42bb      	cmp	r3, r7
 80033ee:	dddd      	ble.n	80033ac <Update_DDS+0x5c>
 80033f0:	466b      	mov	r3, sp
 80033f2:	8818      	ldrh	r0, [r3, #0]
 80033f4:	e7da      	b.n	80033ac <Update_DDS+0x5c>
        temp = tmp_ampl * (tmp_phase-8)/8.0 + tmp_offset;
 80033f6:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <Update_DDS+0x188>)
 80033f8:	2400      	movs	r4, #0
 80033fa:	5f1c      	ldrsh	r4, [r3, r4]
 80033fc:	4b37      	ldr	r3, [pc, #220]	; (80034dc <Update_DDS+0x18c>)
 80033fe:	2000      	movs	r0, #0
 8003400:	5e18      	ldrsh	r0, [r3, r0]
 8003402:	f7ff fe55 	bl	80030b0 <__aeabi_i2d>
 8003406:	9000      	str	r0, [sp, #0]
 8003408:	9101      	str	r1, [sp, #4]
 800340a:	46a3      	mov	fp, r4
 800340c:	00e4      	lsls	r4, r4, #3
 800340e:	4264      	negs	r4, r4
 8003410:	4d33      	ldr	r5, [pc, #204]	; (80034e0 <Update_DDS+0x190>)
 8003412:	2340      	movs	r3, #64	; 0x40
 8003414:	469a      	mov	sl, r3
 8003416:	44aa      	add	sl, r5
 8003418:	46a8      	mov	r8, r5
 800341a:	2600      	movs	r6, #0
 800341c:	27ff      	movs	r7, #255	; 0xff
 800341e:	05bf      	lsls	r7, r7, #22
        tmp_sinTable[tmp_phase] = (uint16_t)temp;
 8003420:	33c0      	adds	r3, #192	; 0xc0
 8003422:	4699      	mov	r9, r3
 8003424:	466a      	mov	r2, sp
 8003426:	81d3      	strh	r3, [r2, #14]
 8003428:	e00a      	b.n	8003440 <Update_DDS+0xf0>
 800342a:	b280      	uxth	r0, r0
 800342c:	c501      	stmia	r5!, {r0}
        tmp_sinTable[31 - tmp_phase] = (uint16_t)temp;
 800342e:	4643      	mov	r3, r8
 8003430:	67d8      	str	r0, [r3, #124]	; 0x7c
      for (tmp_phase = 0; tmp_phase < 16; tmp_phase++)
 8003432:	445c      	add	r4, fp
 8003434:	2304      	movs	r3, #4
 8003436:	425b      	negs	r3, r3
 8003438:	469c      	mov	ip, r3
 800343a:	44e0      	add	r8, ip
 800343c:	4555      	cmp	r5, sl
 800343e:	d017      	beq.n	8003470 <Update_DDS+0x120>
        temp = tmp_ampl * (tmp_phase-8)/8.0 + tmp_offset;
 8003440:	0020      	movs	r0, r4
 8003442:	f7ff fe35 	bl	80030b0 <__aeabi_i2d>
 8003446:	0032      	movs	r2, r6
 8003448:	003b      	movs	r3, r7
 800344a:	f7fe ffdf 	bl	800240c <__aeabi_dmul>
 800344e:	9a00      	ldr	r2, [sp, #0]
 8003450:	9b01      	ldr	r3, [sp, #4]
 8003452:	f7fe f86b 	bl	800152c <__aeabi_dadd>
 8003456:	f7ff fdf5 	bl	8003044 <__aeabi_d2iz>
 800345a:	0002      	movs	r2, r0
        temp = temp>256 ? 256 : temp<0 ? 0 : temp;
 800345c:	b200      	sxth	r0, r0
 800345e:	43c0      	mvns	r0, r0
 8003460:	17c0      	asrs	r0, r0, #31
 8003462:	4010      	ands	r0, r2
        tmp_sinTable[tmp_phase] = (uint16_t)temp;
 8003464:	b203      	sxth	r3, r0
 8003466:	454b      	cmp	r3, r9
 8003468:	dddf      	ble.n	800342a <Update_DDS+0xda>
 800346a:	466b      	mov	r3, sp
 800346c:	89d8      	ldrh	r0, [r3, #14]
 800346e:	e7dc      	b.n	800342a <Update_DDS+0xda>
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <Update_DDS+0x198>)
 8003472:	2210      	movs	r2, #16
 8003474:	801a      	strh	r2, [r3, #0]
 8003476:	e779      	b.n	800336c <Update_DDS+0x1c>
        temp = tmp_offset + tmp_ampl;
 8003478:	4b18      	ldr	r3, [pc, #96]	; (80034dc <Update_DDS+0x18c>)
 800347a:	881c      	ldrh	r4, [r3, #0]
 800347c:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <Update_DDS+0x188>)
 800347e:	881d      	ldrh	r5, [r3, #0]
 8003480:	1962      	adds	r2, r4, r5
        temp = temp>256 ? 256 : temp<0 ? 0 : temp;
 8003482:	b211      	sxth	r1, r2
 8003484:	43c9      	mvns	r1, r1
 8003486:	17c9      	asrs	r1, r1, #31
 8003488:	4011      	ands	r1, r2
        tmp_sinTable[tmp_phase] = (uint16_t)temp;
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	b20a      	sxth	r2, r1
 8003490:	429a      	cmp	r2, r3
 8003492:	dd00      	ble.n	8003496 <Update_DDS+0x146>
 8003494:	1c19      	adds	r1, r3, #0
 8003496:	b289      	uxth	r1, r1
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <Update_DDS+0x190>)
 800349a:	0018      	movs	r0, r3
 800349c:	3040      	adds	r0, #64	; 0x40
 800349e:	001a      	movs	r2, r3
 80034a0:	c202      	stmia	r2!, {r1}
      for (tmp_phase = 0; tmp_phase < 16; tmp_phase++)
 80034a2:	4282      	cmp	r2, r0
 80034a4:	d1fc      	bne.n	80034a0 <Update_DDS+0x150>
        temp = tmp_offset - tmp_ampl;
 80034a6:	1b64      	subs	r4, r4, r5
        temp = temp>256 ? 256 : temp<0 ? 0 : temp;
 80034a8:	b222      	sxth	r2, r4
 80034aa:	43d2      	mvns	r2, r2
 80034ac:	17d2      	asrs	r2, r2, #31
 80034ae:	4022      	ands	r2, r4
        tmp_sinTable[tmp_phase] = (uint16_t)temp;
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	0049      	lsls	r1, r1, #1
 80034b4:	b214      	sxth	r4, r2
 80034b6:	428c      	cmp	r4, r1
 80034b8:	dd00      	ble.n	80034bc <Update_DDS+0x16c>
 80034ba:	1c0a      	adds	r2, r1, #0
 80034bc:	b292      	uxth	r2, r2
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
      for (tmp_phase = 16; tmp_phase < 32; tmp_phase++)
 80034c0:	3304      	adds	r3, #4
 80034c2:	4283      	cmp	r3, r0
 80034c4:	d1fb      	bne.n	80034be <Update_DDS+0x16e>
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <Update_DDS+0x198>)
 80034c8:	2220      	movs	r2, #32
 80034ca:	801a      	strh	r2, [r3, #0]
 80034cc:	e74e      	b.n	800336c <Update_DDS+0x1c>
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <Update_DDS+0x198>)
 80034d0:	2220      	movs	r2, #32
 80034d2:	801a      	strh	r2, [r3, #0]
}
 80034d4:	e74a      	b.n	800336c <Update_DDS+0x1c>
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	20000070 	.word	0x20000070
 80034dc:	20000072 	.word	0x20000072
 80034e0:	20000a48 	.word	0x20000a48
 80034e4:	40490fdb 	.word	0x40490fdb
 80034e8:	20000a44 	.word	0x20000a44

080034ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034ec:	b500      	push	{lr}
 80034ee:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034f0:	2238      	movs	r2, #56	; 0x38
 80034f2:	2100      	movs	r1, #0
 80034f4:	a80e      	add	r0, sp, #56	; 0x38
 80034f6:	f006 f939 	bl	800976c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034fa:	2210      	movs	r2, #16
 80034fc:	2100      	movs	r1, #0
 80034fe:	a80a      	add	r0, sp, #40	; 0x28
 8003500:	f006 f934 	bl	800976c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003504:	2228      	movs	r2, #40	; 0x28
 8003506:	2100      	movs	r1, #0
 8003508:	4668      	mov	r0, sp
 800350a:	f006 f92f 	bl	800976c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800350e:	2080      	movs	r0, #128	; 0x80
 8003510:	0080      	lsls	r0, r0, #2
 8003512:	f002 ff19 	bl	8006348 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003516:	2302      	movs	r3, #2
 8003518:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	0052      	lsls	r2, r2, #1
 800351e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003520:	2200      	movs	r2, #0
 8003522:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003524:	2140      	movs	r1, #64	; 0x40
 8003526:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003528:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800352a:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800352c:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800352e:	3306      	adds	r3, #6
 8003530:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	029b      	lsls	r3, r3, #10
 8003536:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	049b      	lsls	r3, r3, #18
 800353c:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	059b      	lsls	r3, r3, #22
 8003542:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003544:	a80e      	add	r0, sp, #56	; 0x38
 8003546:	f002 ff31 	bl	80063ac <HAL_RCC_OscConfig>
 800354a:	2800      	cmp	r0, #0
 800354c:	d119      	bne.n	8003582 <SystemClock_Config+0x96>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800354e:	2307      	movs	r3, #7
 8003550:	930a      	str	r3, [sp, #40]	; 0x28
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003552:	3b05      	subs	r3, #5
 8003554:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003556:	2300      	movs	r3, #0
 8003558:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800355a:	930d      	str	r3, [sp, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800355c:	2102      	movs	r1, #2
 800355e:	a80a      	add	r0, sp, #40	; 0x28
 8003560:	f003 fa10 	bl	8006984 <HAL_RCC_ClockConfig>
 8003564:	2800      	cmp	r0, #0
 8003566:	d10e      	bne.n	8003586 <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <SystemClock_Config+0xa4>)
 800356a:	9300      	str	r3, [sp, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800356c:	2300      	movs	r3, #0
 800356e:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003570:	9307      	str	r3, [sp, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8003572:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003574:	4668      	mov	r0, sp
 8003576:	f003 faed 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 800357a:	2800      	cmp	r0, #0
 800357c:	d105      	bne.n	800358a <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 800357e:	b01d      	add	sp, #116	; 0x74
 8003580:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003582:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003584:	e7fe      	b.n	8003584 <SystemClock_Config+0x98>
 8003586:	b672      	cpsid	i
 8003588:	e7fe      	b.n	8003588 <SystemClock_Config+0x9c>
 800358a:	b672      	cpsid	i
 800358c:	e7fe      	b.n	800358c <SystemClock_Config+0xa0>
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	00204010 	.word	0x00204010

08003594 <main>:
{
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	46de      	mov	lr, fp
 8003598:	4657      	mov	r7, sl
 800359a:	464e      	mov	r6, r9
 800359c:	4645      	mov	r5, r8
 800359e:	b5e0      	push	{r5, r6, r7, lr}
 80035a0:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 80035a2:	f001 ff33 	bl	800540c <HAL_Init>
  SystemClock_Config();
 80035a6:	f7ff ffa1 	bl	80034ec <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035aa:	2214      	movs	r2, #20
 80035ac:	2100      	movs	r1, #0
 80035ae:	a818      	add	r0, sp, #96	; 0x60
 80035b0:	f006 f8dc 	bl	800976c <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b4:	4dec      	ldr	r5, [pc, #944]	; (8003968 <main+0x3d4>)
 80035b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80035b8:	2601      	movs	r6, #1
 80035ba:	4333      	orrs	r3, r6
 80035bc:	636b      	str	r3, [r5, #52]	; 0x34
 80035be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80035c0:	4033      	ands	r3, r6
 80035c2:	9307      	str	r3, [sp, #28]
 80035c4:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80035c8:	2302      	movs	r3, #2
 80035ca:	431a      	orrs	r2, r3
 80035cc:	636a      	str	r2, [r5, #52]	; 0x34
 80035ce:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80035d0:	4013      	ands	r3, r2
 80035d2:	9308      	str	r3, [sp, #32]
 80035d4:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80035d8:	2704      	movs	r7, #4
 80035da:	433b      	orrs	r3, r7
 80035dc:	636b      	str	r3, [r5, #52]	; 0x34
 80035de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80035e0:	403b      	ands	r3, r7
 80035e2:	9309      	str	r3, [sp, #36]	; 0x24
 80035e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, OLED_DC_Pin|OLED_RES_Pin|OLED_CLK_Pin, GPIO_PIN_RESET);
 80035e6:	4ce1      	ldr	r4, [pc, #900]	; (800396c <main+0x3d8>)
 80035e8:	23a0      	movs	r3, #160	; 0xa0
 80035ea:	05db      	lsls	r3, r3, #23
 80035ec:	469b      	mov	fp, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	0021      	movs	r1, r4
 80035f2:	0018      	movs	r0, r3
 80035f4:	f002 fe88 	bl	8006308 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_DIN_GPIO_Port, OLED_DIN_Pin, GPIO_PIN_RESET);
 80035f8:	4bdd      	ldr	r3, [pc, #884]	; (8003970 <main+0x3dc>)
 80035fa:	4698      	mov	r8, r3
 80035fc:	2200      	movs	r2, #0
 80035fe:	2108      	movs	r1, #8
 8003600:	0018      	movs	r0, r3
 8003602:	f002 fe81 	bl	8006308 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RES_Pin|OLED_CLK_Pin;
 8003606:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003608:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2400      	movs	r4, #0
 800360c:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360e:	2303      	movs	r3, #3
 8003610:	4699      	mov	r9, r3
 8003612:	931b      	str	r3, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003614:	a918      	add	r1, sp, #96	; 0x60
 8003616:	4658      	mov	r0, fp
 8003618:	f002 fd9e 	bl	8006158 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Key_OK_Pin|Key_L_Pin;
 800361c:	464b      	mov	r3, r9
 800361e:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003620:	4bd4      	ldr	r3, [pc, #848]	; (8003974 <main+0x3e0>)
 8003622:	469a      	mov	sl, r3
 8003624:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003628:	a918      	add	r1, sp, #96	; 0x60
 800362a:	4640      	mov	r0, r8
 800362c:	f002 fd94 	bl	8006158 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Key_R_Pin|Key_U_Pin;
 8003630:	2390      	movs	r3, #144	; 0x90
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003636:	4653      	mov	r3, sl
 8003638:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363c:	a918      	add	r1, sp, #96	; 0x60
 800363e:	4658      	mov	r0, fp
 8003640:	f002 fd8a 	bl	8006158 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Key_D_Pin;
 8003644:	2340      	movs	r3, #64	; 0x40
 8003646:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003648:	4653      	mov	r3, sl
 800364a:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(Key_D_GPIO_Port, &GPIO_InitStruct);
 800364e:	a918      	add	r1, sp, #96	; 0x60
 8003650:	48c9      	ldr	r0, [pc, #804]	; (8003978 <main+0x3e4>)
 8003652:	f002 fd81 	bl	8006158 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_DIN_Pin;
 8003656:	2308      	movs	r3, #8
 8003658:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800365a:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365e:	464b      	mov	r3, r9
 8003660:	931b      	str	r3, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OLED_DIN_GPIO_Port, &GPIO_InitStruct);
 8003662:	a918      	add	r1, sp, #96	; 0x60
 8003664:	4640      	mov	r0, r8
 8003666:	f002 fd77 	bl	8006158 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 800366a:	2200      	movs	r2, #0
 800366c:	2102      	movs	r1, #2
 800366e:	2005      	movs	r0, #5
 8003670:	f002 fb82 	bl	8005d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003674:	2005      	movs	r0, #5
 8003676:	f002 fbb1 	bl	8005ddc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 800367a:	2200      	movs	r2, #0
 800367c:	2102      	movs	r1, #2
 800367e:	2007      	movs	r0, #7
 8003680:	f002 fb7a 	bl	8005d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003684:	2007      	movs	r0, #7
 8003686:	f002 fba9 	bl	8005ddc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800368a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800368c:	4333      	orrs	r3, r6
 800368e:	63ab      	str	r3, [r5, #56]	; 0x38
 8003690:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003692:	4033      	ands	r3, r6
 8003694:	9306      	str	r3, [sp, #24]
 8003696:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003698:	2200      	movs	r2, #0
 800369a:	2100      	movs	r1, #0
 800369c:	2009      	movs	r0, #9
 800369e:	f002 fb6b 	bl	8005d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80036a2:	2009      	movs	r0, #9
 80036a4:	f002 fb9a 	bl	8005ddc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2100      	movs	r1, #0
 80036ac:	200a      	movs	r0, #10
 80036ae:	f002 fb63 	bl	8005d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80036b2:	200a      	movs	r0, #10
 80036b4:	f002 fb92 	bl	8005ddc <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80036b8:	220c      	movs	r2, #12
 80036ba:	2100      	movs	r1, #0
 80036bc:	a818      	add	r0, sp, #96	; 0x60
 80036be:	f006 f855 	bl	800976c <memset>
  hadc1.Instance = ADC1;
 80036c2:	48ae      	ldr	r0, [pc, #696]	; (800397c <main+0x3e8>)
 80036c4:	4bae      	ldr	r3, [pc, #696]	; (8003980 <main+0x3ec>)
 80036c6:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80036c8:	6044      	str	r4, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036ca:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036cc:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036ce:	6104      	str	r4, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036d0:	6147      	str	r7, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80036d2:	7604      	strb	r4, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80036d4:	7644      	strb	r4, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80036d6:	7684      	strb	r4, [r0, #26]
  hadc1.Init.NbrOfConversion = 1;
 80036d8:	61c6      	str	r6, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036da:	2320      	movs	r3, #32
 80036dc:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80036de:	2398      	movs	r3, #152	; 0x98
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80036e4:	3bc0      	subs	r3, #192	; 0xc0
 80036e6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80036e8:	232c      	movs	r3, #44	; 0x2c
 80036ea:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036ec:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80036ee:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80036f0:	3b25      	subs	r3, #37	; 0x25
 80036f2:	6383      	str	r3, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80036f4:	3335      	adds	r3, #53	; 0x35
 80036f6:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80036f8:	64c4      	str	r4, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036fa:	f001 fead 	bl	8005458 <HAL_ADC_Init>
 80036fe:	2800      	cmp	r0, #0
 8003700:	d000      	beq.n	8003704 <main+0x170>
 8003702:	e1d5      	b.n	8003ab0 <main+0x51c>
  sConfig.Channel = ADC_CHANNEL_0;
 8003704:	2301      	movs	r3, #1
 8003706:	9318      	str	r3, [sp, #96]	; 0x60
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003708:	2300      	movs	r3, #0
 800370a:	9319      	str	r3, [sp, #100]	; 0x64
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800370c:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800370e:	a918      	add	r1, sp, #96	; 0x60
 8003710:	489a      	ldr	r0, [pc, #616]	; (800397c <main+0x3e8>)
 8003712:	f002 f833 	bl	800577c <HAL_ADC_ConfigChannel>
 8003716:	2800      	cmp	r0, #0
 8003718:	d000      	beq.n	800371c <main+0x188>
 800371a:	e1cb      	b.n	8003ab4 <main+0x520>
  hlpuart1.Instance = LPUART1;
 800371c:	4899      	ldr	r0, [pc, #612]	; (8003984 <main+0x3f0>)
 800371e:	4b9a      	ldr	r3, [pc, #616]	; (8003988 <main+0x3f4>)
 8003720:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8003722:	4b9a      	ldr	r3, [pc, #616]	; (800398c <main+0x3f8>)
 8003724:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003726:	2300      	movs	r3, #0
 8003728:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800372a:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800372c:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800372e:	220c      	movs	r2, #12
 8003730:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003732:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003734:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003736:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003738:	6283      	str	r3, [r0, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800373a:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800373c:	f004 fba8 	bl	8007e90 <HAL_UART_Init>
 8003740:	2800      	cmp	r0, #0
 8003742:	d000      	beq.n	8003746 <main+0x1b2>
 8003744:	e1b8      	b.n	8003ab8 <main+0x524>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003746:	2100      	movs	r1, #0
 8003748:	488e      	ldr	r0, [pc, #568]	; (8003984 <main+0x3f0>)
 800374a:	f004 fc2b 	bl	8007fa4 <HAL_UARTEx_SetTxFifoThreshold>
 800374e:	2800      	cmp	r0, #0
 8003750:	d000      	beq.n	8003754 <main+0x1c0>
 8003752:	e1b3      	b.n	8003abc <main+0x528>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003754:	2100      	movs	r1, #0
 8003756:	488b      	ldr	r0, [pc, #556]	; (8003984 <main+0x3f0>)
 8003758:	f004 fc4a 	bl	8007ff0 <HAL_UARTEx_SetRxFifoThreshold>
 800375c:	2800      	cmp	r0, #0
 800375e:	d000      	beq.n	8003762 <main+0x1ce>
 8003760:	e1ae      	b.n	8003ac0 <main+0x52c>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003762:	4888      	ldr	r0, [pc, #544]	; (8003984 <main+0x3f0>)
 8003764:	f004 fbfe 	bl	8007f64 <HAL_UARTEx_DisableFifoMode>
 8003768:	2800      	cmp	r0, #0
 800376a:	d000      	beq.n	800376e <main+0x1da>
 800376c:	e1aa      	b.n	8003ac4 <main+0x530>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800376e:	2210      	movs	r2, #16
 8003770:	2100      	movs	r1, #0
 8003772:	a811      	add	r0, sp, #68	; 0x44
 8003774:	f005 fffa 	bl	800976c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003778:	220c      	movs	r2, #12
 800377a:	2100      	movs	r1, #0
 800377c:	a80d      	add	r0, sp, #52	; 0x34
 800377e:	f005 fff5 	bl	800976c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003782:	221c      	movs	r2, #28
 8003784:	2100      	movs	r1, #0
 8003786:	a818      	add	r0, sp, #96	; 0x60
 8003788:	f005 fff0 	bl	800976c <memset>
  htim2.Instance = TIM2;
 800378c:	4c80      	ldr	r4, [pc, #512]	; (8003990 <main+0x3fc>)
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	05db      	lsls	r3, r3, #23
 8003792:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = TIM2_PRESCALER_VALUE;
 8003794:	4b7f      	ldr	r3, [pc, #508]	; (8003994 <main+0x400>)
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	497f      	ldr	r1, [pc, #508]	; (8003998 <main+0x404>)
 800379a:	f7fc fccf 	bl	800013c <__udivsi3>
 800379e:	3801      	subs	r0, #1
 80037a0:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = TIM2_PERIOD_VALUE;
 80037a6:	22ff      	movs	r2, #255	; 0xff
 80037a8:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037aa:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ac:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037ae:	0020      	movs	r0, r4
 80037b0:	f003 fd62 	bl	8007278 <HAL_TIM_Base_Init>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d000      	beq.n	80037ba <main+0x226>
 80037b8:	e186      	b.n	8003ac8 <main+0x534>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	015b      	lsls	r3, r3, #5
 80037be:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037c0:	a911      	add	r1, sp, #68	; 0x44
 80037c2:	4873      	ldr	r0, [pc, #460]	; (8003990 <main+0x3fc>)
 80037c4:	f003 fe9a 	bl	80074fc <HAL_TIM_ConfigClockSource>
 80037c8:	2800      	cmp	r0, #0
 80037ca:	d000      	beq.n	80037ce <main+0x23a>
 80037cc:	e17e      	b.n	8003acc <main+0x538>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80037ce:	4870      	ldr	r0, [pc, #448]	; (8003990 <main+0x3fc>)
 80037d0:	f003 fd82 	bl	80072d8 <HAL_TIM_PWM_Init>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d000      	beq.n	80037da <main+0x246>
 80037d8:	e17a      	b.n	8003ad0 <main+0x53c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037de:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037e0:	a90d      	add	r1, sp, #52	; 0x34
 80037e2:	486b      	ldr	r0, [pc, #428]	; (8003990 <main+0x3fc>)
 80037e4:	f003 ffcc 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d000      	beq.n	80037ee <main+0x25a>
 80037ec:	e172      	b.n	8003ad4 <main+0x540>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ee:	2360      	movs	r3, #96	; 0x60
 80037f0:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigOC.Pulse = TIM2_PULSE1_VALUE;
 80037f2:	3320      	adds	r3, #32
 80037f4:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037f6:	2300      	movs	r3, #0
 80037f8:	931a      	str	r3, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80037fa:	3304      	adds	r3, #4
 80037fc:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037fe:	2204      	movs	r2, #4
 8003800:	a918      	add	r1, sp, #96	; 0x60
 8003802:	4863      	ldr	r0, [pc, #396]	; (8003990 <main+0x3fc>)
 8003804:	f003 fdd4 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 8003808:	2800      	cmp	r0, #0
 800380a:	d000      	beq.n	800380e <main+0x27a>
 800380c:	e164      	b.n	8003ad8 <main+0x544>
  HAL_TIM_MspPostInit(&htim2);
 800380e:	4860      	ldr	r0, [pc, #384]	; (8003990 <main+0x3fc>)
 8003810:	f001 fa94 	bl	8004d3c <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003814:	221c      	movs	r2, #28
 8003816:	2100      	movs	r1, #0
 8003818:	a811      	add	r0, sp, #68	; 0x44
 800381a:	f005 ffa7 	bl	800976c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800381e:	2234      	movs	r2, #52	; 0x34
 8003820:	2100      	movs	r1, #0
 8003822:	a818      	add	r0, sp, #96	; 0x60
 8003824:	f005 ffa2 	bl	800976c <memset>
  htim16.Instance = TIM16;
 8003828:	4c5c      	ldr	r4, [pc, #368]	; (800399c <main+0x408>)
 800382a:	4b5d      	ldr	r3, [pc, #372]	; (80039a0 <main+0x40c>)
 800382c:	6023      	str	r3, [r4, #0]
  htim16.Init.Prescaler = TIM16_PRESCALER_VALUE;
 800382e:	4b59      	ldr	r3, [pc, #356]	; (8003994 <main+0x400>)
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	4959      	ldr	r1, [pc, #356]	; (8003998 <main+0x404>)
 8003834:	f7fc fc82 	bl	800013c <__udivsi3>
 8003838:	3801      	subs	r0, #1
 800383a:	6060      	str	r0, [r4, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800383c:	2300      	movs	r3, #0
 800383e:	60a3      	str	r3, [r4, #8]
  htim16.Init.Period = TIM16_PERIOD_VALUE;
 8003840:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <main+0x410>)
 8003842:	60e2      	str	r2, [r4, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003844:	6123      	str	r3, [r4, #16]
  htim16.Init.RepetitionCounter = 0;
 8003846:	6163      	str	r3, [r4, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003848:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800384a:	0020      	movs	r0, r4
 800384c:	f003 fd14 	bl	8007278 <HAL_TIM_Base_Init>
 8003850:	2800      	cmp	r0, #0
 8003852:	d000      	beq.n	8003856 <main+0x2c2>
 8003854:	e142      	b.n	8003adc <main+0x548>
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003856:	4851      	ldr	r0, [pc, #324]	; (800399c <main+0x408>)
 8003858:	f003 fd3e 	bl	80072d8 <HAL_TIM_PWM_Init>
 800385c:	2800      	cmp	r0, #0
 800385e:	d000      	beq.n	8003862 <main+0x2ce>
 8003860:	e13e      	b.n	8003ae0 <main+0x54c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003862:	2360      	movs	r3, #96	; 0x60
 8003864:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.Pulse = TIM16_PULSE1_VALUE;
 8003866:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <main+0x414>)
 8003868:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800386a:	2300      	movs	r3, #0
 800386c:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800386e:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003870:	2204      	movs	r2, #4
 8003872:	9215      	str	r2, [sp, #84]	; 0x54
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003874:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003876:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003878:	2200      	movs	r2, #0
 800387a:	a911      	add	r1, sp, #68	; 0x44
 800387c:	4847      	ldr	r0, [pc, #284]	; (800399c <main+0x408>)
 800387e:	f003 fd97 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 8003882:	2800      	cmp	r0, #0
 8003884:	d000      	beq.n	8003888 <main+0x2f4>
 8003886:	e12d      	b.n	8003ae4 <main+0x550>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003888:	2300      	movs	r3, #0
 800388a:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800388c:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800388e:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.DeadTime = 0;
 8003890:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003892:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003894:	2280      	movs	r2, #128	; 0x80
 8003896:	0192      	lsls	r2, r2, #6
 8003898:	921d      	str	r2, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakFilter = 0;
 800389a:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800389c:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800389e:	a918      	add	r1, sp, #96	; 0x60
 80038a0:	483e      	ldr	r0, [pc, #248]	; (800399c <main+0x408>)
 80038a2:	f003 ffa9 	bl	80077f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d000      	beq.n	80038ac <main+0x318>
 80038aa:	e11d      	b.n	8003ae8 <main+0x554>
  HAL_TIM_MspPostInit(&htim16);
 80038ac:	483b      	ldr	r0, [pc, #236]	; (800399c <main+0x408>)
 80038ae:	f001 fa45 	bl	8004d3c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038b2:	2210      	movs	r2, #16
 80038b4:	2100      	movs	r1, #0
 80038b6:	a80d      	add	r0, sp, #52	; 0x34
 80038b8:	f005 ff58 	bl	800976c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038bc:	220c      	movs	r2, #12
 80038be:	2100      	movs	r1, #0
 80038c0:	a80a      	add	r0, sp, #40	; 0x28
 80038c2:	f005 ff53 	bl	800976c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038c6:	221c      	movs	r2, #28
 80038c8:	2100      	movs	r1, #0
 80038ca:	a811      	add	r0, sp, #68	; 0x44
 80038cc:	f005 ff4e 	bl	800976c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038d0:	2234      	movs	r2, #52	; 0x34
 80038d2:	2100      	movs	r1, #0
 80038d4:	a818      	add	r0, sp, #96	; 0x60
 80038d6:	f005 ff49 	bl	800976c <memset>
  htim1.Instance = TIM1;
 80038da:	4c34      	ldr	r4, [pc, #208]	; (80039ac <main+0x418>)
 80038dc:	4b34      	ldr	r3, [pc, #208]	; (80039b0 <main+0x41c>)
 80038de:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = TIM1_PRESCALER_VALUE;
 80038e0:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <main+0x400>)
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	492c      	ldr	r1, [pc, #176]	; (8003998 <main+0x404>)
 80038e6:	f7fc fc29 	bl	800013c <__udivsi3>
 80038ea:	3801      	subs	r0, #1
 80038ec:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = TIM1_PERIOD_VALUE;
 80038f2:	4a30      	ldr	r2, [pc, #192]	; (80039b4 <main+0x420>)
 80038f4:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f6:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80038f8:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038fa:	3380      	adds	r3, #128	; 0x80
 80038fc:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80038fe:	0020      	movs	r0, r4
 8003900:	f003 fcba 	bl	8007278 <HAL_TIM_Base_Init>
 8003904:	2800      	cmp	r0, #0
 8003906:	d000      	beq.n	800390a <main+0x376>
 8003908:	e0f0      	b.n	8003aec <main+0x558>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	015b      	lsls	r3, r3, #5
 800390e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003910:	a90d      	add	r1, sp, #52	; 0x34
 8003912:	4826      	ldr	r0, [pc, #152]	; (80039ac <main+0x418>)
 8003914:	f003 fdf2 	bl	80074fc <HAL_TIM_ConfigClockSource>
 8003918:	2800      	cmp	r0, #0
 800391a:	d000      	beq.n	800391e <main+0x38a>
 800391c:	e0e8      	b.n	8003af0 <main+0x55c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800391e:	4823      	ldr	r0, [pc, #140]	; (80039ac <main+0x418>)
 8003920:	f003 fcda 	bl	80072d8 <HAL_TIM_PWM_Init>
 8003924:	2800      	cmp	r0, #0
 8003926:	d000      	beq.n	800392a <main+0x396>
 8003928:	e0e4      	b.n	8003af4 <main+0x560>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800392a:	2300      	movs	r3, #0
 800392c:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800392e:	930b      	str	r3, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003930:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003932:	a90a      	add	r1, sp, #40	; 0x28
 8003934:	481d      	ldr	r0, [pc, #116]	; (80039ac <main+0x418>)
 8003936:	f003 ff23 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 800393a:	2800      	cmp	r0, #0
 800393c:	d000      	beq.n	8003940 <main+0x3ac>
 800393e:	e0db      	b.n	8003af8 <main+0x564>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003940:	2360      	movs	r3, #96	; 0x60
 8003942:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.Pulse = TIM1_PULSE1_VALUE;
 8003944:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <main+0x424>)
 8003946:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003948:	2300      	movs	r3, #0
 800394a:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800394c:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800394e:	2204      	movs	r2, #4
 8003950:	9215      	str	r2, [sp, #84]	; 0x54
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003952:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003954:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003956:	3204      	adds	r2, #4
 8003958:	a911      	add	r1, sp, #68	; 0x44
 800395a:	4814      	ldr	r0, [pc, #80]	; (80039ac <main+0x418>)
 800395c:	f003 fd28 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 8003960:	2800      	cmp	r0, #0
 8003962:	d000      	beq.n	8003966 <main+0x3d2>
 8003964:	e0ca      	b.n	8003afc <main+0x568>
 8003966:	e029      	b.n	80039bc <main+0x428>
 8003968:	40021000 	.word	0x40021000
 800396c:	000080c0 	.word	0x000080c0
 8003970:	50000400 	.word	0x50000400
 8003974:	10210000 	.word	0x10210000
 8003978:	50000800 	.word	0x50000800
 800397c:	20000978 	.word	0x20000978
 8003980:	40012400 	.word	0x40012400
 8003984:	200008e8 	.word	0x200008e8
 8003988:	40008000 	.word	0x40008000
 800398c:	001e8480 	.word	0x001e8480
 8003990:	20000c78 	.word	0x20000c78
 8003994:	20000078 	.word	0x20000078
 8003998:	03d09000 	.word	0x03d09000
 800399c:	20000cc8 	.word	0x20000cc8
 80039a0:	40014400 	.word	0x40014400
 80039a4:	00000a6a 	.word	0x00000a6a
 80039a8:	00000215 	.word	0x00000215
 80039ac:	20000ac8 	.word	0x20000ac8
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	00009c3f 	.word	0x00009c3f
 80039b8:	00004e20 	.word	0x00004e20
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039bc:	2300      	movs	r3, #0
 80039be:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039c0:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039c2:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.DeadTime = 0;
 80039c4:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039c6:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0192      	lsls	r2, r2, #6
 80039cc:	921d      	str	r2, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakFilter = 0;
 80039ce:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80039d0:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80039d2:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	0492      	lsls	r2, r2, #18
 80039d8:	9221      	str	r2, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.Break2Filter = 0;
 80039da:	9322      	str	r3, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80039dc:	9323      	str	r3, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039de:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039e0:	a918      	add	r1, sp, #96	; 0x60
 80039e2:	48b8      	ldr	r0, [pc, #736]	; (8003cc4 <main+0x730>)
 80039e4:	f003 ff08 	bl	80077f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d000      	beq.n	80039ee <main+0x45a>
 80039ec:	e088      	b.n	8003b00 <main+0x56c>
  HAL_TIM_MspPostInit(&htim1);
 80039ee:	48b5      	ldr	r0, [pc, #724]	; (8003cc4 <main+0x730>)
 80039f0:	f001 f9a4 	bl	8004d3c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039f4:	2210      	movs	r2, #16
 80039f6:	2100      	movs	r1, #0
 80039f8:	a811      	add	r0, sp, #68	; 0x44
 80039fa:	f005 feb7 	bl	800976c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039fe:	220c      	movs	r2, #12
 8003a00:	2100      	movs	r1, #0
 8003a02:	a80d      	add	r0, sp, #52	; 0x34
 8003a04:	f005 feb2 	bl	800976c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a08:	221c      	movs	r2, #28
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	a818      	add	r0, sp, #96	; 0x60
 8003a0e:	f005 fead 	bl	800976c <memset>
  htim3.Instance = TIM3;
 8003a12:	4cad      	ldr	r4, [pc, #692]	; (8003cc8 <main+0x734>)
 8003a14:	4bad      	ldr	r3, [pc, #692]	; (8003ccc <main+0x738>)
 8003a16:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = TIM3_PRESCALER_VALUE;
 8003a18:	4bad      	ldr	r3, [pc, #692]	; (8003cd0 <main+0x73c>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	49ad      	ldr	r1, [pc, #692]	; (8003cd4 <main+0x740>)
 8003a1e:	f7fc fb8d 	bl	800013c <__udivsi3>
 8003a22:	3801      	subs	r0, #1
 8003a24:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = TIM3_PERIOD_VALUE;
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a2e:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a30:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a32:	0020      	movs	r0, r4
 8003a34:	f003 fc20 	bl	8007278 <HAL_TIM_Base_Init>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d163      	bne.n	8003b04 <main+0x570>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	015b      	lsls	r3, r3, #5
 8003a40:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a42:	a911      	add	r1, sp, #68	; 0x44
 8003a44:	48a0      	ldr	r0, [pc, #640]	; (8003cc8 <main+0x734>)
 8003a46:	f003 fd59 	bl	80074fc <HAL_TIM_ConfigClockSource>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d15c      	bne.n	8003b08 <main+0x574>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a4e:	489e      	ldr	r0, [pc, #632]	; (8003cc8 <main+0x734>)
 8003a50:	f003 fc42 	bl	80072d8 <HAL_TIM_PWM_Init>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d159      	bne.n	8003b0c <main+0x578>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a58:	2320      	movs	r3, #32
 8003a5a:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a60:	a90d      	add	r1, sp, #52	; 0x34
 8003a62:	4899      	ldr	r0, [pc, #612]	; (8003cc8 <main+0x734>)
 8003a64:	f003 fe8c 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d151      	bne.n	8003b10 <main+0x57c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a6c:	2360      	movs	r3, #96	; 0x60
 8003a6e:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigOC.Pulse = TIM3_PULSE1_VALUE;
 8003a70:	3b58      	subs	r3, #88	; 0x58
 8003a72:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a74:	2300      	movs	r3, #0
 8003a76:	931a      	str	r3, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003a78:	3304      	adds	r3, #4
 8003a7a:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	a918      	add	r1, sp, #96	; 0x60
 8003a80:	4891      	ldr	r0, [pc, #580]	; (8003cc8 <main+0x734>)
 8003a82:	f003 fc95 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d144      	bne.n	8003b14 <main+0x580>
  HAL_TIM_MspPostInit(&htim3);
 8003a8a:	488f      	ldr	r0, [pc, #572]	; (8003cc8 <main+0x734>)
 8003a8c:	f001 f956 	bl	8004d3c <HAL_TIM_MspPostInit>
  for (tmp_index_adc_converted_data = 0; tmp_index_adc_converted_data < ADC_CONVERTED_DATA_BUFFER_SIZE; tmp_index_adc_converted_data++)
 8003a90:	2300      	movs	r3, #0
    aADCxConvertedData[tmp_index_adc_converted_data] = VAR_CONVERTED_DATA_INIT_VALUE;
 8003a92:	4891      	ldr	r0, [pc, #580]	; (8003cd8 <main+0x744>)
 8003a94:	2180      	movs	r1, #128	; 0x80
 8003a96:	0149      	lsls	r1, r1, #5
 8003a98:	005a      	lsls	r2, r3, #1
 8003a9a:	5211      	strh	r1, [r2, r0]
  for (tmp_index_adc_converted_data = 0; tmp_index_adc_converted_data < ADC_CONVERTED_DATA_BUFFER_SIZE; tmp_index_adc_converted_data++)
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	2b80      	cmp	r3, #128	; 0x80
 8003aa0:	d1fa      	bne.n	8003a98 <main+0x504>
  if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8003aa2:	488e      	ldr	r0, [pc, #568]	; (8003cdc <main+0x748>)
 8003aa4:	f002 f914 	bl	8005cd0 <HAL_ADCEx_Calibration_Start>
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d035      	beq.n	8003b18 <main+0x584>
 8003aac:	b672      	cpsid	i
  while (1)
 8003aae:	e7fe      	b.n	8003aae <main+0x51a>
 8003ab0:	b672      	cpsid	i
 8003ab2:	e7fe      	b.n	8003ab2 <main+0x51e>
 8003ab4:	b672      	cpsid	i
 8003ab6:	e7fe      	b.n	8003ab6 <main+0x522>
 8003ab8:	b672      	cpsid	i
 8003aba:	e7fe      	b.n	8003aba <main+0x526>
 8003abc:	b672      	cpsid	i
 8003abe:	e7fe      	b.n	8003abe <main+0x52a>
 8003ac0:	b672      	cpsid	i
 8003ac2:	e7fe      	b.n	8003ac2 <main+0x52e>
 8003ac4:	b672      	cpsid	i
 8003ac6:	e7fe      	b.n	8003ac6 <main+0x532>
 8003ac8:	b672      	cpsid	i
 8003aca:	e7fe      	b.n	8003aca <main+0x536>
 8003acc:	b672      	cpsid	i
 8003ace:	e7fe      	b.n	8003ace <main+0x53a>
 8003ad0:	b672      	cpsid	i
 8003ad2:	e7fe      	b.n	8003ad2 <main+0x53e>
 8003ad4:	b672      	cpsid	i
 8003ad6:	e7fe      	b.n	8003ad6 <main+0x542>
 8003ad8:	b672      	cpsid	i
 8003ada:	e7fe      	b.n	8003ada <main+0x546>
 8003adc:	b672      	cpsid	i
 8003ade:	e7fe      	b.n	8003ade <main+0x54a>
 8003ae0:	b672      	cpsid	i
 8003ae2:	e7fe      	b.n	8003ae2 <main+0x54e>
 8003ae4:	b672      	cpsid	i
 8003ae6:	e7fe      	b.n	8003ae6 <main+0x552>
 8003ae8:	b672      	cpsid	i
 8003aea:	e7fe      	b.n	8003aea <main+0x556>
 8003aec:	b672      	cpsid	i
 8003aee:	e7fe      	b.n	8003aee <main+0x55a>
 8003af0:	b672      	cpsid	i
 8003af2:	e7fe      	b.n	8003af2 <main+0x55e>
 8003af4:	b672      	cpsid	i
 8003af6:	e7fe      	b.n	8003af6 <main+0x562>
 8003af8:	b672      	cpsid	i
 8003afa:	e7fe      	b.n	8003afa <main+0x566>
 8003afc:	b672      	cpsid	i
 8003afe:	e7fe      	b.n	8003afe <main+0x56a>
 8003b00:	b672      	cpsid	i
 8003b02:	e7fe      	b.n	8003b02 <main+0x56e>
 8003b04:	b672      	cpsid	i
 8003b06:	e7fe      	b.n	8003b06 <main+0x572>
 8003b08:	b672      	cpsid	i
 8003b0a:	e7fe      	b.n	8003b0a <main+0x576>
 8003b0c:	b672      	cpsid	i
 8003b0e:	e7fe      	b.n	8003b0e <main+0x57a>
 8003b10:	b672      	cpsid	i
 8003b12:	e7fe      	b.n	8003b12 <main+0x57e>
 8003b14:	b672      	cpsid	i
 8003b16:	e7fe      	b.n	8003b16 <main+0x582>
  if (HAL_ADC_Start_DMA(&hadc1,
 8003b18:	2280      	movs	r2, #128	; 0x80
 8003b1a:	496f      	ldr	r1, [pc, #444]	; (8003cd8 <main+0x744>)
 8003b1c:	486f      	ldr	r0, [pc, #444]	; (8003cdc <main+0x748>)
 8003b1e:	f001 fff9 	bl	8005b14 <HAL_ADC_Start_DMA>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d001      	beq.n	8003b2a <main+0x596>
 8003b26:	b672      	cpsid	i
  while (1)
 8003b28:	e7fe      	b.n	8003b28 <main+0x594>
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 8003b2a:	2104      	movs	r1, #4
 8003b2c:	486c      	ldr	r0, [pc, #432]	; (8003ce0 <main+0x74c>)
 8003b2e:	f003 fd9f 	bl	8007670 <HAL_TIM_PWM_Start>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d001      	beq.n	8003b3a <main+0x5a6>
 8003b36:	b672      	cpsid	i
  while (1)
 8003b38:	e7fe      	b.n	8003b38 <main+0x5a4>
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	4862      	ldr	r0, [pc, #392]	; (8003cc8 <main+0x734>)
 8003b3e:	f003 fd97 	bl	8007670 <HAL_TIM_PWM_Start>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d001      	beq.n	8003b4a <main+0x5b6>
 8003b46:	b672      	cpsid	i
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <main+0x5b4>
  if (HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1) != HAL_OK)
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4865      	ldr	r0, [pc, #404]	; (8003ce4 <main+0x750>)
 8003b4e:	f003 fd8f 	bl	8007670 <HAL_TIM_PWM_Start>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d001      	beq.n	8003b5a <main+0x5c6>
 8003b56:	b672      	cpsid	i
  while (1)
 8003b58:	e7fe      	b.n	8003b58 <main+0x5c4>
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8003b5a:	2108      	movs	r1, #8
 8003b5c:	4859      	ldr	r0, [pc, #356]	; (8003cc4 <main+0x730>)
 8003b5e:	f003 fd87 	bl	8007670 <HAL_TIM_PWM_Start>
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d001      	beq.n	8003b6a <main+0x5d6>
 8003b66:	b672      	cpsid	i
  while (1)
 8003b68:	e7fe      	b.n	8003b68 <main+0x5d4>
  if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK)
 8003b6a:	4856      	ldr	r0, [pc, #344]	; (8003cc4 <main+0x730>)
 8003b6c:	f003 fa18 	bl	8006fa0 <HAL_TIM_Base_Start_IT>
 8003b70:	9004      	str	r0, [sp, #16]
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d001      	beq.n	8003b7a <main+0x5e6>
 8003b76:	b672      	cpsid	i
  while (1)
 8003b78:	e7fe      	b.n	8003b78 <main+0x5e4>
  Update_DDS(tmp_ampl, tmp_offset, 0);
 8003b7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ce8 <main+0x754>)
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	5e59      	ldrsh	r1, [r3, r1]
 8003b80:	4b5a      	ldr	r3, [pc, #360]	; (8003cec <main+0x758>)
 8003b82:	2000      	movs	r0, #0
 8003b84:	5e18      	ldrsh	r0, [r3, r0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f7ff fbe2 	bl	8003350 <Update_DDS>
  OLED_Init();
 8003b8c:	f001 fb95 	bl	80052ba <OLED_Init>
                DDS_FREQ = DDS_FREQ>2000 ? 2000 : DDS_FREQ;
 8003b90:	23fa      	movs	r3, #250	; 0xfa
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	466a      	mov	r2, sp
 8003b96:	82d3      	strh	r3, [r2, #22]
 8003b98:	f000 fedb 	bl	8004952 <main+0x13be>
          if (Key_Pressed & Key_U_Pin)
 8003b9c:	051a      	lsls	r2, r3, #20
 8003b9e:	d50d      	bpl.n	8003bbc <main+0x628>
            Menu_cnt = (Menu_cnt==0) ? 6 : (Menu_cnt-1);
 8003ba0:	4a53      	ldr	r2, [pc, #332]	; (8003cf0 <main+0x75c>)
 8003ba2:	7812      	ldrb	r2, [r2, #0]
 8003ba4:	2106      	movs	r1, #6
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	d001      	beq.n	8003bae <main+0x61a>
 8003baa:	3a01      	subs	r2, #1
 8003bac:	b2d1      	uxtb	r1, r2
 8003bae:	4a50      	ldr	r2, [pc, #320]	; (8003cf0 <main+0x75c>)
 8003bb0:	7011      	strb	r1, [r2, #0]
            __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,300);
 8003bb2:	4a4c      	ldr	r2, [pc, #304]	; (8003ce4 <main+0x750>)
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	2196      	movs	r1, #150	; 0x96
 8003bb8:	0049      	lsls	r1, r1, #1
 8003bba:	6351      	str	r1, [r2, #52]	; 0x34
          if (Key_Pressed & Key_D_Pin)
 8003bbc:	065a      	lsls	r2, r3, #25
 8003bbe:	d50c      	bpl.n	8003bda <main+0x646>
            Menu_cnt = (Menu_cnt==6) ? 0 : (Menu_cnt+1);
 8003bc0:	4a4b      	ldr	r2, [pc, #300]	; (8003cf0 <main+0x75c>)
 8003bc2:	7812      	ldrb	r2, [r2, #0]
 8003bc4:	2a06      	cmp	r2, #6
 8003bc6:	d01e      	beq.n	8003c06 <main+0x672>
 8003bc8:	3201      	adds	r2, #1
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	4948      	ldr	r1, [pc, #288]	; (8003cf0 <main+0x75c>)
 8003bce:	700a      	strb	r2, [r1, #0]
            __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,500);
 8003bd0:	4a44      	ldr	r2, [pc, #272]	; (8003ce4 <main+0x750>)
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	21fa      	movs	r1, #250	; 0xfa
 8003bd6:	0049      	lsls	r1, r1, #1
 8003bd8:	6351      	str	r1, [r2, #52]	; 0x34
          if (Key_Pressed & Key_L_Pin)
 8003bda:	079b      	lsls	r3, r3, #30
 8003bdc:	d54b      	bpl.n	8003c76 <main+0x6e2>
            switch (Menu_cnt)
 8003bde:	4b44      	ldr	r3, [pc, #272]	; (8003cf0 <main+0x75c>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d061      	beq.n	8003caa <main+0x716>
 8003be6:	d810      	bhi.n	8003c0a <main+0x676>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d021      	beq.n	8003c30 <main+0x69c>
                tmp_ampl -= 16;
 8003bec:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <main+0x758>)
 8003bee:	8818      	ldrh	r0, [r3, #0]
 8003bf0:	3810      	subs	r0, #16
 8003bf2:	b200      	sxth	r0, r0
 8003bf4:	8018      	strh	r0, [r3, #0]
                Update_DDS(tmp_ampl, tmp_offset, DDS_mode);
 8003bf6:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <main+0x760>)
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <main+0x754>)
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	5e59      	ldrsh	r1, [r3, r1]
 8003c00:	f7ff fba6 	bl	8003350 <Update_DDS>
                break;
 8003c04:	e033      	b.n	8003c6e <main+0x6da>
            Menu_cnt = (Menu_cnt==6) ? 0 : (Menu_cnt+1);
 8003c06:	9a04      	ldr	r2, [sp, #16]
 8003c08:	e7e0      	b.n	8003bcc <main+0x638>
            switch (Menu_cnt)
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d12f      	bne.n	8003c6e <main+0x6da>
                DDS_mode = DDS_mode>0 ? --DDS_mode : 0;
 8003c0e:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <main+0x760>)
 8003c10:	781a      	ldrb	r2, [r3, #0]
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	d001      	beq.n	8003c1a <main+0x686>
 8003c16:	3a01      	subs	r2, #1
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <main+0x760>)
 8003c1c:	701a      	strb	r2, [r3, #0]
                Update_DDS(tmp_ampl, tmp_offset, DDS_mode);
 8003c1e:	4b32      	ldr	r3, [pc, #200]	; (8003ce8 <main+0x754>)
 8003c20:	2100      	movs	r1, #0
 8003c22:	5e59      	ldrsh	r1, [r3, r1]
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <main+0x758>)
 8003c26:	2000      	movs	r0, #0
 8003c28:	5e18      	ldrsh	r0, [r3, r0]
 8003c2a:	f7ff fb91 	bl	8003350 <Update_DDS>
                break;
 8003c2e:	e01e      	b.n	8003c6e <main+0x6da>
                DDS_FREQ -= 50;
 8003c30:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <main+0x764>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	3b32      	subs	r3, #50	; 0x32
                DDS_FREQ = DDS_FREQ<50 ? 50 : DDS_FREQ;
 8003c36:	1c1a      	adds	r2, r3, #0
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	2b32      	cmp	r3, #50	; 0x32
 8003c3c:	da00      	bge.n	8003c40 <main+0x6ac>
 8003c3e:	2232      	movs	r2, #50	; 0x32
 8003c40:	b210      	sxth	r0, r2
 8003c42:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <main+0x764>)
 8003c44:	801a      	strh	r2, [r3, #0]
                TIM1_PERIOD_VAL = (int)(2000000.0/DDS_FREQ+0.5);
 8003c46:	f7ff fa33 	bl	80030b0 <__aeabi_i2d>
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	000b      	movs	r3, r1
 8003c4e:	2000      	movs	r0, #0
 8003c50:	492a      	ldr	r1, [pc, #168]	; (8003cfc <main+0x768>)
 8003c52:	f7fd ffd5 	bl	8001c00 <__aeabi_ddiv>
 8003c56:	2200      	movs	r2, #0
 8003c58:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <main+0x76c>)
 8003c5a:	f7fd fc67 	bl	800152c <__aeabi_dadd>
 8003c5e:	f7ff f9f1 	bl	8003044 <__aeabi_d2iz>
 8003c62:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <main+0x770>)
 8003c64:	6018      	str	r0, [r3, #0]
                __HAL_TIM_SET_AUTORELOAD(&htim1, TIM1_PERIOD_VAL);
 8003c66:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <main+0x730>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	62d0      	str	r0, [r2, #44]	; 0x2c
 8003c6c:	60d8      	str	r0, [r3, #12]
           __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,100);
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <main+0x750>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2264      	movs	r2, #100	; 0x64
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34
          if (Key_Pressed & Key_R_Pin)
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <main+0x774>)
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	05db      	lsls	r3, r3, #23
 8003c7c:	d400      	bmi.n	8003c80 <main+0x6ec>
 8003c7e:	e0eb      	b.n	8003e58 <main+0x8c4>
            switch (Menu_cnt)
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <main+0x75c>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d100      	bne.n	8003c8a <main+0x6f6>
 8003c88:	e079      	b.n	8003d7e <main+0x7ea>
 8003c8a:	d83f      	bhi.n	8003d0c <main+0x778>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d04f      	beq.n	8003d30 <main+0x79c>
                tmp_ampl += 16;
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <main+0x758>)
 8003c92:	8818      	ldrh	r0, [r3, #0]
 8003c94:	3010      	adds	r0, #16
 8003c96:	b200      	sxth	r0, r0
 8003c98:	8018      	strh	r0, [r3, #0]
                Update_DDS(tmp_ampl, tmp_offset, DDS_mode);
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <main+0x760>)
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <main+0x754>)
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	5e59      	ldrsh	r1, [r3, r1]
 8003ca4:	f7ff fb54 	bl	8003350 <Update_DDS>
                break;
 8003ca8:	e064      	b.n	8003d74 <main+0x7e0>
                tmp_offset -= 16;
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <main+0x754>)
 8003cac:	8819      	ldrh	r1, [r3, #0]
 8003cae:	3910      	subs	r1, #16
 8003cb0:	b209      	sxth	r1, r1
 8003cb2:	8019      	strh	r1, [r3, #0]
                Update_DDS(tmp_ampl, tmp_offset, DDS_mode);
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <main+0x760>)
 8003cb6:	781a      	ldrb	r2, [r3, #0]
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <main+0x758>)
 8003cba:	2000      	movs	r0, #0
 8003cbc:	5e18      	ldrsh	r0, [r3, r0]
 8003cbe:	f7ff fb47 	bl	8003350 <Update_DDS>
                break;
 8003cc2:	e7d4      	b.n	8003c6e <main+0x6da>
 8003cc4:	20000ac8 	.word	0x20000ac8
 8003cc8:	20000898 	.word	0x20000898
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	20000078 	.word	0x20000078
 8003cd4:	03d09000 	.word	0x03d09000
 8003cd8:	20000b18 	.word	0x20000b18
 8003cdc:	20000978 	.word	0x20000978
 8003ce0:	20000c78 	.word	0x20000c78
 8003ce4:	20000cc8 	.word	0x20000cc8
 8003ce8:	20000072 	.word	0x20000072
 8003cec:	20000070 	.word	0x20000070
 8003cf0:	200009e4 	.word	0x200009e4
 8003cf4:	200009dc 	.word	0x200009dc
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	413e8480 	.word	0x413e8480
 8003d00:	3fe00000 	.word	0x3fe00000
 8003d04:	20000d14 	.word	0x20000d14
 8003d08:	200008e4 	.word	0x200008e4
            switch (Menu_cnt)
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d131      	bne.n	8003d74 <main+0x7e0>
                DDS_mode = DDS_mode<2 ? ++DDS_mode : 2;
 8003d10:	4bd0      	ldr	r3, [pc, #832]	; (8004054 <main+0xac0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2202      	movs	r2, #2
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d93e      	bls.n	8003d98 <main+0x804>
 8003d1a:	4bce      	ldr	r3, [pc, #824]	; (8004054 <main+0xac0>)
 8003d1c:	701a      	strb	r2, [r3, #0]
                Update_DDS(tmp_ampl, tmp_offset, DDS_mode);
 8003d1e:	4bce      	ldr	r3, [pc, #824]	; (8004058 <main+0xac4>)
 8003d20:	2100      	movs	r1, #0
 8003d22:	5e59      	ldrsh	r1, [r3, r1]
 8003d24:	4bcd      	ldr	r3, [pc, #820]	; (800405c <main+0xac8>)
 8003d26:	2000      	movs	r0, #0
 8003d28:	5e18      	ldrsh	r0, [r3, r0]
 8003d2a:	f7ff fb11 	bl	8003350 <Update_DDS>
 8003d2e:	e021      	b.n	8003d74 <main+0x7e0>
                DDS_FREQ += 50;
 8003d30:	4bcb      	ldr	r3, [pc, #812]	; (8004060 <main+0xacc>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	3332      	adds	r3, #50	; 0x32
                DDS_FREQ = DDS_FREQ>2000 ? 2000 : DDS_FREQ;
 8003d36:	1c1a      	adds	r2, r3, #0
 8003d38:	b21b      	sxth	r3, r3
 8003d3a:	21fa      	movs	r1, #250	; 0xfa
 8003d3c:	00c9      	lsls	r1, r1, #3
 8003d3e:	428b      	cmp	r3, r1
 8003d40:	dd01      	ble.n	8003d46 <main+0x7b2>
 8003d42:	466b      	mov	r3, sp
 8003d44:	8ada      	ldrh	r2, [r3, #22]
 8003d46:	b210      	sxth	r0, r2
 8003d48:	4bc5      	ldr	r3, [pc, #788]	; (8004060 <main+0xacc>)
 8003d4a:	801a      	strh	r2, [r3, #0]
                TIM1_PERIOD_VAL = (int)(2000000.0/DDS_FREQ+0.5);
 8003d4c:	f7ff f9b0 	bl	80030b0 <__aeabi_i2d>
 8003d50:	0002      	movs	r2, r0
 8003d52:	000b      	movs	r3, r1
 8003d54:	2000      	movs	r0, #0
 8003d56:	49c3      	ldr	r1, [pc, #780]	; (8004064 <main+0xad0>)
 8003d58:	f7fd ff52 	bl	8001c00 <__aeabi_ddiv>
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4bc2      	ldr	r3, [pc, #776]	; (8004068 <main+0xad4>)
 8003d60:	f7fd fbe4 	bl	800152c <__aeabi_dadd>
 8003d64:	f7ff f96e 	bl	8003044 <__aeabi_d2iz>
 8003d68:	4bc0      	ldr	r3, [pc, #768]	; (800406c <main+0xad8>)
 8003d6a:	6018      	str	r0, [r3, #0]
                __HAL_TIM_SET_AUTORELOAD(&htim1, TIM1_PERIOD_VAL);
 8003d6c:	4bc0      	ldr	r3, [pc, #768]	; (8004070 <main+0xadc>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	62d0      	str	r0, [r2, #44]	; 0x2c
 8003d72:	60d8      	str	r0, [r3, #12]
             __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,200);
 8003d74:	4bbf      	ldr	r3, [pc, #764]	; (8004074 <main+0xae0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	22c8      	movs	r2, #200	; 0xc8
 8003d7a:	635a      	str	r2, [r3, #52]	; 0x34
 8003d7c:	e06c      	b.n	8003e58 <main+0x8c4>
                tmp_offset += 16;
 8003d7e:	4bb6      	ldr	r3, [pc, #728]	; (8004058 <main+0xac4>)
 8003d80:	8819      	ldrh	r1, [r3, #0]
 8003d82:	3110      	adds	r1, #16
 8003d84:	b209      	sxth	r1, r1
 8003d86:	8019      	strh	r1, [r3, #0]
                Update_DDS(tmp_ampl, tmp_offset, DDS_mode);
 8003d88:	4bb2      	ldr	r3, [pc, #712]	; (8004054 <main+0xac0>)
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	4bb3      	ldr	r3, [pc, #716]	; (800405c <main+0xac8>)
 8003d8e:	2000      	movs	r0, #0
 8003d90:	5e18      	ldrsh	r0, [r3, r0]
 8003d92:	f7ff fadd 	bl	8003350 <Update_DDS>
                break;
 8003d96:	e7ed      	b.n	8003d74 <main+0x7e0>
                DDS_mode = DDS_mode<2 ? ++DDS_mode : 2;
 8003d98:	3301      	adds	r3, #1
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	e7bd      	b.n	8003d1a <main+0x786>
            Menu_cnt = (Menu_cnt==6) ? 0 : (Menu_cnt+1);
 8003d9e:	9a04      	ldr	r2, [sp, #16]
 8003da0:	f000 fe12 	bl	80049c8 <main+0x1434>
                (TIM3_PERIOD_cnt == 0) ? : (TIM3_PERIOD_cnt--);
 8003da4:	4bb4      	ldr	r3, [pc, #720]	; (8004078 <main+0xae4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <main+0x81e>
 8003dac:	3b01      	subs	r3, #1
 8003dae:	4ab2      	ldr	r2, [pc, #712]	; (8004078 <main+0xae4>)
 8003db0:	7013      	strb	r3, [r2, #0]
                __HAL_TIM_SET_AUTORELOAD(&htim3,TIM3_PERIOD_VAL[TIM3_PERIOD_cnt]);
 8003db2:	4ab2      	ldr	r2, [pc, #712]	; (800407c <main+0xae8>)
 8003db4:	6811      	ldr	r1, [r2, #0]
 8003db6:	4bb0      	ldr	r3, [pc, #704]	; (8004078 <main+0xae4>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	48b0      	ldr	r0, [pc, #704]	; (8004080 <main+0xaec>)
 8003dbe:	5a1b      	ldrh	r3, [r3, r0]
 8003dc0:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003dc2:	60d3      	str	r3, [r2, #12]
           __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,100);
 8003dc4:	4bab      	ldr	r3, [pc, #684]	; (8004074 <main+0xae0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2264      	movs	r2, #100	; 0x64
 8003dca:	635a      	str	r2, [r3, #52]	; 0x34
          if (Key_Pressed & Key_R_Pin)
 8003dcc:	4bad      	ldr	r3, [pc, #692]	; (8004084 <main+0xaf0>)
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	05db      	lsls	r3, r3, #23
 8003dd2:	d541      	bpl.n	8003e58 <main+0x8c4>
            switch (Menu_cnt)
 8003dd4:	4bac      	ldr	r3, [pc, #688]	; (8004088 <main+0xaf4>)
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	2a04      	cmp	r2, #4
 8003dda:	d839      	bhi.n	8003e50 <main+0x8bc>
 8003ddc:	0093      	lsls	r3, r2, #2
 8003dde:	4aab      	ldr	r2, [pc, #684]	; (800408c <main+0xaf8>)
 8003de0:	58d3      	ldr	r3, [r2, r3]
 8003de2:	469f      	mov	pc, r3
                cUseChannel = cUseChannel ? 0 : 1;
 8003de4:	4aaa      	ldr	r2, [pc, #680]	; (8004090 <main+0xafc>)
 8003de6:	7813      	ldrb	r3, [r2, #0]
 8003de8:	4259      	negs	r1, r3
 8003dea:	4159      	adcs	r1, r3
 8003dec:	7011      	strb	r1, [r2, #0]
                if (HAL_ADC_ConfigChannel(&hadc1, cUseChannel==0?&sConfigAin:&sConfigMic) != HAL_OK)
 8003dee:	49a9      	ldr	r1, [pc, #676]	; (8004094 <main+0xb00>)
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d100      	bne.n	8003df6 <main+0x862>
 8003df4:	49a8      	ldr	r1, [pc, #672]	; (8004098 <main+0xb04>)
 8003df6:	48a9      	ldr	r0, [pc, #676]	; (800409c <main+0xb08>)
 8003df8:	f001 fcc0 	bl	800577c <HAL_ADC_ConfigChannel>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d0e1      	beq.n	8003dc4 <main+0x830>
 8003e00:	b672      	cpsid	i
  while (1)
 8003e02:	e7fe      	b.n	8003e02 <main+0x86e>
                Wav_Frq = Wav_Frq ? 0 : 1;
 8003e04:	4aa6      	ldr	r2, [pc, #664]	; (80040a0 <main+0xb0c>)
 8003e06:	7813      	ldrb	r3, [r2, #0]
 8003e08:	4259      	negs	r1, r3
 8003e0a:	414b      	adcs	r3, r1
 8003e0c:	7013      	strb	r3, [r2, #0]
                break;
 8003e0e:	e7d9      	b.n	8003dc4 <main+0x830>
                cAtEdge = cAtEdge ? 0 : 1;
 8003e10:	4aa4      	ldr	r2, [pc, #656]	; (80040a4 <main+0xb10>)
 8003e12:	7813      	ldrb	r3, [r2, #0]
 8003e14:	4259      	negs	r1, r3
 8003e16:	414b      	adcs	r3, r1
 8003e18:	7013      	strb	r3, [r2, #0]
                break;
 8003e1a:	e7d3      	b.n	8003dc4 <main+0x830>
                if(Wav_Frq == 0)
 8003e1c:	4ba0      	ldr	r3, [pc, #640]	; (80040a0 <main+0xb0c>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1cf      	bne.n	8003dc4 <main+0x830>
                  AC_DC = AC_DC ? 0 : 1;
 8003e24:	4aa0      	ldr	r2, [pc, #640]	; (80040a8 <main+0xb14>)
 8003e26:	7813      	ldrb	r3, [r2, #0]
 8003e28:	4259      	negs	r1, r3
 8003e2a:	414b      	adcs	r3, r1
 8003e2c:	7013      	strb	r3, [r2, #0]
 8003e2e:	e7c9      	b.n	8003dc4 <main+0x830>
                (TIM3_PERIOD_cnt == 11) ? :(TIM3_PERIOD_cnt++);
 8003e30:	4b91      	ldr	r3, [pc, #580]	; (8004078 <main+0xae4>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b0b      	cmp	r3, #11
 8003e36:	d002      	beq.n	8003e3e <main+0x8aa>
 8003e38:	3301      	adds	r3, #1
 8003e3a:	4a8f      	ldr	r2, [pc, #572]	; (8004078 <main+0xae4>)
 8003e3c:	7013      	strb	r3, [r2, #0]
                __HAL_TIM_SET_AUTORELOAD(&htim3,TIM3_PERIOD_VAL[TIM3_PERIOD_cnt]);
 8003e3e:	4a8f      	ldr	r2, [pc, #572]	; (800407c <main+0xae8>)
 8003e40:	6811      	ldr	r1, [r2, #0]
 8003e42:	4b8d      	ldr	r3, [pc, #564]	; (8004078 <main+0xae4>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	488d      	ldr	r0, [pc, #564]	; (8004080 <main+0xaec>)
 8003e4a:	5a1b      	ldrh	r3, [r3, r0]
 8003e4c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003e4e:	60d3      	str	r3, [r2, #12]
             __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,200);
 8003e50:	4b88      	ldr	r3, [pc, #544]	; (8004074 <main+0xae0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	22c8      	movs	r2, #200	; 0xc8
 8003e56:	635a      	str	r2, [r3, #52]	; 0x34
        Key_Pressed=0;
 8003e58:	4b8a      	ldr	r3, [pc, #552]	; (8004084 <main+0xaf0>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	801a      	strh	r2, [r3, #0]
      aADCxConvertedMax = 0;
 8003e5e:	2400      	movs	r4, #0
 8003e60:	4b92      	ldr	r3, [pc, #584]	; (80040ac <main+0xb18>)
 8003e62:	801c      	strh	r4, [r3, #0]
      aADCxConvertedMin = 3300;
 8003e64:	4b92      	ldr	r3, [pc, #584]	; (80040b0 <main+0xb1c>)
 8003e66:	4a93      	ldr	r2, [pc, #588]	; (80040b4 <main+0xb20>)
 8003e68:	8013      	strh	r3, [r2, #0]
 8003e6a:	9403      	str	r4, [sp, #12]
 8003e6c:	9402      	str	r4, [sp, #8]
 8003e6e:	46a1      	mov	r9, r4
        aADCxConvertedData[tmp_index_adc_converted_data] = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, aADCxConvertedData[tmp_index_adc_converted_data], LL_ADC_RESOLUTION_12B);
 8003e70:	4e91      	ldr	r6, [pc, #580]	; (80040b8 <main+0xb24>)
 8003e72:	469b      	mov	fp, r3
        if (aADCxConvertedMin > aADCxConvertedData[tmp_index_adc_converted_data])
 8003e74:	46b2      	mov	sl, r6
          aADCxConvertedMin = aADCxConvertedData[tmp_index_adc_converted_data];
 8003e76:	46a0      	mov	r8, r4
 8003e78:	001f      	movs	r7, r3
 8003e7a:	e028      	b.n	8003ece <main+0x93a>
                cUseChannel = cUseChannel ? 0 : 1;
 8003e7c:	4a84      	ldr	r2, [pc, #528]	; (8004090 <main+0xafc>)
 8003e7e:	7813      	ldrb	r3, [r2, #0]
 8003e80:	4259      	negs	r1, r3
 8003e82:	4159      	adcs	r1, r3
 8003e84:	7011      	strb	r1, [r2, #0]
                if (HAL_ADC_ConfigChannel(&hadc1, cUseChannel==0?&sConfigAin:&sConfigMic) != HAL_OK)
 8003e86:	4983      	ldr	r1, [pc, #524]	; (8004094 <main+0xb00>)
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d100      	bne.n	8003e8e <main+0x8fa>
 8003e8c:	4982      	ldr	r1, [pc, #520]	; (8004098 <main+0xb04>)
 8003e8e:	4883      	ldr	r0, [pc, #524]	; (800409c <main+0xb08>)
 8003e90:	f001 fc74 	bl	800577c <HAL_ADC_ConfigChannel>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d0db      	beq.n	8003e50 <main+0x8bc>
 8003e98:	b672      	cpsid	i
  while (1)
 8003e9a:	e7fe      	b.n	8003e9a <main+0x906>
                Wav_Frq = Wav_Frq ? 0 : 1;
 8003e9c:	4a80      	ldr	r2, [pc, #512]	; (80040a0 <main+0xb0c>)
 8003e9e:	7813      	ldrb	r3, [r2, #0]
 8003ea0:	4259      	negs	r1, r3
 8003ea2:	414b      	adcs	r3, r1
 8003ea4:	7013      	strb	r3, [r2, #0]
                break;
 8003ea6:	e7d3      	b.n	8003e50 <main+0x8bc>
                cAtEdge = cAtEdge ? 0 : 1;
 8003ea8:	4a7e      	ldr	r2, [pc, #504]	; (80040a4 <main+0xb10>)
 8003eaa:	7813      	ldrb	r3, [r2, #0]
 8003eac:	4259      	negs	r1, r3
 8003eae:	414b      	adcs	r3, r1
 8003eb0:	7013      	strb	r3, [r2, #0]
                break;
 8003eb2:	e7cd      	b.n	8003e50 <main+0x8bc>
                if(Wav_Frq == 0)
 8003eb4:	4b7a      	ldr	r3, [pc, #488]	; (80040a0 <main+0xb0c>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1c9      	bne.n	8003e50 <main+0x8bc>
                  AC_DC = AC_DC ? 0 : 1;
 8003ebc:	4a7a      	ldr	r2, [pc, #488]	; (80040a8 <main+0xb14>)
 8003ebe:	7813      	ldrb	r3, [r2, #0]
 8003ec0:	4259      	negs	r1, r3
 8003ec2:	414b      	adcs	r3, r1
 8003ec4:	7013      	strb	r3, [r2, #0]
 8003ec6:	e7c3      	b.n	8003e50 <main+0x8bc>
      for (tmp_index_adc_converted_data = 0; tmp_index_adc_converted_data < ADC_CONVERTED_DATA_BUFFER_SIZE; tmp_index_adc_converted_data++)
 8003ec8:	3401      	adds	r4, #1
 8003eca:	2c80      	cmp	r4, #128	; 0x80
 8003ecc:	d021      	beq.n	8003f12 <main+0x97e>
        aADCxConvertedData[tmp_index_adc_converted_data] = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, aADCxConvertedData[tmp_index_adc_converted_data], LL_ADC_RESOLUTION_12B);
 8003ece:	0065      	lsls	r5, r4, #1
 8003ed0:	5ba8      	ldrh	r0, [r5, r6]
 8003ed2:	465b      	mov	r3, fp
 8003ed4:	4358      	muls	r0, r3
 8003ed6:	4979      	ldr	r1, [pc, #484]	; (80040bc <main+0xb28>)
 8003ed8:	f7fc f930 	bl	800013c <__udivsi3>
 8003edc:	b280      	uxth	r0, r0
 8003ede:	53a8      	strh	r0, [r5, r6]
        aADCxConvertedSum += aADCxConvertedData[tmp_index_adc_converted_data];
 8003ee0:	5bab      	ldrh	r3, [r5, r6]
 8003ee2:	4498      	add	r8, r3
        if (aADCxConvertedMax < aADCxConvertedData[tmp_index_adc_converted_data])
 8003ee4:	5bab      	ldrh	r3, [r5, r6]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	454b      	cmp	r3, r9
 8003eea:	d905      	bls.n	8003ef8 <main+0x964>
          aADCxConvertedMax = aADCxConvertedData[tmp_index_adc_converted_data];
 8003eec:	4a72      	ldr	r2, [pc, #456]	; (80040b8 <main+0xb24>)
 8003eee:	5aab      	ldrh	r3, [r5, r2]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	9302      	str	r3, [sp, #8]
        if (aADCxConvertedMin > aADCxConvertedData[tmp_index_adc_converted_data])
 8003ef8:	0063      	lsls	r3, r4, #1
 8003efa:	4652      	mov	r2, sl
 8003efc:	5a9b      	ldrh	r3, [r3, r2]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	42bb      	cmp	r3, r7
 8003f02:	d2e1      	bcs.n	8003ec8 <main+0x934>
          aADCxConvertedMin = aADCxConvertedData[tmp_index_adc_converted_data];
 8003f04:	0063      	lsls	r3, r4, #1
 8003f06:	4a6c      	ldr	r2, [pc, #432]	; (80040b8 <main+0xb24>)
 8003f08:	5a9f      	ldrh	r7, [r3, r2]
 8003f0a:	b2bf      	uxth	r7, r7
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	9303      	str	r3, [sp, #12]
 8003f10:	e7da      	b.n	8003ec8 <main+0x934>
 8003f12:	003b      	movs	r3, r7
 8003f14:	4647      	mov	r7, r8
 8003f16:	4698      	mov	r8, r3
 8003f18:	9b02      	ldr	r3, [sp, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <main+0x990>
 8003f1e:	4b63      	ldr	r3, [pc, #396]	; (80040ac <main+0xb18>)
 8003f20:	464a      	mov	r2, r9
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <main+0x99c>
 8003f2a:	4b62      	ldr	r3, [pc, #392]	; (80040b4 <main+0xb20>)
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	801a      	strh	r2, [r3, #0]
      aADCxConvertedSum /= ADC_CONVERTED_DATA_BUFFER_SIZE;//calc average of buffer
 8003f30:	09ff      	lsrs	r7, r7, #7
 8003f32:	4b63      	ldr	r3, [pc, #396]	; (80040c0 <main+0xb2c>)
 8003f34:	601f      	str	r7, [r3, #0]
      aADCxConvertedVpp = aADCxConvertedMax - aADCxConvertedMin;
 8003f36:	4b5d      	ldr	r3, [pc, #372]	; (80040ac <main+0xb18>)
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	4a5e      	ldr	r2, [pc, #376]	; (80040b4 <main+0xb20>)
 8003f3c:	8811      	ldrh	r1, [r2, #0]
 8003f3e:	1a5a      	subs	r2, r3, r1
      aADCxConvertedVpp = aADCxConvertedVpp > 150 ? aADCxConvertedVpp : 150;
 8003f40:	1c10      	adds	r0, r2, #0
 8003f42:	b292      	uxth	r2, r2
 8003f44:	2a96      	cmp	r2, #150	; 0x96
 8003f46:	d200      	bcs.n	8003f4a <main+0x9b6>
 8003f48:	2096      	movs	r0, #150	; 0x96
 8003f4a:	4a5e      	ldr	r2, [pc, #376]	; (80040c4 <main+0xb30>)
 8003f4c:	8010      	strh	r0, [r2, #0]
      aADCxConvertedTrigger = (aADCxConvertedMax + aADCxConvertedMin)/2;
 8003f4e:	185b      	adds	r3, r3, r1
 8003f50:	105b      	asrs	r3, r3, #1
 8003f52:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <main+0xb34>)
 8003f54:	8013      	strh	r3, [r2, #0]
      for (tmp_index_adc_converted_data = 0; tmp_index_adc_converted_data < ADC_CONVERTED_DATA_BUFFER_SIZE; tmp_index_adc_converted_data++)
 8003f56:	4d5d      	ldr	r5, [pc, #372]	; (80040cc <main+0xb38>)
 8003f58:	2400      	movs	r4, #0
        adc_converted_data_f32[tmp_index_adc_converted_data*2] = (float)(aADCxConvertedData[tmp_index_adc_converted_data]-aADCxConvertedSum);
 8003f5a:	4b57      	ldr	r3, [pc, #348]	; (80040b8 <main+0xb24>)
 8003f5c:	4698      	mov	r8, r3
        adc_converted_data_f32[tmp_index_adc_converted_data*2+1] = 0;
 8003f5e:	2600      	movs	r6, #0
        adc_converted_data_f32[tmp_index_adc_converted_data*2] = (float)(aADCxConvertedData[tmp_index_adc_converted_data]-aADCxConvertedSum);
 8003f60:	0063      	lsls	r3, r4, #1
 8003f62:	4642      	mov	r2, r8
 8003f64:	5a98      	ldrh	r0, [r3, r2]
 8003f66:	1bc0      	subs	r0, r0, r7
 8003f68:	f7fd fa5e 	bl	8001428 <__aeabi_i2f>
 8003f6c:	6028      	str	r0, [r5, #0]
        adc_converted_data_f32[tmp_index_adc_converted_data*2+1] = 0;
 8003f6e:	606e      	str	r6, [r5, #4]
      for (tmp_index_adc_converted_data = 0; tmp_index_adc_converted_data < ADC_CONVERTED_DATA_BUFFER_SIZE; tmp_index_adc_converted_data++)
 8003f70:	3401      	adds	r4, #1
 8003f72:	3508      	adds	r5, #8
 8003f74:	2c80      	cmp	r4, #128	; 0x80
 8003f76:	d1f3      	bne.n	8003f60 <main+0x9cc>
      arm_cfft_f32(&arm_cfft_sR_f32_len128, adc_converted_data_f32, 0, 1);
 8003f78:	4c54      	ldr	r4, [pc, #336]	; (80040cc <main+0xb38>)
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	0021      	movs	r1, r4
 8003f80:	4853      	ldr	r0, [pc, #332]	; (80040d0 <main+0xb3c>)
 8003f82:	f004 fdc9 	bl	8008b18 <arm_cfft_f32>
      arm_cmplx_mag_f32(adc_converted_data_f32, testOutput, ADC_CONVERTED_DATA_BUFFER_SIZE);
 8003f86:	4d53      	ldr	r5, [pc, #332]	; (80040d4 <main+0xb40>)
 8003f88:	2280      	movs	r2, #128	; 0x80
 8003f8a:	0029      	movs	r1, r5
 8003f8c:	0020      	movs	r0, r4
 8003f8e:	f004 fe67 	bl	8008c60 <arm_cmplx_mag_f32>
      arm_max_f32(testOutput, ADC_CONVERTED_DATA_BUFFER_SIZE/2, &fft_Max, &fft_Max_Index);
 8003f92:	4c51      	ldr	r4, [pc, #324]	; (80040d8 <main+0xb44>)
 8003f94:	4b51      	ldr	r3, [pc, #324]	; (80040dc <main+0xb48>)
 8003f96:	0022      	movs	r2, r4
 8003f98:	2140      	movs	r1, #64	; 0x40
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	f004 f850 	bl	8008040 <arm_max_f32>
      fft_Max = fft_Max > 8000 ? fft_Max : 8000;
 8003fa0:	6824      	ldr	r4, [r4, #0]
 8003fa2:	494f      	ldr	r1, [pc, #316]	; (80040e0 <main+0xb4c>)
 8003fa4:	1c20      	adds	r0, r4, #0
 8003fa6:	f7fc faa3 	bl	80004f0 <__aeabi_fcmpgt>
 8003faa:	2800      	cmp	r0, #0
 8003fac:	d100      	bne.n	8003fb0 <main+0xa1c>
 8003fae:	4c4c      	ldr	r4, [pc, #304]	; (80040e0 <main+0xb4c>)
 8003fb0:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <main+0xb44>)
 8003fb2:	601c      	str	r4, [r3, #0]
      if(Wav_Frq == 0)
 8003fb4:	4b3a      	ldr	r3, [pc, #232]	; (80040a0 <main+0xb0c>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d000      	beq.n	8003fbe <main+0xa2a>
 8003fbc:	e0d6      	b.n	800416c <main+0xbd8>
        aADCxConvertedTrigPos = ADC_CONVERTED_DATA_BUFFER_SIZE/4;
 8003fbe:	3320      	adds	r3, #32
 8003fc0:	4a48      	ldr	r2, [pc, #288]	; (80040e4 <main+0xb50>)
 8003fc2:	8013      	strh	r3, [r2, #0]
          if (cAtEdge == RisingEdge)
 8003fc4:	4a37      	ldr	r2, [pc, #220]	; (80040a4 <main+0xb10>)
 8003fc6:	7811      	ldrb	r1, [r2, #0]
            if(aADCxConvertedData[tmp_index_adc_converted_data-1] >= aADCxConvertedTrigger && aADCxConvertedData[tmp_index_adc_converted_data] < aADCxConvertedTrigger )
 8003fc8:	4a3f      	ldr	r2, [pc, #252]	; (80040c8 <main+0xb34>)
 8003fca:	8810      	ldrh	r0, [r2, #0]
 8003fcc:	4f3a      	ldr	r7, [pc, #232]	; (80040b8 <main+0xb24>)
 8003fce:	003c      	movs	r4, r7
            if(aADCxConvertedData[tmp_index_adc_converted_data-1] <= aADCxConvertedTrigger && aADCxConvertedData[tmp_index_adc_converted_data] > aADCxConvertedTrigger )
 8003fd0:	003d      	movs	r5, r7
 8003fd2:	003e      	movs	r6, r7
 8003fd4:	e005      	b.n	8003fe2 <main+0xa4e>
          else if (cAtEdge == FallingEdge)
 8003fd6:	2901      	cmp	r1, #1
 8003fd8:	d100      	bne.n	8003fdc <main+0xa48>
 8003fda:	e089      	b.n	80040f0 <main+0xb5c>
        for (tmp_index_adc_converted_data = ADC_CONVERTED_DATA_BUFFER_SIZE/4; tmp_index_adc_converted_data < ADC_CONVERTED_DATA_BUFFER_SIZE - (ADC_CONVERTED_DATA_BUFFER_SIZE/4); tmp_index_adc_converted_data++)
 8003fdc:	3301      	adds	r3, #1
 8003fde:	2b60      	cmp	r3, #96	; 0x60
 8003fe0:	d00e      	beq.n	8004000 <main+0xa6c>
          if (cAtEdge == RisingEdge)
 8003fe2:	2900      	cmp	r1, #0
 8003fe4:	d1f7      	bne.n	8003fd6 <main+0xa42>
            if(aADCxConvertedData[tmp_index_adc_converted_data-1] <= aADCxConvertedTrigger && aADCxConvertedData[tmp_index_adc_converted_data] > aADCxConvertedTrigger )
 8003fe6:	1e5a      	subs	r2, r3, #1
 8003fe8:	0052      	lsls	r2, r2, #1
 8003fea:	5b52      	ldrh	r2, [r2, r5]
 8003fec:	b292      	uxth	r2, r2
 8003fee:	4282      	cmp	r2, r0
 8003ff0:	d8f4      	bhi.n	8003fdc <main+0xa48>
 8003ff2:	005a      	lsls	r2, r3, #1
 8003ff4:	5b92      	ldrh	r2, [r2, r6]
 8003ff6:	b292      	uxth	r2, r2
 8003ff8:	4282      	cmp	r2, r0
 8003ffa:	d9ef      	bls.n	8003fdc <main+0xa48>
              aADCxConvertedTrigPos = tmp_index_adc_converted_data;
 8003ffc:	4a39      	ldr	r2, [pc, #228]	; (80040e4 <main+0xb50>)
 8003ffe:	8013      	strh	r3, [r2, #0]
        if(AC_DC == 0)
 8004000:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <main+0xb14>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d000      	beq.n	800400a <main+0xa76>
 8004008:	e082      	b.n	8004110 <main+0xb7c>
 800400a:	2400      	movs	r4, #0
            OLED_DrawPoint(x, 63-(uint8_t)((aADCxConvertedData[aADCxConvertedTrigPos-(ADC_CONVERTED_DATA_BUFFER_SIZE/4)+x])*63.0 / 3300 ), 1);
 800400c:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <main+0xb50>)
 800400e:	4699      	mov	r9, r3
 8004010:	2600      	movs	r6, #0
 8004012:	4f35      	ldr	r7, [pc, #212]	; (80040e8 <main+0xb54>)
 8004014:	464b      	mov	r3, r9
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	3b20      	subs	r3, #32
 800401a:	191b      	adds	r3, r3, r4
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <main+0xb24>)
 8004020:	5a98      	ldrh	r0, [r3, r2]
 8004022:	b280      	uxth	r0, r0
 8004024:	f7ff f844 	bl	80030b0 <__aeabi_i2d>
 8004028:	2200      	movs	r2, #0
 800402a:	4b30      	ldr	r3, [pc, #192]	; (80040ec <main+0xb58>)
 800402c:	f7fe f9ee 	bl	800240c <__aeabi_dmul>
 8004030:	0032      	movs	r2, r6
 8004032:	003b      	movs	r3, r7
 8004034:	f7fd fde4 	bl	8001c00 <__aeabi_ddiv>
 8004038:	f7fc fa8e 	bl	8000558 <__aeabi_d2uiz>
 800403c:	b2c0      	uxtb	r0, r0
 800403e:	213f      	movs	r1, #63	; 0x3f
 8004040:	1a09      	subs	r1, r1, r0
 8004042:	2201      	movs	r2, #1
 8004044:	0020      	movs	r0, r4
 8004046:	f001 f83b 	bl	80050c0 <OLED_DrawPoint>
          for(char x = 0; x<64; x++)
 800404a:	3401      	adds	r4, #1
 800404c:	2c40      	cmp	r4, #64	; 0x40
 800404e:	d1e1      	bne.n	8004014 <main+0xa80>
 8004050:	e0b4      	b.n	80041bc <main+0xc28>
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	200009dc 	.word	0x200009dc
 8004058:	20000072 	.word	0x20000072
 800405c:	20000070 	.word	0x20000070
 8004060:	20000000 	.word	0x20000000
 8004064:	413e8480 	.word	0x413e8480
 8004068:	3fe00000 	.word	0x3fe00000
 800406c:	20000d14 	.word	0x20000d14
 8004070:	20000ac8 	.word	0x20000ac8
 8004074:	20000cc8 	.word	0x20000cc8
 8004078:	20000890 	.word	0x20000890
 800407c:	20000898 	.word	0x20000898
 8004080:	20000040 	.word	0x20000040
 8004084:	200008e4 	.word	0x200008e4
 8004088:	200009e4 	.word	0x200009e4
 800408c:	0800d508 	.word	0x0800d508
 8004090:	20000277 	.word	0x20000277
 8004094:	20000058 	.word	0x20000058
 8004098:	20000064 	.word	0x20000064
 800409c:	20000978 	.word	0x20000978
 80040a0:	20000275 	.word	0x20000275
 80040a4:	20000276 	.word	0x20000276
 80040a8:	20000274 	.word	0x20000274
 80040ac:	20000c74 	.word	0x20000c74
 80040b0:	00000ce4 	.word	0x00000ce4
 80040b4:	20000a46 	.word	0x20000a46
 80040b8:	20000b18 	.word	0x20000b18
 80040bc:	00000fff 	.word	0x00000fff
 80040c0:	200009e0 	.word	0x200009e0
 80040c4:	20000cc6 	.word	0x20000cc6
 80040c8:	20000b14 	.word	0x20000b14
 80040cc:	20000488 	.word	0x20000488
 80040d0:	0800d908 	.word	0x0800d908
 80040d4:	2000027c 	.word	0x2000027c
 80040d8:	20000894 	.word	0x20000894
 80040dc:	20000888 	.word	0x20000888
 80040e0:	45fa0000 	.word	0x45fa0000
 80040e4:	20000cc4 	.word	0x20000cc4
 80040e8:	40a9c800 	.word	0x40a9c800
 80040ec:	404f8000 	.word	0x404f8000
            if(aADCxConvertedData[tmp_index_adc_converted_data-1] >= aADCxConvertedTrigger && aADCxConvertedData[tmp_index_adc_converted_data] < aADCxConvertedTrigger )
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	0052      	lsls	r2, r2, #1
 80040f4:	5bd2      	ldrh	r2, [r2, r7]
 80040f6:	b292      	uxth	r2, r2
 80040f8:	4282      	cmp	r2, r0
 80040fa:	d200      	bcs.n	80040fe <main+0xb6a>
 80040fc:	e76e      	b.n	8003fdc <main+0xa48>
 80040fe:	005a      	lsls	r2, r3, #1
 8004100:	5b12      	ldrh	r2, [r2, r4]
 8004102:	b292      	uxth	r2, r2
 8004104:	4290      	cmp	r0, r2
 8004106:	d800      	bhi.n	800410a <main+0xb76>
 8004108:	e768      	b.n	8003fdc <main+0xa48>
              aADCxConvertedTrigPos = tmp_index_adc_converted_data;
 800410a:	4aea      	ldr	r2, [pc, #936]	; (80044b4 <main+0xf20>)
 800410c:	8013      	strh	r3, [r2, #0]
              break;
 800410e:	e777      	b.n	8004000 <main+0xa6c>
 8004110:	2600      	movs	r6, #0
            OLED_DrawPoint(x, 31-(int8_t)(63.0*(aADCxConvertedData[aADCxConvertedTrigPos-(ADC_CONVERTED_DATA_BUFFER_SIZE/4)+x] - aADCxConvertedTrigger)/aADCxConvertedVpp), 1);
 8004112:	4be8      	ldr	r3, [pc, #928]	; (80044b4 <main+0xf20>)
 8004114:	469a      	mov	sl, r3
 8004116:	4be8      	ldr	r3, [pc, #928]	; (80044b8 <main+0xf24>)
 8004118:	4699      	mov	r9, r3
 800411a:	4653      	mov	r3, sl
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	3b20      	subs	r3, #32
 8004120:	199b      	adds	r3, r3, r6
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	464a      	mov	r2, r9
 8004126:	5a98      	ldrh	r0, [r3, r2]
 8004128:	4be4      	ldr	r3, [pc, #912]	; (80044bc <main+0xf28>)
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	1ac0      	subs	r0, r0, r3
 800412e:	f7fe ffbf 	bl	80030b0 <__aeabi_i2d>
 8004132:	2200      	movs	r2, #0
 8004134:	4be2      	ldr	r3, [pc, #904]	; (80044c0 <main+0xf2c>)
 8004136:	f7fe f969 	bl	800240c <__aeabi_dmul>
 800413a:	0004      	movs	r4, r0
 800413c:	000d      	movs	r5, r1
 800413e:	4be1      	ldr	r3, [pc, #900]	; (80044c4 <main+0xf30>)
 8004140:	8818      	ldrh	r0, [r3, #0]
 8004142:	f7fe ffb5 	bl	80030b0 <__aeabi_i2d>
 8004146:	0002      	movs	r2, r0
 8004148:	000b      	movs	r3, r1
 800414a:	0020      	movs	r0, r4
 800414c:	0029      	movs	r1, r5
 800414e:	f7fd fd57 	bl	8001c00 <__aeabi_ddiv>
 8004152:	f7fe ff77 	bl	8003044 <__aeabi_d2iz>
 8004156:	b240      	sxtb	r0, r0
 8004158:	211f      	movs	r1, #31
 800415a:	1a09      	subs	r1, r1, r0
 800415c:	2201      	movs	r2, #1
 800415e:	0030      	movs	r0, r6
 8004160:	f000 ffae 	bl	80050c0 <OLED_DrawPoint>
          for(char x = 0; x<64; x++)
 8004164:	3601      	adds	r6, #1
 8004166:	2e40      	cmp	r6, #64	; 0x40
 8004168:	d1d7      	bne.n	800411a <main+0xb86>
 800416a:	e027      	b.n	80041bc <main+0xc28>
 800416c:	4fd6      	ldr	r7, [pc, #856]	; (80044c8 <main+0xf34>)
      if(Wav_Frq == 0)
 800416e:	2600      	movs	r6, #0
          OLED_DrawLine(x, 63-(uint8_t)(testOutput[x]*63.0/fft_Max), x, 63, 1);
 8004170:	4bd6      	ldr	r3, [pc, #856]	; (80044cc <main+0xf38>)
 8004172:	469b      	mov	fp, r3
 8004174:	233f      	movs	r3, #63	; 0x3f
 8004176:	4699      	mov	r9, r3
 8004178:	cf01      	ldmia	r7!, {r0}
 800417a:	f7fe ffef 	bl	800315c <__aeabi_f2d>
 800417e:	2200      	movs	r2, #0
 8004180:	4bcf      	ldr	r3, [pc, #828]	; (80044c0 <main+0xf2c>)
 8004182:	f7fe f943 	bl	800240c <__aeabi_dmul>
 8004186:	0004      	movs	r4, r0
 8004188:	000d      	movs	r5, r1
 800418a:	465b      	mov	r3, fp
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	f7fe ffe5 	bl	800315c <__aeabi_f2d>
 8004192:	0002      	movs	r2, r0
 8004194:	000b      	movs	r3, r1
 8004196:	0020      	movs	r0, r4
 8004198:	0029      	movs	r1, r5
 800419a:	f7fd fd31 	bl	8001c00 <__aeabi_ddiv>
 800419e:	f7fc f9db 	bl	8000558 <__aeabi_d2uiz>
 80041a2:	b2c1      	uxtb	r1, r0
 80041a4:	464b      	mov	r3, r9
 80041a6:	1a59      	subs	r1, r3, r1
 80041a8:	2301      	movs	r3, #1
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	464b      	mov	r3, r9
 80041ae:	0032      	movs	r2, r6
 80041b0:	0030      	movs	r0, r6
 80041b2:	f000 ff9f 	bl	80050f4 <OLED_DrawLine>
        for(char x = 0; x<64; x++)
 80041b6:	3601      	adds	r6, #1
 80041b8:	2e40      	cmp	r6, #64	; 0x40
 80041ba:	d1dd      	bne.n	8004178 <main+0xbe4>
      OLED_ShowChar(64, Menu_cnt*8, '>', 8, 1);
 80041bc:	4bc4      	ldr	r3, [pc, #784]	; (80044d0 <main+0xf3c>)
 80041be:	7819      	ldrb	r1, [r3, #0]
 80041c0:	00c9      	lsls	r1, r1, #3
 80041c2:	2301      	movs	r3, #1
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	3307      	adds	r3, #7
 80041c8:	223e      	movs	r2, #62	; 0x3e
 80041ca:	2040      	movs	r0, #64	; 0x40
 80041cc:	f000 fffc 	bl	80051c8 <OLED_ShowChar>
      if(inDDS==0)
 80041d0:	4bc0      	ldr	r3, [pc, #768]	; (80044d4 <main+0xf40>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d000      	beq.n	80041da <main+0xc46>
 80041d8:	e374      	b.n	80048c4 <main+0x1330>
        sprintf(txt,"SPS:%4s", TIM3_PERIOD_CHR[TIM3_PERIOD_cnt]);
 80041da:	4bbf      	ldr	r3, [pc, #764]	; (80044d8 <main+0xf44>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4abe      	ldr	r2, [pc, #760]	; (80044dc <main+0xf48>)
 80041e2:	589a      	ldr	r2, [r3, r2]
 80041e4:	49be      	ldr	r1, [pc, #760]	; (80044e0 <main+0xf4c>)
 80041e6:	a825      	add	r0, sp, #148	; 0x94
 80041e8:	f005 ff42 	bl	800a070 <siprintf>
        OLED_ShowString(70, 0, txt, 8, 1);
 80041ec:	2301      	movs	r3, #1
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	3307      	adds	r3, #7
 80041f2:	aa25      	add	r2, sp, #148	; 0x94
 80041f4:	2100      	movs	r1, #0
 80041f6:	2046      	movs	r0, #70	; 0x46
 80041f8:	f001 f832 	bl	8005260 <OLED_ShowString>
        sprintf(txt,"SRC:%4s", cUseChannel==0 ? "Ain+":"Mic+");
 80041fc:	4bb9      	ldr	r3, [pc, #740]	; (80044e4 <main+0xf50>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	4ab9      	ldr	r2, [pc, #740]	; (80044e8 <main+0xf54>)
 8004202:	2b00      	cmp	r3, #0
 8004204:	d000      	beq.n	8004208 <main+0xc74>
 8004206:	4ab9      	ldr	r2, [pc, #740]	; (80044ec <main+0xf58>)
 8004208:	49b9      	ldr	r1, [pc, #740]	; (80044f0 <main+0xf5c>)
 800420a:	a825      	add	r0, sp, #148	; 0x94
 800420c:	f005 ff30 	bl	800a070 <siprintf>
        OLED_ShowString(70, 8, txt, 8, 1);
 8004210:	2301      	movs	r3, #1
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	3307      	adds	r3, #7
 8004216:	aa25      	add	r2, sp, #148	; 0x94
 8004218:	0019      	movs	r1, r3
 800421a:	2046      	movs	r0, #70	; 0x46
 800421c:	f001 f820 	bl	8005260 <OLED_ShowString>
        sprintf(txt,"T/F:%4s", Wav_Frq==0?"Time":"Freq");
 8004220:	4bb4      	ldr	r3, [pc, #720]	; (80044f4 <main+0xf60>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	4ab4      	ldr	r2, [pc, #720]	; (80044f8 <main+0xf64>)
 8004226:	2b00      	cmp	r3, #0
 8004228:	d000      	beq.n	800422c <main+0xc98>
 800422a:	4ab4      	ldr	r2, [pc, #720]	; (80044fc <main+0xf68>)
 800422c:	49b4      	ldr	r1, [pc, #720]	; (8004500 <main+0xf6c>)
 800422e:	a825      	add	r0, sp, #148	; 0x94
 8004230:	f005 ff1e 	bl	800a070 <siprintf>
        OLED_ShowString(70, 16, txt, 8, 1);
 8004234:	2301      	movs	r3, #1
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	3307      	adds	r3, #7
 800423a:	aa25      	add	r2, sp, #148	; 0x94
 800423c:	2110      	movs	r1, #16
 800423e:	2046      	movs	r0, #70	; 0x46
 8004240:	f001 f80e 	bl	8005260 <OLED_ShowString>
        sprintf(txt,"TRI:%4s", cAtEdge==0 ? "Rise":"Fall");
 8004244:	4baf      	ldr	r3, [pc, #700]	; (8004504 <main+0xf70>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4aaf      	ldr	r2, [pc, #700]	; (8004508 <main+0xf74>)
 800424a:	2b00      	cmp	r3, #0
 800424c:	d000      	beq.n	8004250 <main+0xcbc>
 800424e:	4aaf      	ldr	r2, [pc, #700]	; (800450c <main+0xf78>)
 8004250:	49af      	ldr	r1, [pc, #700]	; (8004510 <main+0xf7c>)
 8004252:	a825      	add	r0, sp, #148	; 0x94
 8004254:	f005 ff0c 	bl	800a070 <siprintf>
        OLED_ShowString(70, 24, txt, 8, 1);
 8004258:	2301      	movs	r3, #1
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	3307      	adds	r3, #7
 800425e:	aa25      	add	r2, sp, #148	; 0x94
 8004260:	2118      	movs	r1, #24
 8004262:	2046      	movs	r0, #70	; 0x46
 8004264:	f000 fffc 	bl	8005260 <OLED_ShowString>
        if(Wav_Frq == 0)
 8004268:	4ba2      	ldr	r3, [pc, #648]	; (80044f4 <main+0xf60>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d000      	beq.n	8004272 <main+0xcde>
 8004270:	e19e      	b.n	80045b0 <main+0x101c>
          sprintf(txt,"A_D:%4s", AC_DC == 0 ? " DC " : " AC ");
 8004272:	4ba8      	ldr	r3, [pc, #672]	; (8004514 <main+0xf80>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	4aa8      	ldr	r2, [pc, #672]	; (8004518 <main+0xf84>)
 8004278:	2b00      	cmp	r3, #0
 800427a:	d000      	beq.n	800427e <main+0xcea>
 800427c:	4aa7      	ldr	r2, [pc, #668]	; (800451c <main+0xf88>)
 800427e:	49a8      	ldr	r1, [pc, #672]	; (8004520 <main+0xf8c>)
 8004280:	a825      	add	r0, sp, #148	; 0x94
 8004282:	f005 fef5 	bl	800a070 <siprintf>
          OLED_ShowString(70, 32, txt, 8, 1);
 8004286:	2301      	movs	r3, #1
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	3307      	adds	r3, #7
 800428c:	aa25      	add	r2, sp, #148	; 0x94
 800428e:	2120      	movs	r1, #32
 8004290:	2046      	movs	r0, #70	; 0x46
 8004292:	f000 ffe5 	bl	8005260 <OLED_ShowString>
          switch (TIM3_PERIOD_cnt)
 8004296:	4b90      	ldr	r3, [pc, #576]	; (80044d8 <main+0xf44>)
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	2a0b      	cmp	r2, #11
 800429c:	d818      	bhi.n	80042d0 <main+0xd3c>
 800429e:	0093      	lsls	r3, r2, #2
 80042a0:	4aa0      	ldr	r2, [pc, #640]	; (8004524 <main+0xf90>)
 80042a2:	58d3      	ldr	r3, [r2, r3]
 80042a4:	469f      	mov	pc, r3
              freq_in = (fft_Max_Index)*2/64.0;
 80042a6:	4ba0      	ldr	r3, [pc, #640]	; (8004528 <main+0xf94>)
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	0040      	lsls	r0, r0, #1
 80042ac:	f7fe ff30 	bl	8003110 <__aeabi_ui2d>
 80042b0:	2200      	movs	r2, #0
 80042b2:	4b9e      	ldr	r3, [pc, #632]	; (800452c <main+0xf98>)
 80042b4:	f7fe f8aa 	bl	800240c <__aeabi_dmul>
 80042b8:	f7fe ff98 	bl	80031ec <__aeabi_d2f>
 80042bc:	4b9c      	ldr	r3, [pc, #624]	; (8004530 <main+0xf9c>)
 80042be:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%1.1fM", freq_in);
 80042c0:	f7fe ff4c 	bl	800315c <__aeabi_f2d>
 80042c4:	0002      	movs	r2, r0
 80042c6:	000b      	movs	r3, r1
 80042c8:	499a      	ldr	r1, [pc, #616]	; (8004534 <main+0xfa0>)
 80042ca:	a825      	add	r0, sp, #148	; 0x94
 80042cc:	f005 fed0 	bl	800a070 <siprintf>
          OLED_ShowString(70, 40, txt, 8, 1);
 80042d0:	2401      	movs	r4, #1
 80042d2:	9400      	str	r4, [sp, #0]
 80042d4:	2308      	movs	r3, #8
 80042d6:	aa25      	add	r2, sp, #148	; 0x94
 80042d8:	2128      	movs	r1, #40	; 0x28
 80042da:	2046      	movs	r0, #70	; 0x46
 80042dc:	f000 ffc0 	bl	8005260 <OLED_ShowString>
          sprintf(txt,"VPP:%4d", aADCxConvertedVpp);
 80042e0:	4b78      	ldr	r3, [pc, #480]	; (80044c4 <main+0xf30>)
 80042e2:	881a      	ldrh	r2, [r3, #0]
 80042e4:	4994      	ldr	r1, [pc, #592]	; (8004538 <main+0xfa4>)
 80042e6:	a825      	add	r0, sp, #148	; 0x94
 80042e8:	f005 fec2 	bl	800a070 <siprintf>
          OLED_ShowString(70, 48, txt, 8, 1);
 80042ec:	9400      	str	r4, [sp, #0]
 80042ee:	2308      	movs	r3, #8
 80042f0:	aa25      	add	r2, sp, #148	; 0x94
 80042f2:	2130      	movs	r1, #48	; 0x30
 80042f4:	2046      	movs	r0, #70	; 0x46
 80042f6:	f000 ffb3 	bl	8005260 <OLED_ShowString>
          sprintf(txt,"DCC:%4d", aADCxConvertedSum);
 80042fa:	4b90      	ldr	r3, [pc, #576]	; (800453c <main+0xfa8>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4990      	ldr	r1, [pc, #576]	; (8004540 <main+0xfac>)
 8004300:	a825      	add	r0, sp, #148	; 0x94
 8004302:	f005 feb5 	bl	800a070 <siprintf>
          OLED_ShowString(70, 56, txt, 8, 1);
 8004306:	9400      	str	r4, [sp, #0]
 8004308:	2308      	movs	r3, #8
 800430a:	aa25      	add	r2, sp, #148	; 0x94
 800430c:	2138      	movs	r1, #56	; 0x38
 800430e:	2046      	movs	r0, #70	; 0x46
 8004310:	f000 ffa6 	bl	8005260 <OLED_ShowString>
 8004314:	e311      	b.n	800493a <main+0x13a6>
              freq_in = (fft_Max_Index)*1/64.0;
 8004316:	4b84      	ldr	r3, [pc, #528]	; (8004528 <main+0xf94>)
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	f7fe fef9 	bl	8003110 <__aeabi_ui2d>
 800431e:	2200      	movs	r2, #0
 8004320:	4b82      	ldr	r3, [pc, #520]	; (800452c <main+0xf98>)
 8004322:	f7fe f873 	bl	800240c <__aeabi_dmul>
 8004326:	f7fe ff61 	bl	80031ec <__aeabi_d2f>
 800432a:	4b81      	ldr	r3, [pc, #516]	; (8004530 <main+0xf9c>)
 800432c:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%1.1fM", freq_in);
 800432e:	f7fe ff15 	bl	800315c <__aeabi_f2d>
 8004332:	0002      	movs	r2, r0
 8004334:	000b      	movs	r3, r1
 8004336:	497f      	ldr	r1, [pc, #508]	; (8004534 <main+0xfa0>)
 8004338:	a825      	add	r0, sp, #148	; 0x94
 800433a:	f005 fe99 	bl	800a070 <siprintf>
              break;
 800433e:	e7c7      	b.n	80042d0 <main+0xd3c>
              freq_in = (fft_Max_Index)*500/64.0;
 8004340:	4b79      	ldr	r3, [pc, #484]	; (8004528 <main+0xf94>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	20fa      	movs	r0, #250	; 0xfa
 8004346:	0040      	lsls	r0, r0, #1
 8004348:	4358      	muls	r0, r3
 800434a:	f7fe fee1 	bl	8003110 <__aeabi_ui2d>
 800434e:	2200      	movs	r2, #0
 8004350:	4b76      	ldr	r3, [pc, #472]	; (800452c <main+0xf98>)
 8004352:	f7fe f85b 	bl	800240c <__aeabi_dmul>
 8004356:	f7fe ff49 	bl	80031ec <__aeabi_d2f>
 800435a:	4b75      	ldr	r3, [pc, #468]	; (8004530 <main+0xf9c>)
 800435c:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 800435e:	f7fe fefd 	bl	800315c <__aeabi_f2d>
 8004362:	0002      	movs	r2, r0
 8004364:	000b      	movs	r3, r1
 8004366:	4977      	ldr	r1, [pc, #476]	; (8004544 <main+0xfb0>)
 8004368:	a825      	add	r0, sp, #148	; 0x94
 800436a:	f005 fe81 	bl	800a070 <siprintf>
              break;
 800436e:	e7af      	b.n	80042d0 <main+0xd3c>
              freq_in = (fft_Max_Index)*250/64.0;
 8004370:	4b6d      	ldr	r3, [pc, #436]	; (8004528 <main+0xf94>)
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	23fa      	movs	r3, #250	; 0xfa
 8004376:	4358      	muls	r0, r3
 8004378:	f7fe feca 	bl	8003110 <__aeabi_ui2d>
 800437c:	2200      	movs	r2, #0
 800437e:	4b6b      	ldr	r3, [pc, #428]	; (800452c <main+0xf98>)
 8004380:	f7fe f844 	bl	800240c <__aeabi_dmul>
 8004384:	f7fe ff32 	bl	80031ec <__aeabi_d2f>
 8004388:	4b69      	ldr	r3, [pc, #420]	; (8004530 <main+0xf9c>)
 800438a:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 800438c:	f7fe fee6 	bl	800315c <__aeabi_f2d>
 8004390:	0002      	movs	r2, r0
 8004392:	000b      	movs	r3, r1
 8004394:	496b      	ldr	r1, [pc, #428]	; (8004544 <main+0xfb0>)
 8004396:	a825      	add	r0, sp, #148	; 0x94
 8004398:	f005 fe6a 	bl	800a070 <siprintf>
              break;
 800439c:	e798      	b.n	80042d0 <main+0xd3c>
              freq_in = (fft_Max_Index)*100/64.0;
 800439e:	4b62      	ldr	r3, [pc, #392]	; (8004528 <main+0xf94>)
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	2364      	movs	r3, #100	; 0x64
 80043a4:	4358      	muls	r0, r3
 80043a6:	f7fe feb3 	bl	8003110 <__aeabi_ui2d>
 80043aa:	2200      	movs	r2, #0
 80043ac:	4b5f      	ldr	r3, [pc, #380]	; (800452c <main+0xf98>)
 80043ae:	f7fe f82d 	bl	800240c <__aeabi_dmul>
 80043b2:	f7fe ff1b 	bl	80031ec <__aeabi_d2f>
 80043b6:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <main+0xf9c>)
 80043b8:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 80043ba:	f7fe fecf 	bl	800315c <__aeabi_f2d>
 80043be:	0002      	movs	r2, r0
 80043c0:	000b      	movs	r3, r1
 80043c2:	4960      	ldr	r1, [pc, #384]	; (8004544 <main+0xfb0>)
 80043c4:	a825      	add	r0, sp, #148	; 0x94
 80043c6:	f005 fe53 	bl	800a070 <siprintf>
              break;
 80043ca:	e781      	b.n	80042d0 <main+0xd3c>
              freq_in = (fft_Max_Index)*50/64.0;
 80043cc:	4b56      	ldr	r3, [pc, #344]	; (8004528 <main+0xf94>)
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	2332      	movs	r3, #50	; 0x32
 80043d2:	4358      	muls	r0, r3
 80043d4:	f7fe fe9c 	bl	8003110 <__aeabi_ui2d>
 80043d8:	2200      	movs	r2, #0
 80043da:	4b54      	ldr	r3, [pc, #336]	; (800452c <main+0xf98>)
 80043dc:	f7fe f816 	bl	800240c <__aeabi_dmul>
 80043e0:	f7fe ff04 	bl	80031ec <__aeabi_d2f>
 80043e4:	4b52      	ldr	r3, [pc, #328]	; (8004530 <main+0xf9c>)
 80043e6:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 80043e8:	f7fe feb8 	bl	800315c <__aeabi_f2d>
 80043ec:	0002      	movs	r2, r0
 80043ee:	000b      	movs	r3, r1
 80043f0:	4954      	ldr	r1, [pc, #336]	; (8004544 <main+0xfb0>)
 80043f2:	a825      	add	r0, sp, #148	; 0x94
 80043f4:	f005 fe3c 	bl	800a070 <siprintf>
              break;
 80043f8:	e76a      	b.n	80042d0 <main+0xd3c>
              freq_in = (fft_Max_Index)*25/64.0;
 80043fa:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <main+0xf94>)
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	2319      	movs	r3, #25
 8004400:	4358      	muls	r0, r3
 8004402:	f7fe fe85 	bl	8003110 <__aeabi_ui2d>
 8004406:	2200      	movs	r2, #0
 8004408:	4b48      	ldr	r3, [pc, #288]	; (800452c <main+0xf98>)
 800440a:	f7fd ffff 	bl	800240c <__aeabi_dmul>
 800440e:	f7fe feed 	bl	80031ec <__aeabi_d2f>
 8004412:	4b47      	ldr	r3, [pc, #284]	; (8004530 <main+0xf9c>)
 8004414:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 8004416:	f7fe fea1 	bl	800315c <__aeabi_f2d>
 800441a:	0002      	movs	r2, r0
 800441c:	000b      	movs	r3, r1
 800441e:	4949      	ldr	r1, [pc, #292]	; (8004544 <main+0xfb0>)
 8004420:	a825      	add	r0, sp, #148	; 0x94
 8004422:	f005 fe25 	bl	800a070 <siprintf>
              break;
 8004426:	e753      	b.n	80042d0 <main+0xd3c>
              freq_in = (fft_Max_Index)*10/64.0;
 8004428:	4b3f      	ldr	r3, [pc, #252]	; (8004528 <main+0xf94>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	230a      	movs	r3, #10
 800442e:	4358      	muls	r0, r3
 8004430:	f7fe fe6e 	bl	8003110 <__aeabi_ui2d>
 8004434:	2200      	movs	r2, #0
 8004436:	4b3d      	ldr	r3, [pc, #244]	; (800452c <main+0xf98>)
 8004438:	f7fd ffe8 	bl	800240c <__aeabi_dmul>
 800443c:	f7fe fed6 	bl	80031ec <__aeabi_d2f>
 8004440:	4b3b      	ldr	r3, [pc, #236]	; (8004530 <main+0xf9c>)
 8004442:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 8004444:	f7fe fe8a 	bl	800315c <__aeabi_f2d>
 8004448:	0002      	movs	r2, r0
 800444a:	000b      	movs	r3, r1
 800444c:	493d      	ldr	r1, [pc, #244]	; (8004544 <main+0xfb0>)
 800444e:	a825      	add	r0, sp, #148	; 0x94
 8004450:	f005 fe0e 	bl	800a070 <siprintf>
              break;
 8004454:	e73c      	b.n	80042d0 <main+0xd3c>
              freq_in = (fft_Max_Index)*5/64.0;
 8004456:	4b34      	ldr	r3, [pc, #208]	; (8004528 <main+0xf94>)
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	2305      	movs	r3, #5
 800445c:	4358      	muls	r0, r3
 800445e:	f7fe fe57 	bl	8003110 <__aeabi_ui2d>
 8004462:	2200      	movs	r2, #0
 8004464:	4b31      	ldr	r3, [pc, #196]	; (800452c <main+0xf98>)
 8004466:	f7fd ffd1 	bl	800240c <__aeabi_dmul>
 800446a:	f7fe febf 	bl	80031ec <__aeabi_d2f>
 800446e:	4b30      	ldr	r3, [pc, #192]	; (8004530 <main+0xf9c>)
 8004470:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 8004472:	f7fe fe73 	bl	800315c <__aeabi_f2d>
 8004476:	0002      	movs	r2, r0
 8004478:	000b      	movs	r3, r1
 800447a:	4932      	ldr	r1, [pc, #200]	; (8004544 <main+0xfb0>)
 800447c:	a825      	add	r0, sp, #148	; 0x94
 800447e:	f005 fdf7 	bl	800a070 <siprintf>
              break;
 8004482:	e725      	b.n	80042d0 <main+0xd3c>
              freq_in = (fft_Max_Index)*2500/64.0;
 8004484:	4b28      	ldr	r3, [pc, #160]	; (8004528 <main+0xf94>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	482f      	ldr	r0, [pc, #188]	; (8004548 <main+0xfb4>)
 800448a:	4358      	muls	r0, r3
 800448c:	f7fe fe40 	bl	8003110 <__aeabi_ui2d>
 8004490:	2200      	movs	r2, #0
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <main+0xf98>)
 8004494:	f7fd ffba 	bl	800240c <__aeabi_dmul>
 8004498:	f7fe fea8 	bl	80031ec <__aeabi_d2f>
 800449c:	4b24      	ldr	r3, [pc, #144]	; (8004530 <main+0xf9c>)
 800449e:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%4.0f", freq_in);
 80044a0:	f7fe fe5c 	bl	800315c <__aeabi_f2d>
 80044a4:	0002      	movs	r2, r0
 80044a6:	000b      	movs	r3, r1
 80044a8:	4928      	ldr	r1, [pc, #160]	; (800454c <main+0xfb8>)
 80044aa:	a825      	add	r0, sp, #148	; 0x94
 80044ac:	f005 fde0 	bl	800a070 <siprintf>
              break;
 80044b0:	e70e      	b.n	80042d0 <main+0xd3c>
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	20000cc4 	.word	0x20000cc4
 80044b8:	20000b18 	.word	0x20000b18
 80044bc:	20000b14 	.word	0x20000b14
 80044c0:	404f8000 	.word	0x404f8000
 80044c4:	20000cc6 	.word	0x20000cc6
 80044c8:	2000027c 	.word	0x2000027c
 80044cc:	20000894 	.word	0x20000894
 80044d0:	200009e4 	.word	0x200009e4
 80044d4:	20000278 	.word	0x20000278
 80044d8:	20000890 	.word	0x20000890
 80044dc:	20000010 	.word	0x20000010
 80044e0:	0800d468 	.word	0x0800d468
 80044e4:	20000277 	.word	0x20000277
 80044e8:	0800d428 	.word	0x0800d428
 80044ec:	0800d430 	.word	0x0800d430
 80044f0:	0800d470 	.word	0x0800d470
 80044f4:	20000275 	.word	0x20000275
 80044f8:	0800d438 	.word	0x0800d438
 80044fc:	0800d440 	.word	0x0800d440
 8004500:	0800d478 	.word	0x0800d478
 8004504:	20000276 	.word	0x20000276
 8004508:	0800d448 	.word	0x0800d448
 800450c:	0800d450 	.word	0x0800d450
 8004510:	0800d480 	.word	0x0800d480
 8004514:	20000274 	.word	0x20000274
 8004518:	0800d458 	.word	0x0800d458
 800451c:	0800d460 	.word	0x0800d460
 8004520:	0800d488 	.word	0x0800d488
 8004524:	0800d51c 	.word	0x0800d51c
 8004528:	20000888 	.word	0x20000888
 800452c:	3f900000 	.word	0x3f900000
 8004530:	2000088c 	.word	0x2000088c
 8004534:	0800d490 	.word	0x0800d490
 8004538:	0800d4b4 	.word	0x0800d4b4
 800453c:	200009e0 	.word	0x200009e0
 8004540:	0800d4bc 	.word	0x0800d4bc
 8004544:	0800d49c 	.word	0x0800d49c
 8004548:	000009c4 	.word	0x000009c4
 800454c:	0800d4a8 	.word	0x0800d4a8
              freq_in = (fft_Max_Index)*1000/64.0;
 8004550:	4bcf      	ldr	r3, [pc, #828]	; (8004890 <main+0x12fc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	20fa      	movs	r0, #250	; 0xfa
 8004556:	0080      	lsls	r0, r0, #2
 8004558:	4358      	muls	r0, r3
 800455a:	f7fe fdd9 	bl	8003110 <__aeabi_ui2d>
 800455e:	2200      	movs	r2, #0
 8004560:	4bcc      	ldr	r3, [pc, #816]	; (8004894 <main+0x1300>)
 8004562:	f7fd ff53 	bl	800240c <__aeabi_dmul>
 8004566:	f7fe fe41 	bl	80031ec <__aeabi_d2f>
 800456a:	4bcb      	ldr	r3, [pc, #812]	; (8004898 <main+0x1304>)
 800456c:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%4.0f", freq_in);
 800456e:	f7fe fdf5 	bl	800315c <__aeabi_f2d>
 8004572:	0002      	movs	r2, r0
 8004574:	000b      	movs	r3, r1
 8004576:	49c9      	ldr	r1, [pc, #804]	; (800489c <main+0x1308>)
 8004578:	a825      	add	r0, sp, #148	; 0x94
 800457a:	f005 fd79 	bl	800a070 <siprintf>
              break;
 800457e:	e6a7      	b.n	80042d0 <main+0xd3c>
              freq_in = (fft_Max_Index)*500/64.0;
 8004580:	4bc3      	ldr	r3, [pc, #780]	; (8004890 <main+0x12fc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	20fa      	movs	r0, #250	; 0xfa
 8004586:	0040      	lsls	r0, r0, #1
 8004588:	4358      	muls	r0, r3
 800458a:	f7fe fdc1 	bl	8003110 <__aeabi_ui2d>
 800458e:	2200      	movs	r2, #0
 8004590:	4bc0      	ldr	r3, [pc, #768]	; (8004894 <main+0x1300>)
 8004592:	f7fd ff3b 	bl	800240c <__aeabi_dmul>
 8004596:	f7fe fe29 	bl	80031ec <__aeabi_d2f>
 800459a:	4bbf      	ldr	r3, [pc, #764]	; (8004898 <main+0x1304>)
 800459c:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%4.0f", freq_in);
 800459e:	f7fe fddd 	bl	800315c <__aeabi_f2d>
 80045a2:	0002      	movs	r2, r0
 80045a4:	000b      	movs	r3, r1
 80045a6:	49bd      	ldr	r1, [pc, #756]	; (800489c <main+0x1308>)
 80045a8:	a825      	add	r0, sp, #148	; 0x94
 80045aa:	f005 fd61 	bl	800a070 <siprintf>
              break;
 80045ae:	e68f      	b.n	80042d0 <main+0xd3c>
          switch (TIM3_PERIOD_cnt)
 80045b0:	4bbb      	ldr	r3, [pc, #748]	; (80048a0 <main+0x130c>)
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	2a0b      	cmp	r2, #11
 80045b6:	d818      	bhi.n	80045ea <main+0x1056>
 80045b8:	0093      	lsls	r3, r2, #2
 80045ba:	4aba      	ldr	r2, [pc, #744]	; (80048a4 <main+0x1310>)
 80045bc:	58d3      	ldr	r3, [r2, r3]
 80045be:	469f      	mov	pc, r3
              freq_in = (fft_Max_Index)*2/64.0;
 80045c0:	4bb3      	ldr	r3, [pc, #716]	; (8004890 <main+0x12fc>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	0040      	lsls	r0, r0, #1
 80045c6:	f7fe fda3 	bl	8003110 <__aeabi_ui2d>
 80045ca:	2200      	movs	r2, #0
 80045cc:	4bb1      	ldr	r3, [pc, #708]	; (8004894 <main+0x1300>)
 80045ce:	f7fd ff1d 	bl	800240c <__aeabi_dmul>
 80045d2:	f7fe fe0b 	bl	80031ec <__aeabi_d2f>
 80045d6:	4bb0      	ldr	r3, [pc, #704]	; (8004898 <main+0x1304>)
 80045d8:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%1.1fM", freq_in);
 80045da:	f7fe fdbf 	bl	800315c <__aeabi_f2d>
 80045de:	0002      	movs	r2, r0
 80045e0:	000b      	movs	r3, r1
 80045e2:	49b1      	ldr	r1, [pc, #708]	; (80048a8 <main+0x1314>)
 80045e4:	a825      	add	r0, sp, #148	; 0x94
 80045e6:	f005 fd43 	bl	800a070 <siprintf>
          OLED_ShowString(70, 32, txt, 8, 1);
 80045ea:	2301      	movs	r3, #1
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	3307      	adds	r3, #7
 80045f0:	aa25      	add	r2, sp, #148	; 0x94
 80045f2:	2120      	movs	r1, #32
 80045f4:	2046      	movs	r0, #70	; 0x46
 80045f6:	f000 fe33 	bl	8005260 <OLED_ShowString>
          if(fft_Max_Index<32)
 80045fa:	4ba5      	ldr	r3, [pc, #660]	; (8004890 <main+0x12fc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b1f      	cmp	r3, #31
 8004600:	d900      	bls.n	8004604 <main+0x1070>
 8004602:	e19a      	b.n	800493a <main+0x13a6>
            sprintf(txt,"2nd:%1.2f", testOutput[fft_Max_Index*2] / testOutput[fft_Max_Index]);
 8004604:	4ca9      	ldr	r4, [pc, #676]	; (80048ac <main+0x1318>)
 8004606:	00da      	lsls	r2, r3, #3
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	5919      	ldr	r1, [r3, r4]
 800460c:	5910      	ldr	r0, [r2, r4]
 800460e:	f7fc fa29 	bl	8000a64 <__aeabi_fdiv>
 8004612:	f7fe fda3 	bl	800315c <__aeabi_f2d>
 8004616:	0002      	movs	r2, r0
 8004618:	000b      	movs	r3, r1
 800461a:	49a5      	ldr	r1, [pc, #660]	; (80048b0 <main+0x131c>)
 800461c:	a825      	add	r0, sp, #148	; 0x94
 800461e:	f005 fd27 	bl	800a070 <siprintf>
            OLED_ShowString(70, 40, txt, 8, 1);
 8004622:	2501      	movs	r5, #1
 8004624:	9500      	str	r5, [sp, #0]
 8004626:	2308      	movs	r3, #8
 8004628:	aa25      	add	r2, sp, #148	; 0x94
 800462a:	2128      	movs	r1, #40	; 0x28
 800462c:	2046      	movs	r0, #70	; 0x46
 800462e:	f000 fe17 	bl	8005260 <OLED_ShowString>
            sprintf(txt,"3rd:%1.2f", testOutput[fft_Max_Index*3] / testOutput[fft_Max_Index]);
 8004632:	4e97      	ldr	r6, [pc, #604]	; (8004890 <main+0x12fc>)
 8004634:	6832      	ldr	r2, [r6, #0]
 8004636:	2303      	movs	r3, #3
 8004638:	4353      	muls	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	0092      	lsls	r2, r2, #2
 800463e:	5911      	ldr	r1, [r2, r4]
 8004640:	5918      	ldr	r0, [r3, r4]
 8004642:	f7fc fa0f 	bl	8000a64 <__aeabi_fdiv>
 8004646:	f7fe fd89 	bl	800315c <__aeabi_f2d>
 800464a:	0002      	movs	r2, r0
 800464c:	000b      	movs	r3, r1
 800464e:	4999      	ldr	r1, [pc, #612]	; (80048b4 <main+0x1320>)
 8004650:	a825      	add	r0, sp, #148	; 0x94
 8004652:	f005 fd0d 	bl	800a070 <siprintf>
            OLED_ShowString(70, 48, txt, 8, 1);
 8004656:	9500      	str	r5, [sp, #0]
 8004658:	2308      	movs	r3, #8
 800465a:	aa25      	add	r2, sp, #148	; 0x94
 800465c:	2130      	movs	r1, #48	; 0x30
 800465e:	2046      	movs	r0, #70	; 0x46
 8004660:	f000 fdfe 	bl	8005260 <OLED_ShowString>
            sprintf(txt,"4th:%1.2f", testOutput[fft_Max_Index*4] / testOutput[fft_Max_Index]);
 8004664:	6833      	ldr	r3, [r6, #0]
 8004666:	009a      	lsls	r2, r3, #2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	5911      	ldr	r1, [r2, r4]
 800466c:	5918      	ldr	r0, [r3, r4]
 800466e:	f7fc f9f9 	bl	8000a64 <__aeabi_fdiv>
 8004672:	f7fe fd73 	bl	800315c <__aeabi_f2d>
 8004676:	0002      	movs	r2, r0
 8004678:	000b      	movs	r3, r1
 800467a:	498f      	ldr	r1, [pc, #572]	; (80048b8 <main+0x1324>)
 800467c:	a825      	add	r0, sp, #148	; 0x94
 800467e:	f005 fcf7 	bl	800a070 <siprintf>
            OLED_ShowString(70, 56, txt, 8, 1);
 8004682:	9500      	str	r5, [sp, #0]
 8004684:	2308      	movs	r3, #8
 8004686:	aa25      	add	r2, sp, #148	; 0x94
 8004688:	2138      	movs	r1, #56	; 0x38
 800468a:	2046      	movs	r0, #70	; 0x46
 800468c:	f000 fde8 	bl	8005260 <OLED_ShowString>
 8004690:	e153      	b.n	800493a <main+0x13a6>
              freq_in = (fft_Max_Index)*1/64.0;
 8004692:	4b7f      	ldr	r3, [pc, #508]	; (8004890 <main+0x12fc>)
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	f7fe fd3b 	bl	8003110 <__aeabi_ui2d>
 800469a:	2200      	movs	r2, #0
 800469c:	4b7d      	ldr	r3, [pc, #500]	; (8004894 <main+0x1300>)
 800469e:	f7fd feb5 	bl	800240c <__aeabi_dmul>
 80046a2:	f7fe fda3 	bl	80031ec <__aeabi_d2f>
 80046a6:	4b7c      	ldr	r3, [pc, #496]	; (8004898 <main+0x1304>)
 80046a8:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%1.1fM", freq_in);
 80046aa:	f7fe fd57 	bl	800315c <__aeabi_f2d>
 80046ae:	0002      	movs	r2, r0
 80046b0:	000b      	movs	r3, r1
 80046b2:	497d      	ldr	r1, [pc, #500]	; (80048a8 <main+0x1314>)
 80046b4:	a825      	add	r0, sp, #148	; 0x94
 80046b6:	f005 fcdb 	bl	800a070 <siprintf>
              break;
 80046ba:	e796      	b.n	80045ea <main+0x1056>
              freq_in = (fft_Max_Index)*500/64.0;
 80046bc:	4b74      	ldr	r3, [pc, #464]	; (8004890 <main+0x12fc>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	20fa      	movs	r0, #250	; 0xfa
 80046c2:	0040      	lsls	r0, r0, #1
 80046c4:	4358      	muls	r0, r3
 80046c6:	f7fe fd23 	bl	8003110 <__aeabi_ui2d>
 80046ca:	2200      	movs	r2, #0
 80046cc:	4b71      	ldr	r3, [pc, #452]	; (8004894 <main+0x1300>)
 80046ce:	f7fd fe9d 	bl	800240c <__aeabi_dmul>
 80046d2:	f7fe fd8b 	bl	80031ec <__aeabi_d2f>
 80046d6:	4b70      	ldr	r3, [pc, #448]	; (8004898 <main+0x1304>)
 80046d8:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 80046da:	f7fe fd3f 	bl	800315c <__aeabi_f2d>
 80046de:	0002      	movs	r2, r0
 80046e0:	000b      	movs	r3, r1
 80046e2:	4976      	ldr	r1, [pc, #472]	; (80048bc <main+0x1328>)
 80046e4:	a825      	add	r0, sp, #148	; 0x94
 80046e6:	f005 fcc3 	bl	800a070 <siprintf>
              break;
 80046ea:	e77e      	b.n	80045ea <main+0x1056>
              freq_in = (fft_Max_Index)*250/64.0;
 80046ec:	4b68      	ldr	r3, [pc, #416]	; (8004890 <main+0x12fc>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	23fa      	movs	r3, #250	; 0xfa
 80046f2:	4358      	muls	r0, r3
 80046f4:	f7fe fd0c 	bl	8003110 <__aeabi_ui2d>
 80046f8:	2200      	movs	r2, #0
 80046fa:	4b66      	ldr	r3, [pc, #408]	; (8004894 <main+0x1300>)
 80046fc:	f7fd fe86 	bl	800240c <__aeabi_dmul>
 8004700:	f7fe fd74 	bl	80031ec <__aeabi_d2f>
 8004704:	4b64      	ldr	r3, [pc, #400]	; (8004898 <main+0x1304>)
 8004706:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 8004708:	f7fe fd28 	bl	800315c <__aeabi_f2d>
 800470c:	0002      	movs	r2, r0
 800470e:	000b      	movs	r3, r1
 8004710:	496a      	ldr	r1, [pc, #424]	; (80048bc <main+0x1328>)
 8004712:	a825      	add	r0, sp, #148	; 0x94
 8004714:	f005 fcac 	bl	800a070 <siprintf>
              break;
 8004718:	e767      	b.n	80045ea <main+0x1056>
              freq_in = (fft_Max_Index)*100/64.0;
 800471a:	4b5d      	ldr	r3, [pc, #372]	; (8004890 <main+0x12fc>)
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	2364      	movs	r3, #100	; 0x64
 8004720:	4358      	muls	r0, r3
 8004722:	f7fe fcf5 	bl	8003110 <__aeabi_ui2d>
 8004726:	2200      	movs	r2, #0
 8004728:	4b5a      	ldr	r3, [pc, #360]	; (8004894 <main+0x1300>)
 800472a:	f7fd fe6f 	bl	800240c <__aeabi_dmul>
 800472e:	f7fe fd5d 	bl	80031ec <__aeabi_d2f>
 8004732:	4b59      	ldr	r3, [pc, #356]	; (8004898 <main+0x1304>)
 8004734:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 8004736:	f7fe fd11 	bl	800315c <__aeabi_f2d>
 800473a:	0002      	movs	r2, r0
 800473c:	000b      	movs	r3, r1
 800473e:	495f      	ldr	r1, [pc, #380]	; (80048bc <main+0x1328>)
 8004740:	a825      	add	r0, sp, #148	; 0x94
 8004742:	f005 fc95 	bl	800a070 <siprintf>
              break;
 8004746:	e750      	b.n	80045ea <main+0x1056>
              freq_in = (fft_Max_Index)*50/64.0;
 8004748:	4b51      	ldr	r3, [pc, #324]	; (8004890 <main+0x12fc>)
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	2332      	movs	r3, #50	; 0x32
 800474e:	4358      	muls	r0, r3
 8004750:	f7fe fcde 	bl	8003110 <__aeabi_ui2d>
 8004754:	2200      	movs	r2, #0
 8004756:	4b4f      	ldr	r3, [pc, #316]	; (8004894 <main+0x1300>)
 8004758:	f7fd fe58 	bl	800240c <__aeabi_dmul>
 800475c:	f7fe fd46 	bl	80031ec <__aeabi_d2f>
 8004760:	4b4d      	ldr	r3, [pc, #308]	; (8004898 <main+0x1304>)
 8004762:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 8004764:	f7fe fcfa 	bl	800315c <__aeabi_f2d>
 8004768:	0002      	movs	r2, r0
 800476a:	000b      	movs	r3, r1
 800476c:	4953      	ldr	r1, [pc, #332]	; (80048bc <main+0x1328>)
 800476e:	a825      	add	r0, sp, #148	; 0x94
 8004770:	f005 fc7e 	bl	800a070 <siprintf>
              break;
 8004774:	e739      	b.n	80045ea <main+0x1056>
              freq_in = (fft_Max_Index)*25/64.0;
 8004776:	4b46      	ldr	r3, [pc, #280]	; (8004890 <main+0x12fc>)
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	2319      	movs	r3, #25
 800477c:	4358      	muls	r0, r3
 800477e:	f7fe fcc7 	bl	8003110 <__aeabi_ui2d>
 8004782:	2200      	movs	r2, #0
 8004784:	4b43      	ldr	r3, [pc, #268]	; (8004894 <main+0x1300>)
 8004786:	f7fd fe41 	bl	800240c <__aeabi_dmul>
 800478a:	f7fe fd2f 	bl	80031ec <__aeabi_d2f>
 800478e:	4b42      	ldr	r3, [pc, #264]	; (8004898 <main+0x1304>)
 8004790:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 8004792:	f7fe fce3 	bl	800315c <__aeabi_f2d>
 8004796:	0002      	movs	r2, r0
 8004798:	000b      	movs	r3, r1
 800479a:	4948      	ldr	r1, [pc, #288]	; (80048bc <main+0x1328>)
 800479c:	a825      	add	r0, sp, #148	; 0x94
 800479e:	f005 fc67 	bl	800a070 <siprintf>
              break;
 80047a2:	e722      	b.n	80045ea <main+0x1056>
              freq_in = (fft_Max_Index)*10/64.0;
 80047a4:	4b3a      	ldr	r3, [pc, #232]	; (8004890 <main+0x12fc>)
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	230a      	movs	r3, #10
 80047aa:	4358      	muls	r0, r3
 80047ac:	f7fe fcb0 	bl	8003110 <__aeabi_ui2d>
 80047b0:	2200      	movs	r2, #0
 80047b2:	4b38      	ldr	r3, [pc, #224]	; (8004894 <main+0x1300>)
 80047b4:	f7fd fe2a 	bl	800240c <__aeabi_dmul>
 80047b8:	f7fe fd18 	bl	80031ec <__aeabi_d2f>
 80047bc:	4b36      	ldr	r3, [pc, #216]	; (8004898 <main+0x1304>)
 80047be:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 80047c0:	f7fe fccc 	bl	800315c <__aeabi_f2d>
 80047c4:	0002      	movs	r2, r0
 80047c6:	000b      	movs	r3, r1
 80047c8:	493c      	ldr	r1, [pc, #240]	; (80048bc <main+0x1328>)
 80047ca:	a825      	add	r0, sp, #148	; 0x94
 80047cc:	f005 fc50 	bl	800a070 <siprintf>
              break;
 80047d0:	e70b      	b.n	80045ea <main+0x1056>
              freq_in = (fft_Max_Index)*5/64.0;
 80047d2:	4b2f      	ldr	r3, [pc, #188]	; (8004890 <main+0x12fc>)
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	2305      	movs	r3, #5
 80047d8:	4358      	muls	r0, r3
 80047da:	f7fe fc99 	bl	8003110 <__aeabi_ui2d>
 80047de:	2200      	movs	r2, #0
 80047e0:	4b2c      	ldr	r3, [pc, #176]	; (8004894 <main+0x1300>)
 80047e2:	f7fd fe13 	bl	800240c <__aeabi_dmul>
 80047e6:	f7fe fd01 	bl	80031ec <__aeabi_d2f>
 80047ea:	4b2b      	ldr	r3, [pc, #172]	; (8004898 <main+0x1304>)
 80047ec:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%3.0fk", freq_in);
 80047ee:	f7fe fcb5 	bl	800315c <__aeabi_f2d>
 80047f2:	0002      	movs	r2, r0
 80047f4:	000b      	movs	r3, r1
 80047f6:	4931      	ldr	r1, [pc, #196]	; (80048bc <main+0x1328>)
 80047f8:	a825      	add	r0, sp, #148	; 0x94
 80047fa:	f005 fc39 	bl	800a070 <siprintf>
              break;
 80047fe:	e6f4      	b.n	80045ea <main+0x1056>
              freq_in = (fft_Max_Index)*2500/64.0;
 8004800:	4b23      	ldr	r3, [pc, #140]	; (8004890 <main+0x12fc>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	482e      	ldr	r0, [pc, #184]	; (80048c0 <main+0x132c>)
 8004806:	4358      	muls	r0, r3
 8004808:	f7fe fc82 	bl	8003110 <__aeabi_ui2d>
 800480c:	2200      	movs	r2, #0
 800480e:	4b21      	ldr	r3, [pc, #132]	; (8004894 <main+0x1300>)
 8004810:	f7fd fdfc 	bl	800240c <__aeabi_dmul>
 8004814:	f7fe fcea 	bl	80031ec <__aeabi_d2f>
 8004818:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <main+0x1304>)
 800481a:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%4.0f", freq_in);
 800481c:	f7fe fc9e 	bl	800315c <__aeabi_f2d>
 8004820:	0002      	movs	r2, r0
 8004822:	000b      	movs	r3, r1
 8004824:	491d      	ldr	r1, [pc, #116]	; (800489c <main+0x1308>)
 8004826:	a825      	add	r0, sp, #148	; 0x94
 8004828:	f005 fc22 	bl	800a070 <siprintf>
              break;
 800482c:	e6dd      	b.n	80045ea <main+0x1056>
              freq_in = (fft_Max_Index)*1000/64.0;
 800482e:	4b18      	ldr	r3, [pc, #96]	; (8004890 <main+0x12fc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	20fa      	movs	r0, #250	; 0xfa
 8004834:	0080      	lsls	r0, r0, #2
 8004836:	4358      	muls	r0, r3
 8004838:	f7fe fc6a 	bl	8003110 <__aeabi_ui2d>
 800483c:	2200      	movs	r2, #0
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <main+0x1300>)
 8004840:	f7fd fde4 	bl	800240c <__aeabi_dmul>
 8004844:	f7fe fcd2 	bl	80031ec <__aeabi_d2f>
 8004848:	4b13      	ldr	r3, [pc, #76]	; (8004898 <main+0x1304>)
 800484a:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%4.0f", freq_in);
 800484c:	f7fe fc86 	bl	800315c <__aeabi_f2d>
 8004850:	0002      	movs	r2, r0
 8004852:	000b      	movs	r3, r1
 8004854:	4911      	ldr	r1, [pc, #68]	; (800489c <main+0x1308>)
 8004856:	a825      	add	r0, sp, #148	; 0x94
 8004858:	f005 fc0a 	bl	800a070 <siprintf>
              break;
 800485c:	e6c5      	b.n	80045ea <main+0x1056>
              freq_in = (fft_Max_Index)*500/64.0;
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <main+0x12fc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	20fa      	movs	r0, #250	; 0xfa
 8004864:	0040      	lsls	r0, r0, #1
 8004866:	4358      	muls	r0, r3
 8004868:	f7fe fc52 	bl	8003110 <__aeabi_ui2d>
 800486c:	2200      	movs	r2, #0
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <main+0x1300>)
 8004870:	f7fd fdcc 	bl	800240c <__aeabi_dmul>
 8004874:	f7fe fcba 	bl	80031ec <__aeabi_d2f>
 8004878:	4b07      	ldr	r3, [pc, #28]	; (8004898 <main+0x1304>)
 800487a:	6018      	str	r0, [r3, #0]
              sprintf(txt,"FRQ:%4.0f", freq_in);
 800487c:	f7fe fc6e 	bl	800315c <__aeabi_f2d>
 8004880:	0002      	movs	r2, r0
 8004882:	000b      	movs	r3, r1
 8004884:	4905      	ldr	r1, [pc, #20]	; (800489c <main+0x1308>)
 8004886:	a825      	add	r0, sp, #148	; 0x94
 8004888:	f005 fbf2 	bl	800a070 <siprintf>
              break;
 800488c:	e6ad      	b.n	80045ea <main+0x1056>
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	20000888 	.word	0x20000888
 8004894:	3f900000 	.word	0x3f900000
 8004898:	2000088c 	.word	0x2000088c
 800489c:	0800d4a8 	.word	0x0800d4a8
 80048a0:	20000890 	.word	0x20000890
 80048a4:	0800d54c 	.word	0x0800d54c
 80048a8:	0800d490 	.word	0x0800d490
 80048ac:	2000027c 	.word	0x2000027c
 80048b0:	0800d4c4 	.word	0x0800d4c4
 80048b4:	0800d4d0 	.word	0x0800d4d0
 80048b8:	0800d4dc 	.word	0x0800d4dc
 80048bc:	0800d49c 	.word	0x0800d49c
 80048c0:	000009c4 	.word	0x000009c4
        sprintf(txt,"FRQ:%4d", DDS_FREQ);
 80048c4:	4b4c      	ldr	r3, [pc, #304]	; (80049f8 <main+0x1464>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	5e9a      	ldrsh	r2, [r3, r2]
 80048ca:	494c      	ldr	r1, [pc, #304]	; (80049fc <main+0x1468>)
 80048cc:	a825      	add	r0, sp, #148	; 0x94
 80048ce:	f005 fbcf 	bl	800a070 <siprintf>
        OLED_ShowString(70, 0, txt, 8, 1);
 80048d2:	2401      	movs	r4, #1
 80048d4:	9400      	str	r4, [sp, #0]
 80048d6:	2308      	movs	r3, #8
 80048d8:	aa25      	add	r2, sp, #148	; 0x94
 80048da:	2100      	movs	r1, #0
 80048dc:	2046      	movs	r0, #70	; 0x46
 80048de:	f000 fcbf 	bl	8005260 <OLED_ShowString>
        sprintf(txt,"AMP:%4d", tmp_ampl);
 80048e2:	4b47      	ldr	r3, [pc, #284]	; (8004a00 <main+0x146c>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	5e9a      	ldrsh	r2, [r3, r2]
 80048e8:	4946      	ldr	r1, [pc, #280]	; (8004a04 <main+0x1470>)
 80048ea:	a825      	add	r0, sp, #148	; 0x94
 80048ec:	f005 fbc0 	bl	800a070 <siprintf>
        OLED_ShowString(70, 8, txt, 8, 1);
 80048f0:	9400      	str	r4, [sp, #0]
 80048f2:	2308      	movs	r3, #8
 80048f4:	aa25      	add	r2, sp, #148	; 0x94
 80048f6:	0019      	movs	r1, r3
 80048f8:	2046      	movs	r0, #70	; 0x46
 80048fa:	f000 fcb1 	bl	8005260 <OLED_ShowString>
        sprintf(txt,"DC :%4d", tmp_offset);
 80048fe:	4b42      	ldr	r3, [pc, #264]	; (8004a08 <main+0x1474>)
 8004900:	2200      	movs	r2, #0
 8004902:	5e9a      	ldrsh	r2, [r3, r2]
 8004904:	4941      	ldr	r1, [pc, #260]	; (8004a0c <main+0x1478>)
 8004906:	a825      	add	r0, sp, #148	; 0x94
 8004908:	f005 fbb2 	bl	800a070 <siprintf>
        OLED_ShowString(70, 16, txt, 8, 1);
 800490c:	9400      	str	r4, [sp, #0]
 800490e:	2308      	movs	r3, #8
 8004910:	aa25      	add	r2, sp, #148	; 0x94
 8004912:	2110      	movs	r1, #16
 8004914:	2046      	movs	r0, #70	; 0x46
 8004916:	f000 fca3 	bl	8005260 <OLED_ShowString>
        sprintf(txt,"WAV:%4s", DDS_WAVE[DDS_mode]);
 800491a:	4b3d      	ldr	r3, [pc, #244]	; (8004a10 <main+0x147c>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4a3c      	ldr	r2, [pc, #240]	; (8004a14 <main+0x1480>)
 8004922:	589a      	ldr	r2, [r3, r2]
 8004924:	493c      	ldr	r1, [pc, #240]	; (8004a18 <main+0x1484>)
 8004926:	a825      	add	r0, sp, #148	; 0x94
 8004928:	f005 fba2 	bl	800a070 <siprintf>
        OLED_ShowString(70, 24, txt, 8, 1);
 800492c:	9400      	str	r4, [sp, #0]
 800492e:	2308      	movs	r3, #8
 8004930:	aa25      	add	r2, sp, #148	; 0x94
 8004932:	2118      	movs	r1, #24
 8004934:	2046      	movs	r0, #70	; 0x46
 8004936:	f000 fc93 	bl	8005260 <OLED_ShowString>
      OLED_Refresh();
 800493a:	f000 fb81 	bl	8005040 <OLED_Refresh>
      ubDmaTransferStatus = 0;
 800493e:	4b37      	ldr	r3, [pc, #220]	; (8004a1c <main+0x1488>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
      if (HAL_ADC_Start_DMA(&hadc1,
 8004944:	3280      	adds	r2, #128	; 0x80
 8004946:	4936      	ldr	r1, [pc, #216]	; (8004a20 <main+0x148c>)
 8004948:	4836      	ldr	r0, [pc, #216]	; (8004a24 <main+0x1490>)
 800494a:	f001 f8e3 	bl	8005b14 <HAL_ADC_Start_DMA>
 800494e:	2800      	cmp	r0, #0
 8004950:	d14f      	bne.n	80049f2 <main+0x145e>
    if (ubDmaTransferStatus == 1)
 8004952:	4a32      	ldr	r2, [pc, #200]	; (8004a1c <main+0x1488>)
 8004954:	7813      	ldrb	r3, [r2, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d1fc      	bne.n	8004954 <main+0x13c0>
      memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 800495a:	2280      	movs	r2, #128	; 0x80
 800495c:	00d2      	lsls	r2, r2, #3
 800495e:	2100      	movs	r1, #0
 8004960:	4831      	ldr	r0, [pc, #196]	; (8004a28 <main+0x1494>)
 8004962:	f004 ff03 	bl	800976c <memset>
      if(Key_Pressed)
 8004966:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <main+0x1498>)
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <main+0x13de>
 800496e:	f7ff fa76 	bl	8003e5e <main+0x8ca>
        if (Key_Pressed & Key_OK_Pin)
 8004972:	07da      	lsls	r2, r3, #31
 8004974:	d508      	bpl.n	8004988 <main+0x13f4>
          inDDS = inDDS ? 0 : 1;
 8004976:	492e      	ldr	r1, [pc, #184]	; (8004a30 <main+0x149c>)
 8004978:	780a      	ldrb	r2, [r1, #0]
 800497a:	4250      	negs	r0, r2
 800497c:	4142      	adcs	r2, r0
 800497e:	700a      	strb	r2, [r1, #0]
         __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,20);
 8004980:	4a2c      	ldr	r2, [pc, #176]	; (8004a34 <main+0x14a0>)
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	2114      	movs	r1, #20
 8004986:	6351      	str	r1, [r2, #52]	; 0x34
        if (inDDS==1)
 8004988:	4a29      	ldr	r2, [pc, #164]	; (8004a30 <main+0x149c>)
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	2a01      	cmp	r2, #1
 800498e:	d101      	bne.n	8004994 <main+0x1400>
 8004990:	f7ff f904 	bl	8003b9c <main+0x608>
          if (Key_Pressed & Key_U_Pin)
 8004994:	051a      	lsls	r2, r3, #20
 8004996:	d50d      	bpl.n	80049b4 <main+0x1420>
            Menu_cnt = (Menu_cnt==0) ? 6 : (Menu_cnt-1);
 8004998:	4a27      	ldr	r2, [pc, #156]	; (8004a38 <main+0x14a4>)
 800499a:	7812      	ldrb	r2, [r2, #0]
 800499c:	2106      	movs	r1, #6
 800499e:	2a00      	cmp	r2, #0
 80049a0:	d001      	beq.n	80049a6 <main+0x1412>
 80049a2:	3a01      	subs	r2, #1
 80049a4:	b2d1      	uxtb	r1, r2
 80049a6:	4a24      	ldr	r2, [pc, #144]	; (8004a38 <main+0x14a4>)
 80049a8:	7011      	strb	r1, [r2, #0]
            __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,300);
 80049aa:	4a22      	ldr	r2, [pc, #136]	; (8004a34 <main+0x14a0>)
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	2196      	movs	r1, #150	; 0x96
 80049b0:	0049      	lsls	r1, r1, #1
 80049b2:	6351      	str	r1, [r2, #52]	; 0x34
          if (Key_Pressed & Key_D_Pin)
 80049b4:	065a      	lsls	r2, r3, #25
 80049b6:	d50e      	bpl.n	80049d6 <main+0x1442>
            Menu_cnt = (Menu_cnt==6) ? 0 : (Menu_cnt+1);
 80049b8:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <main+0x14a4>)
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	2a06      	cmp	r2, #6
 80049be:	d101      	bne.n	80049c4 <main+0x1430>
 80049c0:	f7ff f9ed 	bl	8003d9e <main+0x80a>
 80049c4:	3201      	adds	r2, #1
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	491b      	ldr	r1, [pc, #108]	; (8004a38 <main+0x14a4>)
 80049ca:	700a      	strb	r2, [r1, #0]
            __HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,500);
 80049cc:	4a19      	ldr	r2, [pc, #100]	; (8004a34 <main+0x14a0>)
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	21fa      	movs	r1, #250	; 0xfa
 80049d2:	0049      	lsls	r1, r1, #1
 80049d4:	6351      	str	r1, [r2, #52]	; 0x34
          if (Key_Pressed & Key_L_Pin)
 80049d6:	079b      	lsls	r3, r3, #30
 80049d8:	d401      	bmi.n	80049de <main+0x144a>
 80049da:	f7ff f9f7 	bl	8003dcc <main+0x838>
            switch (Menu_cnt)
 80049de:	4b16      	ldr	r3, [pc, #88]	; (8004a38 <main+0x14a4>)
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	2a04      	cmp	r2, #4
 80049e4:	d901      	bls.n	80049ea <main+0x1456>
 80049e6:	f7ff f9ed 	bl	8003dc4 <main+0x830>
 80049ea:	0093      	lsls	r3, r2, #2
 80049ec:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <main+0x14a8>)
 80049ee:	58d3      	ldr	r3, [r2, r3]
 80049f0:	469f      	mov	pc, r3
 80049f2:	b672      	cpsid	i
  while (1)
 80049f4:	e7fe      	b.n	80049f4 <main+0x1460>
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	20000000 	.word	0x20000000
 80049fc:	0800d4e8 	.word	0x0800d4e8
 8004a00:	20000070 	.word	0x20000070
 8004a04:	0800d4f0 	.word	0x0800d4f0
 8004a08:	20000072 	.word	0x20000072
 8004a0c:	0800d4f8 	.word	0x0800d4f8
 8004a10:	200009dc 	.word	0x200009dc
 8004a14:	20000004 	.word	0x20000004
 8004a18:	0800d500 	.word	0x0800d500
 8004a1c:	20000074 	.word	0x20000074
 8004a20:	20000b18 	.word	0x20000b18
 8004a24:	20000978 	.word	0x20000978
 8004a28:	20000d18 	.word	0x20000d18
 8004a2c:	200008e4 	.word	0x200008e4
 8004a30:	20000278 	.word	0x20000278
 8004a34:	20000cc8 	.word	0x20000cc8
 8004a38:	200009e4 	.word	0x200009e4
 8004a3c:	0800d57c 	.word	0x0800d57c

08004a40 <HAL_GPIO_EXTI_Falling_Callback>:
  switch (GPIO_Pin)
 8004a40:	2840      	cmp	r0, #64	; 0x40
 8004a42:	d026      	beq.n	8004a92 <HAL_GPIO_EXTI_Falling_Callback+0x52>
 8004a44:	d90e      	bls.n	8004a64 <HAL_GPIO_EXTI_Falling_Callback+0x24>
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	4298      	cmp	r0, r3
 8004a4c:	d01a      	beq.n	8004a84 <HAL_GPIO_EXTI_Falling_Callback+0x44>
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	4298      	cmp	r0, r3
 8004a54:	d115      	bne.n	8004a82 <HAL_GPIO_EXTI_Falling_Callback+0x42>
      Key_Pressed |= Key_U_Pin;
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8004a58:	8811      	ldrh	r1, [r2, #0]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	8013      	strh	r3, [r2, #0]
}
 8004a62:	e00e      	b.n	8004a82 <HAL_GPIO_EXTI_Falling_Callback+0x42>
  switch (GPIO_Pin)
 8004a64:	2801      	cmp	r0, #1
 8004a66:	d007      	beq.n	8004a78 <HAL_GPIO_EXTI_Falling_Callback+0x38>
 8004a68:	2802      	cmp	r0, #2
 8004a6a:	d10a      	bne.n	8004a82 <HAL_GPIO_EXTI_Falling_Callback+0x42>
      Key_Pressed |= Key_L_Pin;
 8004a6c:	4a0c      	ldr	r2, [pc, #48]	; (8004aa0 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8004a6e:	8813      	ldrh	r3, [r2, #0]
 8004a70:	2102      	movs	r1, #2
 8004a72:	430b      	orrs	r3, r1
 8004a74:	8013      	strh	r3, [r2, #0]
      break;
 8004a76:	e004      	b.n	8004a82 <HAL_GPIO_EXTI_Falling_Callback+0x42>
      Key_Pressed |= Key_OK_Pin;
 8004a78:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8004a7a:	8813      	ldrh	r3, [r2, #0]
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	8013      	strh	r3, [r2, #0]
}
 8004a82:	4770      	bx	lr
      Key_Pressed |= Key_R_Pin;
 8004a84:	4a06      	ldr	r2, [pc, #24]	; (8004aa0 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8004a86:	8811      	ldrh	r1, [r2, #0]
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	8013      	strh	r3, [r2, #0]
      break;
 8004a90:	e7f7      	b.n	8004a82 <HAL_GPIO_EXTI_Falling_Callback+0x42>
      Key_Pressed |= Key_D_Pin;
 8004a92:	4a03      	ldr	r2, [pc, #12]	; (8004aa0 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8004a94:	8813      	ldrh	r3, [r2, #0]
 8004a96:	2140      	movs	r1, #64	; 0x40
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	8013      	strh	r3, [r2, #0]
      break;
 8004a9c:	e7f1      	b.n	8004a82 <HAL_GPIO_EXTI_Falling_Callback+0x42>
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	200008e4 	.word	0x200008e4

08004aa4 <HAL_TIM_PeriodElapsedCallback>:
{
 8004aa4:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1)
 8004aa6:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004aa8:	6802      	ldr	r2, [r0, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d000      	beq.n	8004ab0 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8004aae:	bd10      	pop	{r4, pc}
    if(tmp_phase > 31)
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	5e9b      	ldrsh	r3, [r3, r2]
 8004ab6:	2b1f      	cmp	r3, #31
 8004ab8:	dd02      	ble.n	8004ac0 <HAL_TIM_PeriodElapsedCallback+0x1c>
      tmp_phase = 0;
 8004aba:	4b08      	ldr	r3, [pc, #32]	; (8004adc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, tmp_sinTable[tmp_phase]);
 8004ac0:	4a06      	ldr	r2, [pc, #24]	; (8004adc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	5e53      	ldrsh	r3, [r2, r1]
 8004ac6:	4906      	ldr	r1, [pc, #24]	; (8004ae0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004ac8:	6809      	ldr	r1, [r1, #0]
 8004aca:	009c      	lsls	r4, r3, #2
 8004acc:	4805      	ldr	r0, [pc, #20]	; (8004ae4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004ace:	5820      	ldr	r0, [r4, r0]
 8004ad0:	6388      	str	r0, [r1, #56]	; 0x38
    tmp_phase++;
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	8013      	strh	r3, [r2, #0]
}
 8004ad6:	e7ea      	b.n	8004aae <HAL_TIM_PeriodElapsedCallback+0xa>
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	20000a44 	.word	0x20000a44
 8004ae0:	20000c78 	.word	0x20000c78
 8004ae4:	20000a48 	.word	0x20000a48

08004ae8 <HAL_ADC_ConvCpltCallback>:
{
 8004ae8:	b510      	push	{r4, lr}
  HAL_ADC_Stop_DMA(&hadc1);
 8004aea:	4803      	ldr	r0, [pc, #12]	; (8004af8 <HAL_ADC_ConvCpltCallback+0x10>)
 8004aec:	f001 f8ae 	bl	8005c4c <HAL_ADC_Stop_DMA>
  ubDmaTransferStatus = 1;
 8004af0:	4b02      	ldr	r3, [pc, #8]	; (8004afc <HAL_ADC_ConvCpltCallback+0x14>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]
}
 8004af6:	bd10      	pop	{r4, pc}
 8004af8:	20000978 	.word	0x20000978
 8004afc:	20000074 	.word	0x20000074

08004b00 <HAL_ADC_ErrorCallback>:
 8004b00:	b672      	cpsid	i
  while (1)
 8004b02:	e7fe      	b.n	8004b02 <HAL_ADC_ErrorCallback+0x2>

08004b04 <__io_putchar>:
{
 8004b04:	b500      	push	{lr}
 8004b06:	b083      	sub	sp, #12
 8004b08:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <__io_putchar+0x18>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	a901      	add	r1, sp, #4
 8004b10:	4803      	ldr	r0, [pc, #12]	; (8004b20 <__io_putchar+0x1c>)
 8004b12:	f003 f8fb 	bl	8007d0c <HAL_UART_Transmit>
}
 8004b16:	9801      	ldr	r0, [sp, #4]
 8004b18:	b003      	add	sp, #12
 8004b1a:	bd00      	pop	{pc}
 8004b1c:	0000ffff 	.word	0x0000ffff
 8004b20:	200008e8 	.word	0x200008e8

08004b24 <Error_Handler>:
 8004b24:	b672      	cpsid	i
  while (1)
 8004b26:	e7fe      	b.n	8004b26 <Error_Handler+0x2>

08004b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b28:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <HAL_MspInit+0x2c>)
 8004b2c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b2e:	2201      	movs	r2, #1
 8004b30:	4311      	orrs	r1, r2
 8004b32:	6419      	str	r1, [r3, #64]	; 0x40
 8004b34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b36:	400a      	ands	r2, r1
 8004b38:	9200      	str	r2, [sp, #0]
 8004b3a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b3e:	2180      	movs	r1, #128	; 0x80
 8004b40:	0549      	lsls	r1, r1, #21
 8004b42:	430a      	orrs	r2, r1
 8004b44:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b48:	400b      	ands	r3, r1
 8004b4a:	9301      	str	r3, [sp, #4]
 8004b4c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b4e:	b002      	add	sp, #8
 8004b50:	4770      	bx	lr
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	40021000 	.word	0x40021000

08004b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b58:	b530      	push	{r4, r5, lr}
 8004b5a:	b089      	sub	sp, #36	; 0x24
 8004b5c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b5e:	2214      	movs	r2, #20
 8004b60:	2100      	movs	r1, #0
 8004b62:	a803      	add	r0, sp, #12
 8004b64:	f004 fe02 	bl	800976c <memset>
  if(hadc->Instance==ADC1)
 8004b68:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <HAL_ADC_MspInit+0x90>)
 8004b6a:	6822      	ldr	r2, [r4, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b70:	b009      	add	sp, #36	; 0x24
 8004b72:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8004b74:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <HAL_ADC_MspInit+0x94>)
 8004b76:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b78:	2080      	movs	r0, #128	; 0x80
 8004b7a:	0340      	lsls	r0, r0, #13
 8004b7c:	4301      	orrs	r1, r0
 8004b7e:	6419      	str	r1, [r3, #64]	; 0x40
 8004b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b82:	4002      	ands	r2, r0
 8004b84:	9201      	str	r2, [sp, #4]
 8004b86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4311      	orrs	r1, r2
 8004b8e:	6359      	str	r1, [r3, #52]	; 0x34
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	401a      	ands	r2, r3
 8004b94:	9202      	str	r2, [sp, #8]
 8004b96:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Ain_Pin|Mic_Pin;
 8004b98:	2311      	movs	r3, #17
 8004b9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b9c:	3b0e      	subs	r3, #14
 8004b9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba0:	2500      	movs	r5, #0
 8004ba2:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba4:	20a0      	movs	r0, #160	; 0xa0
 8004ba6:	a903      	add	r1, sp, #12
 8004ba8:	05c0      	lsls	r0, r0, #23
 8004baa:	f001 fad5 	bl	8006158 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8004bae:	4810      	ldr	r0, [pc, #64]	; (8004bf0 <HAL_ADC_MspInit+0x98>)
 8004bb0:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <HAL_ADC_MspInit+0x9c>)
 8004bb2:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004bb4:	2305      	movs	r3, #5
 8004bb6:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bb8:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bba:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004bbc:	337b      	adds	r3, #123	; 0x7b
 8004bbe:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004bc0:	3380      	adds	r3, #128	; 0x80
 8004bc2:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004bca:	2320      	movs	r3, #32
 8004bcc:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004bce:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004bd0:	f001 f96a 	bl	8005ea8 <HAL_DMA_Init>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d103      	bne.n	8004be0 <HAL_ADC_MspInit+0x88>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_ADC_MspInit+0x98>)
 8004bda:	6523      	str	r3, [r4, #80]	; 0x50
 8004bdc:	629c      	str	r4, [r3, #40]	; 0x28
}
 8004bde:	e7c7      	b.n	8004b70 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8004be0:	f7ff ffa0 	bl	8004b24 <Error_Handler>
 8004be4:	e7f8      	b.n	8004bd8 <HAL_ADC_MspInit+0x80>
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	40012400 	.word	0x40012400
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	200009e8 	.word	0x200009e8
 8004bf4:	40020008 	.word	0x40020008

08004bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bfe:	2214      	movs	r2, #20
 8004c00:	2100      	movs	r1, #0
 8004c02:	a803      	add	r0, sp, #12
 8004c04:	f004 fdb2 	bl	800976c <memset>
  if(huart->Instance==LPUART1)
 8004c08:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <HAL_UART_MspInit+0x60>)
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8004c10:	b008      	add	sp, #32
 8004c12:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004c14:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <HAL_UART_MspInit+0x64>)
 8004c16:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004c18:	2080      	movs	r0, #128	; 0x80
 8004c1a:	0340      	lsls	r0, r0, #13
 8004c1c:	4301      	orrs	r1, r0
 8004c1e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8004c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c22:	4002      	ands	r2, r0
 8004c24:	9201      	str	r2, [sp, #4]
 8004c26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	4311      	orrs	r1, r2
 8004c2e:	6359      	str	r1, [r3, #52]	; 0x34
 8004c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c32:	401a      	ands	r2, r3
 8004c34:	9202      	str	r2, [sp, #8]
 8004c36:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TXD_Pin|RXD_Pin;
 8004c38:	230c      	movs	r3, #12
 8004c3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3c:	3b0a      	subs	r3, #10
 8004c3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c44:	3303      	adds	r3, #3
 8004c46:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8004c48:	3303      	adds	r3, #3
 8004c4a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c4c:	20a0      	movs	r0, #160	; 0xa0
 8004c4e:	a903      	add	r1, sp, #12
 8004c50:	05c0      	lsls	r0, r0, #23
 8004c52:	f001 fa81 	bl	8006158 <HAL_GPIO_Init>
}
 8004c56:	e7db      	b.n	8004c10 <HAL_UART_MspInit+0x18>
 8004c58:	40008000 	.word	0x40008000
 8004c5c:	40021000 	.word	0x40021000

08004c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c60:	b510      	push	{r4, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	0004      	movs	r4, r0
  if(htim_base->Instance==TIM1)
 8004c66:	6803      	ldr	r3, [r0, #0]
 8004c68:	4a2e      	ldr	r2, [pc, #184]	; (8004d24 <HAL_TIM_Base_MspInit+0xc4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <HAL_TIM_Base_MspInit+0x26>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004c6e:	2280      	movs	r2, #128	; 0x80
 8004c70:	05d2      	lsls	r2, r2, #23
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d037      	beq.n	8004ce6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004c76:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <HAL_TIM_Base_MspInit+0xc8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d03e      	beq.n	8004cfa <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	; (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d045      	beq.n	8004d0e <HAL_TIM_Base_MspInit+0xae>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004c82:	b004      	add	sp, #16
 8004c84:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c86:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <HAL_TIM_Base_MspInit+0xd0>)
 8004c88:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004c8a:	2080      	movs	r0, #128	; 0x80
 8004c8c:	0100      	lsls	r0, r0, #4
 8004c8e:	4301      	orrs	r1, r0
 8004c90:	6411      	str	r1, [r2, #64]	; 0x40
 8004c92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004c94:	4003      	ands	r3, r0
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	9b00      	ldr	r3, [sp, #0]
    hdma_tim1_up.Instance = DMA1_Channel2;
 8004c9a:	4826      	ldr	r0, [pc, #152]	; (8004d34 <HAL_TIM_Base_MspInit+0xd4>)
 8004c9c:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <HAL_TIM_Base_MspInit+0xd8>)
 8004c9e:	6003      	str	r3, [r0, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8004ca0:	2319      	movs	r3, #25
 8004ca2:	6043      	str	r3, [r0, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ca4:	3b09      	subs	r3, #9
 8004ca6:	6083      	str	r3, [r0, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60c3      	str	r3, [r0, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	6102      	str	r2, [r0, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004cb0:	3280      	adds	r2, #128	; 0x80
 8004cb2:	6142      	str	r2, [r0, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004cb4:	2280      	movs	r2, #128	; 0x80
 8004cb6:	00d2      	lsls	r2, r2, #3
 8004cb8:	6182      	str	r2, [r0, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8004cba:	2220      	movs	r2, #32
 8004cbc:	61c2      	str	r2, [r0, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8004cbe:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8004cc0:	f001 f8f2 	bl	8005ea8 <HAL_DMA_Init>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d10b      	bne.n	8004ce0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <HAL_TIM_Base_MspInit+0xd4>)
 8004cca:	6223      	str	r3, [r4, #32]
 8004ccc:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 3, 0);
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2103      	movs	r1, #3
 8004cd2:	200d      	movs	r0, #13
 8004cd4:	f001 f850 	bl	8005d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004cd8:	200d      	movs	r0, #13
 8004cda:	f001 f87f 	bl	8005ddc <HAL_NVIC_EnableIRQ>
 8004cde:	e7d0      	b.n	8004c82 <HAL_TIM_Base_MspInit+0x22>
      Error_Handler();
 8004ce0:	f7ff ff20 	bl	8004b24 <Error_Handler>
 8004ce4:	e7f0      	b.n	8004cc8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ce6:	4a12      	ldr	r2, [pc, #72]	; (8004d30 <HAL_TIM_Base_MspInit+0xd0>)
 8004ce8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004cea:	2301      	movs	r3, #1
 8004cec:	4319      	orrs	r1, r3
 8004cee:	63d1      	str	r1, [r2, #60]	; 0x3c
 8004cf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	9b01      	ldr	r3, [sp, #4]
 8004cf8:	e7c3      	b.n	8004c82 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <HAL_TIM_Base_MspInit+0xd0>)
 8004cfc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004cfe:	2302      	movs	r3, #2
 8004d00:	4319      	orrs	r1, r3
 8004d02:	63d1      	str	r1, [r2, #60]	; 0x3c
 8004d04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d06:	4013      	ands	r3, r2
 8004d08:	9302      	str	r3, [sp, #8]
 8004d0a:	9b02      	ldr	r3, [sp, #8]
 8004d0c:	e7b9      	b.n	8004c82 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004d0e:	4a08      	ldr	r2, [pc, #32]	; (8004d30 <HAL_TIM_Base_MspInit+0xd0>)
 8004d10:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004d12:	2080      	movs	r0, #128	; 0x80
 8004d14:	0280      	lsls	r0, r0, #10
 8004d16:	4301      	orrs	r1, r0
 8004d18:	6411      	str	r1, [r2, #64]	; 0x40
 8004d1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d1c:	4003      	ands	r3, r0
 8004d1e:	9303      	str	r3, [sp, #12]
 8004d20:	9b03      	ldr	r3, [sp, #12]
}
 8004d22:	e7ae      	b.n	8004c82 <HAL_TIM_Base_MspInit+0x22>
 8004d24:	40012c00 	.word	0x40012c00
 8004d28:	40000400 	.word	0x40000400
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40021000 	.word	0x40021000
 8004d34:	20000c18 	.word	0x20000c18
 8004d38:	4002001c 	.word	0x4002001c

08004d3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	b08a      	sub	sp, #40	; 0x28
 8004d40:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d42:	2214      	movs	r2, #20
 8004d44:	2100      	movs	r1, #0
 8004d46:	a805      	add	r0, sp, #20
 8004d48:	f004 fd10 	bl	800976c <memset>
  if(htim->Instance==TIM1)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	4a34      	ldr	r2, [pc, #208]	; (8004e20 <HAL_TIM_MspPostInit+0xe4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <HAL_TIM_MspPostInit+0x30>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	05d2      	lsls	r2, r2, #23
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d01d      	beq.n	8004d98 <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8004d5c:	4a31      	ldr	r2, [pc, #196]	; (8004e24 <HAL_TIM_MspPostInit+0xe8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d031      	beq.n	8004dc6 <HAL_TIM_MspPostInit+0x8a>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM16)
 8004d62:	4a31      	ldr	r2, [pc, #196]	; (8004e28 <HAL_TIM_MspPostInit+0xec>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d044      	beq.n	8004df2 <HAL_TIM_MspPostInit+0xb6>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8004d68:	b00a      	add	sp, #40	; 0x28
 8004d6a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6c:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <HAL_TIM_MspPostInit+0xf0>)
 8004d6e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004d70:	2302      	movs	r3, #2
 8004d72:	4319      	orrs	r1, r3
 8004d74:	6351      	str	r1, [r2, #52]	; 0x34
 8004d76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d78:	401a      	ands	r2, r3
 8004d7a:	9201      	str	r2, [sp, #4]
 8004d7c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004d7e:	2240      	movs	r2, #64	; 0x40
 8004d80:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d82:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d88:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d8e:	a905      	add	r1, sp, #20
 8004d90:	4827      	ldr	r0, [pc, #156]	; (8004e30 <HAL_TIM_MspPostInit+0xf4>)
 8004d92:	f001 f9e1 	bl	8006158 <HAL_GPIO_Init>
 8004d96:	e7e7      	b.n	8004d68 <HAL_TIM_MspPostInit+0x2c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d98:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <HAL_TIM_MspPostInit+0xf0>)
 8004d9a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4319      	orrs	r1, r3
 8004da0:	6351      	str	r1, [r2, #52]	; 0x34
 8004da2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004da4:	4013      	ands	r3, r2
 8004da6:	9302      	str	r3, [sp, #8]
 8004da8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Aux_Pin;
 8004daa:	2302      	movs	r3, #2
 8004dac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	2200      	movs	r2, #0
 8004db2:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db4:	3203      	adds	r2, #3
 8004db6:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004db8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(Aux_GPIO_Port, &GPIO_InitStruct);
 8004dba:	20a0      	movs	r0, #160	; 0xa0
 8004dbc:	a905      	add	r1, sp, #20
 8004dbe:	05c0      	lsls	r0, r0, #23
 8004dc0:	f001 f9ca 	bl	8006158 <HAL_GPIO_Init>
 8004dc4:	e7d0      	b.n	8004d68 <HAL_TIM_MspPostInit+0x2c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc6:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <HAL_TIM_MspPostInit+0xf0>)
 8004dc8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004dca:	2302      	movs	r3, #2
 8004dcc:	4319      	orrs	r1, r3
 8004dce:	6351      	str	r1, [r2, #52]	; 0x34
 8004dd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	9203      	str	r2, [sp, #12]
 8004dd6:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004dd8:	2220      	movs	r2, #32
 8004dda:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ddc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004de4:	3301      	adds	r3, #1
 8004de6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de8:	a905      	add	r1, sp, #20
 8004dea:	4811      	ldr	r0, [pc, #68]	; (8004e30 <HAL_TIM_MspPostInit+0xf4>)
 8004dec:	f001 f9b4 	bl	8006158 <HAL_GPIO_Init>
 8004df0:	e7ba      	b.n	8004d68 <HAL_TIM_MspPostInit+0x2c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df2:	4a0e      	ldr	r2, [pc, #56]	; (8004e2c <HAL_TIM_MspPostInit+0xf0>)
 8004df4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004df6:	2302      	movs	r3, #2
 8004df8:	4319      	orrs	r1, r3
 8004dfa:	6351      	str	r1, [r2, #52]	; 0x34
 8004dfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dfe:	401a      	ands	r2, r3
 8004e00:	9204      	str	r2, [sp, #16]
 8004e02:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = STA_LED_Pin;
 8004e04:	2280      	movs	r2, #128	; 0x80
 8004e06:	0052      	lsls	r2, r2, #1
 8004e08:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e10:	3203      	adds	r2, #3
 8004e12:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8004e14:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(STA_LED_GPIO_Port, &GPIO_InitStruct);
 8004e16:	a905      	add	r1, sp, #20
 8004e18:	4805      	ldr	r0, [pc, #20]	; (8004e30 <HAL_TIM_MspPostInit+0xf4>)
 8004e1a:	f001 f99d 	bl	8006158 <HAL_GPIO_Init>
}
 8004e1e:	e7a3      	b.n	8004d68 <HAL_TIM_MspPostInit+0x2c>
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	50000400 	.word	0x50000400

08004e34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e34:	e7fe      	b.n	8004e34 <NMI_Handler>

08004e36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e36:	e7fe      	b.n	8004e36 <HardFault_Handler>

08004e38 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004e38:	4770      	bx	lr

08004e3a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e3a:	4770      	bx	lr

08004e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e3c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e3e:	f000 faf9 	bl	8005434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e42:	bd10      	pop	{r4, pc}

08004e44 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004e44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004e46:	2001      	movs	r0, #1
 8004e48:	f001 fa66 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004e4c:	2002      	movs	r0, #2
 8004e4e:	f001 fa63 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004e52:	bd10      	pop	{r4, pc}

08004e54 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004e54:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004e56:	2040      	movs	r0, #64	; 0x40
 8004e58:	f001 fa5e 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004e5c:	2080      	movs	r0, #128	; 0x80
 8004e5e:	0040      	lsls	r0, r0, #1
 8004e60:	f001 fa5a 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004e64:	2080      	movs	r0, #128	; 0x80
 8004e66:	0100      	lsls	r0, r0, #4
 8004e68:	f001 fa56 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004e6c:	bd10      	pop	{r4, pc}
	...

08004e70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e72:	4802      	ldr	r0, [pc, #8]	; (8004e7c <DMA1_Channel1_IRQHandler+0xc>)
 8004e74:	f001 f90a 	bl	800608c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	200009e8 	.word	0x200009e8

08004e80 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004e80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8004e82:	4802      	ldr	r0, [pc, #8]	; (8004e8c <DMA1_Channel2_3_IRQHandler+0xc>)
 8004e84:	f001 f902 	bl	800608c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	20000c18 	.word	0x20000c18

08004e90 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8004e90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e92:	4802      	ldr	r0, [pc, #8]	; (8004e9c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8004e94:	f002 f8c0 	bl	8007018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	20000ac8 	.word	0x20000ac8

08004ea0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	4770      	bx	lr

08004ea4 <_kill>:

int _kill(int pid, int sig)
{
 8004ea4:	b510      	push	{r4, lr}
	errno = EINVAL;
 8004ea6:	f004 fc37 	bl	8009718 <__errno>
 8004eaa:	2316      	movs	r3, #22
 8004eac:	6003      	str	r3, [r0, #0]
	return -1;
 8004eae:	2001      	movs	r0, #1
}
 8004eb0:	4240      	negs	r0, r0
 8004eb2:	bd10      	pop	{r4, pc}

08004eb4 <_exit>:

void _exit (int status)
{
 8004eb4:	b510      	push	{r4, lr}
	errno = EINVAL;
 8004eb6:	f004 fc2f 	bl	8009718 <__errno>
 8004eba:	2316      	movs	r3, #22
 8004ebc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004ebe:	e7fe      	b.n	8004ebe <_exit+0xa>

08004ec0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ec4:	dd07      	ble.n	8004ed6 <_read+0x16>
 8004ec6:	000c      	movs	r4, r1
 8004ec8:	188d      	adds	r5, r1, r2
	{
		*ptr++ = __io_getchar();
 8004eca:	e000      	b.n	8004ece <_read+0xe>
 8004ecc:	bf00      	nop
 8004ece:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ed0:	3401      	adds	r4, #1
 8004ed2:	42ac      	cmp	r4, r5
 8004ed4:	d1f9      	bne.n	8004eca <_read+0xa>
	}

return len;
}
 8004ed6:	0030      	movs	r0, r6
 8004ed8:	bd70      	pop	{r4, r5, r6, pc}

08004eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eda:	b570      	push	{r4, r5, r6, lr}
 8004edc:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ede:	dd07      	ble.n	8004ef0 <_write+0x16>
 8004ee0:	000c      	movs	r4, r1
 8004ee2:	188d      	adds	r5, r1, r2
	{
		__io_putchar(*ptr++);
 8004ee4:	7820      	ldrb	r0, [r4, #0]
 8004ee6:	f7ff fe0d 	bl	8004b04 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eea:	3401      	adds	r4, #1
 8004eec:	42ac      	cmp	r4, r5
 8004eee:	d1f9      	bne.n	8004ee4 <_write+0xa>
	}
	return len;
}
 8004ef0:	0030      	movs	r0, r6
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}

08004ef4 <_close>:

int _close(int file)
{
	return -1;
 8004ef4:	2001      	movs	r0, #1
}
 8004ef6:	4240      	negs	r0, r0
 8004ef8:	4770      	bx	lr

08004efa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	019b      	lsls	r3, r3, #6
 8004efe:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004f00:	2000      	movs	r0, #0
 8004f02:	4770      	bx	lr

08004f04 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004f04:	2001      	movs	r0, #1
 8004f06:	4770      	bx	lr

08004f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004f08:	2000      	movs	r0, #0
 8004f0a:	4770      	bx	lr

08004f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f10:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <_sbrk+0x38>)
 8004f12:	490d      	ldr	r1, [pc, #52]	; (8004f48 <_sbrk+0x3c>)
 8004f14:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f16:	490d      	ldr	r1, [pc, #52]	; (8004f4c <_sbrk+0x40>)
 8004f18:	6809      	ldr	r1, [r1, #0]
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	d007      	beq.n	8004f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f1e:	490b      	ldr	r1, [pc, #44]	; (8004f4c <_sbrk+0x40>)
 8004f20:	6808      	ldr	r0, [r1, #0]
 8004f22:	18c3      	adds	r3, r0, r3
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d806      	bhi.n	8004f36 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004f28:	4a08      	ldr	r2, [pc, #32]	; (8004f4c <_sbrk+0x40>)
 8004f2a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004f2c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004f2e:	4907      	ldr	r1, [pc, #28]	; (8004f4c <_sbrk+0x40>)
 8004f30:	4807      	ldr	r0, [pc, #28]	; (8004f50 <_sbrk+0x44>)
 8004f32:	6008      	str	r0, [r1, #0]
 8004f34:	e7f3      	b.n	8004f1e <_sbrk+0x12>
    errno = ENOMEM;
 8004f36:	f004 fbef 	bl	8009718 <__errno>
 8004f3a:	230c      	movs	r3, #12
 8004f3c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004f3e:	2001      	movs	r0, #1
 8004f40:	4240      	negs	r0, r0
 8004f42:	e7f3      	b.n	8004f2c <_sbrk+0x20>
 8004f44:	20002000 	.word	0x20002000
 8004f48:	00000400 	.word	0x00000400
 8004f4c:	2000047c 	.word	0x2000047c
 8004f50:	20001130 	.word	0x20001130

08004f54 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f54:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <SystemInit+0xc>)
 8004f56:	2280      	movs	r2, #128	; 0x80
 8004f58:	0512      	lsls	r2, r2, #20
 8004f5a:	609a      	str	r2, [r3, #8]
#endif
}
 8004f5c:	4770      	bx	lr
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	e000ed00 	.word	0xe000ed00

08004f64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f64:	480d      	ldr	r0, [pc, #52]	; (8004f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004f68:	f7ff fff4 	bl	8004f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f6c:	480c      	ldr	r0, [pc, #48]	; (8004fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f6e:	490d      	ldr	r1, [pc, #52]	; (8004fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f70:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <LoopForever+0xe>)
  movs r3, #0
 8004f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f74:	e002      	b.n	8004f7c <LoopCopyDataInit>

08004f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f7a:	3304      	adds	r3, #4

08004f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f80:	d3f9      	bcc.n	8004f76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f82:	4a0a      	ldr	r2, [pc, #40]	; (8004fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f84:	4c0a      	ldr	r4, [pc, #40]	; (8004fb0 <LoopForever+0x16>)
  movs r3, #0
 8004f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f88:	e001      	b.n	8004f8e <LoopFillZerobss>

08004f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f8c:	3204      	adds	r2, #4

08004f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f90:	d3fb      	bcc.n	8004f8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004f92:	f004 fbc7 	bl	8009724 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004f96:	f7fe fafd 	bl	8003594 <main>

08004f9a <LoopForever>:

LoopForever:
  b LoopForever
 8004f9a:	e7fe      	b.n	8004f9a <LoopForever>
  ldr   r0, =_estack
 8004f9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fa4:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8004fa8:	0800e67c 	.word	0x0800e67c
  ldr r2, =_sbss
 8004fac:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8004fb0:	2000112c 	.word	0x2000112c

08004fb4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004fb4:	e7fe      	b.n	8004fb4 <ADC1_IRQHandler>
	...

08004fb8 <OLED_WR_Byte>:
        OLED_WR_Byte(0xA0, OLED_CMD);
    }
}

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 8004fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fba:	46c6      	mov	lr, r8
 8004fbc:	b500      	push	{lr}
 8004fbe:	0004      	movs	r4, r0
    uint8_t i;
    if (cmd)
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	d00d      	beq.n	8004fe0 <OLED_WR_Byte+0x28>
        OLED_DC_Set();
 8004fc4:	20a0      	movs	r0, #160	; 0xa0
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	2140      	movs	r1, #64	; 0x40
 8004fca:	05c0      	lsls	r0, r0, #23
 8004fcc:	f001 f99c 	bl	8006308 <HAL_GPIO_WritePin>
{
 8004fd0:	2508      	movs	r5, #8
    else
        OLED_DC_Clr();
//	OLED_CS_Clr();
    for (i = 0; i < 8; i++)
    {
        OLED_SCL_Clr();
 8004fd2:	2780      	movs	r7, #128	; 0x80
 8004fd4:	023f      	lsls	r7, r7, #8
 8004fd6:	26a0      	movs	r6, #160	; 0xa0
 8004fd8:	05f6      	lsls	r6, r6, #23
        if (dat & 0x80)
            OLED_SDA_Set();
        else
            OLED_SDA_Clr();
 8004fda:	4b18      	ldr	r3, [pc, #96]	; (800503c <OLED_WR_Byte+0x84>)
 8004fdc:	4698      	mov	r8, r3
 8004fde:	e016      	b.n	800500e <OLED_WR_Byte+0x56>
        OLED_DC_Clr();
 8004fe0:	20a0      	movs	r0, #160	; 0xa0
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2140      	movs	r1, #64	; 0x40
 8004fe6:	05c0      	lsls	r0, r0, #23
 8004fe8:	f001 f98e 	bl	8006308 <HAL_GPIO_WritePin>
 8004fec:	e7f0      	b.n	8004fd0 <OLED_WR_Byte+0x18>
            OLED_SDA_Set();
 8004fee:	2201      	movs	r2, #1
 8004ff0:	2108      	movs	r1, #8
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	f001 f988 	bl	8006308 <HAL_GPIO_WritePin>
        OLED_SCL_Set();
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	0039      	movs	r1, r7
 8004ffc:	0030      	movs	r0, r6
 8004ffe:	f001 f983 	bl	8006308 <HAL_GPIO_WritePin>
        dat <<= 1;
 8005002:	0064      	lsls	r4, r4, #1
 8005004:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 8; i++)
 8005006:	3d01      	subs	r5, #1
 8005008:	b2ed      	uxtb	r5, r5
 800500a:	2d00      	cmp	r5, #0
 800500c:	d00d      	beq.n	800502a <OLED_WR_Byte+0x72>
        OLED_SCL_Clr();
 800500e:	2200      	movs	r2, #0
 8005010:	0039      	movs	r1, r7
 8005012:	0030      	movs	r0, r6
 8005014:	f001 f978 	bl	8006308 <HAL_GPIO_WritePin>
        if (dat & 0x80)
 8005018:	b263      	sxtb	r3, r4
 800501a:	2b00      	cmp	r3, #0
 800501c:	dbe7      	blt.n	8004fee <OLED_WR_Byte+0x36>
            OLED_SDA_Clr();
 800501e:	2200      	movs	r2, #0
 8005020:	2108      	movs	r1, #8
 8005022:	4640      	mov	r0, r8
 8005024:	f001 f970 	bl	8006308 <HAL_GPIO_WritePin>
 8005028:	e7e6      	b.n	8004ff8 <OLED_WR_Byte+0x40>
    }
//	OLED_CS_Set();
    OLED_DC_Set();
 800502a:	20a0      	movs	r0, #160	; 0xa0
 800502c:	2201      	movs	r2, #1
 800502e:	2140      	movs	r1, #64	; 0x40
 8005030:	05c0      	lsls	r0, r0, #23
 8005032:	f001 f969 	bl	8006308 <HAL_GPIO_WritePin>
}
 8005036:	bc80      	pop	{r7}
 8005038:	46b8      	mov	r8, r7
 800503a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503c:	50000400 	.word	0x50000400

08005040 <OLED_Refresh>:
    OLED_WR_Byte(0xAE, OLED_CMD); //关闭屏幕
}

//更新显存到OLED
void OLED_Refresh(void)
{
 8005040:	b570      	push	{r4, r5, r6, lr}
    uint8_t i, n;
    for (i = 0; i < 8; i++)
 8005042:	4d10      	ldr	r5, [pc, #64]	; (8005084 <OLED_Refresh+0x44>)
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	469c      	mov	ip, r3
 800504a:	4465      	add	r5, ip
{
 800504c:	26b0      	movs	r6, #176	; 0xb0
    {
        OLED_WR_Byte(0xb0 + i, OLED_CMD); //设置行起始地址
 800504e:	2100      	movs	r1, #0
 8005050:	0030      	movs	r0, r6
 8005052:	f7ff ffb1 	bl	8004fb8 <OLED_WR_Byte>
        OLED_WR_Byte(0x00, OLED_CMD);   //设置低列起始地址
 8005056:	2100      	movs	r1, #0
 8005058:	2000      	movs	r0, #0
 800505a:	f7ff ffad 	bl	8004fb8 <OLED_WR_Byte>
        OLED_WR_Byte(0x10, OLED_CMD);   //设置高列起始地址
 800505e:	2100      	movs	r1, #0
 8005060:	2010      	movs	r0, #16
 8005062:	f7ff ffa9 	bl	8004fb8 <OLED_WR_Byte>
        for (n = 0; n < 128; n++)
 8005066:	4b08      	ldr	r3, [pc, #32]	; (8005088 <OLED_Refresh+0x48>)
 8005068:	18ec      	adds	r4, r5, r3
            OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800506a:	7820      	ldrb	r0, [r4, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	f7ff ffa3 	bl	8004fb8 <OLED_WR_Byte>
        for (n = 0; n < 128; n++)
 8005072:	3408      	adds	r4, #8
 8005074:	42ac      	cmp	r4, r5
 8005076:	d1f8      	bne.n	800506a <OLED_Refresh+0x2a>
    for (i = 0; i < 8; i++)
 8005078:	3601      	adds	r6, #1
 800507a:	b2f6      	uxtb	r6, r6
 800507c:	3501      	adds	r5, #1
 800507e:	2eb8      	cmp	r6, #184	; 0xb8
 8005080:	d1e5      	bne.n	800504e <OLED_Refresh+0xe>
    }
}
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	20000d18 	.word	0x20000d18
 8005088:	fffffc00 	.word	0xfffffc00

0800508c <OLED_Clear>:
//清屏函数
void OLED_Clear(void)
{
 800508c:	b510      	push	{r4, lr}
    uint8_t i, n;
    for (i = 0; i < 8; i++)
 800508e:	480a      	ldr	r0, [pc, #40]	; (80050b8 <OLED_Clear+0x2c>)
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	18c2      	adds	r2, r0, r3
 8005096:	3308      	adds	r3, #8
 8005098:	469c      	mov	ip, r3
 800509a:	4460      	add	r0, ip
    {
        for (n = 0; n < 128; n++)
        {
            OLED_GRAM[n][i] = 0;   //清除所有数据
 800509c:	2100      	movs	r1, #0
        for (n = 0; n < 128; n++)
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <OLED_Clear+0x30>)
 80050a0:	18d3      	adds	r3, r2, r3
            OLED_GRAM[n][i] = 0;   //清除所有数据
 80050a2:	7019      	strb	r1, [r3, #0]
        for (n = 0; n < 128; n++)
 80050a4:	3308      	adds	r3, #8
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d1fb      	bne.n	80050a2 <OLED_Clear+0x16>
    for (i = 0; i < 8; i++)
 80050aa:	3201      	adds	r2, #1
 80050ac:	4282      	cmp	r2, r0
 80050ae:	d1f6      	bne.n	800509e <OLED_Clear+0x12>
        }
    }
    OLED_Refresh();   //更新显示
 80050b0:	f7ff ffc6 	bl	8005040 <OLED_Refresh>
}
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	20000d18 	.word	0x20000d18
 80050bc:	fffffc00 	.word	0xfffffc00

080050c0 <OLED_DrawPoint>:
//画点
//x:0~127
//y:0~63
//t:1 填充 0,清空
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 80050c0:	b510      	push	{r4, lr}
    uint8_t i, m, n;
    i = y / 8;
 80050c2:	08cc      	lsrs	r4, r1, #3
    m = y % 8;
    n = 1 << m;
 80050c4:	2307      	movs	r3, #7
 80050c6:	4019      	ands	r1, r3
 80050c8:	3b06      	subs	r3, #6
 80050ca:	408b      	lsls	r3, r1
 80050cc:	b2db      	uxtb	r3, r3
    if (t)
 80050ce:	2a00      	cmp	r2, #0
 80050d0:	d006      	beq.n	80050e0 <OLED_DrawPoint+0x20>
    {
        OLED_GRAM[x][i] |= n;
 80050d2:	00c0      	lsls	r0, r0, #3
 80050d4:	4a06      	ldr	r2, [pc, #24]	; (80050f0 <OLED_DrawPoint+0x30>)
 80050d6:	1810      	adds	r0, r2, r0
 80050d8:	5d02      	ldrb	r2, [r0, r4]
 80050da:	4313      	orrs	r3, r2
 80050dc:	5503      	strb	r3, [r0, r4]
    {
        OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
        OLED_GRAM[x][i] |= n;
        OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
    }
}
 80050de:	bd10      	pop	{r4, pc}
        OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 80050e0:	00c0      	lsls	r0, r0, #3
 80050e2:	4a03      	ldr	r2, [pc, #12]	; (80050f0 <OLED_DrawPoint+0x30>)
 80050e4:	1810      	adds	r0, r2, r0
 80050e6:	5d02      	ldrb	r2, [r0, r4]
 80050e8:	439a      	bics	r2, r3
 80050ea:	5502      	strb	r2, [r0, r4]
}
 80050ec:	e7f7      	b.n	80050de <OLED_DrawPoint+0x1e>
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	20000d18 	.word	0x20000d18

080050f4 <OLED_DrawLine>:

//画线
//x1,y1:起点坐标
//x2,y2:结束坐标
void OLED_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t mode)
{
 80050f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f6:	46de      	mov	lr, fp
 80050f8:	4657      	mov	r7, sl
 80050fa:	464e      	mov	r6, r9
 80050fc:	4645      	mov	r5, r8
 80050fe:	b5e0      	push	{r5, r6, r7, lr}
 8005100:	b085      	sub	sp, #20
 8005102:	ac0e      	add	r4, sp, #56	; 0x38
 8005104:	7824      	ldrb	r4, [r4, #0]
 8005106:	46a1      	mov	r9, r4
    uint16_t t;
    int xerr = 0, yerr = 0, delta_x, delta_y, distance;
    int incx, incy, uRow, uCol;
    delta_x = x2 - x1; //计算坐标增量
 8005108:	9001      	str	r0, [sp, #4]
 800510a:	1a14      	subs	r4, r2, r0
 800510c:	46a3      	mov	fp, r4
    delta_y = y2 - y1;
 800510e:	9102      	str	r1, [sp, #8]
 8005110:	1a5b      	subs	r3, r3, r1
 8005112:	469a      	mov	sl, r3
    uRow = x1; //画线起点坐标
    uCol = y1;
    if (delta_x > 0)
        incx = 1; //设置单步方向
 8005114:	2301      	movs	r3, #1
 8005116:	4698      	mov	r8, r3
    if (delta_x > 0)
 8005118:	2c00      	cmp	r4, #0
 800511a:	dd0e      	ble.n	800513a <OLED_DrawLine+0x46>
    {
        incx = -1;
        delta_x = -delta_x;
    }
    if (delta_y > 0)
        incy = 1;
 800511c:	2301      	movs	r3, #1
 800511e:	9303      	str	r3, [sp, #12]
    if (delta_y > 0)
 8005120:	4653      	mov	r3, sl
 8005122:	2b00      	cmp	r3, #0
 8005124:	dd11      	ble.n	800514a <OLED_DrawLine+0x56>
    else
    {
        incy = -1;
        delta_y = -delta_x;
    }
    if (delta_x > delta_y)
 8005126:	4655      	mov	r5, sl
 8005128:	45da      	cmp	sl, fp
 800512a:	da00      	bge.n	800512e <OLED_DrawLine+0x3a>
 800512c:	465d      	mov	r5, fp
        distance = delta_x; //选取基本增量坐标轴
    else
        distance = delta_y;
    for (t = 0; t < distance + 1; t++)
 800512e:	2d00      	cmp	r5, #0
 8005130:	db43      	blt.n	80051ba <OLED_DrawLine+0xc6>
        incy = 1;
 8005132:	2700      	movs	r7, #0
 8005134:	2600      	movs	r6, #0
 8005136:	2400      	movs	r4, #0
 8005138:	e015      	b.n	8005166 <OLED_DrawLine+0x72>
    else if (delta_x == 0)
 800513a:	2c00      	cmp	r4, #0
 800513c:	d031      	beq.n	80051a2 <OLED_DrawLine+0xae>
        delta_x = -delta_x;
 800513e:	1a83      	subs	r3, r0, r2
 8005140:	469b      	mov	fp, r3
        incx = -1;
 8005142:	2301      	movs	r3, #1
 8005144:	425b      	negs	r3, r3
 8005146:	4698      	mov	r8, r3
 8005148:	e7e8      	b.n	800511c <OLED_DrawLine+0x28>
    else if (delta_y == 0)
 800514a:	4653      	mov	r3, sl
 800514c:	2b00      	cmp	r3, #0
 800514e:	d021      	beq.n	8005194 <OLED_DrawLine+0xa0>
        delta_y = -delta_x;
 8005150:	465b      	mov	r3, fp
 8005152:	425b      	negs	r3, r3
 8005154:	469a      	mov	sl, r3
        incy = -1;
 8005156:	2301      	movs	r3, #1
 8005158:	425b      	negs	r3, r3
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	e7e3      	b.n	8005126 <OLED_DrawLine+0x32>
    for (t = 0; t < distance + 1; t++)
 800515e:	3401      	adds	r4, #1
 8005160:	b2a4      	uxth	r4, r4
 8005162:	42ac      	cmp	r4, r5
 8005164:	dc29      	bgt.n	80051ba <OLED_DrawLine+0xc6>
    {
        OLED_DrawPoint(uRow, uCol, mode); //画点
 8005166:	466b      	mov	r3, sp
 8005168:	7a19      	ldrb	r1, [r3, #8]
 800516a:	7918      	ldrb	r0, [r3, #4]
 800516c:	464a      	mov	r2, r9
 800516e:	f7ff ffa7 	bl	80050c0 <OLED_DrawPoint>
        xerr += delta_x;
 8005172:	445e      	add	r6, fp
        yerr += delta_y;
 8005174:	4457      	add	r7, sl
        if (xerr > distance)
 8005176:	42ae      	cmp	r6, r5
 8005178:	dd03      	ble.n	8005182 <OLED_DrawLine+0x8e>
        {
            xerr -= distance;
 800517a:	1b76      	subs	r6, r6, r5
            uRow += incx;
 800517c:	9b01      	ldr	r3, [sp, #4]
 800517e:	4443      	add	r3, r8
 8005180:	9301      	str	r3, [sp, #4]
        }
        if (yerr > distance)
 8005182:	42af      	cmp	r7, r5
 8005184:	ddeb      	ble.n	800515e <OLED_DrawLine+0x6a>
        {
            yerr -= distance;
 8005186:	1b7f      	subs	r7, r7, r5
            uCol += incy;
 8005188:	9b02      	ldr	r3, [sp, #8]
 800518a:	9a03      	ldr	r2, [sp, #12]
 800518c:	4694      	mov	ip, r2
 800518e:	4463      	add	r3, ip
 8005190:	9302      	str	r3, [sp, #8]
 8005192:	e7e4      	b.n	800515e <OLED_DrawLine+0x6a>
    if (delta_x > delta_y)
 8005194:	465b      	mov	r3, fp
 8005196:	43dd      	mvns	r5, r3
 8005198:	17ed      	asrs	r5, r5, #31
 800519a:	401d      	ands	r5, r3
        incy = 0; //水平线
 800519c:	4653      	mov	r3, sl
 800519e:	9303      	str	r3, [sp, #12]
 80051a0:	e7c7      	b.n	8005132 <OLED_DrawLine+0x3e>
    if (delta_y > 0)
 80051a2:	4653      	mov	r3, sl
        incx = 0; //垂直线
 80051a4:	46a0      	mov	r8, r4
    if (delta_y > 0)
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	ddcf      	ble.n	800514a <OLED_DrawLine+0x56>
    if (delta_x > delta_y)
 80051aa:	4653      	mov	r3, sl
 80051ac:	43dd      	mvns	r5, r3
 80051ae:	17ed      	asrs	r5, r5, #31
 80051b0:	401d      	ands	r5, r3
        incx = 0; //垂直线
 80051b2:	46d8      	mov	r8, fp
        incy = 1;
 80051b4:	2301      	movs	r3, #1
 80051b6:	9303      	str	r3, [sp, #12]
 80051b8:	e7bb      	b.n	8005132 <OLED_DrawLine+0x3e>
        }
    }
}
 80051ba:	b005      	add	sp, #20
 80051bc:	bcf0      	pop	{r4, r5, r6, r7}
 80051be:	46bb      	mov	fp, r7
 80051c0:	46b2      	mov	sl, r6
 80051c2:	46a9      	mov	r9, r5
 80051c4:	46a0      	mov	r8, r4
 80051c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051c8 <OLED_ShowChar>:
//y:0~63
//size1:选择字体 6x8/6x12/8x16/12x24
//mode:0,反色显示;1,正常显示
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1,
        uint8_t mode)
{
 80051c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ca:	46de      	mov	lr, fp
 80051cc:	4657      	mov	r7, sl
 80051ce:	464e      	mov	r6, r9
 80051d0:	4645      	mov	r5, r8
 80051d2:	b5e0      	push	{r5, r6, r7, lr}
 80051d4:	b083      	sub	sp, #12
 80051d6:	0006      	movs	r6, r0
 80051d8:	9100      	str	r1, [sp, #0]
 80051da:	a90c      	add	r1, sp, #48	; 0x30
 80051dc:	7809      	ldrb	r1, [r1, #0]
 80051de:	4689      	mov	r9, r1
    uint8_t i, m, temp, size2, chr1;
    uint8_t x0 = x, y0 = y;
    if (size1 == 8)
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d02a      	beq.n	800523a <OLED_ShowChar+0x72>
            x = x0;
            y0 = y0 + 8;
        }
        y = y0;
    }
}
 80051e4:	b003      	add	sp, #12
 80051e6:	bcf0      	pop	{r4, r5, r6, r7}
 80051e8:	46bb      	mov	fp, r7
 80051ea:	46b2      	mov	sl, r6
 80051ec:	46a9      	mov	r9, r5
 80051ee:	46a0      	mov	r8, r4
 80051f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                OLED_DrawPoint(x, y, !mode);
 80051f2:	4652      	mov	r2, sl
 80051f4:	0021      	movs	r1, r4
 80051f6:	0030      	movs	r0, r6
 80051f8:	f7ff ff62 	bl	80050c0 <OLED_DrawPoint>
            temp >>= 1;
 80051fc:	086d      	lsrs	r5, r5, #1
            y++;
 80051fe:	3401      	adds	r4, #1
 8005200:	b2e4      	uxtb	r4, r4
        for (m = 0; m < 8; m++)
 8005202:	42a7      	cmp	r7, r4
 8005204:	d008      	beq.n	8005218 <OLED_ShowChar+0x50>
            if (temp & 0x01)
 8005206:	4643      	mov	r3, r8
 8005208:	422b      	tst	r3, r5
 800520a:	d0f2      	beq.n	80051f2 <OLED_ShowChar+0x2a>
                OLED_DrawPoint(x, y, mode);
 800520c:	464a      	mov	r2, r9
 800520e:	0021      	movs	r1, r4
 8005210:	0030      	movs	r0, r6
 8005212:	f7ff ff55 	bl	80050c0 <OLED_DrawPoint>
 8005216:	e7f1      	b.n	80051fc <OLED_ShowChar+0x34>
        x++;
 8005218:	3601      	adds	r6, #1
 800521a:	b2f6      	uxtb	r6, r6
    for (i = 0; i < size2; i++)
 800521c:	2301      	movs	r3, #1
 800521e:	469c      	mov	ip, r3
 8005220:	44e3      	add	fp, ip
 8005222:	9b01      	ldr	r3, [sp, #4]
 8005224:	42b3      	cmp	r3, r6
 8005226:	d0dd      	beq.n	80051e4 <OLED_ShowChar+0x1c>
            temp = asc2_0806[chr1][i];
 8005228:	465b      	mov	r3, fp
 800522a:	781d      	ldrb	r5, [r3, #0]
        for (m = 0; m < 8; m++)
 800522c:	9c00      	ldr	r4, [sp, #0]
 800522e:	0027      	movs	r7, r4
 8005230:	3708      	adds	r7, #8
 8005232:	b2ff      	uxtb	r7, r7
            if (temp & 0x01)
 8005234:	2301      	movs	r3, #1
 8005236:	4698      	mov	r8, r3
 8005238:	e7e5      	b.n	8005206 <OLED_ShowChar+0x3e>
    chr1 = chr - ' ';  //计算偏移后的值
 800523a:	3a20      	subs	r2, #32
 800523c:	b2d3      	uxtb	r3, r2
 800523e:	005a      	lsls	r2, r3, #1
 8005240:	18d3      	adds	r3, r2, r3
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4a05      	ldr	r2, [pc, #20]	; (800525c <OLED_ShowChar+0x94>)
 8005246:	469b      	mov	fp, r3
 8005248:	4493      	add	fp, r2
 800524a:	1d83      	adds	r3, r0, #6
 800524c:	b2db      	uxtb	r3, r3
 800524e:	9301      	str	r3, [sp, #4]
                OLED_DrawPoint(x, y, !mode);
 8005250:	000a      	movs	r2, r1
 8005252:	4253      	negs	r3, r2
 8005254:	415a      	adcs	r2, r3
 8005256:	4692      	mov	sl, r2
 8005258:	e7e6      	b.n	8005228 <OLED_ShowChar+0x60>
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	0800d668 	.word	0x0800d668

08005260 <OLED_ShowString>:
//size1:字体大小
//*chr:字符串起始地址
//mode:0,反色显示;1,正常显示
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1,
        uint8_t mode)
{
 8005260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005262:	46ce      	mov	lr, r9
 8005264:	4647      	mov	r7, r8
 8005266:	b580      	push	{r7, lr}
 8005268:	b083      	sub	sp, #12
 800526a:	0004      	movs	r4, r0
 800526c:	000f      	movs	r7, r1
 800526e:	0015      	movs	r5, r2
 8005270:	001e      	movs	r6, r3
 8005272:	ab0a      	add	r3, sp, #40	; 0x28
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	4698      	mov	r8, r3
    while ((*chr >= ' ') && (*chr <= '~')) //判断是不是非法字符!
 8005278:	7812      	ldrb	r2, [r2, #0]
 800527a:	0013      	movs	r3, r2
 800527c:	3b20      	subs	r3, #32
 800527e:	2b5e      	cmp	r3, #94	; 0x5e
 8005280:	d816      	bhi.n	80052b0 <OLED_ShowString+0x50>
    {
        OLED_ShowChar(x, y, *chr, size1, mode);
        if (size1 == 8)
            x += 6;
        else
            x += size1 / 2;
 8005282:	0873      	lsrs	r3, r6, #1
 8005284:	4699      	mov	r9, r3
 8005286:	e007      	b.n	8005298 <OLED_ShowString+0x38>
 8005288:	444c      	add	r4, r9
 800528a:	b2e4      	uxtb	r4, r4
        chr++;
 800528c:	3501      	adds	r5, #1
    while ((*chr >= ' ') && (*chr <= '~')) //判断是不是非法字符!
 800528e:	782a      	ldrb	r2, [r5, #0]
 8005290:	0013      	movs	r3, r2
 8005292:	3b20      	subs	r3, #32
 8005294:	2b5e      	cmp	r3, #94	; 0x5e
 8005296:	d80b      	bhi.n	80052b0 <OLED_ShowString+0x50>
        OLED_ShowChar(x, y, *chr, size1, mode);
 8005298:	4643      	mov	r3, r8
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	0033      	movs	r3, r6
 800529e:	0039      	movs	r1, r7
 80052a0:	0020      	movs	r0, r4
 80052a2:	f7ff ff91 	bl	80051c8 <OLED_ShowChar>
        if (size1 == 8)
 80052a6:	2e08      	cmp	r6, #8
 80052a8:	d1ee      	bne.n	8005288 <OLED_ShowString+0x28>
            x += 6;
 80052aa:	3406      	adds	r4, #6
 80052ac:	b2e4      	uxtb	r4, r4
 80052ae:	e7ed      	b.n	800528c <OLED_ShowString+0x2c>
    }
}
 80052b0:	b003      	add	sp, #12
 80052b2:	bcc0      	pop	{r6, r7}
 80052b4:	46b9      	mov	r9, r7
 80052b6:	46b0      	mov	r8, r6
 80052b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052ba <OLED_Init>:
        }
    }
}
//OLED的初始化
void OLED_Init(void)
{
 80052ba:	b510      	push	{r4, lr}
// 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//速度50MHz
// 	GPIO_Init(GPIOA, &GPIO_InitStructure);	  //初始化GPIOA
// 	GPIO_SetBits(GPIOA,GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_15);

    OLED_RES_Clr();
 80052bc:	24a0      	movs	r4, #160	; 0xa0
 80052be:	05e4      	lsls	r4, r4, #23
 80052c0:	2200      	movs	r2, #0
 80052c2:	2180      	movs	r1, #128	; 0x80
 80052c4:	0020      	movs	r0, r4
 80052c6:	f001 f81f 	bl	8006308 <HAL_GPIO_WritePin>
//	delay_ms(200);
    OLED_RES_Set();
 80052ca:	2201      	movs	r2, #1
 80052cc:	2180      	movs	r1, #128	; 0x80
 80052ce:	0020      	movs	r0, r4
 80052d0:	f001 f81a 	bl	8006308 <HAL_GPIO_WritePin>

    OLED_WR_Byte(0xAE, OLED_CMD);   //--turn off oled panel
 80052d4:	2100      	movs	r1, #0
 80052d6:	20ae      	movs	r0, #174	; 0xae
 80052d8:	f7ff fe6e 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x00, OLED_CMD);   //---set low column address
 80052dc:	2100      	movs	r1, #0
 80052de:	2000      	movs	r0, #0
 80052e0:	f7ff fe6a 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x10, OLED_CMD);   //---set high column address
 80052e4:	2100      	movs	r1, #0
 80052e6:	2010      	movs	r0, #16
 80052e8:	f7ff fe66 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80052ec:	2100      	movs	r1, #0
 80052ee:	2040      	movs	r0, #64	; 0x40
 80052f0:	f7ff fe62 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x81, OLED_CMD);   //--set contrast control register
 80052f4:	2100      	movs	r1, #0
 80052f6:	2081      	movs	r0, #129	; 0x81
 80052f8:	f7ff fe5e 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xCF, OLED_CMD);   // Set SEG Output Current Brightness
 80052fc:	2100      	movs	r1, #0
 80052fe:	20cf      	movs	r0, #207	; 0xcf
 8005300:	f7ff fe5a 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8005304:	2100      	movs	r1, #0
 8005306:	20a1      	movs	r0, #161	; 0xa1
 8005308:	f7ff fe56 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xC8, OLED_CMD); //Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800530c:	2100      	movs	r1, #0
 800530e:	20c8      	movs	r0, #200	; 0xc8
 8005310:	f7ff fe52 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xA6, OLED_CMD);   //--set normal display
 8005314:	2100      	movs	r1, #0
 8005316:	20a6      	movs	r0, #166	; 0xa6
 8005318:	f7ff fe4e 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xA8, OLED_CMD);   //--set multiplex ratio(1 to 64)
 800531c:	2100      	movs	r1, #0
 800531e:	20a8      	movs	r0, #168	; 0xa8
 8005320:	f7ff fe4a 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x3f, OLED_CMD);   //--1/64 duty
 8005324:	2100      	movs	r1, #0
 8005326:	203f      	movs	r0, #63	; 0x3f
 8005328:	f7ff fe46 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800532c:	2100      	movs	r1, #0
 800532e:	20d3      	movs	r0, #211	; 0xd3
 8005330:	f7ff fe42 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x00, OLED_CMD);   //-not offset
 8005334:	2100      	movs	r1, #0
 8005336:	2000      	movs	r0, #0
 8005338:	f7ff fe3e 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800533c:	2100      	movs	r1, #0
 800533e:	20d5      	movs	r0, #213	; 0xd5
 8005340:	f7ff fe3a 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8005344:	2100      	movs	r1, #0
 8005346:	2080      	movs	r0, #128	; 0x80
 8005348:	f7ff fe36 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xD9, OLED_CMD);   //--set pre-charge period
 800534c:	2100      	movs	r1, #0
 800534e:	20d9      	movs	r0, #217	; 0xd9
 8005350:	f7ff fe32 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xF1, OLED_CMD); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8005354:	2100      	movs	r1, #0
 8005356:	20f1      	movs	r0, #241	; 0xf1
 8005358:	f7ff fe2e 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xDA, OLED_CMD);   //--set com pins hardware configuration
 800535c:	2100      	movs	r1, #0
 800535e:	20da      	movs	r0, #218	; 0xda
 8005360:	f7ff fe2a 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x12, OLED_CMD);
 8005364:	2100      	movs	r1, #0
 8005366:	2012      	movs	r0, #18
 8005368:	f7ff fe26 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xDB, OLED_CMD);   //--set vcomh
 800536c:	2100      	movs	r1, #0
 800536e:	20db      	movs	r0, #219	; 0xdb
 8005370:	f7ff fe22 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x40, OLED_CMD);   //Set VCOM Deselect Level
 8005374:	2100      	movs	r1, #0
 8005376:	2040      	movs	r0, #64	; 0x40
 8005378:	f7ff fe1e 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x20, OLED_CMD);   //-Set Page Addressing Mode (0x00/0x01/0x02)
 800537c:	2100      	movs	r1, #0
 800537e:	2020      	movs	r0, #32
 8005380:	f7ff fe1a 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x02, OLED_CMD);   //
 8005384:	2100      	movs	r1, #0
 8005386:	2002      	movs	r0, #2
 8005388:	f7ff fe16 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x8D, OLED_CMD);   //--set Charge Pump enable/disable
 800538c:	2100      	movs	r1, #0
 800538e:	208d      	movs	r0, #141	; 0x8d
 8005390:	f7ff fe12 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0x14, OLED_CMD);   //--set(0x10) disable
 8005394:	2100      	movs	r1, #0
 8005396:	2014      	movs	r0, #20
 8005398:	f7ff fe0e 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xA4, OLED_CMD);   // Disable Entire Display On (0xa4/0xa5)
 800539c:	2100      	movs	r1, #0
 800539e:	20a4      	movs	r0, #164	; 0xa4
 80053a0:	f7ff fe0a 	bl	8004fb8 <OLED_WR_Byte>
    OLED_WR_Byte(0xA6, OLED_CMD);   // Disable Inverse Display On (0xa6/a7) 
 80053a4:	2100      	movs	r1, #0
 80053a6:	20a6      	movs	r0, #166	; 0xa6
 80053a8:	f7ff fe06 	bl	8004fb8 <OLED_WR_Byte>
    OLED_Clear();
 80053ac:	f7ff fe6e 	bl	800508c <OLED_Clear>
    OLED_WR_Byte(0xAF, OLED_CMD);
 80053b0:	2100      	movs	r1, #0
 80053b2:	20af      	movs	r0, #175	; 0xaf
 80053b4:	f7ff fe00 	bl	8004fb8 <OLED_WR_Byte>
}
 80053b8:	bd10      	pop	{r4, pc}
	...

080053bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053bc:	b510      	push	{r4, lr}
 80053be:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80053c0:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <HAL_InitTick+0x44>)
 80053c2:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80053c4:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0U)
 80053c6:	2900      	cmp	r1, #0
 80053c8:	d100      	bne.n	80053cc <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 80053ca:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80053cc:	20fa      	movs	r0, #250	; 0xfa
 80053ce:	0080      	lsls	r0, r0, #2
 80053d0:	f7fa feb4 	bl	800013c <__udivsi3>
 80053d4:	0001      	movs	r1, r0
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <HAL_InitTick+0x48>)
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	f7fa feaf 	bl	800013c <__udivsi3>
 80053de:	f000 fd09 	bl	8005df4 <HAL_SYSTICK_Config>
 80053e2:	0003      	movs	r3, r0
      status = HAL_ERROR;
 80053e4:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1ef      	bne.n	80053ca <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ea:	2c03      	cmp	r4, #3
 80053ec:	d8ed      	bhi.n	80053ca <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053ee:	2200      	movs	r2, #0
 80053f0:	0021      	movs	r1, r4
 80053f2:	4240      	negs	r0, r0
 80053f4:	f000 fcc0 	bl	8005d78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053f8:	4b03      	ldr	r3, [pc, #12]	; (8005408 <HAL_InitTick+0x4c>)
 80053fa:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80053fc:	2000      	movs	r0, #0
 80053fe:	e7e4      	b.n	80053ca <HAL_InitTick+0xe>
 8005400:	2000007c 	.word	0x2000007c
 8005404:	20000078 	.word	0x20000078
 8005408:	20000080 	.word	0x20000080

0800540c <HAL_Init>:
{
 800540c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800540e:	4a08      	ldr	r2, [pc, #32]	; (8005430 <HAL_Init+0x24>)
 8005410:	6811      	ldr	r1, [r2, #0]
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	430b      	orrs	r3, r1
 8005418:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800541a:	2000      	movs	r0, #0
 800541c:	f7ff ffce 	bl	80053bc <HAL_InitTick>
 8005420:	1e04      	subs	r4, r0, #0
 8005422:	d002      	beq.n	800542a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8005424:	2401      	movs	r4, #1
}
 8005426:	0020      	movs	r0, r4
 8005428:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 800542a:	f7ff fb7d 	bl	8004b28 <HAL_MspInit>
 800542e:	e7fa      	b.n	8005426 <HAL_Init+0x1a>
 8005430:	40022000 	.word	0x40022000

08005434 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005434:	4a03      	ldr	r2, [pc, #12]	; (8005444 <HAL_IncTick+0x10>)
 8005436:	6811      	ldr	r1, [r2, #0]
 8005438:	4b03      	ldr	r3, [pc, #12]	; (8005448 <HAL_IncTick+0x14>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	185b      	adds	r3, r3, r1
 800543e:	6013      	str	r3, [r2, #0]
}
 8005440:	4770      	bx	lr
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	20001118 	.word	0x20001118
 8005448:	2000007c 	.word	0x2000007c

0800544c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800544c:	4b01      	ldr	r3, [pc, #4]	; (8005454 <HAL_GetTick+0x8>)
 800544e:	6818      	ldr	r0, [r3, #0]
}
 8005450:	4770      	bx	lr
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	20001118 	.word	0x20001118

08005458 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545a:	b083      	sub	sp, #12
 800545c:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800545e:	2300      	movs	r3, #0
 8005460:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005462:	2800      	cmp	r0, #0
 8005464:	d100      	bne.n	8005468 <HAL_ADC_Init+0x10>
 8005466:	e11f      	b.n	80056a8 <HAL_ADC_Init+0x250>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005468:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800546a:	2b00      	cmp	r3, #0
 800546c:	d100      	bne.n	8005470 <HAL_ADC_Init+0x18>
 800546e:	e0c6      	b.n	80055fe <HAL_ADC_Init+0x1a6>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005470:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	00d2      	lsls	r2, r2, #3
 8005476:	d416      	bmi.n	80054a6 <HAL_ADC_Init+0x4e>
  MODIFY_REG(ADCx->CR,
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	498c      	ldr	r1, [pc, #560]	; (80056ac <HAL_ADC_Init+0x254>)
 800547c:	4011      	ands	r1, r2
 800547e:	2280      	movs	r2, #128	; 0x80
 8005480:	0552      	lsls	r2, r2, #21
 8005482:	430a      	orrs	r2, r1
 8005484:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005486:	4b8a      	ldr	r3, [pc, #552]	; (80056b0 <HAL_ADC_Init+0x258>)
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	498a      	ldr	r1, [pc, #552]	; (80056b4 <HAL_ADC_Init+0x25c>)
 800548c:	f7fa fe56 	bl	800013c <__udivsi3>
 8005490:	0040      	lsls	r0, r0, #1
 8005492:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8005494:	9b01      	ldr	r3, [sp, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <HAL_ADC_Init+0x4e>
    {
      wait_loop_index--;
 800549a:	9b01      	ldr	r3, [sp, #4]
 800549c:	3b01      	subs	r3, #1
 800549e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80054a0:	9b01      	ldr	r3, [sp, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f9      	bne.n	800549a <HAL_ADC_Init+0x42>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054a6:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054a8:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054aa:	2000      	movs	r0, #0
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	d408      	bmi.n	80054c2 <HAL_ADC_Init+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054b2:	2210      	movs	r2, #16
 80054b4:	4313      	orrs	r3, r2
 80054b6:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80054ba:	3a0f      	subs	r2, #15
 80054bc:	4313      	orrs	r3, r2
 80054be:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80054c0:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054c2:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054c6:	2210      	movs	r2, #16
 80054c8:	401a      	ands	r2, r3
 80054ca:	2304      	movs	r3, #4
 80054cc:	402b      	ands	r3, r5
 80054ce:	4313      	orrs	r3, r2
 80054d0:	d000      	beq.n	80054d4 <HAL_ADC_Init+0x7c>
 80054d2:	e0e2      	b.n	800569a <HAL_ADC_Init+0x242>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054d4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80054d6:	4d78      	ldr	r5, [pc, #480]	; (80056b8 <HAL_ADC_Init+0x260>)
 80054d8:	402a      	ands	r2, r5
 80054da:	3506      	adds	r5, #6
 80054dc:	35ff      	adds	r5, #255	; 0xff
 80054de:	432a      	orrs	r2, r5
 80054e0:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054e2:	688a      	ldr	r2, [r1, #8]
 80054e4:	07d2      	lsls	r2, r2, #31
 80054e6:	d42e      	bmi.n	8005546 <HAL_ADC_Init+0xee>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80054e8:	68cb      	ldr	r3, [r1, #12]
 80054ea:	2218      	movs	r2, #24
 80054ec:	4393      	bics	r3, r2
 80054ee:	68a2      	ldr	r2, [r4, #8]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60cb      	str	r3, [r1, #12]
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                   hadc->Init.Oversampling.Ratio         |
                   hadc->Init.Oversampling.RightBitShift |
                   hadc->Init.Oversampling.TriggeredMode |
 80054f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054f6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80054f8:	4313      	orrs	r3, r2
 80054fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80054fc:	4313      	orrs	r3, r2
 80054fe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005500:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005502:	6862      	ldr	r2, [r4, #4]
 8005504:	0f92      	lsrs	r2, r2, #30
 8005506:	0792      	lsls	r2, r2, #30
                   hadc->Init.Oversampling.TriggeredMode |
 8005508:	4313      	orrs	r3, r2
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800550a:	223c      	movs	r2, #60	; 0x3c
 800550c:	5ca2      	ldrb	r2, [r4, r2]
 800550e:	2a01      	cmp	r2, #1
 8005510:	d07c      	beq.n	800560c <HAL_ADC_Init+0x1b4>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005512:	6821      	ldr	r1, [r4, #0]
 8005514:	690a      	ldr	r2, [r1, #16]
 8005516:	4d69      	ldr	r5, [pc, #420]	; (80056bc <HAL_ADC_Init+0x264>)
 8005518:	402a      	ands	r2, r5
 800551a:	431a      	orrs	r2, r3
 800551c:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800551e:	6861      	ldr	r1, [r4, #4]
 8005520:	004a      	lsls	r2, r1, #1
 8005522:	0852      	lsrs	r2, r2, #1
 8005524:	2580      	movs	r5, #128	; 0x80
 8005526:	05ed      	lsls	r5, r5, #23
 8005528:	42aa      	cmp	r2, r5
 800552a:	d00c      	beq.n	8005546 <HAL_ADC_Init+0xee>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800552c:	2280      	movs	r2, #128	; 0x80
 800552e:	0612      	lsls	r2, r2, #24
 8005530:	4291      	cmp	r1, r2
 8005532:	d008      	beq.n	8005546 <HAL_ADC_Init+0xee>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005534:	4d62      	ldr	r5, [pc, #392]	; (80056c0 <HAL_ADC_Init+0x268>)
 8005536:	682a      	ldr	r2, [r5, #0]
 8005538:	4e62      	ldr	r6, [pc, #392]	; (80056c4 <HAL_ADC_Init+0x26c>)
 800553a:	4032      	ands	r2, r6
 800553c:	26f0      	movs	r6, #240	; 0xf0
 800553e:	03b6      	lsls	r6, r6, #14
 8005540:	4031      	ands	r1, r6
 8005542:	4311      	orrs	r1, r2
 8005544:	6029      	str	r1, [r5, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005546:	7e21      	ldrb	r1, [r4, #24]
 8005548:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800554a:	7e62      	ldrb	r2, [r4, #25]
 800554c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800554e:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005550:	7ea6      	ldrb	r6, [r4, #26]
 8005552:	0372      	lsls	r2, r6, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005554:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8005556:	2f00      	cmp	r7, #0
 8005558:	d001      	beq.n	800555e <HAL_ADC_Init+0x106>
 800555a:	2780      	movs	r7, #128	; 0x80
 800555c:	017f      	lsls	r7, r7, #5
 800555e:	68e5      	ldr	r5, [r4, #12]
 8005560:	4329      	orrs	r1, r5
 8005562:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                           |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005564:	6925      	ldr	r5, [r4, #16]
 8005566:	2d00      	cmp	r5, #0
 8005568:	db52      	blt.n	8005610 <HAL_ADC_Init+0x1b8>
 800556a:	2580      	movs	r5, #128	; 0x80
 800556c:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800556e:	222c      	movs	r2, #44	; 0x2c
 8005570:	5ca2      	ldrb	r2, [r4, r2]
 8005572:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005574:	430a      	orrs	r2, r1
 8005576:	433a      	orrs	r2, r7
 8005578:	432a      	orrs	r2, r5

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800557a:	2120      	movs	r1, #32
 800557c:	5c61      	ldrb	r1, [r4, r1]
 800557e:	2901      	cmp	r1, #1
 8005580:	d049      	beq.n	8005616 <HAL_ADC_Init+0x1be>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005582:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005584:	2900      	cmp	r1, #0
 8005586:	d005      	beq.n	8005594 <HAL_ADC_Init+0x13c>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005588:	25e0      	movs	r5, #224	; 0xe0
 800558a:	006d      	lsls	r5, r5, #1
 800558c:	4029      	ands	r1, r5
 800558e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005590:	4329      	orrs	r1, r5
 8005592:	430a      	orrs	r2, r1
                   hadc->Init.ExternalTrigConvEdge);
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	68e9      	ldr	r1, [r5, #12]
 8005598:	4e4b      	ldr	r6, [pc, #300]	; (80056c8 <HAL_ADC_Init+0x270>)
 800559a:	4031      	ands	r1, r6
 800559c:	4311      	orrs	r1, r2
 800559e:	60e9      	str	r1, [r5, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80055a0:	6825      	ldr	r5, [r4, #0]
 80055a2:	6929      	ldr	r1, [r5, #16]
 80055a4:	4e49      	ldr	r6, [pc, #292]	; (80056cc <HAL_ADC_Init+0x274>)
 80055a6:	4031      	ands	r1, r6
 80055a8:	430b      	orrs	r3, r1
 80055aa:	612b      	str	r3, [r5, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80055ac:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 80055ae:	694b      	ldr	r3, [r1, #20]
 80055b0:	2507      	movs	r5, #7
 80055b2:	43ab      	bics	r3, r5
 80055b4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80055b6:	432b      	orrs	r3, r5
 80055b8:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80055ba:	6825      	ldr	r5, [r4, #0]
 80055bc:	6969      	ldr	r1, [r5, #20]
 80055be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	2670      	movs	r6, #112	; 0x70
 80055c4:	43b1      	bics	r1, r6
 80055c6:	430b      	orrs	r3, r1
 80055c8:	616b      	str	r3, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d131      	bne.n	8005634 <HAL_ADC_Init+0x1dc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80055d0:	6821      	ldr	r1, [r4, #0]
 80055d2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80055d4:	3b10      	subs	r3, #16
 80055d6:	432b      	orrs	r3, r5
 80055d8:	628b      	str	r3, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	493c      	ldr	r1, [pc, #240]	; (80056d0 <HAL_ADC_Init+0x278>)
 80055e0:	400b      	ands	r3, r1
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d050      	beq.n	8005688 <HAL_ADC_Init+0x230>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80055e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055e8:	2212      	movs	r2, #18
 80055ea:	4393      	bics	r3, r2
 80055ec:	3a02      	subs	r2, #2
 80055ee:	4313      	orrs	r3, r2
 80055f0:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80055f4:	3a0f      	subs	r2, #15
 80055f6:	4313      	orrs	r3, r2
 80055f8:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80055fa:	2001      	movs	r0, #1
 80055fc:	e052      	b.n	80056a4 <HAL_ADC_Init+0x24c>
    HAL_ADC_MspInit(hadc);
 80055fe:	f7ff faab 	bl	8004b58 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005602:	2300      	movs	r3, #0
 8005604:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8005606:	2254      	movs	r2, #84	; 0x54
 8005608:	54a3      	strb	r3, [r4, r2]
 800560a:	e731      	b.n	8005470 <HAL_ADC_Init+0x18>
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 800560c:	4313      	orrs	r3, r2
 800560e:	e780      	b.n	8005512 <HAL_ADC_Init+0xba>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005610:	006d      	lsls	r5, r5, #1
 8005612:	086d      	lsrs	r5, r5, #1
 8005614:	e7ab      	b.n	800556e <HAL_ADC_Init+0x116>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005616:	2e00      	cmp	r6, #0
 8005618:	d103      	bne.n	8005622 <HAL_ADC_Init+0x1ca>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800561a:	2180      	movs	r1, #128	; 0x80
 800561c:	0249      	lsls	r1, r1, #9
 800561e:	430a      	orrs	r2, r1
 8005620:	e7af      	b.n	8005582 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005622:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005624:	2520      	movs	r5, #32
 8005626:	4329      	orrs	r1, r5
 8005628:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800562a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800562c:	3d1f      	subs	r5, #31
 800562e:	4329      	orrs	r1, r5
 8005630:	65e1      	str	r1, [r4, #92]	; 0x5c
 8005632:	e7a6      	b.n	8005582 <HAL_ADC_Init+0x12a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005634:	2180      	movs	r1, #128	; 0x80
 8005636:	0389      	lsls	r1, r1, #14
 8005638:	428b      	cmp	r3, r1
 800563a:	d1ce      	bne.n	80055da <HAL_ADC_Init+0x182>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800563c:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800563e:	43eb      	mvns	r3, r5
 8005640:	071b      	lsls	r3, r3, #28
 8005642:	d00b      	beq.n	800565c <HAL_ADC_Init+0x204>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005644:	2301      	movs	r3, #1
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8005646:	260f      	movs	r6, #15
 8005648:	0099      	lsls	r1, r3, #2
 800564a:	002f      	movs	r7, r5
 800564c:	40cf      	lsrs	r7, r1
 800564e:	0039      	movs	r1, r7
 8005650:	4031      	ands	r1, r6
 8005652:	290f      	cmp	r1, #15
 8005654:	d00f      	beq.n	8005676 <HAL_ADC_Init+0x21e>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005656:	3301      	adds	r3, #1
 8005658:	2b08      	cmp	r3, #8
 800565a:	d1f5      	bne.n	8005648 <HAL_ADC_Init+0x1f0>
        MODIFY_REG(hadc->Instance->CHSELR,
 800565c:	6826      	ldr	r6, [r4, #0]
 800565e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005660:	69e3      	ldr	r3, [r4, #28]
 8005662:	3b01      	subs	r3, #1
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	211c      	movs	r1, #28
 8005668:	4019      	ands	r1, r3
 800566a:	2310      	movs	r3, #16
 800566c:	425b      	negs	r3, r3
 800566e:	408b      	lsls	r3, r1
 8005670:	431d      	orrs	r5, r3
 8005672:	62b5      	str	r5, [r6, #40]	; 0x28
 8005674:	e7b1      	b.n	80055da <HAL_ADC_Init+0x182>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8005676:	2b01      	cmp	r3, #1
 8005678:	d1f0      	bne.n	800565c <HAL_ADC_Init+0x204>
        SET_BIT(hadc->Instance->CHSELR,
 800567a:	6821      	ldr	r1, [r4, #0]
 800567c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800567e:	2310      	movs	r3, #16
 8005680:	425b      	negs	r3, r3
 8005682:	432b      	orrs	r3, r5
 8005684:	628b      	str	r3, [r1, #40]	; 0x28
 8005686:	e7a8      	b.n	80055da <HAL_ADC_Init+0x182>
      ADC_CLEAR_ERRORCODE(hadc);
 8005688:	2300      	movs	r3, #0
 800568a:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800568c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800568e:	2203      	movs	r2, #3
 8005690:	4393      	bics	r3, r2
 8005692:	3a02      	subs	r2, #2
 8005694:	4313      	orrs	r3, r2
 8005696:	65a3      	str	r3, [r4, #88]	; 0x58
 8005698:	e004      	b.n	80056a4 <HAL_ADC_Init+0x24c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800569a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800569c:	2210      	movs	r2, #16
 800569e:	4313      	orrs	r3, r2
 80056a0:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80056a2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80056a4:	b003      	add	sp, #12
 80056a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80056a8:	2001      	movs	r0, #1
 80056aa:	e7fb      	b.n	80056a4 <HAL_ADC_Init+0x24c>
 80056ac:	6fffffe8 	.word	0x6fffffe8
 80056b0:	20000078 	.word	0x20000078
 80056b4:	00030d40 	.word	0x00030d40
 80056b8:	fffffefd 	.word	0xfffffefd
 80056bc:	1ffffc02 	.word	0x1ffffc02
 80056c0:	40012708 	.word	0x40012708
 80056c4:	ffc3ffff 	.word	0xffc3ffff
 80056c8:	fffe0219 	.word	0xfffe0219
 80056cc:	dffffc02 	.word	0xdffffc02
 80056d0:	833fffe7 	.word	0x833fffe7

080056d4 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80056d4:	4770      	bx	lr

080056d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80056d6:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80056d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80056da:	f7ff fffb 	bl	80056d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056de:	bd10      	pop	{r4, pc}

080056e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80056e0:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e2:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80056e4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80056e6:	2240      	movs	r2, #64	; 0x40
 80056e8:	4313      	orrs	r3, r2
 80056ea:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80056ec:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80056ee:	3a3c      	subs	r2, #60	; 0x3c
 80056f0:	4313      	orrs	r3, r2
 80056f2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80056f4:	f7ff fa04 	bl	8004b00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056f8:	bd10      	pop	{r4, pc}
	...

080056fc <ADC_DMAConvCplt>:
{
 80056fc:	b510      	push	{r4, lr}
 80056fe:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005700:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005702:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005704:	2150      	movs	r1, #80	; 0x50
 8005706:	4211      	tst	r1, r2
 8005708:	d12a      	bne.n	8005760 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800570a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4313      	orrs	r3, r2
 8005712:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005714:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005716:	68d9      	ldr	r1, [r3, #12]
 8005718:	22c0      	movs	r2, #192	; 0xc0
 800571a:	0112      	lsls	r2, r2, #4
 800571c:	4211      	tst	r1, r2
 800571e:	d113      	bne.n	8005748 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005720:	7e82      	ldrb	r2, [r0, #26]
 8005722:	2a00      	cmp	r2, #0
 8005724:	d110      	bne.n	8005748 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	0712      	lsls	r2, r2, #28
 800572a:	d50d      	bpl.n	8005748 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	0752      	lsls	r2, r2, #29
 8005730:	d40d      	bmi.n	800574e <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	210c      	movs	r1, #12
 8005736:	438a      	bics	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800573a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800573c:	4a0e      	ldr	r2, [pc, #56]	; (8005778 <ADC_DMAConvCplt+0x7c>)
 800573e:	4013      	ands	r3, r2
 8005740:	3204      	adds	r2, #4
 8005742:	32ff      	adds	r2, #255	; 0xff
 8005744:	4313      	orrs	r3, r2
 8005746:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8005748:	f7ff f9ce 	bl	8004ae8 <HAL_ADC_ConvCpltCallback>
}
 800574c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800574e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005750:	2220      	movs	r2, #32
 8005752:	4313      	orrs	r3, r2
 8005754:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005756:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005758:	3a1f      	subs	r2, #31
 800575a:	4313      	orrs	r3, r2
 800575c:	65c3      	str	r3, [r0, #92]	; 0x5c
 800575e:	e7f3      	b.n	8005748 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005760:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005762:	06d2      	lsls	r2, r2, #27
 8005764:	d404      	bmi.n	8005770 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005766:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005768:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800576a:	0018      	movs	r0, r3
 800576c:	4790      	blx	r2
}
 800576e:	e7ed      	b.n	800574c <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8005770:	f7ff f9c6 	bl	8004b00 <HAL_ADC_ErrorCallback>
 8005774:	e7ea      	b.n	800574c <ADC_DMAConvCplt+0x50>
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	fffffefe 	.word	0xfffffefe

0800577c <HAL_ADC_ConfigChannel>:
{
 800577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577e:	b083      	sub	sp, #12
 8005780:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8005782:	2300      	movs	r3, #0
 8005784:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005786:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8005788:	3354      	adds	r3, #84	; 0x54
 800578a:	5cc3      	ldrb	r3, [r0, r3]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d100      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x16>
 8005790:	e11e      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x254>
 8005792:	2354      	movs	r3, #84	; 0x54
 8005794:	2201      	movs	r2, #1
 8005796:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005798:	6800      	ldr	r0, [r0, #0]
 800579a:	6883      	ldr	r3, [r0, #8]
 800579c:	3203      	adds	r2, #3
 800579e:	0017      	movs	r7, r2
 80057a0:	401f      	ands	r7, r3
 80057a2:	421a      	tst	r2, r3
 80057a4:	d009      	beq.n	80057ba <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057a8:	321c      	adds	r2, #28
 80057aa:	4313      	orrs	r3, r2
 80057ac:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80057ae:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80057b0:	2354      	movs	r3, #84	; 0x54
 80057b2:	2200      	movs	r2, #0
 80057b4:	54e2      	strb	r2, [r4, r3]
}
 80057b6:	b003      	add	sp, #12
 80057b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80057ba:	684a      	ldr	r2, [r1, #4]
 80057bc:	2a02      	cmp	r2, #2
 80057be:	d100      	bne.n	80057c2 <HAL_ADC_ConfigChannel+0x46>
 80057c0:	e0c4      	b.n	800594c <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80057c2:	2304      	movs	r3, #4
 80057c4:	439d      	bics	r5, r3
 80057c6:	2680      	movs	r6, #128	; 0x80
 80057c8:	0636      	lsls	r6, r6, #24
 80057ca:	42b5      	cmp	r5, r6
 80057cc:	d021      	beq.n	8005812 <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80057ce:	251f      	movs	r5, #31
 80057d0:	402a      	ands	r2, r5
 80057d2:	230f      	movs	r3, #15
 80057d4:	4093      	lsls	r3, r2
 80057d6:	6e26      	ldr	r6, [r4, #96]	; 0x60
 80057d8:	439e      	bics	r6, r3
 80057da:	680d      	ldr	r5, [r1, #0]
 80057dc:	036b      	lsls	r3, r5, #13
 80057de:	d148      	bne.n	8005872 <HAL_ADC_ConfigChannel+0xf6>
 80057e0:	006d      	lsls	r5, r5, #1
 80057e2:	0eef      	lsrs	r7, r5, #27
 80057e4:	003b      	movs	r3, r7
 80057e6:	4093      	lsls	r3, r2
 80057e8:	4333      	orrs	r3, r6
 80057ea:	6623      	str	r3, [r4, #96]	; 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80057ec:	684a      	ldr	r2, [r1, #4]
 80057ee:	0893      	lsrs	r3, r2, #2
 80057f0:	3301      	adds	r3, #1
 80057f2:	69e5      	ldr	r5, [r4, #28]
 80057f4:	42ab      	cmp	r3, r5
 80057f6:	d812      	bhi.n	800581e <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 80057f8:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80057fa:	251f      	movs	r5, #31
 80057fc:	402a      	ands	r2, r5
 80057fe:	680b      	ldr	r3, [r1, #0]
 8005800:	0e9b      	lsrs	r3, r3, #26
 8005802:	3d10      	subs	r5, #16
 8005804:	402b      	ands	r3, r5
 8005806:	4093      	lsls	r3, r2
 8005808:	4095      	lsls	r5, r2
 800580a:	43ae      	bics	r6, r5
 800580c:	4333      	orrs	r3, r6
 800580e:	6283      	str	r3, [r0, #40]	; 0x28
}
 8005810:	e005      	b.n	800581e <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005812:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005814:	680b      	ldr	r3, [r1, #0]
 8005816:	035b      	lsls	r3, r3, #13
 8005818:	0b5b      	lsrs	r3, r3, #13
 800581a:	4313      	orrs	r3, r2
 800581c:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800581e:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8005820:	6968      	ldr	r0, [r5, #20]
 8005822:	680b      	ldr	r3, [r1, #0]
 8005824:	021a      	lsls	r2, r3, #8
 8005826:	688b      	ldr	r3, [r1, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	4e6a      	ldr	r6, [pc, #424]	; (80059d4 <HAL_ADC_ConfigChannel+0x258>)
 800582c:	4033      	ands	r3, r6
 800582e:	4390      	bics	r0, r2
 8005830:	4303      	orrs	r3, r0
 8005832:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005834:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005836:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005838:	2b00      	cmp	r3, #0
 800583a:	dab9      	bge.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800583c:	4a66      	ldr	r2, [pc, #408]	; (80059d8 <HAL_ADC_ConfigChannel+0x25c>)
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	25e0      	movs	r5, #224	; 0xe0
 8005842:	046d      	lsls	r5, r5, #17
 8005844:	4015      	ands	r5, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005846:	4965      	ldr	r1, [pc, #404]	; (80059dc <HAL_ADC_ConfigChannel+0x260>)
 8005848:	428b      	cmp	r3, r1
 800584a:	d050      	beq.n	80058ee <HAL_ADC_ConfigChannel+0x172>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800584c:	4964      	ldr	r1, [pc, #400]	; (80059e0 <HAL_ADC_ConfigChannel+0x264>)
 800584e:	428b      	cmp	r3, r1
 8005850:	d06e      	beq.n	8005930 <HAL_ADC_ConfigChannel+0x1b4>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005852:	4964      	ldr	r1, [pc, #400]	; (80059e4 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005854:	2000      	movs	r0, #0
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005856:	428b      	cmp	r3, r1
 8005858:	d1aa      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
 800585a:	0253      	lsls	r3, r2, #9
 800585c:	d4a8      	bmi.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800585e:	4b5e      	ldr	r3, [pc, #376]	; (80059d8 <HAL_ADC_ConfigChannel+0x25c>)
 8005860:	6819      	ldr	r1, [r3, #0]
 8005862:	4a61      	ldr	r2, [pc, #388]	; (80059e8 <HAL_ADC_ConfigChannel+0x26c>)
 8005864:	4011      	ands	r1, r2
 8005866:	4329      	orrs	r1, r5
 8005868:	2580      	movs	r5, #128	; 0x80
 800586a:	03ed      	lsls	r5, r5, #15
 800586c:	4329      	orrs	r1, r5
 800586e:	6019      	str	r1, [r3, #0]
}
 8005870:	e79e      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005872:	07eb      	lsls	r3, r5, #31
 8005874:	d4b6      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 8005876:	2701      	movs	r7, #1
 8005878:	07ab      	lsls	r3, r5, #30
 800587a:	d4b3      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 800587c:	3701      	adds	r7, #1
 800587e:	076b      	lsls	r3, r5, #29
 8005880:	d4b0      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 8005882:	3701      	adds	r7, #1
 8005884:	072b      	lsls	r3, r5, #28
 8005886:	d4ad      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 8005888:	3701      	adds	r7, #1
 800588a:	06eb      	lsls	r3, r5, #27
 800588c:	d4aa      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 800588e:	3701      	adds	r7, #1
 8005890:	06ab      	lsls	r3, r5, #26
 8005892:	d4a7      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 8005894:	3701      	adds	r7, #1
 8005896:	066b      	lsls	r3, r5, #25
 8005898:	d4a4      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 800589a:	3701      	adds	r7, #1
 800589c:	062b      	lsls	r3, r5, #24
 800589e:	d4a1      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058a0:	3701      	adds	r7, #1
 80058a2:	05eb      	lsls	r3, r5, #23
 80058a4:	d49e      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058a6:	3701      	adds	r7, #1
 80058a8:	05ab      	lsls	r3, r5, #22
 80058aa:	d49b      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058ac:	3701      	adds	r7, #1
 80058ae:	056b      	lsls	r3, r5, #21
 80058b0:	d498      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058b2:	3701      	adds	r7, #1
 80058b4:	052b      	lsls	r3, r5, #20
 80058b6:	d495      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058b8:	3701      	adds	r7, #1
 80058ba:	04eb      	lsls	r3, r5, #19
 80058bc:	d492      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058be:	3701      	adds	r7, #1
 80058c0:	04ab      	lsls	r3, r5, #18
 80058c2:	d48f      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058c4:	3701      	adds	r7, #1
 80058c6:	046b      	lsls	r3, r5, #17
 80058c8:	d48c      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058ca:	3701      	adds	r7, #1
 80058cc:	042b      	lsls	r3, r5, #16
 80058ce:	d489      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058d0:	3701      	adds	r7, #1
 80058d2:	03eb      	lsls	r3, r5, #15
 80058d4:	d486      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058d6:	3701      	adds	r7, #1
 80058d8:	03ab      	lsls	r3, r5, #14
 80058da:	d483      	bmi.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058dc:	2380      	movs	r3, #128	; 0x80
 80058de:	02db      	lsls	r3, r3, #11
 80058e0:	002f      	movs	r7, r5
 80058e2:	401f      	ands	r7, r3
 80058e4:	421d      	tst	r5, r3
 80058e6:	d100      	bne.n	80058ea <HAL_ADC_ConfigChannel+0x16e>
 80058e8:	e77c      	b.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
 80058ea:	2712      	movs	r7, #18
 80058ec:	e77a      	b.n	80057e4 <HAL_ADC_ConfigChannel+0x68>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80058ee:	0213      	lsls	r3, r2, #8
 80058f0:	d500      	bpl.n	80058f4 <HAL_ADC_ConfigChannel+0x178>
 80058f2:	e75d      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80058f4:	4b38      	ldr	r3, [pc, #224]	; (80059d8 <HAL_ADC_ConfigChannel+0x25c>)
 80058f6:	6819      	ldr	r1, [r3, #0]
 80058f8:	4a3b      	ldr	r2, [pc, #236]	; (80059e8 <HAL_ADC_ConfigChannel+0x26c>)
 80058fa:	4011      	ands	r1, r2
 80058fc:	4329      	orrs	r1, r5
 80058fe:	2580      	movs	r5, #128	; 0x80
 8005900:	042d      	lsls	r5, r5, #16
 8005902:	4329      	orrs	r1, r5
 8005904:	6019      	str	r1, [r3, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8005906:	4b39      	ldr	r3, [pc, #228]	; (80059ec <HAL_ADC_ConfigChannel+0x270>)
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	4939      	ldr	r1, [pc, #228]	; (80059f0 <HAL_ADC_ConfigChannel+0x274>)
 800590c:	f7fa fc16 	bl	800013c <__udivsi3>
 8005910:	0043      	lsls	r3, r0, #1
 8005912:	181b      	adds	r3, r3, r0
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	3301      	adds	r3, #1
 8005918:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d055      	beq.n	80059cc <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	3b01      	subs	r3, #1
 8005924:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8005926:	9b01      	ldr	r3, [sp, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f9      	bne.n	8005920 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800592c:	2000      	movs	r0, #0
 800592e:	e73f      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
 8005930:	2000      	movs	r0, #0
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005932:	01d3      	lsls	r3, r2, #7
 8005934:	d500      	bpl.n	8005938 <HAL_ADC_ConfigChannel+0x1bc>
 8005936:	e73b      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
 8005938:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <HAL_ADC_ConfigChannel+0x25c>)
 800593a:	6819      	ldr	r1, [r3, #0]
 800593c:	4a2a      	ldr	r2, [pc, #168]	; (80059e8 <HAL_ADC_ConfigChannel+0x26c>)
 800593e:	4011      	ands	r1, r2
 8005940:	4329      	orrs	r1, r5
 8005942:	2580      	movs	r5, #128	; 0x80
 8005944:	046d      	lsls	r5, r5, #17
 8005946:	4329      	orrs	r1, r5
 8005948:	6019      	str	r1, [r3, #0]
}
 800594a:	e731      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800594c:	2304      	movs	r3, #4
 800594e:	439d      	bics	r5, r3
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	061b      	lsls	r3, r3, #24
 8005954:	429d      	cmp	r5, r3
 8005956:	d01c      	beq.n	8005992 <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005958:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800595a:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800595c:	2b00      	cmp	r3, #0
 800595e:	db00      	blt.n	8005962 <HAL_ADC_ConfigChannel+0x1e6>
 8005960:	e726      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005962:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <HAL_ADC_ConfigChannel+0x25c>)
 8005964:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005966:	491d      	ldr	r1, [pc, #116]	; (80059dc <HAL_ADC_ConfigChannel+0x260>)
 8005968:	428b      	cmp	r3, r1
 800596a:	d019      	beq.n	80059a0 <HAL_ADC_ConfigChannel+0x224>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800596c:	491c      	ldr	r1, [pc, #112]	; (80059e0 <HAL_ADC_ConfigChannel+0x264>)
 800596e:	428b      	cmp	r3, r1
 8005970:	d021      	beq.n	80059b6 <HAL_ADC_ConfigChannel+0x23a>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005972:	491c      	ldr	r1, [pc, #112]	; (80059e4 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005974:	2000      	movs	r0, #0
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005976:	428b      	cmp	r3, r1
 8005978:	d000      	beq.n	800597c <HAL_ADC_ConfigChannel+0x200>
 800597a:	e719      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800597c:	4916      	ldr	r1, [pc, #88]	; (80059d8 <HAL_ADC_ConfigChannel+0x25c>)
 800597e:	680b      	ldr	r3, [r1, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005980:	20c0      	movs	r0, #192	; 0xc0
 8005982:	0440      	lsls	r0, r0, #17
 8005984:	4002      	ands	r2, r0
 8005986:	4818      	ldr	r0, [pc, #96]	; (80059e8 <HAL_ADC_ConfigChannel+0x26c>)
 8005988:	4003      	ands	r3, r0
 800598a:	431a      	orrs	r2, r3
 800598c:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800598e:	2000      	movs	r0, #0
}
 8005990:	e70e      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005992:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005994:	680b      	ldr	r3, [r1, #0]
 8005996:	035b      	lsls	r3, r3, #13
 8005998:	0b5b      	lsrs	r3, r3, #13
 800599a:	439a      	bics	r2, r3
 800599c:	6282      	str	r2, [r0, #40]	; 0x28
}
 800599e:	e7db      	b.n	8005958 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80059a0:	480d      	ldr	r0, [pc, #52]	; (80059d8 <HAL_ADC_ConfigChannel+0x25c>)
 80059a2:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059a4:	23a0      	movs	r3, #160	; 0xa0
 80059a6:	045b      	lsls	r3, r3, #17
 80059a8:	401a      	ands	r2, r3
 80059aa:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <HAL_ADC_ConfigChannel+0x26c>)
 80059ac:	400b      	ands	r3, r1
 80059ae:	431a      	orrs	r2, r3
 80059b0:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059b2:	2000      	movs	r0, #0
}
 80059b4:	e6fc      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80059b6:	4808      	ldr	r0, [pc, #32]	; (80059d8 <HAL_ADC_ConfigChannel+0x25c>)
 80059b8:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059ba:	23c0      	movs	r3, #192	; 0xc0
 80059bc:	041b      	lsls	r3, r3, #16
 80059be:	401a      	ands	r2, r3
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <HAL_ADC_ConfigChannel+0x26c>)
 80059c2:	400b      	ands	r3, r1
 80059c4:	431a      	orrs	r2, r3
 80059c6:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059c8:	2000      	movs	r0, #0
}
 80059ca:	e6f1      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
 80059cc:	2000      	movs	r0, #0
 80059ce:	e6ef      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80059d0:	2002      	movs	r0, #2
 80059d2:	e6f0      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x3a>
 80059d4:	07ffff00 	.word	0x07ffff00
 80059d8:	40012708 	.word	0x40012708
 80059dc:	b0001000 	.word	0xb0001000
 80059e0:	b8004000 	.word	0xb8004000
 80059e4:	b4002000 	.word	0xb4002000
 80059e8:	fe3fffff 	.word	0xfe3fffff
 80059ec:	20000078 	.word	0x20000078
 80059f0:	00030d40 	.word	0x00030d40

080059f4 <ADC_ConversionStop>:
{
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80059f8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059fa:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 80059fc:	2000      	movs	r0, #0
 80059fe:	0752      	lsls	r2, r2, #29
 8005a00:	d520      	bpl.n	8005a44 <ADC_ConversionStop+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	0792      	lsls	r2, r2, #30
 8005a06:	d405      	bmi.n	8005a14 <ADC_ConversionStop+0x20>
  MODIFY_REG(ADCx->CR,
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	490f      	ldr	r1, [pc, #60]	; (8005a48 <ADC_ConversionStop+0x54>)
 8005a0c:	400a      	ands	r2, r1
 8005a0e:	2110      	movs	r1, #16
 8005a10:	430a      	orrs	r2, r1
 8005a12:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005a14:	f7ff fd1a 	bl	800544c <HAL_GetTick>
 8005a18:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005a1a:	2604      	movs	r6, #4
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	421e      	tst	r6, r3
 8005a22:	d00e      	beq.n	8005a42 <ADC_ConversionStop+0x4e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005a24:	f7ff fd12 	bl	800544c <HAL_GetTick>
 8005a28:	1b40      	subs	r0, r0, r5
 8005a2a:	2802      	cmp	r0, #2
 8005a2c:	d9f6      	bls.n	8005a1c <ADC_ConversionStop+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a30:	2210      	movs	r2, #16
 8005a32:	4313      	orrs	r3, r2
 8005a34:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a38:	3a0f      	subs	r2, #15
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8005a3e:	2001      	movs	r0, #1
 8005a40:	e000      	b.n	8005a44 <ADC_ConversionStop+0x50>
  return HAL_OK;
 8005a42:	2000      	movs	r0, #0
}
 8005a44:	bd70      	pop	{r4, r5, r6, pc}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	7fffffe8 	.word	0x7fffffe8

08005a4c <ADC_Enable>:
{
 8005a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a56:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a58:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	07d2      	lsls	r2, r2, #31
 8005a5e:	d430      	bmi.n	8005ac2 <ADC_Enable+0x76>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005a60:	6899      	ldr	r1, [r3, #8]
 8005a62:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <ADC_Enable+0xb4>)
 8005a64:	4211      	tst	r1, r2
 8005a66:	d123      	bne.n	8005ab0 <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	4926      	ldr	r1, [pc, #152]	; (8005b04 <ADC_Enable+0xb8>)
 8005a6c:	400a      	ands	r2, r1
 8005a6e:	2101      	movs	r1, #1
 8005a70:	430a      	orrs	r2, r1
 8005a72:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a74:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <ADC_Enable+0xbc>)
 8005a76:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	d50f      	bpl.n	8005a9c <ADC_Enable+0x50>
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8005a7c:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <ADC_Enable+0xc0>)
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	4923      	ldr	r1, [pc, #140]	; (8005b10 <ADC_Enable+0xc4>)
 8005a82:	f7fa fb5b 	bl	800013c <__udivsi3>
 8005a86:	3001      	adds	r0, #1
 8005a88:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8005a8a:	9b01      	ldr	r3, [sp, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <ADC_Enable+0x50>
        wait_loop_index--;
 8005a90:	9b01      	ldr	r3, [sp, #4]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8005a96:	9b01      	ldr	r3, [sp, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1f9      	bne.n	8005a90 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005a9c:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 8005a9e:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d00e      	beq.n	8005ac2 <ADC_Enable+0x76>
      tickstart = HAL_GetTick();
 8005aa4:	f7ff fcd2 	bl	800544c <HAL_GetTick>
 8005aa8:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aaa:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8005aac:	4f15      	ldr	r7, [pc, #84]	; (8005b04 <ADC_Enable+0xb8>)
 8005aae:	e00f      	b.n	8005ad0 <ADC_Enable+0x84>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ab2:	2210      	movs	r2, #16
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ab8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005aba:	3a0f      	subs	r2, #15
 8005abc:	4313      	orrs	r3, r2
 8005abe:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8005ac0:	3001      	adds	r0, #1
}
 8005ac2:	b003      	add	sp, #12
 8005ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ac6:	f7ff fcc1 	bl	800544c <HAL_GetTick>
 8005aca:	1b80      	subs	r0, r0, r6
 8005acc:	2802      	cmp	r0, #2
 8005ace:	d80b      	bhi.n	8005ae8 <ADC_Enable+0x9c>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	4215      	tst	r5, r2
 8005ad6:	d111      	bne.n	8005afc <ADC_Enable+0xb0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	4215      	tst	r5, r2
 8005adc:	d1f3      	bne.n	8005ac6 <ADC_Enable+0x7a>
  MODIFY_REG(ADCx->CR,
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	403a      	ands	r2, r7
 8005ae2:	432a      	orrs	r2, r5
 8005ae4:	609a      	str	r2, [r3, #8]
}
 8005ae6:	e7ee      	b.n	8005ac6 <ADC_Enable+0x7a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aea:	2210      	movs	r2, #16
 8005aec:	4313      	orrs	r3, r2
 8005aee:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005af0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005af2:	3a0f      	subs	r2, #15
 8005af4:	4313      	orrs	r3, r2
 8005af6:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8005af8:	2001      	movs	r0, #1
 8005afa:	e7e2      	b.n	8005ac2 <ADC_Enable+0x76>
  return HAL_OK;
 8005afc:	2000      	movs	r0, #0
 8005afe:	e7e0      	b.n	8005ac2 <ADC_Enable+0x76>
 8005b00:	80000017 	.word	0x80000017
 8005b04:	7fffffe8 	.word	0x7fffffe8
 8005b08:	40012708 	.word	0x40012708
 8005b0c:	20000078 	.word	0x20000078
 8005b10:	00030d40 	.word	0x00030d40

08005b14 <HAL_ADC_Start_DMA>:
{
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	0004      	movs	r4, r0
 8005b18:	000d      	movs	r5, r1
 8005b1a:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b1c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b1e:	689a      	ldr	r2, [r3, #8]
    tmp_hal_status = HAL_BUSY;
 8005b20:	2002      	movs	r0, #2
 8005b22:	0752      	lsls	r2, r2, #29
 8005b24:	d41c      	bmi.n	8005b60 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8005b26:	2254      	movs	r2, #84	; 0x54
 8005b28:	5ca2      	ldrb	r2, [r4, r2]
 8005b2a:	2a01      	cmp	r2, #1
 8005b2c:	d044      	beq.n	8005bb8 <HAL_ADC_Start_DMA+0xa4>
 8005b2e:	2201      	movs	r2, #1
 8005b30:	2154      	movs	r1, #84	; 0x54
 8005b32:	5462      	strb	r2, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8005b34:	68d9      	ldr	r1, [r3, #12]
 8005b36:	420a      	tst	r2, r1
 8005b38:	d10d      	bne.n	8005b56 <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	07d2      	lsls	r2, r2, #31
 8005b3e:	d505      	bpl.n	8005b4c <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	491e      	ldr	r1, [pc, #120]	; (8005bbc <HAL_ADC_Start_DMA+0xa8>)
 8005b44:	400a      	ands	r2, r1
 8005b46:	2102      	movs	r1, #2
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	68d3      	ldr	r3, [r2, #12]
 8005b50:	2101      	movs	r1, #1
 8005b52:	430b      	orrs	r3, r1
 8005b54:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8005b56:	0020      	movs	r0, r4
 8005b58:	f7ff ff78 	bl	8005a4c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d000      	beq.n	8005b62 <HAL_ADC_Start_DMA+0x4e>
}
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8005b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b64:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <HAL_ADC_Start_DMA+0xac>)
 8005b66:	401a      	ands	r2, r3
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8005b70:	2300      	movs	r3, #0
 8005b72:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b74:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005b76:	4913      	ldr	r1, [pc, #76]	; (8005bc4 <HAL_ADC_Start_DMA+0xb0>)
 8005b78:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b7a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005b7c:	4912      	ldr	r1, [pc, #72]	; (8005bc8 <HAL_ADC_Start_DMA+0xb4>)
 8005b7e:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005b82:	4912      	ldr	r1, [pc, #72]	; (8005bcc <HAL_ADC_Start_DMA+0xb8>)
 8005b84:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b86:	6822      	ldr	r2, [r4, #0]
 8005b88:	211c      	movs	r1, #28
 8005b8a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8005b8c:	2254      	movs	r2, #84	; 0x54
 8005b8e:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	6853      	ldr	r3, [r2, #4]
 8005b94:	390c      	subs	r1, #12
 8005b96:	430b      	orrs	r3, r1
 8005b98:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b9a:	6821      	ldr	r1, [r4, #0]
 8005b9c:	3140      	adds	r1, #64	; 0x40
 8005b9e:	0033      	movs	r3, r6
 8005ba0:	002a      	movs	r2, r5
 8005ba2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005ba4:	f000 f9e4 	bl	8005f70 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005ba8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005baa:	6893      	ldr	r3, [r2, #8]
 8005bac:	4903      	ldr	r1, [pc, #12]	; (8005bbc <HAL_ADC_Start_DMA+0xa8>)
 8005bae:	400b      	ands	r3, r1
 8005bb0:	2104      	movs	r1, #4
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	6093      	str	r3, [r2, #8]
}
 8005bb6:	e7d3      	b.n	8005b60 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8005bb8:	2002      	movs	r0, #2
 8005bba:	e7d1      	b.n	8005b60 <HAL_ADC_Start_DMA+0x4c>
 8005bbc:	7fffffe8 	.word	0x7fffffe8
 8005bc0:	fffff0fe 	.word	0xfffff0fe
 8005bc4:	080056fd 	.word	0x080056fd
 8005bc8:	080056d7 	.word	0x080056d7
 8005bcc:	080056e1 	.word	0x080056e1

08005bd0 <ADC_Disable>:
{
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005bd4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005bd6:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bd8:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8005bda:	2000      	movs	r0, #0
 8005bdc:	07d2      	lsls	r2, r2, #31
 8005bde:	d50f      	bpl.n	8005c00 <ADC_Disable+0x30>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005be0:	078a      	lsls	r2, r1, #30
 8005be2:	d40d      	bmi.n	8005c00 <ADC_Disable+0x30>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005be4:	6899      	ldr	r1, [r3, #8]
 8005be6:	2205      	movs	r2, #5
 8005be8:	400a      	ands	r2, r1
 8005bea:	2a01      	cmp	r2, #1
 8005bec:	d009      	beq.n	8005c02 <ADC_Disable+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bf6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005bf8:	3a0f      	subs	r2, #15
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8005bfe:	2001      	movs	r0, #1
}
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	4910      	ldr	r1, [pc, #64]	; (8005c48 <ADC_Disable+0x78>)
 8005c06:	400a      	ands	r2, r1
 8005c08:	2102      	movs	r1, #2
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	2203      	movs	r2, #3
 8005c12:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005c14:	f7ff fc1a 	bl	800544c <HAL_GetTick>
 8005c18:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c1a:	2601      	movs	r6, #1
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	421e      	tst	r6, r3
 8005c22:	d00e      	beq.n	8005c42 <ADC_Disable+0x72>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c24:	f7ff fc12 	bl	800544c <HAL_GetTick>
 8005c28:	1b40      	subs	r0, r0, r5
 8005c2a:	2802      	cmp	r0, #2
 8005c2c:	d9f6      	bls.n	8005c1c <ADC_Disable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c30:	2210      	movs	r2, #16
 8005c32:	4313      	orrs	r3, r2
 8005c34:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005c38:	3a0f      	subs	r2, #15
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8005c3e:	2001      	movs	r0, #1
 8005c40:	e7de      	b.n	8005c00 <ADC_Disable+0x30>
  return HAL_OK;
 8005c42:	2000      	movs	r0, #0
 8005c44:	e7dc      	b.n	8005c00 <ADC_Disable+0x30>
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	7fffffe8 	.word	0x7fffffe8

08005c4c <HAL_ADC_Stop_DMA>:
{
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8005c50:	2354      	movs	r3, #84	; 0x54
 8005c52:	5cc3      	ldrb	r3, [r0, r3]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d037      	beq.n	8005cc8 <HAL_ADC_Stop_DMA+0x7c>
 8005c58:	2354      	movs	r3, #84	; 0x54
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005c5e:	f7ff fec9 	bl	80059f4 <ADC_ConversionStop>
 8005c62:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8005c64:	d12b      	bne.n	8005cbe <HAL_ADC_Stop_DMA+0x72>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005c66:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005c68:	2325      	movs	r3, #37	; 0x25
 8005c6a:	5cc3      	ldrb	r3, [r0, r3]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d011      	beq.n	8005c94 <HAL_ADC_Stop_DMA+0x48>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005c70:	6822      	ldr	r2, [r4, #0]
 8005c72:	6853      	ldr	r3, [r2, #4]
 8005c74:	2110      	movs	r1, #16
 8005c76:	438b      	bics	r3, r1
 8005c78:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8005c7a:	0020      	movs	r0, r4
 8005c7c:	f7ff ffa8 	bl	8005bd0 <ADC_Disable>
 8005c80:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8005c82:	d117      	bne.n	8005cb4 <HAL_ADC_Stop_DMA+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8005c84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c86:	4a11      	ldr	r2, [pc, #68]	; (8005ccc <HAL_ADC_Stop_DMA+0x80>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	3204      	adds	r2, #4
 8005c8c:	32ff      	adds	r2, #255	; 0xff
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c92:	e00f      	b.n	8005cb4 <HAL_ADC_Stop_DMA+0x68>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005c94:	f000 f9ba 	bl	800600c <HAL_DMA_Abort>
 8005c98:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 8005c9a:	d0e9      	beq.n	8005c70 <HAL_ADC_Stop_DMA+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c9e:	2240      	movs	r2, #64	; 0x40
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	6853      	ldr	r3, [r2, #4]
 8005ca8:	2110      	movs	r1, #16
 8005caa:	438b      	bics	r3, r1
 8005cac:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 8005cae:	0020      	movs	r0, r4
 8005cb0:	f7ff ff8e 	bl	8005bd0 <ADC_Disable>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	68d3      	ldr	r3, [r2, #12]
 8005cb8:	2101      	movs	r1, #1
 8005cba:	438b      	bics	r3, r1
 8005cbc:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 8005cbe:	2354      	movs	r3, #84	; 0x54
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	54e2      	strb	r2, [r4, r3]
}
 8005cc4:	0028      	movs	r0, r5
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8005cc8:	2502      	movs	r5, #2
 8005cca:	e7fb      	b.n	8005cc4 <HAL_ADC_Stop_DMA+0x78>
 8005ccc:	fffffefe 	.word	0xfffffefe

08005cd0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005cd0:	b530      	push	{r4, r5, lr}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cda:	3354      	adds	r3, #84	; 0x54
 8005cdc:	5cc3      	ldrb	r3, [r0, r3]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d044      	beq.n	8005d6c <HAL_ADCEx_Calibration_Start+0x9c>
 8005ce2:	2501      	movs	r5, #1
 8005ce4:	2354      	movs	r3, #84	; 0x54
 8005ce6:	54c5      	strb	r5, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005ce8:	f7ff ff72 	bl	8005bd0 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cec:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	4215      	tst	r5, r2
 8005cf2:	d008      	beq.n	8005d06 <HAL_ADCEx_Calibration_Start+0x36>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cf6:	2210      	movs	r2, #16
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	65a3      	str	r3, [r4, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cfc:	2354      	movs	r3, #84	; 0x54
 8005cfe:	2200      	movs	r2, #0
 8005d00:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8005d02:	b003      	add	sp, #12
 8005d04:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8005d06:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005d08:	4919      	ldr	r1, [pc, #100]	; (8005d70 <HAL_ADCEx_Calibration_Start+0xa0>)
 8005d0a:	400a      	ands	r2, r1
 8005d0c:	3106      	adds	r1, #6
 8005d0e:	31ff      	adds	r1, #255	; 0xff
 8005d10:	430a      	orrs	r2, r1
 8005d12:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005d14:	68d9      	ldr	r1, [r3, #12]
 8005d16:	2503      	movs	r5, #3
 8005d18:	4029      	ands	r1, r5
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	43aa      	bics	r2, r5
 8005d1e:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8005d20:	6822      	ldr	r2, [r4, #0]
 8005d22:	6895      	ldr	r5, [r2, #8]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	061b      	lsls	r3, r3, #24
 8005d28:	432b      	orrs	r3, r5
 8005d2a:	6093      	str	r3, [r2, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d2c:	6823      	ldr	r3, [r4, #0]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d2e:	4d11      	ldr	r5, [pc, #68]	; (8005d74 <HAL_ADCEx_Calibration_Start+0xa4>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	2a00      	cmp	r2, #0
 8005d34:	db09      	blt.n	8005d4a <HAL_ADCEx_Calibration_Start+0x7a>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	4311      	orrs	r1, r2
 8005d3a:	60d9      	str	r1, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8005d3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d3e:	2203      	movs	r2, #3
 8005d40:	4393      	bics	r3, r2
 8005d42:	3a02      	subs	r2, #2
 8005d44:	4313      	orrs	r3, r2
 8005d46:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d48:	e7d8      	b.n	8005cfc <HAL_ADCEx_Calibration_Start+0x2c>
      wait_loop_index++;
 8005d4a:	9a01      	ldr	r2, [sp, #4]
 8005d4c:	3201      	adds	r2, #1
 8005d4e:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d50:	9a01      	ldr	r2, [sp, #4]
 8005d52:	42aa      	cmp	r2, r5
 8005d54:	d9ec      	bls.n	8005d30 <HAL_ADCEx_Calibration_Start+0x60>
        ADC_STATE_CLR_SET(hadc->State,
 8005d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d58:	2212      	movs	r2, #18
 8005d5a:	4393      	bics	r3, r2
 8005d5c:	3a02      	subs	r2, #2
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8005d62:	2354      	movs	r3, #84	; 0x54
 8005d64:	2200      	movs	r2, #0
 8005d66:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8005d68:	2001      	movs	r0, #1
 8005d6a:	e7ca      	b.n	8005d02 <HAL_ADCEx_Calibration_Start+0x32>
  __HAL_LOCK(hadc);
 8005d6c:	2002      	movs	r0, #2
 8005d6e:	e7c8      	b.n	8005d02 <HAL_ADCEx_Calibration_Start+0x32>
 8005d70:	fffffefd 	.word	0xfffffefd
 8005d74:	0002f1ff 	.word	0x0002f1ff

08005d78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d78:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	db14      	blt.n	8005da8 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d7e:	0884      	lsrs	r4, r0, #2
 8005d80:	00a4      	lsls	r4, r4, #2
 8005d82:	4b14      	ldr	r3, [pc, #80]	; (8005dd4 <HAL_NVIC_SetPriority+0x5c>)
 8005d84:	469c      	mov	ip, r3
 8005d86:	4464      	add	r4, ip
 8005d88:	26c0      	movs	r6, #192	; 0xc0
 8005d8a:	00b6      	lsls	r6, r6, #2
 8005d8c:	59a5      	ldr	r5, [r4, r6]
 8005d8e:	2203      	movs	r2, #3
 8005d90:	4010      	ands	r0, r2
 8005d92:	00c0      	lsls	r0, r0, #3
 8005d94:	23ff      	movs	r3, #255	; 0xff
 8005d96:	001a      	movs	r2, r3
 8005d98:	4082      	lsls	r2, r0
 8005d9a:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d9c:	0189      	lsls	r1, r1, #6
 8005d9e:	400b      	ands	r3, r1
 8005da0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005da2:	432b      	orrs	r3, r5
 8005da4:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005da8:	230f      	movs	r3, #15
 8005daa:	4003      	ands	r3, r0
 8005dac:	3b08      	subs	r3, #8
 8005dae:	089b      	lsrs	r3, r3, #2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4a09      	ldr	r2, [pc, #36]	; (8005dd8 <HAL_NVIC_SetPriority+0x60>)
 8005db4:	4694      	mov	ip, r2
 8005db6:	4463      	add	r3, ip
 8005db8:	69dc      	ldr	r4, [r3, #28]
 8005dba:	2203      	movs	r2, #3
 8005dbc:	4010      	ands	r0, r2
 8005dbe:	00c0      	lsls	r0, r0, #3
 8005dc0:	32fc      	adds	r2, #252	; 0xfc
 8005dc2:	0015      	movs	r5, r2
 8005dc4:	4085      	lsls	r5, r0
 8005dc6:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005dc8:	0189      	lsls	r1, r1, #6
 8005dca:	400a      	ands	r2, r1
 8005dcc:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005dce:	4322      	orrs	r2, r4
 8005dd0:	61da      	str	r2, [r3, #28]
 8005dd2:	e7e8      	b.n	8005da6 <HAL_NVIC_SetPriority+0x2e>
 8005dd4:	e000e100 	.word	0xe000e100
 8005dd8:	e000ed00 	.word	0xe000ed00

08005ddc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	db05      	blt.n	8005dec <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005de0:	231f      	movs	r3, #31
 8005de2:	4018      	ands	r0, r3
 8005de4:	3b1e      	subs	r3, #30
 8005de6:	4083      	lsls	r3, r0
 8005de8:	4a01      	ldr	r2, [pc, #4]	; (8005df0 <HAL_NVIC_EnableIRQ+0x14>)
 8005dea:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005dec:	4770      	bx	lr
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	e000e100 	.word	0xe000e100

08005df4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005df4:	3801      	subs	r0, #1
 8005df6:	2380      	movs	r3, #128	; 0x80
 8005df8:	045b      	lsls	r3, r3, #17
 8005dfa:	4298      	cmp	r0, r3
 8005dfc:	d20f      	bcs.n	8005e1e <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <HAL_SYSTICK_Config+0x30>)
 8005e00:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e02:	4809      	ldr	r0, [pc, #36]	; (8005e28 <HAL_SYSTICK_Config+0x34>)
 8005e04:	6a03      	ldr	r3, [r0, #32]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	21c0      	movs	r1, #192	; 0xc0
 8005e0c:	0609      	lsls	r1, r1, #24
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e12:	2300      	movs	r3, #0
 8005e14:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e16:	3307      	adds	r3, #7
 8005e18:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e1a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8005e1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005e1e:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8005e20:	e7fc      	b.n	8005e1c <HAL_SYSTICK_Config+0x28>
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	e000e010 	.word	0xe000e010
 8005e28:	e000ed00 	.word	0xe000ed00

08005e2c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e2e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8005e30:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8005e32:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e34:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005e36:	2c00      	cmp	r4, #0
 8005e38:	d002      	beq.n	8005e40 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e3a:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8005e3c:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8005e3e:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005e40:	4e0b      	ldr	r6, [pc, #44]	; (8005e70 <DMA_SetConfig+0x44>)
 8005e42:	6877      	ldr	r7, [r6, #4]
 8005e44:	251c      	movs	r5, #28
 8005e46:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005e48:	4025      	ands	r5, r4
 8005e4a:	2401      	movs	r4, #1
 8005e4c:	40ac      	lsls	r4, r5
 8005e4e:	433c      	orrs	r4, r7
 8005e50:	6074      	str	r4, [r6, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e52:	6804      	ldr	r4, [r0, #0]
 8005e54:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e56:	6883      	ldr	r3, [r0, #8]
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d004      	beq.n	8005e66 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005e5c:	6803      	ldr	r3, [r0, #0]
 8005e5e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005e60:	6803      	ldr	r3, [r0, #0]
 8005e62:	60da      	str	r2, [r3, #12]
  }
}
 8005e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8005e66:	6803      	ldr	r3, [r0, #0]
 8005e68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005e6a:	6803      	ldr	r3, [r0, #0]
 8005e6c:	60d9      	str	r1, [r3, #12]
 8005e6e:	e7f9      	b.n	8005e64 <DMA_SetConfig+0x38>
 8005e70:	40020000 	.word	0x40020000

08005e74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e74:	b510      	push	{r4, lr}
 8005e76:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005e78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005e7a:	089b      	lsrs	r3, r3, #2
 8005e7c:	4a08      	ldr	r2, [pc, #32]	; (8005ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8005e7e:	4694      	mov	ip, r2
 8005e80:	4463      	add	r3, ip
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005e86:	7800      	ldrb	r0, [r0, #0]
 8005e88:	3808      	subs	r0, #8
 8005e8a:	2114      	movs	r1, #20
 8005e8c:	f7fa f956 	bl	800013c <__udivsi3>
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8005e92:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e94:	231f      	movs	r3, #31
 8005e96:	4018      	ands	r0, r3
 8005e98:	3b1e      	subs	r3, #30
 8005e9a:	4083      	lsls	r3, r0
 8005e9c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8005e9e:	bd10      	pop	{r4, pc}
 8005ea0:	10008200 	.word	0x10008200
 8005ea4:	40020880 	.word	0x40020880

08005ea8 <HAL_DMA_Init>:
{
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8005eac:	d055      	beq.n	8005f5a <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005eae:	6805      	ldr	r5, [r0, #0]
 8005eb0:	4b2b      	ldr	r3, [pc, #172]	; (8005f60 <HAL_DMA_Init+0xb8>)
 8005eb2:	18e8      	adds	r0, r5, r3
 8005eb4:	2114      	movs	r1, #20
 8005eb6:	f7fa f941 	bl	800013c <__udivsi3>
 8005eba:	0080      	lsls	r0, r0, #2
 8005ebc:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ebe:	2325      	movs	r3, #37	; 0x25
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	4a27      	ldr	r2, [pc, #156]	; (8005f64 <HAL_DMA_Init+0xbc>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	6811      	ldr	r1, [r2, #0]
 8005ed0:	68a3      	ldr	r3, [r4, #8]
 8005ed2:	68e0      	ldr	r0, [r4, #12]
 8005ed4:	4303      	orrs	r3, r0
 8005ed6:	6920      	ldr	r0, [r4, #16]
 8005ed8:	4303      	orrs	r3, r0
 8005eda:	6960      	ldr	r0, [r4, #20]
 8005edc:	4303      	orrs	r3, r0
 8005ede:	69a0      	ldr	r0, [r4, #24]
 8005ee0:	4303      	orrs	r3, r0
 8005ee2:	69e0      	ldr	r0, [r4, #28]
 8005ee4:	4303      	orrs	r3, r0
 8005ee6:	6a20      	ldr	r0, [r4, #32]
 8005ee8:	4303      	orrs	r3, r0
 8005eea:	430b      	orrs	r3, r1
 8005eec:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005eee:	0020      	movs	r0, r4
 8005ef0:	f7ff ffc0 	bl	8005e74 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	01db      	lsls	r3, r3, #7
 8005ef8:	68a2      	ldr	r2, [r4, #8]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d018      	beq.n	8005f30 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005efe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005f00:	233f      	movs	r3, #63	; 0x3f
 8005f02:	6861      	ldr	r1, [r4, #4]
 8005f04:	400b      	ands	r3, r1
 8005f06:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005f0a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005f0c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	1e5a      	subs	r2, r3, #1
 8005f12:	2a03      	cmp	r2, #3
 8005f14:	d90f      	bls.n	8005f36 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005f1a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f1c:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8005f22:	2225      	movs	r2, #37	; 0x25
 8005f24:	2101      	movs	r1, #1
 8005f26:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8005f28:	3a01      	subs	r2, #1
 8005f2a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8005f2c:	2000      	movs	r0, #0
}
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f30:	2300      	movs	r3, #0
 8005f32:	6063      	str	r3, [r4, #4]
 8005f34:	e7e3      	b.n	8005efe <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f36:	223f      	movs	r2, #63	; 0x3f
 8005f38:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f3a:	4a0b      	ldr	r2, [pc, #44]	; (8005f68 <HAL_DMA_Init+0xc0>)
 8005f3c:	189a      	adds	r2, r3, r2
 8005f3e:	0092      	lsls	r2, r2, #2
 8005f40:	6522      	str	r2, [r4, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f42:	490a      	ldr	r1, [pc, #40]	; (8005f6c <HAL_DMA_Init+0xc4>)
 8005f44:	6561      	str	r1, [r4, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005f46:	3b01      	subs	r3, #1
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4099      	lsls	r1, r3
 8005f4c:	65a1      	str	r1, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f54:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005f56:	605a      	str	r2, [r3, #4]
 8005f58:	e7e1      	b.n	8005f1e <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	e7e7      	b.n	8005f2e <HAL_DMA_Init+0x86>
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	bffdfff8 	.word	0xbffdfff8
 8005f64:	ffff800f 	.word	0xffff800f
 8005f68:	1000823f 	.word	0x1000823f
 8005f6c:	40020940 	.word	0x40020940

08005f70 <HAL_DMA_Start_IT>:
{
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8005f74:	2024      	movs	r0, #36	; 0x24
 8005f76:	5c20      	ldrb	r0, [r4, r0]
 8005f78:	2801      	cmp	r0, #1
 8005f7a:	d045      	beq.n	8006008 <HAL_DMA_Start_IT+0x98>
 8005f7c:	2024      	movs	r0, #36	; 0x24
 8005f7e:	2501      	movs	r5, #1
 8005f80:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8005f82:	3001      	adds	r0, #1
 8005f84:	5c20      	ldrb	r0, [r4, r0]
 8005f86:	2801      	cmp	r0, #1
 8005f88:	d006      	beq.n	8005f98 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005f8e:	3b5c      	subs	r3, #92	; 0x5c
 8005f90:	2200      	movs	r2, #0
 8005f92:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8005f94:	2001      	movs	r0, #1
}
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f98:	3024      	adds	r0, #36	; 0x24
 8005f9a:	3501      	adds	r5, #1
 8005f9c:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005fa2:	6825      	ldr	r5, [r4, #0]
 8005fa4:	6828      	ldr	r0, [r5, #0]
 8005fa6:	2601      	movs	r6, #1
 8005fa8:	43b0      	bics	r0, r6
 8005faa:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fac:	0020      	movs	r0, r4
 8005fae:	f7ff ff3d 	bl	8005e2c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8005fb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01c      	beq.n	8005ff2 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fb8:	6822      	ldr	r2, [r4, #0]
 8005fba:	6813      	ldr	r3, [r2, #0]
 8005fbc:	210e      	movs	r1, #14
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005fc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	03d2      	lsls	r2, r2, #15
 8005fc8:	d504      	bpl.n	8005fd4 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005fca:	6819      	ldr	r1, [r3, #0]
 8005fcc:	2280      	movs	r2, #128	; 0x80
 8005fce:	0052      	lsls	r2, r2, #1
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8005fd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005fda:	6819      	ldr	r1, [r3, #0]
 8005fdc:	2280      	movs	r2, #128	; 0x80
 8005fde:	0052      	lsls	r2, r2, #1
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	2101      	movs	r1, #1
 8005fea:	430b      	orrs	r3, r1
 8005fec:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e7d1      	b.n	8005f96 <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	6813      	ldr	r3, [r2, #0]
 8005ff6:	2104      	movs	r1, #4
 8005ff8:	438b      	bics	r3, r1
 8005ffa:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ffc:	6822      	ldr	r2, [r4, #0]
 8005ffe:	6813      	ldr	r3, [r2, #0]
 8006000:	3106      	adds	r1, #6
 8006002:	430b      	orrs	r3, r1
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e7dc      	b.n	8005fc2 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8006008:	2002      	movs	r0, #2
 800600a:	e7c4      	b.n	8005f96 <HAL_DMA_Start_IT+0x26>

0800600c <HAL_DMA_Abort>:
{
 800600c:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 800600e:	2800      	cmp	r0, #0
 8006010:	d036      	beq.n	8006080 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006012:	2325      	movs	r3, #37	; 0x25
 8006014:	5cc3      	ldrb	r3, [r0, r3]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d006      	beq.n	8006028 <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800601a:	2304      	movs	r3, #4
 800601c:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800601e:	3320      	adds	r3, #32
 8006020:	2200      	movs	r2, #0
 8006022:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8006024:	2001      	movs	r0, #1
}
 8006026:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006028:	6802      	ldr	r2, [r0, #0]
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	210e      	movs	r1, #14
 800602e:	438b      	bics	r3, r1
 8006030:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006032:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006034:	6813      	ldr	r3, [r2, #0]
 8006036:	4913      	ldr	r1, [pc, #76]	; (8006084 <HAL_DMA_Abort+0x78>)
 8006038:	400b      	ands	r3, r1
 800603a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800603c:	6801      	ldr	r1, [r0, #0]
 800603e:	680a      	ldr	r2, [r1, #0]
 8006040:	2301      	movs	r3, #1
 8006042:	439a      	bics	r2, r3
 8006044:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006046:	4910      	ldr	r1, [pc, #64]	; (8006088 <HAL_DMA_Abort+0x7c>)
 8006048:	684c      	ldr	r4, [r1, #4]
 800604a:	221c      	movs	r2, #28
 800604c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800604e:	402a      	ands	r2, r5
 8006050:	4093      	lsls	r3, r2
 8006052:	4323      	orrs	r3, r4
 8006054:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006056:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006058:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800605a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800605c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800605e:	2b00      	cmp	r3, #0
 8006060:	d006      	beq.n	8006070 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4907      	ldr	r1, [pc, #28]	; (8006084 <HAL_DMA_Abort+0x78>)
 8006066:	400a      	ands	r2, r1
 8006068:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800606a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800606c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800606e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006070:	2325      	movs	r3, #37	; 0x25
 8006072:	2201      	movs	r2, #1
 8006074:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8006076:	3b01      	subs	r3, #1
 8006078:	2200      	movs	r2, #0
 800607a:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 800607c:	2000      	movs	r0, #0
 800607e:	e7d2      	b.n	8006026 <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8006080:	2001      	movs	r0, #1
 8006082:	e7d0      	b.n	8006026 <HAL_DMA_Abort+0x1a>
 8006084:	fffffeff 	.word	0xfffffeff
 8006088:	40020000 	.word	0x40020000

0800608c <HAL_DMA_IRQHandler>:
{
 800608c:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 800608e:	4b31      	ldr	r3, [pc, #196]	; (8006154 <HAL_DMA_IRQHandler+0xc8>)
 8006090:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006092:	6804      	ldr	r4, [r0, #0]
 8006094:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006096:	231c      	movs	r3, #28
 8006098:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800609a:	4013      	ands	r3, r2
 800609c:	2204      	movs	r2, #4
 800609e:	409a      	lsls	r2, r3
 80060a0:	4211      	tst	r1, r2
 80060a2:	d016      	beq.n	80060d2 <HAL_DMA_IRQHandler+0x46>
 80060a4:	076a      	lsls	r2, r5, #29
 80060a6:	d514      	bpl.n	80060d2 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	069b      	lsls	r3, r3, #26
 80060ac:	d403      	bmi.n	80060b6 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	2204      	movs	r2, #4
 80060b2:	4393      	bics	r3, r2
 80060b4:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80060b6:	4927      	ldr	r1, [pc, #156]	; (8006154 <HAL_DMA_IRQHandler+0xc8>)
 80060b8:	684c      	ldr	r4, [r1, #4]
 80060ba:	221c      	movs	r2, #28
 80060bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80060be:	401a      	ands	r2, r3
 80060c0:	2304      	movs	r3, #4
 80060c2:	4093      	lsls	r3, r2
 80060c4:	4323      	orrs	r3, r4
 80060c6:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80060c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d000      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 80060ce:	4798      	blx	r3
}
 80060d0:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80060d2:	2202      	movs	r2, #2
 80060d4:	409a      	lsls	r2, r3
 80060d6:	4211      	tst	r1, r2
 80060d8:	d01c      	beq.n	8006114 <HAL_DMA_IRQHandler+0x88>
 80060da:	07aa      	lsls	r2, r5, #30
 80060dc:	d51a      	bpl.n	8006114 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	069b      	lsls	r3, r3, #26
 80060e2:	d406      	bmi.n	80060f2 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	220a      	movs	r2, #10
 80060e8:	4393      	bics	r3, r2
 80060ea:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80060ec:	2325      	movs	r3, #37	; 0x25
 80060ee:	3a09      	subs	r2, #9
 80060f0:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80060f2:	4918      	ldr	r1, [pc, #96]	; (8006154 <HAL_DMA_IRQHandler+0xc8>)
 80060f4:	684c      	ldr	r4, [r1, #4]
 80060f6:	221c      	movs	r2, #28
 80060f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80060fa:	401a      	ands	r2, r3
 80060fc:	2302      	movs	r3, #2
 80060fe:	4093      	lsls	r3, r2
 8006100:	4323      	orrs	r3, r4
 8006102:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8006104:	2324      	movs	r3, #36	; 0x24
 8006106:	2200      	movs	r2, #0
 8006108:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 800610a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0df      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8006110:	4798      	blx	r3
 8006112:	e7dd      	b.n	80060d0 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006114:	2208      	movs	r2, #8
 8006116:	409a      	lsls	r2, r3
 8006118:	4211      	tst	r1, r2
 800611a:	d0d9      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x44>
 800611c:	072b      	lsls	r3, r5, #28
 800611e:	d5d7      	bpl.n	80060d0 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	220e      	movs	r2, #14
 8006124:	4393      	bics	r3, r2
 8006126:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006128:	4c0a      	ldr	r4, [pc, #40]	; (8006154 <HAL_DMA_IRQHandler+0xc8>)
 800612a:	6865      	ldr	r5, [r4, #4]
 800612c:	211c      	movs	r1, #28
 800612e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006130:	4019      	ands	r1, r3
 8006132:	2301      	movs	r3, #1
 8006134:	001a      	movs	r2, r3
 8006136:	408a      	lsls	r2, r1
 8006138:	432a      	orrs	r2, r5
 800613a:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800613c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800613e:	2225      	movs	r2, #37	; 0x25
 8006140:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8006142:	3323      	adds	r3, #35	; 0x23
 8006144:	2200      	movs	r2, #0
 8006146:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8006148:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0c0      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 800614e:	4798      	blx	r3
  return;
 8006150:	e7be      	b.n	80060d0 <HAL_DMA_IRQHandler+0x44>
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	40020000 	.word	0x40020000

08006158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800615a:	46de      	mov	lr, fp
 800615c:	4657      	mov	r7, sl
 800615e:	464e      	mov	r6, r9
 8006160:	4645      	mov	r5, r8
 8006162:	b5e0      	push	{r5, r6, r7, lr}
 8006164:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006166:	680a      	ldr	r2, [r1, #0]
 8006168:	2a00      	cmp	r2, #0
 800616a:	d100      	bne.n	800616e <HAL_GPIO_Init+0x16>
 800616c:	e0bd      	b.n	80062ea <HAL_GPIO_Init+0x192>
  uint32_t position = 0x00u;
 800616e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006170:	2401      	movs	r4, #1
 8006172:	46a4      	mov	ip, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006174:	340f      	adds	r4, #15
 8006176:	46a2      	mov	sl, r4
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006178:	4c5f      	ldr	r4, [pc, #380]	; (80062f8 <HAL_GPIO_Init+0x1a0>)
 800617a:	1904      	adds	r4, r0, r4
 800617c:	4265      	negs	r5, r4
 800617e:	416c      	adcs	r4, r5
 8006180:	4264      	negs	r4, r4
 8006182:	9401      	str	r4, [sp, #4]
 8006184:	e045      	b.n	8006212 <HAL_GPIO_Init+0xba>
        temp = GPIOx->AFR[position >> 3u];
 8006186:	08da      	lsrs	r2, r3, #3
 8006188:	0092      	lsls	r2, r2, #2
 800618a:	1882      	adds	r2, r0, r2
 800618c:	9200      	str	r2, [sp, #0]
 800618e:	6a15      	ldr	r5, [r2, #32]
 8006190:	46a9      	mov	r9, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006192:	2507      	movs	r5, #7
 8006194:	401d      	ands	r5, r3
 8006196:	00ad      	lsls	r5, r5, #2
 8006198:	270f      	movs	r7, #15
 800619a:	40af      	lsls	r7, r5
 800619c:	46bb      	mov	fp, r7
 800619e:	464f      	mov	r7, r9
 80061a0:	465a      	mov	r2, fp
 80061a2:	4397      	bics	r7, r2
 80061a4:	46b9      	mov	r9, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061a6:	690f      	ldr	r7, [r1, #16]
 80061a8:	40af      	lsls	r7, r5
 80061aa:	003d      	movs	r5, r7
 80061ac:	464a      	mov	r2, r9
 80061ae:	4315      	orrs	r5, r2
        GPIOx->AFR[position >> 3u] = temp;
 80061b0:	9a00      	ldr	r2, [sp, #0]
 80061b2:	6215      	str	r5, [r2, #32]
 80061b4:	e060      	b.n	8006278 <HAL_GPIO_Init+0x120>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80061b6:	2500      	movs	r5, #0
 80061b8:	40b5      	lsls	r5, r6
 80061ba:	4646      	mov	r6, r8
 80061bc:	4335      	orrs	r5, r6
        EXTI->EXTICR[position >> 2u] = temp;
 80061be:	6615      	str	r5, [r2, #96]	; 0x60

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80061c0:	4d4e      	ldr	r5, [pc, #312]	; (80062fc <HAL_GPIO_Init+0x1a4>)
 80061c2:	2280      	movs	r2, #128	; 0x80
 80061c4:	58aa      	ldr	r2, [r5, r2]
        temp &= ~(iocurrent);
 80061c6:	43e5      	mvns	r5, r4
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061c8:	684e      	ldr	r6, [r1, #4]
 80061ca:	03f6      	lsls	r6, r6, #15
 80061cc:	d500      	bpl.n	80061d0 <HAL_GPIO_Init+0x78>
 80061ce:	e084      	b.n	80062da <HAL_GPIO_Init+0x182>
        temp &= ~(iocurrent);
 80061d0:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80061d2:	4e4a      	ldr	r6, [pc, #296]	; (80062fc <HAL_GPIO_Init+0x1a4>)
 80061d4:	2780      	movs	r7, #128	; 0x80
 80061d6:	51f2      	str	r2, [r6, r7]

        temp = EXTI->EMR1;
 80061d8:	2284      	movs	r2, #132	; 0x84
 80061da:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061dc:	684e      	ldr	r6, [r1, #4]
 80061de:	03b6      	lsls	r6, r6, #14
 80061e0:	d47d      	bmi.n	80062de <HAL_GPIO_Init+0x186>
        temp &= ~(iocurrent);
 80061e2:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80061e4:	4e45      	ldr	r6, [pc, #276]	; (80062fc <HAL_GPIO_Init+0x1a4>)
 80061e6:	2784      	movs	r7, #132	; 0x84
 80061e8:	51f2      	str	r2, [r6, r7]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80061ea:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061ec:	684e      	ldr	r6, [r1, #4]
 80061ee:	02f6      	lsls	r6, r6, #11
 80061f0:	d477      	bmi.n	80062e2 <HAL_GPIO_Init+0x18a>
        temp &= ~(iocurrent);
 80061f2:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80061f4:	4e41      	ldr	r6, [pc, #260]	; (80062fc <HAL_GPIO_Init+0x1a4>)
 80061f6:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 80061f8:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061fa:	684e      	ldr	r6, [r1, #4]
 80061fc:	02b6      	lsls	r6, r6, #10
 80061fe:	d472      	bmi.n	80062e6 <HAL_GPIO_Init+0x18e>
        temp &= ~(iocurrent);
 8006200:	402a      	ands	r2, r5
 8006202:	0014      	movs	r4, r2
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8006204:	4a3d      	ldr	r2, [pc, #244]	; (80062fc <HAL_GPIO_Init+0x1a4>)
 8006206:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8006208:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800620a:	680a      	ldr	r2, [r1, #0]
 800620c:	0014      	movs	r4, r2
 800620e:	40dc      	lsrs	r4, r3
 8006210:	d06b      	beq.n	80062ea <HAL_GPIO_Init+0x192>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006212:	4665      	mov	r5, ip
 8006214:	409d      	lsls	r5, r3
 8006216:	0014      	movs	r4, r2
 8006218:	402c      	ands	r4, r5
    if (iocurrent != 0x00u)
 800621a:	422a      	tst	r2, r5
 800621c:	d0f4      	beq.n	8006208 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800621e:	684a      	ldr	r2, [r1, #4]
 8006220:	4656      	mov	r6, sl
 8006222:	43b2      	bics	r2, r6
 8006224:	3a01      	subs	r2, #1
 8006226:	2a01      	cmp	r2, #1
 8006228:	d815      	bhi.n	8006256 <HAL_GPIO_Init+0xfe>
        temp = GPIOx->OSPEEDR;
 800622a:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800622c:	005e      	lsls	r6, r3, #1
 800622e:	46b0      	mov	r8, r6
 8006230:	2603      	movs	r6, #3
 8006232:	4647      	mov	r7, r8
 8006234:	40be      	lsls	r6, r7
 8006236:	43b2      	bics	r2, r6
 8006238:	0016      	movs	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 800623a:	68ca      	ldr	r2, [r1, #12]
 800623c:	40ba      	lsls	r2, r7
 800623e:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8006240:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8006242:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006244:	43aa      	bics	r2, r5
 8006246:	0015      	movs	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006248:	684a      	ldr	r2, [r1, #4]
 800624a:	0912      	lsrs	r2, r2, #4
 800624c:	4666      	mov	r6, ip
 800624e:	4032      	ands	r2, r6
 8006250:	409a      	lsls	r2, r3
 8006252:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8006254:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8006256:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006258:	005e      	lsls	r6, r3, #1
 800625a:	2203      	movs	r2, #3
 800625c:	40b2      	lsls	r2, r6
 800625e:	43d7      	mvns	r7, r2
 8006260:	46b8      	mov	r8, r7
 8006262:	4395      	bics	r5, r2
 8006264:	002a      	movs	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006266:	688d      	ldr	r5, [r1, #8]
 8006268:	40b5      	lsls	r5, r6
 800626a:	4315      	orrs	r5, r2
      GPIOx->PUPDR = temp;
 800626c:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800626e:	684d      	ldr	r5, [r1, #4]
 8006270:	4652      	mov	r2, sl
 8006272:	4395      	bics	r5, r2
 8006274:	2d02      	cmp	r5, #2
 8006276:	d086      	beq.n	8006186 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8006278:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800627a:	4642      	mov	r2, r8
 800627c:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800627e:	684a      	ldr	r2, [r1, #4]
 8006280:	2703      	movs	r7, #3
 8006282:	403a      	ands	r2, r7
 8006284:	40b2      	lsls	r2, r6
 8006286:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8006288:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800628a:	684a      	ldr	r2, [r1, #4]
 800628c:	2580      	movs	r5, #128	; 0x80
 800628e:	056d      	lsls	r5, r5, #21
 8006290:	422a      	tst	r2, r5
 8006292:	d0b9      	beq.n	8006208 <HAL_GPIO_Init+0xb0>
        temp = EXTI->EXTICR[position >> 2u];
 8006294:	089a      	lsrs	r2, r3, #2
 8006296:	0092      	lsls	r2, r2, #2
 8006298:	4d18      	ldr	r5, [pc, #96]	; (80062fc <HAL_GPIO_Init+0x1a4>)
 800629a:	46a8      	mov	r8, r5
 800629c:	4442      	add	r2, r8
 800629e:	6e15      	ldr	r5, [r2, #96]	; 0x60
 80062a0:	46a8      	mov	r8, r5
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80062a2:	2603      	movs	r6, #3
 80062a4:	401e      	ands	r6, r3
 80062a6:	00f6      	lsls	r6, r6, #3
 80062a8:	250f      	movs	r5, #15
 80062aa:	40b5      	lsls	r5, r6
 80062ac:	4647      	mov	r7, r8
 80062ae:	43af      	bics	r7, r5
 80062b0:	46b8      	mov	r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80062b2:	25a0      	movs	r5, #160	; 0xa0
 80062b4:	05ed      	lsls	r5, r5, #23
 80062b6:	42a8      	cmp	r0, r5
 80062b8:	d100      	bne.n	80062bc <HAL_GPIO_Init+0x164>
 80062ba:	e77c      	b.n	80061b6 <HAL_GPIO_Init+0x5e>
 80062bc:	4d10      	ldr	r5, [pc, #64]	; (8006300 <HAL_GPIO_Init+0x1a8>)
 80062be:	42a8      	cmp	r0, r5
 80062c0:	d007      	beq.n	80062d2 <HAL_GPIO_Init+0x17a>
 80062c2:	4d10      	ldr	r5, [pc, #64]	; (8006304 <HAL_GPIO_Init+0x1ac>)
 80062c4:	42a8      	cmp	r0, r5
 80062c6:	d006      	beq.n	80062d6 <HAL_GPIO_Init+0x17e>
 80062c8:	9d01      	ldr	r5, [sp, #4]
 80062ca:	4667      	mov	r7, ip
 80062cc:	43bd      	bics	r5, r7
 80062ce:	3505      	adds	r5, #5
 80062d0:	e772      	b.n	80061b8 <HAL_GPIO_Init+0x60>
 80062d2:	2501      	movs	r5, #1
 80062d4:	e770      	b.n	80061b8 <HAL_GPIO_Init+0x60>
 80062d6:	2502      	movs	r5, #2
 80062d8:	e76e      	b.n	80061b8 <HAL_GPIO_Init+0x60>
          temp |= iocurrent;
 80062da:	4322      	orrs	r2, r4
 80062dc:	e779      	b.n	80061d2 <HAL_GPIO_Init+0x7a>
          temp |= iocurrent;
 80062de:	4322      	orrs	r2, r4
 80062e0:	e780      	b.n	80061e4 <HAL_GPIO_Init+0x8c>
          temp |= iocurrent;
 80062e2:	4322      	orrs	r2, r4
 80062e4:	e786      	b.n	80061f4 <HAL_GPIO_Init+0x9c>
          temp |= iocurrent;
 80062e6:	4314      	orrs	r4, r2
 80062e8:	e78c      	b.n	8006204 <HAL_GPIO_Init+0xac>
  }
}
 80062ea:	b003      	add	sp, #12
 80062ec:	bcf0      	pop	{r4, r5, r6, r7}
 80062ee:	46bb      	mov	fp, r7
 80062f0:	46b2      	mov	sl, r6
 80062f2:	46a9      	mov	r9, r5
 80062f4:	46a0      	mov	r8, r4
 80062f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f8:	affff400 	.word	0xaffff400
 80062fc:	40021800 	.word	0x40021800
 8006300:	50000400 	.word	0x50000400
 8006304:	50000800 	.word	0x50000800

08006308 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006308:	2a00      	cmp	r2, #0
 800630a:	d001      	beq.n	8006310 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800630c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800630e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006310:	6281      	str	r1, [r0, #40]	; 0x28
}
 8006312:	e7fc      	b.n	800630e <HAL_GPIO_WritePin+0x6>

08006314 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006314:	4770      	bx	lr
	...

08006318 <HAL_GPIO_EXTI_IRQHandler>:
{
 8006318:	b510      	push	{r4, lr}
 800631a:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800631c:	4b09      	ldr	r3, [pc, #36]	; (8006344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	4218      	tst	r0, r3
 8006322:	d104      	bne.n	800632e <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006324:	4b07      	ldr	r3, [pc, #28]	; (8006344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	4223      	tst	r3, r4
 800632a:	d105      	bne.n	8006338 <HAL_GPIO_EXTI_IRQHandler+0x20>
}
 800632c:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800632e:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006330:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006332:	f7ff ffef 	bl	8006314 <HAL_GPIO_EXTI_Rising_Callback>
 8006336:	e7f5      	b.n	8006324 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006338:	4b02      	ldr	r3, [pc, #8]	; (8006344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800633a:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800633c:	0020      	movs	r0, r4
 800633e:	f7fe fb7f 	bl	8004a40 <HAL_GPIO_EXTI_Falling_Callback>
}
 8006342:	e7f3      	b.n	800632c <HAL_GPIO_EXTI_IRQHandler+0x14>
 8006344:	40021800 	.word	0x40021800

08006348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006348:	b510      	push	{r4, lr}
 800634a:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800634c:	4913      	ldr	r1, [pc, #76]	; (800639c <HAL_PWREx_ControlVoltageScaling+0x54>)
 800634e:	680b      	ldr	r3, [r1, #0]
 8006350:	4813      	ldr	r0, [pc, #76]	; (80063a0 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8006352:	4003      	ands	r3, r0
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800635c:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800635e:	429a      	cmp	r2, r3
 8006360:	d000      	beq.n	8006364 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8006362:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	0058      	lsls	r0, r3, #1
 800636a:	18c0      	adds	r0, r0, r3
 800636c:	0040      	lsls	r0, r0, #1
 800636e:	490e      	ldr	r1, [pc, #56]	; (80063a8 <HAL_PWREx_ControlVoltageScaling+0x60>)
 8006370:	f7f9 fee4 	bl	800013c <__udivsi3>
 8006374:	3001      	adds	r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006376:	4b09      	ldr	r3, [pc, #36]	; (800639c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	055b      	lsls	r3, r3, #21
 800637c:	d50a      	bpl.n	8006394 <HAL_PWREx_ControlVoltageScaling+0x4c>
 800637e:	4907      	ldr	r1, [pc, #28]	; (800639c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8006380:	2280      	movs	r2, #128	; 0x80
 8006382:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8006384:	3801      	subs	r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006386:	694b      	ldr	r3, [r1, #20]
 8006388:	4213      	tst	r3, r2
 800638a:	d005      	beq.n	8006398 <HAL_PWREx_ControlVoltageScaling+0x50>
      if(wait_loop_index != 0U)
 800638c:	2800      	cmp	r0, #0
 800638e:	d1f9      	bne.n	8006384 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8006390:	2003      	movs	r0, #3
 8006392:	e7e6      	b.n	8006362 <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 8006394:	2000      	movs	r0, #0
 8006396:	e7e4      	b.n	8006362 <HAL_PWREx_ControlVoltageScaling+0x1a>
 8006398:	2000      	movs	r0, #0
 800639a:	e7e2      	b.n	8006362 <HAL_PWREx_ControlVoltageScaling+0x1a>
 800639c:	40007000 	.word	0x40007000
 80063a0:	fffff9ff 	.word	0xfffff9ff
 80063a4:	20000078 	.word	0x20000078
 80063a8:	000f4240 	.word	0x000f4240

080063ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ae:	46ce      	mov	lr, r9
 80063b0:	4647      	mov	r7, r8
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b083      	sub	sp, #12
 80063b6:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063b8:	d100      	bne.n	80063bc <HAL_RCC_OscConfig+0x10>
 80063ba:	e24b      	b.n	8006854 <HAL_RCC_OscConfig+0x4a8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063bc:	6803      	ldr	r3, [r0, #0]
 80063be:	07db      	lsls	r3, r3, #31
 80063c0:	d538      	bpl.n	8006434 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063c2:	4ac8      	ldr	r2, [pc, #800]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80063c4:	6891      	ldr	r1, [r2, #8]
 80063c6:	2338      	movs	r3, #56	; 0x38
 80063c8:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063ca:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	d026      	beq.n	800641e <HAL_RCC_OscConfig+0x72>
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d027      	beq.n	8006424 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d4:	6863      	ldr	r3, [r4, #4]
 80063d6:	2280      	movs	r2, #128	; 0x80
 80063d8:	0252      	lsls	r2, r2, #9
 80063da:	4293      	cmp	r3, r2
 80063dc:	d07b      	beq.n	80064d6 <HAL_RCC_OscConfig+0x12a>
 80063de:	22a0      	movs	r2, #160	; 0xa0
 80063e0:	02d2      	lsls	r2, r2, #11
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d07e      	beq.n	80064e4 <HAL_RCC_OscConfig+0x138>
 80063e6:	4bbf      	ldr	r3, [pc, #764]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	49bf      	ldr	r1, [pc, #764]	; (80066e8 <HAL_RCC_OscConfig+0x33c>)
 80063ec:	400a      	ands	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	49be      	ldr	r1, [pc, #760]	; (80066ec <HAL_RCC_OscConfig+0x340>)
 80063f4:	400a      	ands	r2, r1
 80063f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063f8:	6863      	ldr	r3, [r4, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d07e      	beq.n	80064fc <HAL_RCC_OscConfig+0x150>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fe:	f7ff f825 	bl	800544c <HAL_GetTick>
 8006402:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006404:	4fb7      	ldr	r7, [pc, #732]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 8006406:	2680      	movs	r6, #128	; 0x80
 8006408:	02b6      	lsls	r6, r6, #10
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	4233      	tst	r3, r6
 800640e:	d111      	bne.n	8006434 <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006410:	f7ff f81c 	bl	800544c <HAL_GetTick>
 8006414:	1b40      	subs	r0, r0, r5
 8006416:	2864      	cmp	r0, #100	; 0x64
 8006418:	d9f7      	bls.n	800640a <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800641a:	2003      	movs	r0, #3
 800641c:	e21b      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800641e:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006420:	0793      	lsls	r3, r2, #30
 8006422:	d1d7      	bne.n	80063d4 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006424:	4baf      	ldr	r3, [pc, #700]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	039b      	lsls	r3, r3, #14
 800642a:	d503      	bpl.n	8006434 <HAL_RCC_OscConfig+0x88>
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d100      	bne.n	8006434 <HAL_RCC_OscConfig+0x88>
 8006432:	e215      	b.n	8006860 <HAL_RCC_OscConfig+0x4b4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	079b      	lsls	r3, r3, #30
 8006438:	d52b      	bpl.n	8006492 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800643a:	4aaa      	ldr	r2, [pc, #680]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 800643c:	6891      	ldr	r1, [r2, #8]
 800643e:	2338      	movs	r3, #56	; 0x38
 8006440:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006442:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006444:	2b10      	cmp	r3, #16
 8006446:	d069      	beq.n	800651c <HAL_RCC_OscConfig+0x170>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d16c      	bne.n	8006526 <HAL_RCC_OscConfig+0x17a>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800644c:	4ba5      	ldr	r3, [pc, #660]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	055b      	lsls	r3, r3, #21
 8006452:	d500      	bpl.n	8006456 <HAL_RCC_OscConfig+0xaa>
 8006454:	e227      	b.n	80068a6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006456:	49a3      	ldr	r1, [pc, #652]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 8006458:	684a      	ldr	r2, [r1, #4]
 800645a:	6963      	ldr	r3, [r4, #20]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	48a4      	ldr	r0, [pc, #656]	; (80066f0 <HAL_RCC_OscConfig+0x344>)
 8006460:	4002      	ands	r2, r0
 8006462:	4313      	orrs	r3, r2
 8006464:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006466:	4a9f      	ldr	r2, [pc, #636]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	49a2      	ldr	r1, [pc, #648]	; (80066f4 <HAL_RCC_OscConfig+0x348>)
 800646c:	400b      	ands	r3, r1
 800646e:	6921      	ldr	r1, [r4, #16]
 8006470:	430b      	orrs	r3, r1
 8006472:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006474:	6813      	ldr	r3, [r2, #0]
 8006476:	049b      	lsls	r3, r3, #18
 8006478:	0f5b      	lsrs	r3, r3, #29
 800647a:	4a9f      	ldr	r2, [pc, #636]	; (80066f8 <HAL_RCC_OscConfig+0x34c>)
 800647c:	40da      	lsrs	r2, r3
 800647e:	0013      	movs	r3, r2
 8006480:	4a9e      	ldr	r2, [pc, #632]	; (80066fc <HAL_RCC_OscConfig+0x350>)
 8006482:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006484:	4b9e      	ldr	r3, [pc, #632]	; (8006700 <HAL_RCC_OscConfig+0x354>)
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	f7fe ff98 	bl	80053bc <HAL_InitTick>
 800648c:	2800      	cmp	r0, #0
 800648e:	d000      	beq.n	8006492 <HAL_RCC_OscConfig+0xe6>
 8006490:	e1e8      	b.n	8006864 <HAL_RCC_OscConfig+0x4b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	071b      	lsls	r3, r3, #28
 8006496:	d400      	bmi.n	800649a <HAL_RCC_OscConfig+0xee>
 8006498:	e08b      	b.n	80065b2 <HAL_RCC_OscConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800649a:	4b92      	ldr	r3, [pc, #584]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	2338      	movs	r3, #56	; 0x38
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b18      	cmp	r3, #24
 80064a4:	d07d      	beq.n	80065a2 <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064a6:	69a3      	ldr	r3, [r4, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d100      	bne.n	80064ae <HAL_RCC_OscConfig+0x102>
 80064ac:	e0c4      	b.n	8006638 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80064ae:	4a8d      	ldr	r2, [pc, #564]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80064b0:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80064b2:	2101      	movs	r1, #1
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7fe ffc8 	bl	800544c <HAL_GetTick>
 80064bc:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064be:	4f89      	ldr	r7, [pc, #548]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80064c0:	2602      	movs	r6, #2
 80064c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064c4:	421e      	tst	r6, r3
 80064c6:	d174      	bne.n	80065b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064c8:	f7fe ffc0 	bl	800544c <HAL_GetTick>
 80064cc:	1b40      	subs	r0, r0, r5
 80064ce:	2802      	cmp	r0, #2
 80064d0:	d9f7      	bls.n	80064c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80064d2:	2003      	movs	r0, #3
 80064d4:	e1bf      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064d6:	4a83      	ldr	r2, [pc, #524]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80064d8:	6811      	ldr	r1, [r2, #0]
 80064da:	2380      	movs	r3, #128	; 0x80
 80064dc:	025b      	lsls	r3, r3, #9
 80064de:	430b      	orrs	r3, r1
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	e789      	b.n	80063f8 <HAL_RCC_OscConfig+0x4c>
 80064e4:	4b7f      	ldr	r3, [pc, #508]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80064e6:	6819      	ldr	r1, [r3, #0]
 80064e8:	2280      	movs	r2, #128	; 0x80
 80064ea:	02d2      	lsls	r2, r2, #11
 80064ec:	430a      	orrs	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	6819      	ldr	r1, [r3, #0]
 80064f2:	2280      	movs	r2, #128	; 0x80
 80064f4:	0252      	lsls	r2, r2, #9
 80064f6:	430a      	orrs	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e77d      	b.n	80063f8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80064fc:	f7fe ffa6 	bl	800544c <HAL_GetTick>
 8006500:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006502:	4f78      	ldr	r7, [pc, #480]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 8006504:	2680      	movs	r6, #128	; 0x80
 8006506:	02b6      	lsls	r6, r6, #10
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	4233      	tst	r3, r6
 800650c:	d092      	beq.n	8006434 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800650e:	f7fe ff9d 	bl	800544c <HAL_GetTick>
 8006512:	1b40      	subs	r0, r0, r5
 8006514:	2864      	cmp	r0, #100	; 0x64
 8006516:	d9f7      	bls.n	8006508 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8006518:	2003      	movs	r0, #3
 800651a:	e19c      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800651c:	3b0d      	subs	r3, #13
 800651e:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006520:	2b02      	cmp	r3, #2
 8006522:	d100      	bne.n	8006526 <HAL_RCC_OscConfig+0x17a>
 8006524:	e1a6      	b.n	8006874 <HAL_RCC_OscConfig+0x4c8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006526:	68e3      	ldr	r3, [r4, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d024      	beq.n	8006576 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800652c:	4a6d      	ldr	r2, [pc, #436]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 800652e:	6813      	ldr	r3, [r2, #0]
 8006530:	4970      	ldr	r1, [pc, #448]	; (80066f4 <HAL_RCC_OscConfig+0x348>)
 8006532:	400b      	ands	r3, r1
 8006534:	6921      	ldr	r1, [r4, #16]
 8006536:	430b      	orrs	r3, r1
 8006538:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 800653a:	6811      	ldr	r1, [r2, #0]
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	430b      	orrs	r3, r1
 8006542:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006544:	f7fe ff82 	bl	800544c <HAL_GetTick>
 8006548:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800654a:	4f66      	ldr	r7, [pc, #408]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 800654c:	2680      	movs	r6, #128	; 0x80
 800654e:	00f6      	lsls	r6, r6, #3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	4233      	tst	r3, r6
 8006554:	d106      	bne.n	8006564 <HAL_RCC_OscConfig+0x1b8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006556:	f7fe ff79 	bl	800544c <HAL_GetTick>
 800655a:	1b40      	subs	r0, r0, r5
 800655c:	2802      	cmp	r0, #2
 800655e:	d9f7      	bls.n	8006550 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8006560:	2003      	movs	r0, #3
 8006562:	e178      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006564:	495f      	ldr	r1, [pc, #380]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 8006566:	684a      	ldr	r2, [r1, #4]
 8006568:	6963      	ldr	r3, [r4, #20]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	4860      	ldr	r0, [pc, #384]	; (80066f0 <HAL_RCC_OscConfig+0x344>)
 800656e:	4002      	ands	r2, r0
 8006570:	4313      	orrs	r3, r2
 8006572:	604b      	str	r3, [r1, #4]
 8006574:	e78d      	b.n	8006492 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 8006576:	4a5b      	ldr	r2, [pc, #364]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 8006578:	6813      	ldr	r3, [r2, #0]
 800657a:	4962      	ldr	r1, [pc, #392]	; (8006704 <HAL_RCC_OscConfig+0x358>)
 800657c:	400b      	ands	r3, r1
 800657e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006580:	f7fe ff64 	bl	800544c <HAL_GetTick>
 8006584:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006586:	4f57      	ldr	r7, [pc, #348]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 8006588:	2680      	movs	r6, #128	; 0x80
 800658a:	00f6      	lsls	r6, r6, #3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	4233      	tst	r3, r6
 8006590:	d100      	bne.n	8006594 <HAL_RCC_OscConfig+0x1e8>
 8006592:	e77e      	b.n	8006492 <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006594:	f7fe ff5a 	bl	800544c <HAL_GetTick>
 8006598:	1b40      	subs	r0, r0, r5
 800659a:	2802      	cmp	r0, #2
 800659c:	d9f6      	bls.n	800658c <HAL_RCC_OscConfig+0x1e0>
            return HAL_TIMEOUT;
 800659e:	2003      	movs	r0, #3
 80065a0:	e159      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80065a2:	4b50      	ldr	r3, [pc, #320]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80065a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a6:	079b      	lsls	r3, r3, #30
 80065a8:	d503      	bpl.n	80065b2 <HAL_RCC_OscConfig+0x206>
 80065aa:	69a3      	ldr	r3, [r4, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d100      	bne.n	80065b2 <HAL_RCC_OscConfig+0x206>
 80065b0:	e15a      	b.n	8006868 <HAL_RCC_OscConfig+0x4bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	075b      	lsls	r3, r3, #29
 80065b6:	d400      	bmi.n	80065ba <HAL_RCC_OscConfig+0x20e>
 80065b8:	e0ad      	b.n	8006716 <HAL_RCC_OscConfig+0x36a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80065ba:	4b4a      	ldr	r3, [pc, #296]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	2338      	movs	r3, #56	; 0x38
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d04c      	beq.n	8006660 <HAL_RCC_OscConfig+0x2b4>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065c6:	4b47      	ldr	r3, [pc, #284]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80065ca:	2200      	movs	r2, #0
 80065cc:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	d40b      	bmi.n	80065ea <HAL_RCC_OscConfig+0x23e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80065d2:	4a44      	ldr	r2, [pc, #272]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80065d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80065d6:	2080      	movs	r0, #128	; 0x80
 80065d8:	0540      	lsls	r0, r0, #21
 80065da:	4301      	orrs	r1, r0
 80065dc:	63d1      	str	r1, [r2, #60]	; 0x3c
 80065de:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80065e0:	4003      	ands	r3, r0
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80065e6:	2301      	movs	r3, #1
 80065e8:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ea:	4b47      	ldr	r3, [pc, #284]	; (8006708 <HAL_RCC_OscConfig+0x35c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	05db      	lsls	r3, r3, #23
 80065f0:	d53f      	bpl.n	8006672 <HAL_RCC_OscConfig+0x2c6>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065f2:	68a3      	ldr	r3, [r4, #8]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d052      	beq.n	800669e <HAL_RCC_OscConfig+0x2f2>
 80065f8:	2b05      	cmp	r3, #5
 80065fa:	d056      	beq.n	80066aa <HAL_RCC_OscConfig+0x2fe>
 80065fc:	4b39      	ldr	r3, [pc, #228]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80065fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006600:	2101      	movs	r1, #1
 8006602:	438a      	bics	r2, r1
 8006604:	65da      	str	r2, [r3, #92]	; 0x5c
 8006606:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006608:	3103      	adds	r1, #3
 800660a:	438a      	bics	r2, r1
 800660c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d054      	beq.n	80066be <HAL_RCC_OscConfig+0x312>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fe ff1a 	bl	800544c <HAL_GetTick>
 8006618:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800661a:	4b32      	ldr	r3, [pc, #200]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 800661c:	4698      	mov	r8, r3
 800661e:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006620:	4d3a      	ldr	r5, [pc, #232]	; (800670c <HAL_RCC_OscConfig+0x360>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006622:	4643      	mov	r3, r8
 8006624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006626:	421f      	tst	r7, r3
 8006628:	d172      	bne.n	8006710 <HAL_RCC_OscConfig+0x364>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800662a:	f7fe ff0f 	bl	800544c <HAL_GetTick>
 800662e:	1b80      	subs	r0, r0, r6
 8006630:	42a8      	cmp	r0, r5
 8006632:	d9f6      	bls.n	8006622 <HAL_RCC_OscConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006634:	2003      	movs	r0, #3
 8006636:	e10e      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_LSI_DISABLE();
 8006638:	4a2a      	ldr	r2, [pc, #168]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 800663a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800663c:	2101      	movs	r1, #1
 800663e:	438b      	bics	r3, r1
 8006640:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006642:	f7fe ff03 	bl	800544c <HAL_GetTick>
 8006646:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006648:	4f26      	ldr	r7, [pc, #152]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 800664a:	2602      	movs	r6, #2
 800664c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800664e:	421e      	tst	r6, r3
 8006650:	d0af      	beq.n	80065b2 <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006652:	f7fe fefb 	bl	800544c <HAL_GetTick>
 8006656:	1b40      	subs	r0, r0, r5
 8006658:	2802      	cmp	r0, #2
 800665a:	d9f7      	bls.n	800664c <HAL_RCC_OscConfig+0x2a0>
            return HAL_TIMEOUT;
 800665c:	2003      	movs	r0, #3
 800665e:	e0fa      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006660:	4b20      	ldr	r3, [pc, #128]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 8006662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006664:	079b      	lsls	r3, r3, #30
 8006666:	d556      	bpl.n	8006716 <HAL_RCC_OscConfig+0x36a>
 8006668:	68a3      	ldr	r3, [r4, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d153      	bne.n	8006716 <HAL_RCC_OscConfig+0x36a>
        return HAL_ERROR;
 800666e:	2001      	movs	r0, #1
 8006670:	e0f1      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006672:	4a25      	ldr	r2, [pc, #148]	; (8006708 <HAL_RCC_OscConfig+0x35c>)
 8006674:	6811      	ldr	r1, [r2, #0]
 8006676:	2380      	movs	r3, #128	; 0x80
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	430b      	orrs	r3, r1
 800667c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800667e:	f7fe fee5 	bl	800544c <HAL_GetTick>
 8006682:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006684:	4d20      	ldr	r5, [pc, #128]	; (8006708 <HAL_RCC_OscConfig+0x35c>)
 8006686:	2780      	movs	r7, #128	; 0x80
 8006688:	007f      	lsls	r7, r7, #1
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	423b      	tst	r3, r7
 800668e:	d1b0      	bne.n	80065f2 <HAL_RCC_OscConfig+0x246>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006690:	f7fe fedc 	bl	800544c <HAL_GetTick>
 8006694:	1b80      	subs	r0, r0, r6
 8006696:	2802      	cmp	r0, #2
 8006698:	d9f7      	bls.n	800668a <HAL_RCC_OscConfig+0x2de>
            return HAL_TIMEOUT;
 800669a:	2003      	movs	r0, #3
 800669c:	e0db      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800669e:	4a11      	ldr	r2, [pc, #68]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80066a0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80066a2:	2101      	movs	r1, #1
 80066a4:	430b      	orrs	r3, r1
 80066a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80066a8:	e7b1      	b.n	800660e <HAL_RCC_OscConfig+0x262>
 80066aa:	4b0e      	ldr	r3, [pc, #56]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80066ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066ae:	2104      	movs	r1, #4
 80066b0:	430a      	orrs	r2, r1
 80066b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80066b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066b6:	3903      	subs	r1, #3
 80066b8:	430a      	orrs	r2, r1
 80066ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80066bc:	e7a7      	b.n	800660e <HAL_RCC_OscConfig+0x262>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066be:	f7fe fec5 	bl	800544c <HAL_GetTick>
 80066c2:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066c4:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <HAL_RCC_OscConfig+0x338>)
 80066c6:	4698      	mov	r8, r3
 80066c8:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ca:	4d10      	ldr	r5, [pc, #64]	; (800670c <HAL_RCC_OscConfig+0x360>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066cc:	4643      	mov	r3, r8
 80066ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d0:	421f      	tst	r7, r3
 80066d2:	d01d      	beq.n	8006710 <HAL_RCC_OscConfig+0x364>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d4:	f7fe feba 	bl	800544c <HAL_GetTick>
 80066d8:	1b80      	subs	r0, r0, r6
 80066da:	42a8      	cmp	r0, r5
 80066dc:	d9f6      	bls.n	80066cc <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 80066de:	2003      	movs	r0, #3
 80066e0:	e0b9      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	40021000 	.word	0x40021000
 80066e8:	fffeffff 	.word	0xfffeffff
 80066ec:	fffbffff 	.word	0xfffbffff
 80066f0:	ffff80ff 	.word	0xffff80ff
 80066f4:	ffffc7ff 	.word	0xffffc7ff
 80066f8:	00f42400 	.word	0x00f42400
 80066fc:	20000078 	.word	0x20000078
 8006700:	20000080 	.word	0x20000080
 8006704:	fffffeff 	.word	0xfffffeff
 8006708:	40007000 	.word	0x40007000
 800670c:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006710:	464b      	mov	r3, r9
 8006712:	2b01      	cmp	r3, #1
 8006714:	d029      	beq.n	800676a <HAL_RCC_OscConfig+0x3be>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006716:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006718:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800671a:	2b00      	cmp	r3, #0
 800671c:	d100      	bne.n	8006720 <HAL_RCC_OscConfig+0x374>
 800671e:	e09a      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006720:	4a67      	ldr	r2, [pc, #412]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 8006722:	6891      	ldr	r1, [r2, #8]
 8006724:	2238      	movs	r2, #56	; 0x38
 8006726:	400a      	ands	r2, r1
 8006728:	2a10      	cmp	r2, #16
 800672a:	d069      	beq.n	8006800 <HAL_RCC_OscConfig+0x454>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800672c:	2b02      	cmp	r3, #2
 800672e:	d022      	beq.n	8006776 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_PLL_DISABLE();
 8006730:	4b63      	ldr	r3, [pc, #396]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4963      	ldr	r1, [pc, #396]	; (80068c4 <HAL_RCC_OscConfig+0x518>)
 8006736:	400a      	ands	r2, r1
 8006738:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	2103      	movs	r1, #3
 800673e:	438a      	bics	r2, r1
 8006740:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	4960      	ldr	r1, [pc, #384]	; (80068c8 <HAL_RCC_OscConfig+0x51c>)
 8006746:	400a      	ands	r2, r1
 8006748:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800674a:	f7fe fe7f 	bl	800544c <HAL_GetTick>
 800674e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006750:	4e5b      	ldr	r6, [pc, #364]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 8006752:	2580      	movs	r5, #128	; 0x80
 8006754:	04ad      	lsls	r5, r5, #18
 8006756:	6833      	ldr	r3, [r6, #0]
 8006758:	422b      	tst	r3, r5
 800675a:	d04f      	beq.n	80067fc <HAL_RCC_OscConfig+0x450>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800675c:	f7fe fe76 	bl	800544c <HAL_GetTick>
 8006760:	1b00      	subs	r0, r0, r4
 8006762:	2802      	cmp	r0, #2
 8006764:	d9f7      	bls.n	8006756 <HAL_RCC_OscConfig+0x3aa>
            return HAL_TIMEOUT;
 8006766:	2003      	movs	r0, #3
 8006768:	e075      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_PWR_CLK_DISABLE();
 800676a:	4a55      	ldr	r2, [pc, #340]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 800676c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800676e:	4957      	ldr	r1, [pc, #348]	; (80068cc <HAL_RCC_OscConfig+0x520>)
 8006770:	400b      	ands	r3, r1
 8006772:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006774:	e7cf      	b.n	8006716 <HAL_RCC_OscConfig+0x36a>
        __HAL_RCC_PLL_DISABLE();
 8006776:	4a52      	ldr	r2, [pc, #328]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 8006778:	6813      	ldr	r3, [r2, #0]
 800677a:	4952      	ldr	r1, [pc, #328]	; (80068c4 <HAL_RCC_OscConfig+0x518>)
 800677c:	400b      	ands	r3, r1
 800677e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006780:	f7fe fe64 	bl	800544c <HAL_GetTick>
 8006784:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006786:	4f4e      	ldr	r7, [pc, #312]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 8006788:	2680      	movs	r6, #128	; 0x80
 800678a:	04b6      	lsls	r6, r6, #18
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	4233      	tst	r3, r6
 8006790:	d006      	beq.n	80067a0 <HAL_RCC_OscConfig+0x3f4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006792:	f7fe fe5b 	bl	800544c <HAL_GetTick>
 8006796:	1b40      	subs	r0, r0, r5
 8006798:	2802      	cmp	r0, #2
 800679a:	d9f7      	bls.n	800678c <HAL_RCC_OscConfig+0x3e0>
            return HAL_TIMEOUT;
 800679c:	2003      	movs	r0, #3
 800679e:	e05a      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067a0:	4a47      	ldr	r2, [pc, #284]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 80067a2:	68d1      	ldr	r1, [r2, #12]
 80067a4:	6a23      	ldr	r3, [r4, #32]
 80067a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80067a8:	4303      	orrs	r3, r0
 80067aa:	4849      	ldr	r0, [pc, #292]	; (80068d0 <HAL_RCC_OscConfig+0x524>)
 80067ac:	4001      	ands	r1, r0
 80067ae:	430b      	orrs	r3, r1
 80067b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80067b2:	430b      	orrs	r3, r1
 80067b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80067b6:	430b      	orrs	r3, r1
 80067b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ba:	430b      	orrs	r3, r1
 80067bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80067be:	0209      	lsls	r1, r1, #8
 80067c0:	430b      	orrs	r3, r1
 80067c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80067c4:	6811      	ldr	r1, [r2, #0]
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	045b      	lsls	r3, r3, #17
 80067ca:	430b      	orrs	r3, r1
 80067cc:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80067ce:	68d1      	ldr	r1, [r2, #12]
 80067d0:	2380      	movs	r3, #128	; 0x80
 80067d2:	055b      	lsls	r3, r3, #21
 80067d4:	430b      	orrs	r3, r1
 80067d6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80067d8:	f7fe fe38 	bl	800544c <HAL_GetTick>
 80067dc:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067de:	4e38      	ldr	r6, [pc, #224]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 80067e0:	2580      	movs	r5, #128	; 0x80
 80067e2:	04ad      	lsls	r5, r5, #18
 80067e4:	6833      	ldr	r3, [r6, #0]
 80067e6:	422b      	tst	r3, r5
 80067e8:	d106      	bne.n	80067f8 <HAL_RCC_OscConfig+0x44c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ea:	f7fe fe2f 	bl	800544c <HAL_GetTick>
 80067ee:	1b00      	subs	r0, r0, r4
 80067f0:	2802      	cmp	r0, #2
 80067f2:	d9f7      	bls.n	80067e4 <HAL_RCC_OscConfig+0x438>
            return HAL_TIMEOUT;
 80067f4:	2003      	movs	r0, #3
 80067f6:	e02e      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
  return HAL_OK;
 80067f8:	2000      	movs	r0, #0
 80067fa:	e02c      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
 80067fc:	2000      	movs	r0, #0
 80067fe:	e02a      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006800:	2b01      	cmp	r3, #1
 8006802:	d033      	beq.n	800686c <HAL_RCC_OscConfig+0x4c0>
        temp_pllckcfg = RCC->PLLCFGR;
 8006804:	4b2e      	ldr	r3, [pc, #184]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 8006806:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006808:	2303      	movs	r3, #3
 800680a:	4013      	ands	r3, r2
          return HAL_ERROR;
 800680c:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680e:	6a21      	ldr	r1, [r4, #32]
 8006810:	428b      	cmp	r3, r1
 8006812:	d120      	bne.n	8006856 <HAL_RCC_OscConfig+0x4aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006814:	2370      	movs	r3, #112	; 0x70
 8006816:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006818:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800681a:	428b      	cmp	r3, r1
 800681c:	d11b      	bne.n	8006856 <HAL_RCC_OscConfig+0x4aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800681e:	21fe      	movs	r1, #254	; 0xfe
 8006820:	01c9      	lsls	r1, r1, #7
 8006822:	4011      	ands	r1, r2
 8006824:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006826:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006828:	4299      	cmp	r1, r3
 800682a:	d114      	bne.n	8006856 <HAL_RCC_OscConfig+0x4aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800682c:	23f8      	movs	r3, #248	; 0xf8
 800682e:	039b      	lsls	r3, r3, #14
 8006830:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006832:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006834:	428b      	cmp	r3, r1
 8006836:	d10e      	bne.n	8006856 <HAL_RCC_OscConfig+0x4aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006838:	23e0      	movs	r3, #224	; 0xe0
 800683a:	051b      	lsls	r3, r3, #20
 800683c:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800683e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006840:	428b      	cmp	r3, r1
 8006842:	d108      	bne.n	8006856 <HAL_RCC_OscConfig+0x4aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006844:	0f50      	lsrs	r0, r2, #29
 8006846:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800684a:	1ac0      	subs	r0, r0, r3
 800684c:	1e43      	subs	r3, r0, #1
 800684e:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 8006850:	b2c0      	uxtb	r0, r0
 8006852:	e000      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
    return HAL_ERROR;
 8006854:	2001      	movs	r0, #1
}
 8006856:	b003      	add	sp, #12
 8006858:	bcc0      	pop	{r6, r7}
 800685a:	46b9      	mov	r9, r7
 800685c:	46b0      	mov	r8, r6
 800685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8006860:	2001      	movs	r0, #1
 8006862:	e7f8      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
          return HAL_ERROR;
 8006864:	2001      	movs	r0, #1
 8006866:	e7f6      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
        return HAL_ERROR;
 8006868:	2001      	movs	r0, #1
 800686a:	e7f4      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
        return HAL_ERROR;
 800686c:	2001      	movs	r0, #1
 800686e:	e7f2      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
        return HAL_ERROR;
 8006870:	2001      	movs	r0, #1
 8006872:	e7f0      	b.n	8006856 <HAL_RCC_OscConfig+0x4aa>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006874:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	055b      	lsls	r3, r3, #21
 800687a:	d408      	bmi.n	800688e <HAL_RCC_OscConfig+0x4e2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687c:	4910      	ldr	r1, [pc, #64]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 800687e:	684a      	ldr	r2, [r1, #4]
 8006880:	6963      	ldr	r3, [r4, #20]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	4813      	ldr	r0, [pc, #76]	; (80068d4 <HAL_RCC_OscConfig+0x528>)
 8006886:	4002      	ands	r2, r0
 8006888:	4313      	orrs	r3, r2
 800688a:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800688c:	e5fa      	b.n	8006484 <HAL_RCC_OscConfig+0xd8>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800688e:	68e3      	ldr	r3, [r4, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0ed      	beq.n	8006870 <HAL_RCC_OscConfig+0x4c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006894:	490a      	ldr	r1, [pc, #40]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 8006896:	684a      	ldr	r2, [r1, #4]
 8006898:	6963      	ldr	r3, [r4, #20]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	480d      	ldr	r0, [pc, #52]	; (80068d4 <HAL_RCC_OscConfig+0x528>)
 800689e:	4002      	ands	r2, r0
 80068a0:	4313      	orrs	r3, r2
 80068a2:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068a4:	e5ee      	b.n	8006484 <HAL_RCC_OscConfig+0xd8>
        return HAL_ERROR;
 80068a6:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068a8:	68e3      	ldr	r3, [r4, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0d3      	beq.n	8006856 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ae:	4904      	ldr	r1, [pc, #16]	; (80068c0 <HAL_RCC_OscConfig+0x514>)
 80068b0:	684a      	ldr	r2, [r1, #4]
 80068b2:	6963      	ldr	r3, [r4, #20]
 80068b4:	021b      	lsls	r3, r3, #8
 80068b6:	4807      	ldr	r0, [pc, #28]	; (80068d4 <HAL_RCC_OscConfig+0x528>)
 80068b8:	4002      	ands	r2, r0
 80068ba:	4313      	orrs	r3, r2
 80068bc:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068be:	e5d2      	b.n	8006466 <HAL_RCC_OscConfig+0xba>
 80068c0:	40021000 	.word	0x40021000
 80068c4:	feffffff 	.word	0xfeffffff
 80068c8:	eefeffff 	.word	0xeefeffff
 80068cc:	efffffff 	.word	0xefffffff
 80068d0:	11c1808c 	.word	0x11c1808c
 80068d4:	ffff80ff 	.word	0xffff80ff

080068d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068d8:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068da:	4b27      	ldr	r3, [pc, #156]	; (8006978 <HAL_RCC_GetSysClockFreq+0xa0>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2238      	movs	r2, #56	; 0x38
 80068e0:	421a      	tst	r2, r3
 80068e2:	d106      	bne.n	80068f2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80068e4:	4b24      	ldr	r3, [pc, #144]	; (8006978 <HAL_RCC_GetSysClockFreq+0xa0>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	049b      	lsls	r3, r3, #18
 80068ea:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80068ec:	4823      	ldr	r0, [pc, #140]	; (800697c <HAL_RCC_GetSysClockFreq+0xa4>)
 80068ee:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80068f0:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068f2:	4b21      	ldr	r3, [pc, #132]	; (8006978 <HAL_RCC_GetSysClockFreq+0xa0>)
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	2338      	movs	r3, #56	; 0x38
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d037      	beq.n	800696e <HAL_RCC_GetSysClockFreq+0x96>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068fe:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	2338      	movs	r3, #56	; 0x38
 8006904:	4013      	ands	r3, r2
 8006906:	2b10      	cmp	r3, #16
 8006908:	d011      	beq.n	800692e <HAL_RCC_GetSysClockFreq+0x56>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800690a:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <HAL_RCC_GetSysClockFreq+0xa0>)
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	2338      	movs	r3, #56	; 0x38
 8006910:	4013      	ands	r3, r2
 8006912:	2b20      	cmp	r3, #32
 8006914:	d02d      	beq.n	8006972 <HAL_RCC_GetSysClockFreq+0x9a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006916:	4b18      	ldr	r3, [pc, #96]	; (8006978 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2038      	movs	r0, #56	; 0x38
 800691c:	4018      	ands	r0, r3
    sysclockfreq = 0U;
 800691e:	3818      	subs	r0, #24
 8006920:	4243      	negs	r3, r0
 8006922:	4158      	adcs	r0, r3
 8006924:	4240      	negs	r0, r0
 8006926:	23fa      	movs	r3, #250	; 0xfa
 8006928:	01db      	lsls	r3, r3, #7
 800692a:	4018      	ands	r0, r3
 800692c:	e7e0      	b.n	80068f0 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800692e:	4a12      	ldr	r2, [pc, #72]	; (8006978 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006930:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006932:	68d1      	ldr	r1, [r2, #12]
 8006934:	0649      	lsls	r1, r1, #25
 8006936:	0f49      	lsrs	r1, r1, #29
 8006938:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800693a:	43db      	mvns	r3, r3
    switch (pllsource)
 800693c:	079b      	lsls	r3, r3, #30
 800693e:	d00e      	beq.n	800695e <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006940:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006942:	68d8      	ldr	r0, [r3, #12]
 8006944:	0440      	lsls	r0, r0, #17
 8006946:	0e44      	lsrs	r4, r0, #25
 8006948:	480c      	ldr	r0, [pc, #48]	; (800697c <HAL_RCC_GetSysClockFreq+0xa4>)
 800694a:	f7f9 fbf7 	bl	800013c <__udivsi3>
 800694e:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006950:	4b09      	ldr	r3, [pc, #36]	; (8006978 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006952:	68d9      	ldr	r1, [r3, #12]
 8006954:	0f49      	lsrs	r1, r1, #29
 8006956:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8006958:	f7f9 fbf0 	bl	800013c <__udivsi3>
 800695c:	e7c8      	b.n	80068f0 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800695e:	68d0      	ldr	r0, [r2, #12]
 8006960:	0440      	lsls	r0, r0, #17
 8006962:	0e44      	lsrs	r4, r0, #25
 8006964:	4806      	ldr	r0, [pc, #24]	; (8006980 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006966:	f7f9 fbe9 	bl	800013c <__udivsi3>
 800696a:	4360      	muls	r0, r4
        break;
 800696c:	e7f0      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = HSE_VALUE;
 800696e:	4804      	ldr	r0, [pc, #16]	; (8006980 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006970:	e7be      	b.n	80068f0 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8006972:	2080      	movs	r0, #128	; 0x80
 8006974:	0200      	lsls	r0, r0, #8
 8006976:	e7bb      	b.n	80068f0 <HAL_RCC_GetSysClockFreq+0x18>
 8006978:	40021000 	.word	0x40021000
 800697c:	00f42400 	.word	0x00f42400
 8006980:	007a1200 	.word	0x007a1200

08006984 <HAL_RCC_ClockConfig>:
{
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	46ce      	mov	lr, r9
 8006988:	4647      	mov	r7, r8
 800698a:	b580      	push	{r7, lr}
 800698c:	0004      	movs	r4, r0
 800698e:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006990:	2800      	cmp	r0, #0
 8006992:	d100      	bne.n	8006996 <HAL_RCC_ClockConfig+0x12>
 8006994:	e0b6      	b.n	8006b04 <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006996:	4b5d      	ldr	r3, [pc, #372]	; (8006b0c <HAL_RCC_ClockConfig+0x188>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	2307      	movs	r3, #7
 800699c:	4013      	ands	r3, r2
 800699e:	428b      	cmp	r3, r1
 80069a0:	d321      	bcc.n	80069e6 <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	079a      	lsls	r2, r3, #30
 80069a6:	d50e      	bpl.n	80069c6 <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a8:	075b      	lsls	r3, r3, #29
 80069aa:	d505      	bpl.n	80069b8 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80069ac:	4a58      	ldr	r2, [pc, #352]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 80069ae:	6891      	ldr	r1, [r2, #8]
 80069b0:	23e0      	movs	r3, #224	; 0xe0
 80069b2:	01db      	lsls	r3, r3, #7
 80069b4:	430b      	orrs	r3, r1
 80069b6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069b8:	4a55      	ldr	r2, [pc, #340]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 80069ba:	6893      	ldr	r3, [r2, #8]
 80069bc:	4955      	ldr	r1, [pc, #340]	; (8006b14 <HAL_RCC_ClockConfig+0x190>)
 80069be:	400b      	ands	r3, r1
 80069c0:	68a1      	ldr	r1, [r4, #8]
 80069c2:	430b      	orrs	r3, r1
 80069c4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	07db      	lsls	r3, r3, #31
 80069ca:	d55b      	bpl.n	8006a84 <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069cc:	6863      	ldr	r3, [r4, #4]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d023      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d042      	beq.n	8006a5c <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d146      	bne.n	8006a68 <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069da:	4a4d      	ldr	r2, [pc, #308]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	0552      	lsls	r2, r2, #21
 80069e0:	d420      	bmi.n	8006a24 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 80069e2:	2001      	movs	r0, #1
 80069e4:	e070      	b.n	8006ac8 <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e6:	4a49      	ldr	r2, [pc, #292]	; (8006b0c <HAL_RCC_ClockConfig+0x188>)
 80069e8:	6813      	ldr	r3, [r2, #0]
 80069ea:	2107      	movs	r1, #7
 80069ec:	438b      	bics	r3, r1
 80069ee:	432b      	orrs	r3, r5
 80069f0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80069f2:	f7fe fd2b 	bl	800544c <HAL_GetTick>
 80069f6:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80069f8:	4b44      	ldr	r3, [pc, #272]	; (8006b0c <HAL_RCC_ClockConfig+0x188>)
 80069fa:	4698      	mov	r8, r3
 80069fc:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069fe:	4b46      	ldr	r3, [pc, #280]	; (8006b18 <HAL_RCC_ClockConfig+0x194>)
 8006a00:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a02:	4643      	mov	r3, r8
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	403b      	ands	r3, r7
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	d0ca      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a0c:	f7fe fd1e 	bl	800544c <HAL_GetTick>
 8006a10:	1b80      	subs	r0, r0, r6
 8006a12:	4548      	cmp	r0, r9
 8006a14:	d9f5      	bls.n	8006a02 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8006a16:	2003      	movs	r0, #3
 8006a18:	e056      	b.n	8006ac8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a1a:	4a3d      	ldr	r2, [pc, #244]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	0392      	lsls	r2, r2, #14
 8006a20:	d400      	bmi.n	8006a24 <HAL_RCC_ClockConfig+0xa0>
 8006a22:	e071      	b.n	8006b08 <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a24:	493a      	ldr	r1, [pc, #232]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 8006a26:	688a      	ldr	r2, [r1, #8]
 8006a28:	2007      	movs	r0, #7
 8006a2a:	4382      	bics	r2, r0
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006a30:	f7fe fd0c 	bl	800544c <HAL_GetTick>
 8006a34:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a36:	4b36      	ldr	r3, [pc, #216]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 8006a38:	4698      	mov	r8, r3
 8006a3a:	2738      	movs	r7, #56	; 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a3c:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <HAL_RCC_ClockConfig+0x194>)
 8006a3e:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a40:	4643      	mov	r3, r8
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	403a      	ands	r2, r7
 8006a46:	6863      	ldr	r3, [r4, #4]
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d01a      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a4e:	f7fe fcfd 	bl	800544c <HAL_GetTick>
 8006a52:	1b80      	subs	r0, r0, r6
 8006a54:	4548      	cmp	r0, r9
 8006a56:	d9f3      	bls.n	8006a40 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8006a58:	2003      	movs	r0, #3
 8006a5a:	e035      	b.n	8006ac8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a5c:	4a2c      	ldr	r2, [pc, #176]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	0192      	lsls	r2, r2, #6
 8006a62:	d4df      	bmi.n	8006a24 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8006a64:	2001      	movs	r0, #1
 8006a66:	e02f      	b.n	8006ac8 <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a6c:	4a28      	ldr	r2, [pc, #160]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 8006a6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a70:	0792      	lsls	r2, r2, #30
 8006a72:	d4d7      	bmi.n	8006a24 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8006a74:	2001      	movs	r0, #1
 8006a76:	e027      	b.n	8006ac8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a78:	4a25      	ldr	r2, [pc, #148]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 8006a7a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8006a7c:	0792      	lsls	r2, r2, #30
 8006a7e:	d4d1      	bmi.n	8006a24 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8006a80:	2001      	movs	r0, #1
 8006a82:	e021      	b.n	8006ac8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a84:	4b21      	ldr	r3, [pc, #132]	; (8006b0c <HAL_RCC_ClockConfig+0x188>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	2307      	movs	r3, #7
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	42ab      	cmp	r3, r5
 8006a8e:	d81f      	bhi.n	8006ad0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	075b      	lsls	r3, r3, #29
 8006a94:	d506      	bpl.n	8006aa4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a96:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 8006a98:	6893      	ldr	r3, [r2, #8]
 8006a9a:	4920      	ldr	r1, [pc, #128]	; (8006b1c <HAL_RCC_ClockConfig+0x198>)
 8006a9c:	400b      	ands	r3, r1
 8006a9e:	68e1      	ldr	r1, [r4, #12]
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006aa4:	f7ff ff18 	bl	80068d8 <HAL_RCC_GetSysClockFreq>
 8006aa8:	4b19      	ldr	r3, [pc, #100]	; (8006b10 <HAL_RCC_ClockConfig+0x18c>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	051b      	lsls	r3, r3, #20
 8006aae:	0f1b      	lsrs	r3, r3, #28
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <HAL_RCC_ClockConfig+0x19c>)
 8006ab4:	589b      	ldr	r3, [r3, r2]
 8006ab6:	221f      	movs	r2, #31
 8006ab8:	4013      	ands	r3, r2
 8006aba:	40d8      	lsrs	r0, r3
 8006abc:	4b19      	ldr	r3, [pc, #100]	; (8006b24 <HAL_RCC_ClockConfig+0x1a0>)
 8006abe:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006ac0:	4b19      	ldr	r3, [pc, #100]	; (8006b28 <HAL_RCC_ClockConfig+0x1a4>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	f7fe fc7a 	bl	80053bc <HAL_InitTick>
}
 8006ac8:	bcc0      	pop	{r6, r7}
 8006aca:	46b9      	mov	r9, r7
 8006acc:	46b0      	mov	r8, r6
 8006ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad0:	4a0e      	ldr	r2, [pc, #56]	; (8006b0c <HAL_RCC_ClockConfig+0x188>)
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	2107      	movs	r1, #7
 8006ad6:	438b      	bics	r3, r1
 8006ad8:	432b      	orrs	r3, r5
 8006ada:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006adc:	f7fe fcb6 	bl	800544c <HAL_GetTick>
 8006ae0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <HAL_RCC_ClockConfig+0x188>)
 8006ae4:	4698      	mov	r8, r3
 8006ae6:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <HAL_RCC_ClockConfig+0x194>)
 8006aea:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006aec:	4643      	mov	r3, r8
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	403b      	ands	r3, r7
 8006af2:	42ab      	cmp	r3, r5
 8006af4:	d0cc      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af6:	f7fe fca9 	bl	800544c <HAL_GetTick>
 8006afa:	1b80      	subs	r0, r0, r6
 8006afc:	4548      	cmp	r0, r9
 8006afe:	d9f5      	bls.n	8006aec <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 8006b00:	2003      	movs	r0, #3
 8006b02:	e7e1      	b.n	8006ac8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8006b04:	2001      	movs	r0, #1
 8006b06:	e7df      	b.n	8006ac8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8006b08:	2001      	movs	r0, #1
 8006b0a:	e7dd      	b.n	8006ac8 <HAL_RCC_ClockConfig+0x144>
 8006b0c:	40022000 	.word	0x40022000
 8006b10:	40021000 	.word	0x40021000
 8006b14:	fffff0ff 	.word	0xfffff0ff
 8006b18:	00001388 	.word	0x00001388
 8006b1c:	ffff8fff 	.word	0xffff8fff
 8006b20:	0800d608 	.word	0x0800d608
 8006b24:	20000078 	.word	0x20000078
 8006b28:	20000080 	.word	0x20000080

08006b2c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b30:	045b      	lsls	r3, r3, #17
 8006b32:	0f5b      	lsrs	r3, r3, #29
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4a05      	ldr	r2, [pc, #20]	; (8006b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b38:	589b      	ldr	r3, [r3, r2]
 8006b3a:	221f      	movs	r2, #31
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	4a04      	ldr	r2, [pc, #16]	; (8006b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b40:	6810      	ldr	r0, [r2, #0]
 8006b42:	40d8      	lsrs	r0, r3
}
 8006b44:	4770      	bx	lr
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	40021000 	.word	0x40021000
 8006b4c:	0800d648 	.word	0x0800d648
 8006b50:	20000078 	.word	0x20000078

08006b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b56:	46d6      	mov	lr, sl
 8006b58:	464f      	mov	r7, r9
 8006b5a:	4646      	mov	r6, r8
 8006b5c:	b5c0      	push	{r6, r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	0004      	movs	r4, r0
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b62:	2000      	movs	r0, #0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	039b      	lsls	r3, r3, #14
 8006b68:	d52b      	bpl.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b6a:	4b71      	ldr	r3, [pc, #452]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	d40b      	bmi.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b76:	4a6e      	ldr	r2, [pc, #440]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006b78:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006b7a:	2080      	movs	r0, #128	; 0x80
 8006b7c:	0540      	lsls	r0, r0, #21
 8006b7e:	4301      	orrs	r1, r0
 8006b80:	63d1      	str	r1, [r2, #60]	; 0x3c
 8006b82:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006b84:	4003      	ands	r3, r0
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b8e:	4a69      	ldr	r2, [pc, #420]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b90:	6811      	ldr	r1, [r2, #0]
 8006b92:	2380      	movs	r3, #128	; 0x80
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	430b      	orrs	r3, r1
 8006b98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b9a:	f7fe fc57 	bl	800544c <HAL_GetTick>
 8006b9e:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ba0:	4f64      	ldr	r7, [pc, #400]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ba2:	2680      	movs	r6, #128	; 0x80
 8006ba4:	0076      	lsls	r6, r6, #1
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	4233      	tst	r3, r6
 8006baa:	d000      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8006bac:	e0af      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bae:	f7fe fc4d 	bl	800544c <HAL_GetTick>
 8006bb2:	1b40      	subs	r0, r0, r5
 8006bb4:	2802      	cmp	r0, #2
 8006bb6:	d9f6      	bls.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 8006bb8:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bba:	4653      	mov	r3, sl
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d100      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006bc0:	e08a      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	07db      	lsls	r3, r3, #31
 8006bc6:	d506      	bpl.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bc8:	4a59      	ldr	r2, [pc, #356]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006bca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006bcc:	2103      	movs	r1, #3
 8006bce:	438b      	bics	r3, r1
 8006bd0:	6861      	ldr	r1, [r4, #4]
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	06db      	lsls	r3, r3, #27
 8006bda:	d506      	bpl.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bdc:	4a54      	ldr	r2, [pc, #336]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006bde:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006be0:	4955      	ldr	r1, [pc, #340]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006be2:	400b      	ands	r3, r1
 8006be4:	68a1      	ldr	r1, [r4, #8]
 8006be6:	430b      	orrs	r3, r1
 8006be8:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	059b      	lsls	r3, r3, #22
 8006bee:	d506      	bpl.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bf0:	4a4f      	ldr	r2, [pc, #316]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006bf2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006bf4:	4951      	ldr	r1, [pc, #324]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006bf6:	400b      	ands	r3, r1
 8006bf8:	6961      	ldr	r1, [r4, #20]
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	055b      	lsls	r3, r3, #21
 8006c02:	d506      	bpl.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c04:	4a4a      	ldr	r2, [pc, #296]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006c06:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006c08:	494d      	ldr	r1, [pc, #308]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006c0a:	400b      	ands	r3, r1
 8006c0c:	69a1      	ldr	r1, [r4, #24]
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	069b      	lsls	r3, r3, #26
 8006c16:	d506      	bpl.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c18:	4a45      	ldr	r2, [pc, #276]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006c1a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006c1c:	4949      	ldr	r1, [pc, #292]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006c1e:	400b      	ands	r3, r1
 8006c20:	68e1      	ldr	r1, [r4, #12]
 8006c22:	430b      	orrs	r3, r1
 8006c24:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	045b      	lsls	r3, r3, #17
 8006c2a:	d50b      	bpl.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c2c:	4a40      	ldr	r2, [pc, #256]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006c2e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	089b      	lsrs	r3, r3, #2
 8006c34:	69e1      	ldr	r1, [r4, #28]
 8006c36:	430b      	orrs	r3, r1
 8006c38:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006c3a:	2380      	movs	r3, #128	; 0x80
 8006c3c:	05db      	lsls	r3, r3, #23
 8006c3e:	69e2      	ldr	r2, [r4, #28]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d04f      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x190>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	029b      	lsls	r3, r3, #10
 8006c48:	d50b      	bpl.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006c4a:	4a39      	ldr	r2, [pc, #228]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006c4c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006c4e:	493e      	ldr	r1, [pc, #248]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006c50:	400b      	ands	r3, r1
 8006c52:	6a21      	ldr	r1, [r4, #32]
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	03db      	lsls	r3, r3, #15
 8006c5c:	6a22      	ldr	r2, [r4, #32]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d047      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	051b      	lsls	r3, r3, #20
 8006c66:	d50b      	bpl.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006c68:	4a31      	ldr	r2, [pc, #196]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006c6a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006c6c:	4937      	ldr	r1, [pc, #220]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c6e:	400b      	ands	r3, r1
 8006c70:	6921      	ldr	r1, [r4, #16]
 8006c72:	430b      	orrs	r3, r1
 8006c74:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006c76:	2380      	movs	r3, #128	; 0x80
 8006c78:	01db      	lsls	r3, r3, #7
 8006c7a:	6922      	ldr	r2, [r4, #16]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d03f      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8006c80:	b002      	add	sp, #8
 8006c82:	bce0      	pop	{r5, r6, r7}
 8006c84:	46ba      	mov	sl, r7
 8006c86:	46b1      	mov	r9, r6
 8006c88:	46a8      	mov	r8, r5
 8006c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d00d      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c92:	4a27      	ldr	r2, [pc, #156]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006c94:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8006c96:	492e      	ldr	r1, [pc, #184]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006c98:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c9a:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8006c9c:	2180      	movs	r1, #128	; 0x80
 8006c9e:	0249      	lsls	r1, r1, #9
 8006ca0:	4301      	orrs	r1, r0
 8006ca2:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ca4:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8006ca6:	482b      	ldr	r0, [pc, #172]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006ca8:	4001      	ands	r1, r0
 8006caa:	65d1      	str	r1, [r2, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8006cac:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cae:	07db      	lsls	r3, r3, #31
 8006cb0:	d535      	bpl.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
        tickstart = HAL_GetTick();
 8006cb2:	f7fe fbcb 	bl	800544c <HAL_GetTick>
 8006cb6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cb8:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006cba:	4698      	mov	r8, r3
 8006cbc:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cbe:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8006cc0:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cc2:	4643      	mov	r3, r8
 8006cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc6:	421e      	tst	r6, r3
 8006cc8:	d129      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cca:	f7fe fbbf 	bl	800544c <HAL_GetTick>
 8006cce:	1b40      	subs	r0, r0, r5
 8006cd0:	4548      	cmp	r0, r9
 8006cd2:	d9f6      	bls.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
            ret = HAL_TIMEOUT;
 8006cd4:	2003      	movs	r0, #3
 8006cd6:	e770      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cd8:	4a15      	ldr	r2, [pc, #84]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006cda:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006cdc:	491f      	ldr	r1, [pc, #124]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006cde:	400b      	ands	r3, r1
 8006ce0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006ce2:	e76e      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006ce4:	4a12      	ldr	r2, [pc, #72]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006ce6:	68d1      	ldr	r1, [r2, #12]
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	025b      	lsls	r3, r3, #9
 8006cec:	430b      	orrs	r3, r1
 8006cee:	60d3      	str	r3, [r2, #12]
 8006cf0:	e7a8      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006cf2:	4a0f      	ldr	r2, [pc, #60]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006cf4:	68d1      	ldr	r1, [r2, #12]
 8006cf6:	2380      	movs	r3, #128	; 0x80
 8006cf8:	045b      	lsls	r3, r3, #17
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	60d3      	str	r3, [r2, #12]
 8006cfe:	e7b0      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006d00:	4a0b      	ldr	r2, [pc, #44]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006d02:	68d1      	ldr	r1, [r2, #12]
 8006d04:	2380      	movs	r3, #128	; 0x80
 8006d06:	025b      	lsls	r3, r3, #9
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	60d3      	str	r3, [r2, #12]
  return status;
 8006d0c:	e7b8      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d0e:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006d10:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8006d12:	22c0      	movs	r2, #192	; 0xc0
 8006d14:	0092      	lsls	r2, r2, #2
 8006d16:	000b      	movs	r3, r1
 8006d18:	4013      	ands	r3, r2
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d1a:	4211      	tst	r1, r2
 8006d1c:	d1b6      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x138>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d1e:	4a04      	ldr	r2, [pc, #16]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006d20:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8006d22:	490b      	ldr	r1, [pc, #44]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006d24:	400b      	ands	r3, r1
 8006d26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	e744      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x66>
 8006d30:	40021000 	.word	0x40021000
 8006d34:	40007000 	.word	0x40007000
 8006d38:	fffff3ff 	.word	0xfffff3ff
 8006d3c:	fff3ffff 	.word	0xfff3ffff
 8006d40:	ffcfffff 	.word	0xffcfffff
 8006d44:	ffffcfff 	.word	0xffffcfff
 8006d48:	ffbfffff 	.word	0xffbfffff
 8006d4c:	ffff3fff 	.word	0xffff3fff
 8006d50:	fffffcff 	.word	0xfffffcff
 8006d54:	fffeffff 	.word	0xfffeffff
 8006d58:	00001388 	.word	0x00001388
 8006d5c:	efffffff 	.word	0xefffffff

08006d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d62:	6a03      	ldr	r3, [r0, #32]
 8006d64:	2201      	movs	r2, #1
 8006d66:	4393      	bics	r3, r2
 8006d68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d6e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d70:	4d18      	ldr	r5, [pc, #96]	; (8006dd4 <TIM_OC1_SetConfig+0x74>)
 8006d72:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d74:	680d      	ldr	r5, [r1, #0]
 8006d76:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d78:	2502      	movs	r5, #2
 8006d7a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d7c:	688d      	ldr	r5, [r1, #8]
 8006d7e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d80:	4d15      	ldr	r5, [pc, #84]	; (8006dd8 <TIM_OC1_SetConfig+0x78>)
 8006d82:	42a8      	cmp	r0, r5
 8006d84:	d013      	beq.n	8006dae <TIM_OC1_SetConfig+0x4e>
 8006d86:	4d15      	ldr	r5, [pc, #84]	; (8006ddc <TIM_OC1_SetConfig+0x7c>)
 8006d88:	42a8      	cmp	r0, r5
 8006d8a:	d009      	beq.n	8006da0 <TIM_OC1_SetConfig+0x40>
 8006d8c:	4d14      	ldr	r5, [pc, #80]	; (8006de0 <TIM_OC1_SetConfig+0x80>)
 8006d8e:	42a8      	cmp	r0, r5
 8006d90:	d119      	bne.n	8006dc6 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d92:	2508      	movs	r5, #8
 8006d94:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d96:	68cd      	ldr	r5, [r1, #12]
 8006d98:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d9a:	2504      	movs	r5, #4
 8006d9c:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9e:	e00c      	b.n	8006dba <TIM_OC1_SetConfig+0x5a>
    tmpccer &= ~TIM_CCER_CC1NP;
 8006da0:	2508      	movs	r5, #8
 8006da2:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8006da4:	68cd      	ldr	r5, [r1, #12]
 8006da6:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006da8:	2504      	movs	r5, #4
 8006daa:	43ab      	bics	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dac:	e005      	b.n	8006dba <TIM_OC1_SetConfig+0x5a>
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dae:	2508      	movs	r5, #8
 8006db0:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8006db2:	68cd      	ldr	r5, [r1, #12]
 8006db4:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006db6:	2504      	movs	r5, #4
 8006db8:	43ab      	bics	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dba:	4d0a      	ldr	r5, [pc, #40]	; (8006de4 <TIM_OC1_SetConfig+0x84>)
 8006dbc:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dbe:	694d      	ldr	r5, [r1, #20]
 8006dc0:	698e      	ldr	r6, [r1, #24]
 8006dc2:	4335      	orrs	r5, r6
 8006dc4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dc8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dca:	684a      	ldr	r2, [r1, #4]
 8006dcc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dce:	6203      	str	r3, [r0, #32]
}
 8006dd0:	bd70      	pop	{r4, r5, r6, pc}
 8006dd2:	46c0      	nop			; (mov r8, r8)
 8006dd4:	fffeff8c 	.word	0xfffeff8c
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800
 8006de4:	fffffcff 	.word	0xfffffcff

08006de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006de8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dea:	6a03      	ldr	r3, [r0, #32]
 8006dec:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <TIM_OC3_SetConfig+0x60>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006df6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006df8:	4d14      	ldr	r5, [pc, #80]	; (8006e4c <TIM_OC3_SetConfig+0x64>)
 8006dfa:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dfc:	680a      	ldr	r2, [r1, #0]
 8006dfe:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e00:	4a13      	ldr	r2, [pc, #76]	; (8006e50 <TIM_OC3_SetConfig+0x68>)
 8006e02:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e04:	688a      	ldr	r2, [r1, #8]
 8006e06:	0212      	lsls	r2, r2, #8
 8006e08:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e0a:	4a12      	ldr	r2, [pc, #72]	; (8006e54 <TIM_OC3_SetConfig+0x6c>)
 8006e0c:	4290      	cmp	r0, r2
 8006e0e:	d006      	beq.n	8006e1e <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e10:	4a11      	ldr	r2, [pc, #68]	; (8006e58 <TIM_OC3_SetConfig+0x70>)
 8006e12:	4290      	cmp	r0, r2
 8006e14:	d00a      	beq.n	8006e2c <TIM_OC3_SetConfig+0x44>
 8006e16:	4a11      	ldr	r2, [pc, #68]	; (8006e5c <TIM_OC3_SetConfig+0x74>)
 8006e18:	4290      	cmp	r0, r2
 8006e1a:	d10e      	bne.n	8006e3a <TIM_OC3_SetConfig+0x52>
 8006e1c:	e006      	b.n	8006e2c <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e1e:	4a10      	ldr	r2, [pc, #64]	; (8006e60 <TIM_OC3_SetConfig+0x78>)
 8006e20:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e22:	68cb      	ldr	r3, [r1, #12]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e28:	4a0e      	ldr	r2, [pc, #56]	; (8006e64 <TIM_OC3_SetConfig+0x7c>)
 8006e2a:	4013      	ands	r3, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e2c:	4a0e      	ldr	r2, [pc, #56]	; (8006e68 <TIM_OC3_SetConfig+0x80>)
 8006e2e:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e30:	698c      	ldr	r4, [r1, #24]
 8006e32:	694e      	ldr	r6, [r1, #20]
 8006e34:	4334      	orrs	r4, r6
 8006e36:	0124      	lsls	r4, r4, #4
 8006e38:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e3c:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e3e:	684a      	ldr	r2, [r1, #4]
 8006e40:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e42:	6203      	str	r3, [r0, #32]
}
 8006e44:	bd70      	pop	{r4, r5, r6, pc}
 8006e46:	46c0      	nop			; (mov r8, r8)
 8006e48:	fffffeff 	.word	0xfffffeff
 8006e4c:	fffeff8c 	.word	0xfffeff8c
 8006e50:	fffffdff 	.word	0xfffffdff
 8006e54:	40012c00 	.word	0x40012c00
 8006e58:	40014400 	.word	0x40014400
 8006e5c:	40014800 	.word	0x40014800
 8006e60:	fffff7ff 	.word	0xfffff7ff
 8006e64:	fffffbff 	.word	0xfffffbff
 8006e68:	ffffcfff 	.word	0xffffcfff

08006e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e6c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e6e:	6a03      	ldr	r3, [r0, #32]
 8006e70:	4a11      	ldr	r2, [pc, #68]	; (8006eb8 <TIM_OC4_SetConfig+0x4c>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e7c:	4c0f      	ldr	r4, [pc, #60]	; (8006ebc <TIM_OC4_SetConfig+0x50>)
 8006e7e:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e80:	680c      	ldr	r4, [r1, #0]
 8006e82:	0224      	lsls	r4, r4, #8
 8006e84:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e86:	4c0e      	ldr	r4, [pc, #56]	; (8006ec0 <TIM_OC4_SetConfig+0x54>)
 8006e88:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e8a:	688b      	ldr	r3, [r1, #8]
 8006e8c:	031b      	lsls	r3, r3, #12
 8006e8e:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e90:	4c0c      	ldr	r4, [pc, #48]	; (8006ec4 <TIM_OC4_SetConfig+0x58>)
 8006e92:	42a0      	cmp	r0, r4
 8006e94:	d005      	beq.n	8006ea2 <TIM_OC4_SetConfig+0x36>
 8006e96:	4c0c      	ldr	r4, [pc, #48]	; (8006ec8 <TIM_OC4_SetConfig+0x5c>)
 8006e98:	42a0      	cmp	r0, r4
 8006e9a:	d002      	beq.n	8006ea2 <TIM_OC4_SetConfig+0x36>
 8006e9c:	4c0b      	ldr	r4, [pc, #44]	; (8006ecc <TIM_OC4_SetConfig+0x60>)
 8006e9e:	42a0      	cmp	r0, r4
 8006ea0:	d104      	bne.n	8006eac <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ea2:	4c0b      	ldr	r4, [pc, #44]	; (8006ed0 <TIM_OC4_SetConfig+0x64>)
 8006ea4:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ea6:	694c      	ldr	r4, [r1, #20]
 8006ea8:	01a4      	lsls	r4, r4, #6
 8006eaa:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eac:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eae:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006eb0:	684a      	ldr	r2, [r1, #4]
 8006eb2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb4:	6203      	str	r3, [r0, #32]
}
 8006eb6:	bd30      	pop	{r4, r5, pc}
 8006eb8:	ffffefff 	.word	0xffffefff
 8006ebc:	feff8cff 	.word	0xfeff8cff
 8006ec0:	ffffdfff 	.word	0xffffdfff
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40014400 	.word	0x40014400
 8006ecc:	40014800 	.word	0x40014800
 8006ed0:	ffffbfff 	.word	0xffffbfff

08006ed4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ed4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ed6:	6a03      	ldr	r3, [r0, #32]
 8006ed8:	4a11      	ldr	r2, [pc, #68]	; (8006f20 <TIM_OC5_SetConfig+0x4c>)
 8006eda:	4013      	ands	r3, r2
 8006edc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ede:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee0:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ee2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ee4:	4c0f      	ldr	r4, [pc, #60]	; (8006f24 <TIM_OC5_SetConfig+0x50>)
 8006ee6:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee8:	680c      	ldr	r4, [r1, #0]
 8006eea:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eec:	4c0e      	ldr	r4, [pc, #56]	; (8006f28 <TIM_OC5_SetConfig+0x54>)
 8006eee:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ef0:	688b      	ldr	r3, [r1, #8]
 8006ef2:	041b      	lsls	r3, r3, #16
 8006ef4:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef6:	4c0d      	ldr	r4, [pc, #52]	; (8006f2c <TIM_OC5_SetConfig+0x58>)
 8006ef8:	42a0      	cmp	r0, r4
 8006efa:	d005      	beq.n	8006f08 <TIM_OC5_SetConfig+0x34>
 8006efc:	4c0c      	ldr	r4, [pc, #48]	; (8006f30 <TIM_OC5_SetConfig+0x5c>)
 8006efe:	42a0      	cmp	r0, r4
 8006f00:	d002      	beq.n	8006f08 <TIM_OC5_SetConfig+0x34>
 8006f02:	4c0c      	ldr	r4, [pc, #48]	; (8006f34 <TIM_OC5_SetConfig+0x60>)
 8006f04:	42a0      	cmp	r0, r4
 8006f06:	d104      	bne.n	8006f12 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f08:	4c05      	ldr	r4, [pc, #20]	; (8006f20 <TIM_OC5_SetConfig+0x4c>)
 8006f0a:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f0c:	694c      	ldr	r4, [r1, #20]
 8006f0e:	0224      	lsls	r4, r4, #8
 8006f10:	4325      	orrs	r5, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f14:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f16:	684a      	ldr	r2, [r1, #4]
 8006f18:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1a:	6203      	str	r3, [r0, #32]
}
 8006f1c:	bd30      	pop	{r4, r5, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	fffeffff 	.word	0xfffeffff
 8006f24:	fffeff8f 	.word	0xfffeff8f
 8006f28:	fffdffff 	.word	0xfffdffff
 8006f2c:	40012c00 	.word	0x40012c00
 8006f30:	40014400 	.word	0x40014400
 8006f34:	40014800 	.word	0x40014800

08006f38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f38:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f3a:	6a03      	ldr	r3, [r0, #32]
 8006f3c:	4a11      	ldr	r2, [pc, #68]	; (8006f84 <TIM_OC6_SetConfig+0x4c>)
 8006f3e:	4013      	ands	r3, r2
 8006f40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f44:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f46:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f48:	4c0f      	ldr	r4, [pc, #60]	; (8006f88 <TIM_OC6_SetConfig+0x50>)
 8006f4a:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f4c:	680c      	ldr	r4, [r1, #0]
 8006f4e:	0224      	lsls	r4, r4, #8
 8006f50:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f52:	4c0e      	ldr	r4, [pc, #56]	; (8006f8c <TIM_OC6_SetConfig+0x54>)
 8006f54:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f56:	688b      	ldr	r3, [r1, #8]
 8006f58:	051b      	lsls	r3, r3, #20
 8006f5a:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5c:	4c0c      	ldr	r4, [pc, #48]	; (8006f90 <TIM_OC6_SetConfig+0x58>)
 8006f5e:	42a0      	cmp	r0, r4
 8006f60:	d005      	beq.n	8006f6e <TIM_OC6_SetConfig+0x36>
 8006f62:	4c0c      	ldr	r4, [pc, #48]	; (8006f94 <TIM_OC6_SetConfig+0x5c>)
 8006f64:	42a0      	cmp	r0, r4
 8006f66:	d002      	beq.n	8006f6e <TIM_OC6_SetConfig+0x36>
 8006f68:	4c0b      	ldr	r4, [pc, #44]	; (8006f98 <TIM_OC6_SetConfig+0x60>)
 8006f6a:	42a0      	cmp	r0, r4
 8006f6c:	d104      	bne.n	8006f78 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f6e:	4c0b      	ldr	r4, [pc, #44]	; (8006f9c <TIM_OC6_SetConfig+0x64>)
 8006f70:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f72:	694c      	ldr	r4, [r1, #20]
 8006f74:	02a4      	lsls	r4, r4, #10
 8006f76:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f78:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f7a:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f7c:	684a      	ldr	r2, [r1, #4]
 8006f7e:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f80:	6203      	str	r3, [r0, #32]
}
 8006f82:	bd30      	pop	{r4, r5, pc}
 8006f84:	ffefffff 	.word	0xffefffff
 8006f88:	feff8fff 	.word	0xfeff8fff
 8006f8c:	ffdfffff 	.word	0xffdfffff
 8006f90:	40012c00 	.word	0x40012c00
 8006f94:	40014400 	.word	0x40014400
 8006f98:	40014800 	.word	0x40014800
 8006f9c:	fffbffff 	.word	0xfffbffff

08006fa0 <HAL_TIM_Base_Start_IT>:
{
 8006fa0:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8006fa2:	223d      	movs	r2, #61	; 0x3d
 8006fa4:	5c82      	ldrb	r2, [r0, r2]
    return HAL_ERROR;
 8006fa6:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8006fa8:	2a01      	cmp	r2, #1
 8006faa:	d116      	bne.n	8006fda <HAL_TIM_Base_Start_IT+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006fac:	323c      	adds	r2, #60	; 0x3c
 8006fae:	2102      	movs	r1, #2
 8006fb0:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	68ca      	ldr	r2, [r1, #12]
 8006fb6:	4302      	orrs	r2, r0
 8006fb8:	60ca      	str	r2, [r1, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a10      	ldr	r2, [pc, #64]	; (8007000 <HAL_TIM_Base_Start_IT+0x60>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00c      	beq.n	8006fdc <HAL_TIM_Base_Start_IT+0x3c>
 8006fc2:	2280      	movs	r2, #128	; 0x80
 8006fc4:	05d2      	lsls	r2, r2, #23
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d008      	beq.n	8006fdc <HAL_TIM_Base_Start_IT+0x3c>
 8006fca:	4a0e      	ldr	r2, [pc, #56]	; (8007004 <HAL_TIM_Base_Start_IT+0x64>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d005      	beq.n	8006fdc <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006fd8:	2000      	movs	r0, #0
}
 8006fda:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	490a      	ldr	r1, [pc, #40]	; (8007008 <HAL_TIM_Base_Start_IT+0x68>)
 8006fe0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe2:	2a06      	cmp	r2, #6
 8006fe4:	d008      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x58>
 8006fe6:	3907      	subs	r1, #7
 8006fe8:	428a      	cmp	r2, r1
 8006fea:	d007      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	2101      	movs	r1, #1
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	e7f0      	b.n	8006fda <HAL_TIM_Base_Start_IT+0x3a>
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e7ee      	b.n	8006fda <HAL_TIM_Base_Start_IT+0x3a>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e7ec      	b.n	8006fda <HAL_TIM_Base_Start_IT+0x3a>
 8007000:	40012c00 	.word	0x40012c00
 8007004:	40000400 	.word	0x40000400
 8007008:	00010007 	.word	0x00010007

0800700c <HAL_TIM_PWM_MspInit>:
}
 800700c:	4770      	bx	lr

0800700e <HAL_TIM_OC_DelayElapsedCallback>:
}
 800700e:	4770      	bx	lr

08007010 <HAL_TIM_IC_CaptureCallback>:
}
 8007010:	4770      	bx	lr

08007012 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8007012:	4770      	bx	lr

08007014 <HAL_TIM_TriggerCallback>:
}
 8007014:	4770      	bx	lr
	...

08007018 <HAL_TIM_IRQHandler>:
{
 8007018:	b510      	push	{r4, lr}
 800701a:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800701c:	6803      	ldr	r3, [r0, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	0792      	lsls	r2, r2, #30
 8007022:	d50f      	bpl.n	8007044 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	0792      	lsls	r2, r2, #30
 8007028:	d50c      	bpl.n	8007044 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800702a:	2203      	movs	r2, #3
 800702c:	4252      	negs	r2, r2
 800702e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007030:	2301      	movs	r3, #1
 8007032:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007034:	6803      	ldr	r3, [r0, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	079b      	lsls	r3, r3, #30
 800703a:	d06a      	beq.n	8007112 <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 800703c:	f7ff ffe8 	bl	8007010 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007040:	2300      	movs	r3, #0
 8007042:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	691a      	ldr	r2, [r3, #16]
 8007048:	0752      	lsls	r2, r2, #29
 800704a:	d512      	bpl.n	8007072 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	0752      	lsls	r2, r2, #29
 8007050:	d50f      	bpl.n	8007072 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007052:	2205      	movs	r2, #5
 8007054:	4252      	negs	r2, r2
 8007056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007058:	2302      	movs	r3, #2
 800705a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	23c0      	movs	r3, #192	; 0xc0
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	421a      	tst	r2, r3
 8007066:	d05a      	beq.n	800711e <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8007068:	0020      	movs	r0, r4
 800706a:	f7ff ffd1 	bl	8007010 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706e:	2300      	movs	r3, #0
 8007070:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	0712      	lsls	r2, r2, #28
 8007078:	d510      	bpl.n	800709c <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	0712      	lsls	r2, r2, #28
 800707e:	d50d      	bpl.n	800709c <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007080:	2209      	movs	r2, #9
 8007082:	4252      	negs	r2, r2
 8007084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007086:	2304      	movs	r3, #4
 8007088:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	079b      	lsls	r3, r3, #30
 8007090:	d04c      	beq.n	800712c <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8007092:	0020      	movs	r0, r4
 8007094:	f7ff ffbc 	bl	8007010 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007098:	2300      	movs	r3, #0
 800709a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	06d2      	lsls	r2, r2, #27
 80070a2:	d512      	bpl.n	80070ca <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	06d2      	lsls	r2, r2, #27
 80070a8:	d50f      	bpl.n	80070ca <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070aa:	2211      	movs	r2, #17
 80070ac:	4252      	negs	r2, r2
 80070ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070b0:	2308      	movs	r3, #8
 80070b2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	23c0      	movs	r3, #192	; 0xc0
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	421a      	tst	r2, r3
 80070be:	d03c      	beq.n	800713a <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 80070c0:	0020      	movs	r0, r4
 80070c2:	f7ff ffa5 	bl	8007010 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c6:	2300      	movs	r3, #0
 80070c8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	07d2      	lsls	r2, r2, #31
 80070d0:	d502      	bpl.n	80070d8 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	07d2      	lsls	r2, r2, #31
 80070d6:	d437      	bmi.n	8007148 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	0612      	lsls	r2, r2, #24
 80070de:	d502      	bpl.n	80070e6 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	0612      	lsls	r2, r2, #24
 80070e4:	d437      	bmi.n	8007156 <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	05d2      	lsls	r2, r2, #23
 80070ec:	d502      	bpl.n	80070f4 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	0612      	lsls	r2, r2, #24
 80070f2:	d437      	bmi.n	8007164 <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	0652      	lsls	r2, r2, #25
 80070fa:	d502      	bpl.n	8007102 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	0652      	lsls	r2, r2, #25
 8007100:	d436      	bmi.n	8007170 <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	0692      	lsls	r2, r2, #26
 8007108:	d502      	bpl.n	8007110 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	0692      	lsls	r2, r2, #26
 800710e:	d436      	bmi.n	800717e <HAL_TIM_IRQHandler+0x166>
}
 8007110:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007112:	f7ff ff7c 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007116:	0020      	movs	r0, r4
 8007118:	f7ff ff7b 	bl	8007012 <HAL_TIM_PWM_PulseFinishedCallback>
 800711c:	e790      	b.n	8007040 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800711e:	0020      	movs	r0, r4
 8007120:	f7ff ff75 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007124:	0020      	movs	r0, r4
 8007126:	f7ff ff74 	bl	8007012 <HAL_TIM_PWM_PulseFinishedCallback>
 800712a:	e7a0      	b.n	800706e <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712c:	0020      	movs	r0, r4
 800712e:	f7ff ff6e 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007132:	0020      	movs	r0, r4
 8007134:	f7ff ff6d 	bl	8007012 <HAL_TIM_PWM_PulseFinishedCallback>
 8007138:	e7ae      	b.n	8007098 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713a:	0020      	movs	r0, r4
 800713c:	f7ff ff67 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007140:	0020      	movs	r0, r4
 8007142:	f7ff ff66 	bl	8007012 <HAL_TIM_PWM_PulseFinishedCallback>
 8007146:	e7be      	b.n	80070c6 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007148:	2202      	movs	r2, #2
 800714a:	4252      	negs	r2, r2
 800714c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800714e:	0020      	movs	r0, r4
 8007150:	f7fd fca8 	bl	8004aa4 <HAL_TIM_PeriodElapsedCallback>
 8007154:	e7c0      	b.n	80070d8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007156:	2281      	movs	r2, #129	; 0x81
 8007158:	4252      	negs	r2, r2
 800715a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800715c:	0020      	movs	r0, r4
 800715e:	f000 fbae 	bl	80078be <HAL_TIMEx_BreakCallback>
 8007162:	e7c0      	b.n	80070e6 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007164:	4a09      	ldr	r2, [pc, #36]	; (800718c <HAL_TIM_IRQHandler+0x174>)
 8007166:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007168:	0020      	movs	r0, r4
 800716a:	f000 fba9 	bl	80078c0 <HAL_TIMEx_Break2Callback>
 800716e:	e7c1      	b.n	80070f4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007170:	2241      	movs	r2, #65	; 0x41
 8007172:	4252      	negs	r2, r2
 8007174:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007176:	0020      	movs	r0, r4
 8007178:	f7ff ff4c 	bl	8007014 <HAL_TIM_TriggerCallback>
 800717c:	e7c1      	b.n	8007102 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800717e:	2221      	movs	r2, #33	; 0x21
 8007180:	4252      	negs	r2, r2
 8007182:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007184:	0020      	movs	r0, r4
 8007186:	f000 fb99 	bl	80078bc <HAL_TIMEx_CommutCallback>
}
 800718a:	e7c1      	b.n	8007110 <HAL_TIM_IRQHandler+0xf8>
 800718c:	fffffeff 	.word	0xfffffeff

08007190 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007190:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007192:	4a33      	ldr	r2, [pc, #204]	; (8007260 <TIM_Base_SetConfig+0xd0>)
 8007194:	4290      	cmp	r0, r2
 8007196:	d04c      	beq.n	8007232 <TIM_Base_SetConfig+0xa2>
 8007198:	2280      	movs	r2, #128	; 0x80
 800719a:	05d2      	lsls	r2, r2, #23
 800719c:	4290      	cmp	r0, r2
 800719e:	d036      	beq.n	800720e <TIM_Base_SetConfig+0x7e>
 80071a0:	4a30      	ldr	r2, [pc, #192]	; (8007264 <TIM_Base_SetConfig+0xd4>)
 80071a2:	4290      	cmp	r0, r2
 80071a4:	d02e      	beq.n	8007204 <TIM_Base_SetConfig+0x74>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071a6:	4a30      	ldr	r2, [pc, #192]	; (8007268 <TIM_Base_SetConfig+0xd8>)
 80071a8:	4290      	cmp	r0, r2
 80071aa:	d034      	beq.n	8007216 <TIM_Base_SetConfig+0x86>
 80071ac:	4a2f      	ldr	r2, [pc, #188]	; (800726c <TIM_Base_SetConfig+0xdc>)
 80071ae:	4290      	cmp	r0, r2
 80071b0:	d00c      	beq.n	80071cc <TIM_Base_SetConfig+0x3c>
 80071b2:	4a2f      	ldr	r2, [pc, #188]	; (8007270 <TIM_Base_SetConfig+0xe0>)
 80071b4:	4290      	cmp	r0, r2
 80071b6:	d017      	beq.n	80071e8 <TIM_Base_SetConfig+0x58>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071b8:	2280      	movs	r2, #128	; 0x80
 80071ba:	4393      	bics	r3, r2
 80071bc:	694a      	ldr	r2, [r1, #20]
 80071be:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80071c0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071c2:	688b      	ldr	r3, [r1, #8]
 80071c4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80071c6:	680b      	ldr	r3, [r1, #0]
 80071c8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071ca:	e045      	b.n	8007258 <TIM_Base_SetConfig+0xc8>
    tmpcr1 &= ~TIM_CR1_CKD;
 80071cc:	4a29      	ldr	r2, [pc, #164]	; (8007274 <TIM_Base_SetConfig+0xe4>)
 80071ce:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071d0:	68ca      	ldr	r2, [r1, #12]
 80071d2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	4393      	bics	r3, r2
 80071d8:	694a      	ldr	r2, [r1, #20]
 80071da:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80071dc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071de:	688b      	ldr	r3, [r1, #8]
 80071e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80071e2:	680b      	ldr	r3, [r1, #0]
 80071e4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071e6:	e035      	b.n	8007254 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 80071e8:	4a22      	ldr	r2, [pc, #136]	; (8007274 <TIM_Base_SetConfig+0xe4>)
 80071ea:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ec:	68ca      	ldr	r2, [r1, #12]
 80071ee:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071f0:	2280      	movs	r2, #128	; 0x80
 80071f2:	4393      	bics	r3, r2
 80071f4:	694a      	ldr	r2, [r1, #20]
 80071f6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80071f8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071fa:	688b      	ldr	r3, [r1, #8]
 80071fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80071fe:	680b      	ldr	r3, [r1, #0]
 8007200:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007202:	e027      	b.n	8007254 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007204:	2270      	movs	r2, #112	; 0x70
 8007206:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8007208:	684a      	ldr	r2, [r1, #4]
 800720a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800720c:	e003      	b.n	8007216 <TIM_Base_SetConfig+0x86>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800720e:	2270      	movs	r2, #112	; 0x70
 8007210:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8007212:	684a      	ldr	r2, [r1, #4]
 8007214:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007216:	4a17      	ldr	r2, [pc, #92]	; (8007274 <TIM_Base_SetConfig+0xe4>)
 8007218:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800721a:	68ca      	ldr	r2, [r1, #12]
 800721c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800721e:	2280      	movs	r2, #128	; 0x80
 8007220:	4393      	bics	r3, r2
 8007222:	694a      	ldr	r2, [r1, #20]
 8007224:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007226:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007228:	688b      	ldr	r3, [r1, #8]
 800722a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800722c:	680b      	ldr	r3, [r1, #0]
 800722e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007230:	e012      	b.n	8007258 <TIM_Base_SetConfig+0xc8>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007232:	2270      	movs	r2, #112	; 0x70
 8007234:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8007236:	684a      	ldr	r2, [r1, #4]
 8007238:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800723a:	4a0e      	ldr	r2, [pc, #56]	; (8007274 <TIM_Base_SetConfig+0xe4>)
 800723c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800723e:	68ca      	ldr	r2, [r1, #12]
 8007240:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007242:	2280      	movs	r2, #128	; 0x80
 8007244:	4393      	bics	r3, r2
 8007246:	694a      	ldr	r2, [r1, #20]
 8007248:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800724a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800724c:	688b      	ldr	r3, [r1, #8]
 800724e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007250:	680b      	ldr	r3, [r1, #0]
 8007252:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007254:	690b      	ldr	r3, [r1, #16]
 8007256:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007258:	2301      	movs	r3, #1
 800725a:	6143      	str	r3, [r0, #20]
}
 800725c:	4770      	bx	lr
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	40012c00 	.word	0x40012c00
 8007264:	40000400 	.word	0x40000400
 8007268:	40002000 	.word	0x40002000
 800726c:	40014400 	.word	0x40014400
 8007270:	40014800 	.word	0x40014800
 8007274:	fffffcff 	.word	0xfffffcff

08007278 <HAL_TIM_Base_Init>:
{
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800727c:	d02a      	beq.n	80072d4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800727e:	233d      	movs	r3, #61	; 0x3d
 8007280:	5cc3      	ldrb	r3, [r0, r3]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d020      	beq.n	80072c8 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8007286:	253d      	movs	r5, #61	; 0x3d
 8007288:	2302      	movs	r3, #2
 800728a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800728c:	0021      	movs	r1, r4
 800728e:	c901      	ldmia	r1!, {r0}
 8007290:	f7ff ff7e 	bl	8007190 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007294:	2301      	movs	r3, #1
 8007296:	2248      	movs	r2, #72	; 0x48
 8007298:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729a:	3a0a      	subs	r2, #10
 800729c:	54a3      	strb	r3, [r4, r2]
 800729e:	3201      	adds	r2, #1
 80072a0:	54a3      	strb	r3, [r4, r2]
 80072a2:	3201      	adds	r2, #1
 80072a4:	54a3      	strb	r3, [r4, r2]
 80072a6:	3201      	adds	r2, #1
 80072a8:	54a3      	strb	r3, [r4, r2]
 80072aa:	3201      	adds	r2, #1
 80072ac:	54a3      	strb	r3, [r4, r2]
 80072ae:	3201      	adds	r2, #1
 80072b0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b2:	3201      	adds	r2, #1
 80072b4:	54a3      	strb	r3, [r4, r2]
 80072b6:	3201      	adds	r2, #1
 80072b8:	54a3      	strb	r3, [r4, r2]
 80072ba:	3201      	adds	r2, #1
 80072bc:	54a3      	strb	r3, [r4, r2]
 80072be:	3201      	adds	r2, #1
 80072c0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80072c2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80072c4:	2000      	movs	r0, #0
}
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80072c8:	333c      	adds	r3, #60	; 0x3c
 80072ca:	2200      	movs	r2, #0
 80072cc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80072ce:	f7fd fcc7 	bl	8004c60 <HAL_TIM_Base_MspInit>
 80072d2:	e7d8      	b.n	8007286 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80072d4:	2001      	movs	r0, #1
 80072d6:	e7f6      	b.n	80072c6 <HAL_TIM_Base_Init+0x4e>

080072d8 <HAL_TIM_PWM_Init>:
{
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80072dc:	d02a      	beq.n	8007334 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80072de:	233d      	movs	r3, #61	; 0x3d
 80072e0:	5cc3      	ldrb	r3, [r0, r3]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d020      	beq.n	8007328 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80072e6:	253d      	movs	r5, #61	; 0x3d
 80072e8:	2302      	movs	r3, #2
 80072ea:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ec:	0021      	movs	r1, r4
 80072ee:	c901      	ldmia	r1!, {r0}
 80072f0:	f7ff ff4e 	bl	8007190 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f4:	2301      	movs	r3, #1
 80072f6:	2248      	movs	r2, #72	; 0x48
 80072f8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fa:	3a0a      	subs	r2, #10
 80072fc:	54a3      	strb	r3, [r4, r2]
 80072fe:	3201      	adds	r2, #1
 8007300:	54a3      	strb	r3, [r4, r2]
 8007302:	3201      	adds	r2, #1
 8007304:	54a3      	strb	r3, [r4, r2]
 8007306:	3201      	adds	r2, #1
 8007308:	54a3      	strb	r3, [r4, r2]
 800730a:	3201      	adds	r2, #1
 800730c:	54a3      	strb	r3, [r4, r2]
 800730e:	3201      	adds	r2, #1
 8007310:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007312:	3201      	adds	r2, #1
 8007314:	54a3      	strb	r3, [r4, r2]
 8007316:	3201      	adds	r2, #1
 8007318:	54a3      	strb	r3, [r4, r2]
 800731a:	3201      	adds	r2, #1
 800731c:	54a3      	strb	r3, [r4, r2]
 800731e:	3201      	adds	r2, #1
 8007320:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8007322:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8007324:	2000      	movs	r0, #0
}
 8007326:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8007328:	333c      	adds	r3, #60	; 0x3c
 800732a:	2200      	movs	r2, #0
 800732c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800732e:	f7ff fe6d 	bl	800700c <HAL_TIM_PWM_MspInit>
 8007332:	e7d8      	b.n	80072e6 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8007334:	2001      	movs	r0, #1
 8007336:	e7f6      	b.n	8007326 <HAL_TIM_PWM_Init+0x4e>

08007338 <TIM_OC2_SetConfig>:
{
 8007338:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800733a:	6a03      	ldr	r3, [r0, #32]
 800733c:	2210      	movs	r2, #16
 800733e:	4393      	bics	r3, r2
 8007340:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007342:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007344:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007346:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007348:	4c14      	ldr	r4, [pc, #80]	; (800739c <TIM_OC2_SetConfig+0x64>)
 800734a:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800734c:	680c      	ldr	r4, [r1, #0]
 800734e:	0224      	lsls	r4, r4, #8
 8007350:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8007352:	2420      	movs	r4, #32
 8007354:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007356:	688c      	ldr	r4, [r1, #8]
 8007358:	0124      	lsls	r4, r4, #4
 800735a:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800735c:	4c10      	ldr	r4, [pc, #64]	; (80073a0 <TIM_OC2_SetConfig+0x68>)
 800735e:	42a0      	cmp	r0, r4
 8007360:	d006      	beq.n	8007370 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007362:	4c10      	ldr	r4, [pc, #64]	; (80073a4 <TIM_OC2_SetConfig+0x6c>)
 8007364:	42a0      	cmp	r0, r4
 8007366:	d00b      	beq.n	8007380 <TIM_OC2_SetConfig+0x48>
 8007368:	4c0f      	ldr	r4, [pc, #60]	; (80073a8 <TIM_OC2_SetConfig+0x70>)
 800736a:	42a0      	cmp	r0, r4
 800736c:	d10f      	bne.n	800738e <TIM_OC2_SetConfig+0x56>
 800736e:	e007      	b.n	8007380 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007370:	2480      	movs	r4, #128	; 0x80
 8007372:	43a2      	bics	r2, r4
 8007374:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007376:	68ca      	ldr	r2, [r1, #12]
 8007378:	0112      	lsls	r2, r2, #4
 800737a:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 800737c:	2440      	movs	r4, #64	; 0x40
 800737e:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007380:	4c0a      	ldr	r4, [pc, #40]	; (80073ac <TIM_OC2_SetConfig+0x74>)
 8007382:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007384:	698b      	ldr	r3, [r1, #24]
 8007386:	694e      	ldr	r6, [r1, #20]
 8007388:	4333      	orrs	r3, r6
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 800738e:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007390:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007392:	684b      	ldr	r3, [r1, #4]
 8007394:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007396:	6202      	str	r2, [r0, #32]
}
 8007398:	bd70      	pop	{r4, r5, r6, pc}
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	feff8cff 	.word	0xfeff8cff
 80073a0:	40012c00 	.word	0x40012c00
 80073a4:	40014400 	.word	0x40014400
 80073a8:	40014800 	.word	0x40014800
 80073ac:	fffff3ff 	.word	0xfffff3ff

080073b0 <HAL_TIM_PWM_ConfigChannel>:
{
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	0004      	movs	r4, r0
 80073b4:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80073b6:	233c      	movs	r3, #60	; 0x3c
 80073b8:	5cc3      	ldrb	r3, [r0, r3]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d100      	bne.n	80073c0 <HAL_TIM_PWM_ConfigChannel+0x10>
 80073be:	e08a      	b.n	80074d6 <HAL_TIM_PWM_ConfigChannel+0x126>
 80073c0:	233c      	movs	r3, #60	; 0x3c
 80073c2:	2101      	movs	r1, #1
 80073c4:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80073c6:	2a14      	cmp	r2, #20
 80073c8:	d816      	bhi.n	80073f8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80073ca:	0092      	lsls	r2, r2, #2
 80073cc:	4b43      	ldr	r3, [pc, #268]	; (80074dc <HAL_TIM_PWM_ConfigChannel+0x12c>)
 80073ce:	589b      	ldr	r3, [r3, r2]
 80073d0:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073d2:	0029      	movs	r1, r5
 80073d4:	6800      	ldr	r0, [r0, #0]
 80073d6:	f7ff fcc3 	bl	8006d60 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073da:	6822      	ldr	r2, [r4, #0]
 80073dc:	6993      	ldr	r3, [r2, #24]
 80073de:	2108      	movs	r1, #8
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073e4:	6822      	ldr	r2, [r4, #0]
 80073e6:	6993      	ldr	r3, [r2, #24]
 80073e8:	3904      	subs	r1, #4
 80073ea:	438b      	bics	r3, r1
 80073ec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073ee:	6822      	ldr	r2, [r4, #0]
 80073f0:	6993      	ldr	r3, [r2, #24]
 80073f2:	6929      	ldr	r1, [r5, #16]
 80073f4:	430b      	orrs	r3, r1
 80073f6:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80073f8:	233c      	movs	r3, #60	; 0x3c
 80073fa:	2200      	movs	r2, #0
 80073fc:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80073fe:	2000      	movs	r0, #0
}
 8007400:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007402:	0029      	movs	r1, r5
 8007404:	6800      	ldr	r0, [r0, #0]
 8007406:	f7ff ff97 	bl	8007338 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800740a:	6822      	ldr	r2, [r4, #0]
 800740c:	6991      	ldr	r1, [r2, #24]
 800740e:	2380      	movs	r3, #128	; 0x80
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	430b      	orrs	r3, r1
 8007414:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	6993      	ldr	r3, [r2, #24]
 800741a:	4931      	ldr	r1, [pc, #196]	; (80074e0 <HAL_TIM_PWM_ConfigChannel+0x130>)
 800741c:	400b      	ands	r3, r1
 800741e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007420:	6822      	ldr	r2, [r4, #0]
 8007422:	6991      	ldr	r1, [r2, #24]
 8007424:	692b      	ldr	r3, [r5, #16]
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	430b      	orrs	r3, r1
 800742a:	6193      	str	r3, [r2, #24]
      break;
 800742c:	e7e4      	b.n	80073f8 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800742e:	0029      	movs	r1, r5
 8007430:	6800      	ldr	r0, [r0, #0]
 8007432:	f7ff fcd9 	bl	8006de8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007436:	6822      	ldr	r2, [r4, #0]
 8007438:	69d3      	ldr	r3, [r2, #28]
 800743a:	2108      	movs	r1, #8
 800743c:	430b      	orrs	r3, r1
 800743e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007440:	6822      	ldr	r2, [r4, #0]
 8007442:	69d3      	ldr	r3, [r2, #28]
 8007444:	3904      	subs	r1, #4
 8007446:	438b      	bics	r3, r1
 8007448:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	69d3      	ldr	r3, [r2, #28]
 800744e:	6929      	ldr	r1, [r5, #16]
 8007450:	430b      	orrs	r3, r1
 8007452:	61d3      	str	r3, [r2, #28]
      break;
 8007454:	e7d0      	b.n	80073f8 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007456:	0029      	movs	r1, r5
 8007458:	6800      	ldr	r0, [r0, #0]
 800745a:	f7ff fd07 	bl	8006e6c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	69d1      	ldr	r1, [r2, #28]
 8007462:	2380      	movs	r3, #128	; 0x80
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	430b      	orrs	r3, r1
 8007468:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800746a:	6822      	ldr	r2, [r4, #0]
 800746c:	69d3      	ldr	r3, [r2, #28]
 800746e:	491c      	ldr	r1, [pc, #112]	; (80074e0 <HAL_TIM_PWM_ConfigChannel+0x130>)
 8007470:	400b      	ands	r3, r1
 8007472:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007474:	6822      	ldr	r2, [r4, #0]
 8007476:	69d1      	ldr	r1, [r2, #28]
 8007478:	692b      	ldr	r3, [r5, #16]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	430b      	orrs	r3, r1
 800747e:	61d3      	str	r3, [r2, #28]
      break;
 8007480:	e7ba      	b.n	80073f8 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007482:	0029      	movs	r1, r5
 8007484:	6800      	ldr	r0, [r0, #0]
 8007486:	f7ff fd25 	bl	8006ed4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800748e:	2108      	movs	r1, #8
 8007490:	430b      	orrs	r3, r1
 8007492:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007498:	3904      	subs	r1, #4
 800749a:	438b      	bics	r3, r1
 800749c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800749e:	6822      	ldr	r2, [r4, #0]
 80074a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80074a2:	6929      	ldr	r1, [r5, #16]
 80074a4:	430b      	orrs	r3, r1
 80074a6:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80074a8:	e7a6      	b.n	80073f8 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074aa:	0029      	movs	r1, r5
 80074ac:	6800      	ldr	r0, [r0, #0]
 80074ae:	f7ff fd43 	bl	8006f38 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074b2:	6822      	ldr	r2, [r4, #0]
 80074b4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	430b      	orrs	r3, r1
 80074bc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80074c2:	4907      	ldr	r1, [pc, #28]	; (80074e0 <HAL_TIM_PWM_ConfigChannel+0x130>)
 80074c4:	400b      	ands	r3, r1
 80074c6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074c8:	6822      	ldr	r2, [r4, #0]
 80074ca:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80074cc:	692b      	ldr	r3, [r5, #16]
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	430b      	orrs	r3, r1
 80074d2:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80074d4:	e790      	b.n	80073f8 <HAL_TIM_PWM_ConfigChannel+0x48>
  __HAL_LOCK(htim);
 80074d6:	2002      	movs	r0, #2
 80074d8:	e792      	b.n	8007400 <HAL_TIM_PWM_ConfigChannel+0x50>
 80074da:	46c0      	nop			; (mov r8, r8)
 80074dc:	0800d890 	.word	0x0800d890
 80074e0:	fffffbff 	.word	0xfffffbff

080074e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074e4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074e6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074e8:	4d03      	ldr	r5, [pc, #12]	; (80074f8 <TIM_ETR_SetConfig+0x14>)
 80074ea:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	430a      	orrs	r2, r1
 80074f0:	4313      	orrs	r3, r2
 80074f2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074f4:	6083      	str	r3, [r0, #8]
}
 80074f6:	bd30      	pop	{r4, r5, pc}
 80074f8:	ffff00ff 	.word	0xffff00ff

080074fc <HAL_TIM_ConfigClockSource>:
{
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8007500:	233c      	movs	r3, #60	; 0x3c
 8007502:	5cc3      	ldrb	r3, [r0, r3]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d100      	bne.n	800750a <HAL_TIM_ConfigClockSource+0xe>
 8007508:	e09c      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x148>
 800750a:	233c      	movs	r3, #60	; 0x3c
 800750c:	2201      	movs	r2, #1
 800750e:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	3301      	adds	r3, #1
 8007512:	3201      	adds	r2, #1
 8007514:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8007516:	6802      	ldr	r2, [r0, #0]
 8007518:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800751a:	484b      	ldr	r0, [pc, #300]	; (8007648 <HAL_TIM_ConfigClockSource+0x14c>)
 800751c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800751e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007520:	680b      	ldr	r3, [r1, #0]
 8007522:	2b60      	cmp	r3, #96	; 0x60
 8007524:	d059      	beq.n	80075da <HAL_TIM_ConfigClockSource+0xde>
 8007526:	d839      	bhi.n	800759c <HAL_TIM_ConfigClockSource+0xa0>
 8007528:	2b40      	cmp	r3, #64	; 0x40
 800752a:	d100      	bne.n	800752e <HAL_TIM_ConfigClockSource+0x32>
 800752c:	e070      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x114>
 800752e:	d91b      	bls.n	8007568 <HAL_TIM_ConfigClockSource+0x6c>
 8007530:	2b50      	cmp	r3, #80	; 0x50
 8007532:	d12b      	bne.n	800758c <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	6848      	ldr	r0, [r1, #4]
 8007538:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800753a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800753c:	6a1d      	ldr	r5, [r3, #32]
 800753e:	2601      	movs	r6, #1
 8007540:	43b5      	bics	r5, r6
 8007542:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007544:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007546:	36ef      	adds	r6, #239	; 0xef
 8007548:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800754a:	0112      	lsls	r2, r2, #4
 800754c:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800754e:	250a      	movs	r5, #10
 8007550:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8007552:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007556:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007558:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800755a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800755c:	493b      	ldr	r1, [pc, #236]	; (800764c <HAL_TIM_ConfigClockSource+0x150>)
 800755e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007560:	2157      	movs	r1, #87	; 0x57
 8007562:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007564:	6093      	str	r3, [r2, #8]
}
 8007566:	e011      	b.n	800758c <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8007568:	2b20      	cmp	r3, #32
 800756a:	d002      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x76>
 800756c:	d90a      	bls.n	8007584 <HAL_TIM_ConfigClockSource+0x88>
 800756e:	2b30      	cmp	r3, #48	; 0x30
 8007570:	d10c      	bne.n	800758c <HAL_TIM_ConfigClockSource+0x90>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007572:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007574:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007576:	4835      	ldr	r0, [pc, #212]	; (800764c <HAL_TIM_ConfigClockSource+0x150>)
 8007578:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757a:	4313      	orrs	r3, r2
 800757c:	2207      	movs	r2, #7
 800757e:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8007580:	608b      	str	r3, [r1, #8]
}
 8007582:	e003      	b.n	800758c <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8007584:	2210      	movs	r2, #16
 8007586:	0019      	movs	r1, r3
 8007588:	4391      	bics	r1, r2
 800758a:	d0f2      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x76>
  htim->State = HAL_TIM_STATE_READY;
 800758c:	233d      	movs	r3, #61	; 0x3d
 800758e:	2201      	movs	r2, #1
 8007590:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8007592:	3b01      	subs	r3, #1
 8007594:	2200      	movs	r2, #0
 8007596:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8007598:	2000      	movs	r0, #0
}
 800759a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800759c:	2b70      	cmp	r3, #112	; 0x70
 800759e:	d010      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0xc6>
 80075a0:	2280      	movs	r2, #128	; 0x80
 80075a2:	0192      	lsls	r2, r2, #6
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d1f1      	bne.n	800758c <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 80075a8:	68cb      	ldr	r3, [r1, #12]
 80075aa:	684a      	ldr	r2, [r1, #4]
 80075ac:	6889      	ldr	r1, [r1, #8]
 80075ae:	6820      	ldr	r0, [r4, #0]
 80075b0:	f7ff ff98 	bl	80074e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075b4:	6822      	ldr	r2, [r4, #0]
 80075b6:	6891      	ldr	r1, [r2, #8]
 80075b8:	2380      	movs	r3, #128	; 0x80
 80075ba:	01db      	lsls	r3, r3, #7
 80075bc:	430b      	orrs	r3, r1
 80075be:	6093      	str	r3, [r2, #8]
      break;
 80075c0:	e7e4      	b.n	800758c <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 80075c2:	68cb      	ldr	r3, [r1, #12]
 80075c4:	684a      	ldr	r2, [r1, #4]
 80075c6:	6889      	ldr	r1, [r1, #8]
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	f7ff ff8b 	bl	80074e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075ce:	6822      	ldr	r2, [r4, #0]
 80075d0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075d2:	2177      	movs	r1, #119	; 0x77
 80075d4:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80075d6:	6093      	str	r3, [r2, #8]
      break;
 80075d8:	e7d8      	b.n	800758c <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	684a      	ldr	r2, [r1, #4]
 80075de:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075e0:	6a18      	ldr	r0, [r3, #32]
 80075e2:	2510      	movs	r5, #16
 80075e4:	43a8      	bics	r0, r5
 80075e6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075e8:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 80075ea:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075ec:	4e18      	ldr	r6, [pc, #96]	; (8007650 <HAL_TIM_ConfigClockSource+0x154>)
 80075ee:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075f0:	0309      	lsls	r1, r1, #12
 80075f2:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075f4:	25a0      	movs	r5, #160	; 0xa0
 80075f6:	43a8      	bics	r0, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 80075f8:	0112      	lsls	r2, r2, #4
 80075fa:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80075fc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80075fe:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007600:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007602:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007604:	4911      	ldr	r1, [pc, #68]	; (800764c <HAL_TIM_ConfigClockSource+0x150>)
 8007606:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007608:	2167      	movs	r1, #103	; 0x67
 800760a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800760c:	6093      	str	r3, [r2, #8]
}
 800760e:	e7bd      	b.n	800758c <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	6848      	ldr	r0, [r1, #4]
 8007614:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8007616:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007618:	6a1d      	ldr	r5, [r3, #32]
 800761a:	2601      	movs	r6, #1
 800761c:	43b5      	bics	r5, r6
 800761e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007620:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007622:	36ef      	adds	r6, #239	; 0xef
 8007624:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007626:	0112      	lsls	r2, r2, #4
 8007628:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800762a:	250a      	movs	r5, #10
 800762c:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 800762e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007632:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007634:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007636:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007638:	4904      	ldr	r1, [pc, #16]	; (800764c <HAL_TIM_ConfigClockSource+0x150>)
 800763a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800763c:	2147      	movs	r1, #71	; 0x47
 800763e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007640:	6093      	str	r3, [r2, #8]
}
 8007642:	e7a3      	b.n	800758c <HAL_TIM_ConfigClockSource+0x90>
  __HAL_LOCK(htim);
 8007644:	2002      	movs	r0, #2
 8007646:	e7a8      	b.n	800759a <HAL_TIM_ConfigClockSource+0x9e>
 8007648:	ffce0088 	.word	0xffce0088
 800764c:	ffcfff8f 	.word	0xffcfff8f
 8007650:	ffff0fff 	.word	0xffff0fff

08007654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007654:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007656:	231f      	movs	r3, #31
 8007658:	4019      	ands	r1, r3

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800765a:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800765c:	2401      	movs	r4, #1
 800765e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8007660:	43a3      	bics	r3, r4
 8007662:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007664:	6a03      	ldr	r3, [r0, #32]
 8007666:	408a      	lsls	r2, r1
 8007668:	431a      	orrs	r2, r3
 800766a:	6202      	str	r2, [r0, #32]
}
 800766c:	bd10      	pop	{r4, pc}
	...

08007670 <HAL_TIM_PWM_Start>:
{
 8007670:	b510      	push	{r4, lr}
 8007672:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007674:	2900      	cmp	r1, #0
 8007676:	d12a      	bne.n	80076ce <HAL_TIM_PWM_Start+0x5e>
 8007678:	233e      	movs	r3, #62	; 0x3e
 800767a:	5cc3      	ldrb	r3, [r0, r3]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d164      	bne.n	800774a <HAL_TIM_PWM_Start+0xda>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007680:	233e      	movs	r3, #62	; 0x3e
 8007682:	2202      	movs	r2, #2
 8007684:	54c2      	strb	r2, [r0, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007686:	2201      	movs	r2, #1
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	f7ff ffe3 	bl	8007654 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	4a36      	ldr	r2, [pc, #216]	; (800776c <HAL_TIM_PWM_Start+0xfc>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d005      	beq.n	80076a2 <HAL_TIM_PWM_Start+0x32>
 8007696:	4a36      	ldr	r2, [pc, #216]	; (8007770 <HAL_TIM_PWM_Start+0x100>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d002      	beq.n	80076a2 <HAL_TIM_PWM_Start+0x32>
 800769c:	4a35      	ldr	r2, [pc, #212]	; (8007774 <HAL_TIM_PWM_Start+0x104>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d108      	bne.n	80076b4 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 80076a2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80076a4:	2280      	movs	r2, #128	; 0x80
 80076a6:	0212      	lsls	r2, r2, #8
 80076a8:	430a      	orrs	r2, r1
 80076aa:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	4a2f      	ldr	r2, [pc, #188]	; (800776c <HAL_TIM_PWM_Start+0xfc>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d03c      	beq.n	800772e <HAL_TIM_PWM_Start+0xbe>
 80076b4:	2280      	movs	r2, #128	; 0x80
 80076b6:	05d2      	lsls	r2, r2, #23
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d038      	beq.n	800772e <HAL_TIM_PWM_Start+0xbe>
 80076bc:	4a2e      	ldr	r2, [pc, #184]	; (8007778 <HAL_TIM_PWM_Start+0x108>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d035      	beq.n	800772e <HAL_TIM_PWM_Start+0xbe>
    __HAL_TIM_ENABLE(htim);
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	2101      	movs	r1, #1
 80076c6:	430a      	orrs	r2, r1
 80076c8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80076ca:	2000      	movs	r0, #0
}
 80076cc:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076ce:	2904      	cmp	r1, #4
 80076d0:	d00d      	beq.n	80076ee <HAL_TIM_PWM_Start+0x7e>
 80076d2:	2908      	cmp	r1, #8
 80076d4:	d013      	beq.n	80076fe <HAL_TIM_PWM_Start+0x8e>
 80076d6:	290c      	cmp	r1, #12
 80076d8:	d019      	beq.n	800770e <HAL_TIM_PWM_Start+0x9e>
 80076da:	2910      	cmp	r1, #16
 80076dc:	d01f      	beq.n	800771e <HAL_TIM_PWM_Start+0xae>
 80076de:	2343      	movs	r3, #67	; 0x43
 80076e0:	5cc3      	ldrb	r3, [r0, r3]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d13b      	bne.n	800775e <HAL_TIM_PWM_Start+0xee>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e6:	2343      	movs	r3, #67	; 0x43
 80076e8:	2202      	movs	r2, #2
 80076ea:	54c2      	strb	r2, [r0, r3]
 80076ec:	e7cb      	b.n	8007686 <HAL_TIM_PWM_Start+0x16>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076ee:	233f      	movs	r3, #63	; 0x3f
 80076f0:	5cc3      	ldrb	r3, [r0, r3]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d12b      	bne.n	800774e <HAL_TIM_PWM_Start+0xde>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076f6:	233f      	movs	r3, #63	; 0x3f
 80076f8:	2202      	movs	r2, #2
 80076fa:	54c2      	strb	r2, [r0, r3]
 80076fc:	e7c3      	b.n	8007686 <HAL_TIM_PWM_Start+0x16>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076fe:	2340      	movs	r3, #64	; 0x40
 8007700:	5cc3      	ldrb	r3, [r0, r3]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d125      	bne.n	8007752 <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007706:	2340      	movs	r3, #64	; 0x40
 8007708:	2202      	movs	r2, #2
 800770a:	54c2      	strb	r2, [r0, r3]
 800770c:	e7bb      	b.n	8007686 <HAL_TIM_PWM_Start+0x16>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800770e:	2341      	movs	r3, #65	; 0x41
 8007710:	5cc3      	ldrb	r3, [r0, r3]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d11f      	bne.n	8007756 <HAL_TIM_PWM_Start+0xe6>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007716:	2341      	movs	r3, #65	; 0x41
 8007718:	2202      	movs	r2, #2
 800771a:	54c2      	strb	r2, [r0, r3]
 800771c:	e7b3      	b.n	8007686 <HAL_TIM_PWM_Start+0x16>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800771e:	2342      	movs	r3, #66	; 0x42
 8007720:	5cc3      	ldrb	r3, [r0, r3]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d119      	bne.n	800775a <HAL_TIM_PWM_Start+0xea>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007726:	2342      	movs	r3, #66	; 0x42
 8007728:	2202      	movs	r2, #2
 800772a:	54c2      	strb	r2, [r0, r3]
 800772c:	e7ab      	b.n	8007686 <HAL_TIM_PWM_Start+0x16>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	4912      	ldr	r1, [pc, #72]	; (800777c <HAL_TIM_PWM_Start+0x10c>)
 8007732:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007734:	2a06      	cmp	r2, #6
 8007736:	d014      	beq.n	8007762 <HAL_TIM_PWM_Start+0xf2>
 8007738:	3907      	subs	r1, #7
 800773a:	428a      	cmp	r2, r1
 800773c:	d013      	beq.n	8007766 <HAL_TIM_PWM_Start+0xf6>
      __HAL_TIM_ENABLE(htim);
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	2101      	movs	r1, #1
 8007742:	430a      	orrs	r2, r1
 8007744:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007746:	2000      	movs	r0, #0
 8007748:	e7c0      	b.n	80076cc <HAL_TIM_PWM_Start+0x5c>
    return HAL_ERROR;
 800774a:	2001      	movs	r0, #1
 800774c:	e7be      	b.n	80076cc <HAL_TIM_PWM_Start+0x5c>
 800774e:	2001      	movs	r0, #1
 8007750:	e7bc      	b.n	80076cc <HAL_TIM_PWM_Start+0x5c>
 8007752:	2001      	movs	r0, #1
 8007754:	e7ba      	b.n	80076cc <HAL_TIM_PWM_Start+0x5c>
 8007756:	2001      	movs	r0, #1
 8007758:	e7b8      	b.n	80076cc <HAL_TIM_PWM_Start+0x5c>
 800775a:	2001      	movs	r0, #1
 800775c:	e7b6      	b.n	80076cc <HAL_TIM_PWM_Start+0x5c>
 800775e:	2001      	movs	r0, #1
 8007760:	e7b4      	b.n	80076cc <HAL_TIM_PWM_Start+0x5c>
  return HAL_OK;
 8007762:	2000      	movs	r0, #0
 8007764:	e7b2      	b.n	80076cc <HAL_TIM_PWM_Start+0x5c>
 8007766:	2000      	movs	r0, #0
 8007768:	e7b0      	b.n	80076cc <HAL_TIM_PWM_Start+0x5c>
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	40012c00 	.word	0x40012c00
 8007770:	40014400 	.word	0x40014400
 8007774:	40014800 	.word	0x40014800
 8007778:	40000400 	.word	0x40000400
 800777c:	00010007 	.word	0x00010007

08007780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007780:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007782:	233c      	movs	r3, #60	; 0x3c
 8007784:	5cc3      	ldrb	r3, [r0, r3]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d02d      	beq.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800778a:	233c      	movs	r3, #60	; 0x3c
 800778c:	2201      	movs	r2, #1
 800778e:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	3301      	adds	r3, #1
 8007792:	3201      	adds	r2, #1
 8007794:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007796:	6802      	ldr	r2, [r0, #0]
 8007798:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800779a:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800779c:	4d13      	ldr	r5, [pc, #76]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800779e:	42aa      	cmp	r2, r5
 80077a0:	d01c      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077a2:	2570      	movs	r5, #112	; 0x70
 80077a4:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a6:	680d      	ldr	r5, [r1, #0]
 80077a8:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077aa:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ac:	6803      	ldr	r3, [r0, #0]
 80077ae:	4a0f      	ldr	r2, [pc, #60]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d006      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80077b4:	2280      	movs	r2, #128	; 0x80
 80077b6:	05d2      	lsls	r2, r2, #23
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d002      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80077bc:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d104      	bne.n	80077cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077c2:	2280      	movs	r2, #128	; 0x80
 80077c4:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077c6:	688a      	ldr	r2, [r1, #8]
 80077c8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077ca:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077cc:	233d      	movs	r3, #61	; 0x3d
 80077ce:	2201      	movs	r2, #1
 80077d0:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80077d2:	3b01      	subs	r3, #1
 80077d4:	2200      	movs	r2, #0
 80077d6:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80077d8:	2000      	movs	r0, #0
}
 80077da:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077dc:	4d05      	ldr	r5, [pc, #20]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80077de:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077e0:	684d      	ldr	r5, [r1, #4]
 80077e2:	432b      	orrs	r3, r5
 80077e4:	e7dd      	b.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80077e6:	2002      	movs	r0, #2
 80077e8:	e7f7      	b.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	40012c00 	.word	0x40012c00
 80077f0:	40000400 	.word	0x40000400
 80077f4:	ff0fffff 	.word	0xff0fffff

080077f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077f8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077fa:	233c      	movs	r3, #60	; 0x3c
 80077fc:	5cc3      	ldrb	r3, [r0, r3]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d040      	beq.n	8007884 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 8007802:	233c      	movs	r3, #60	; 0x3c
 8007804:	2201      	movs	r2, #1
 8007806:	54c2      	strb	r2, [r0, r3]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007808:	4b1f      	ldr	r3, [pc, #124]	; (8007888 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 800780a:	68ca      	ldr	r2, [r1, #12]
 800780c:	4013      	ands	r3, r2
 800780e:	688a      	ldr	r2, [r1, #8]
 8007810:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007812:	4a1e      	ldr	r2, [pc, #120]	; (800788c <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8007814:	4013      	ands	r3, r2
 8007816:	684a      	ldr	r2, [r1, #4]
 8007818:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800781a:	4a1d      	ldr	r2, [pc, #116]	; (8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 800781c:	4013      	ands	r3, r2
 800781e:	680a      	ldr	r2, [r1, #0]
 8007820:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007822:	4a1c      	ldr	r2, [pc, #112]	; (8007894 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8007824:	4013      	ands	r3, r2
 8007826:	690a      	ldr	r2, [r1, #16]
 8007828:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800782a:	4a1b      	ldr	r2, [pc, #108]	; (8007898 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 800782c:	4013      	ands	r3, r2
 800782e:	694a      	ldr	r2, [r1, #20]
 8007830:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007832:	4a1a      	ldr	r2, [pc, #104]	; (800789c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007834:	4013      	ands	r3, r2
 8007836:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007838:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800783a:	4a19      	ldr	r2, [pc, #100]	; (80078a0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800783c:	4013      	ands	r3, r2
 800783e:	698a      	ldr	r2, [r1, #24]
 8007840:	0412      	lsls	r2, r2, #16
 8007842:	4313      	orrs	r3, r2

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007844:	6804      	ldr	r4, [r0, #0]
 8007846:	4a17      	ldr	r2, [pc, #92]	; (80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007848:	4294      	cmp	r4, r2
 800784a:	d005      	beq.n	8007858 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800784c:	6463      	str	r3, [r4, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800784e:	233c      	movs	r3, #60	; 0x3c
 8007850:	2200      	movs	r2, #0
 8007852:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8007854:	2000      	movs	r0, #0
}
 8007856:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007858:	4a13      	ldr	r2, [pc, #76]	; (80078a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800785a:	4013      	ands	r3, r2
 800785c:	69ca      	ldr	r2, [r1, #28]
 800785e:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007860:	4a12      	ldr	r2, [pc, #72]	; (80078ac <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007862:	4013      	ands	r3, r2
 8007864:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8007866:	0512      	lsls	r2, r2, #20
 8007868:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800786a:	4a11      	ldr	r2, [pc, #68]	; (80078b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800786c:	4013      	ands	r3, r2
 800786e:	6a0a      	ldr	r2, [r1, #32]
 8007870:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007872:	4a10      	ldr	r2, [pc, #64]	; (80078b4 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8007874:	4013      	ands	r3, r2
 8007876:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8007878:	4313      	orrs	r3, r2
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800787a:	4a0f      	ldr	r2, [pc, #60]	; (80078b8 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 800787c:	401a      	ands	r2, r3
 800787e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007880:	4313      	orrs	r3, r2
 8007882:	e7e3      	b.n	800784c <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 8007884:	2002      	movs	r0, #2
 8007886:	e7e6      	b.n	8007856 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8007888:	fffffcff 	.word	0xfffffcff
 800788c:	fffffbff 	.word	0xfffffbff
 8007890:	fffff7ff 	.word	0xfffff7ff
 8007894:	ffffefff 	.word	0xffffefff
 8007898:	ffffdfff 	.word	0xffffdfff
 800789c:	ffffbfff 	.word	0xffffbfff
 80078a0:	fff0ffff 	.word	0xfff0ffff
 80078a4:	40012c00 	.word	0x40012c00
 80078a8:	efffffff 	.word	0xefffffff
 80078ac:	ff0fffff 	.word	0xff0fffff
 80078b0:	feffffff 	.word	0xfeffffff
 80078b4:	fdffffff 	.word	0xfdffffff
 80078b8:	dfffffff 	.word	0xdfffffff

080078bc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078bc:	4770      	bx	lr

080078be <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078be:	4770      	bx	lr

080078c0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078c0:	4770      	bx	lr
	...

080078c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	0004      	movs	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80078c8:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078ca:	6883      	ldr	r3, [r0, #8]
 80078cc:	6902      	ldr	r2, [r0, #16]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	6942      	ldr	r2, [r0, #20]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	69c2      	ldr	r2, [r0, #28]
 80078d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078d8:	680a      	ldr	r2, [r1, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 80078da:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80078dc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078de:	4890      	ldr	r0, [pc, #576]	; (8007b20 <UART_SetConfig+0x25c>)
 80078e0:	4002      	ands	r2, r0
 80078e2:	4313      	orrs	r3, r2
 80078e4:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e6:	6822      	ldr	r2, [r4, #0]
 80078e8:	6853      	ldr	r3, [r2, #4]
 80078ea:	498e      	ldr	r1, [pc, #568]	; (8007b24 <UART_SetConfig+0x260>)
 80078ec:	400b      	ands	r3, r1
 80078ee:	68e1      	ldr	r1, [r4, #12]
 80078f0:	430b      	orrs	r3, r1
 80078f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078f4:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078f6:	6822      	ldr	r2, [r4, #0]
 80078f8:	4b8b      	ldr	r3, [pc, #556]	; (8007b28 <UART_SetConfig+0x264>)
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d001      	beq.n	8007902 <UART_SetConfig+0x3e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078fe:	6a23      	ldr	r3, [r4, #32]
 8007900:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007902:	6893      	ldr	r3, [r2, #8]
 8007904:	4889      	ldr	r0, [pc, #548]	; (8007b2c <UART_SetConfig+0x268>)
 8007906:	4003      	ands	r3, r0
 8007908:	430b      	orrs	r3, r1
 800790a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800790c:	6822      	ldr	r2, [r4, #0]
 800790e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007910:	210f      	movs	r1, #15
 8007912:	438b      	bics	r3, r1
 8007914:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007916:	430b      	orrs	r3, r1
 8007918:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800791a:	6822      	ldr	r2, [r4, #0]
 800791c:	4b84      	ldr	r3, [pc, #528]	; (8007b30 <UART_SetConfig+0x26c>)
 800791e:	429a      	cmp	r2, r3
 8007920:	d03a      	beq.n	8007998 <UART_SetConfig+0xd4>
 8007922:	4b84      	ldr	r3, [pc, #528]	; (8007b34 <UART_SetConfig+0x270>)
 8007924:	429a      	cmp	r2, r3
 8007926:	d100      	bne.n	800792a <UART_SetConfig+0x66>
 8007928:	e0f1      	b.n	8007b0e <UART_SetConfig+0x24a>
 800792a:	497f      	ldr	r1, [pc, #508]	; (8007b28 <UART_SetConfig+0x264>)
 800792c:	2310      	movs	r3, #16
 800792e:	428a      	cmp	r2, r1
 8007930:	d046      	beq.n	80079c0 <UART_SetConfig+0xfc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007932:	69e2      	ldr	r2, [r4, #28]
 8007934:	2180      	movs	r1, #128	; 0x80
 8007936:	0209      	lsls	r1, r1, #8
 8007938:	428a      	cmp	r2, r1
 800793a:	d100      	bne.n	800793e <UART_SetConfig+0x7a>
 800793c:	e095      	b.n	8007a6a <UART_SetConfig+0x1a6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800793e:	2b04      	cmp	r3, #4
 8007940:	d100      	bne.n	8007944 <UART_SetConfig+0x80>
 8007942:	e0dc      	b.n	8007afe <UART_SetConfig+0x23a>
 8007944:	d900      	bls.n	8007948 <UART_SetConfig+0x84>
 8007946:	e0cb      	b.n	8007ae0 <UART_SetConfig+0x21c>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d100      	bne.n	800794e <UART_SetConfig+0x8a>
 800794c:	e0cf      	b.n	8007aee <UART_SetConfig+0x22a>
 800794e:	2001      	movs	r0, #1
 8007950:	2b02      	cmp	r3, #2
 8007952:	d118      	bne.n	8007986 <UART_SetConfig+0xc2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007954:	4b78      	ldr	r3, [pc, #480]	; (8007b38 <UART_SetConfig+0x274>)
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007956:	6865      	ldr	r5, [r4, #4]
 8007958:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800795a:	0052      	lsls	r2, r2, #1
 800795c:	4977      	ldr	r1, [pc, #476]	; (8007b3c <UART_SetConfig+0x278>)
 800795e:	5a51      	ldrh	r1, [r2, r1]
 8007960:	0018      	movs	r0, r3
 8007962:	f7f8 fbeb 	bl	800013c <__udivsi3>
 8007966:	086b      	lsrs	r3, r5, #1
 8007968:	18c0      	adds	r0, r0, r3
 800796a:	0029      	movs	r1, r5
 800796c:	f7f8 fbe6 	bl	800013c <__udivsi3>
 8007970:	0403      	lsls	r3, r0, #16
 8007972:	0c1b      	lsrs	r3, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007974:	0019      	movs	r1, r3
 8007976:	3910      	subs	r1, #16
 8007978:	4a71      	ldr	r2, [pc, #452]	; (8007b40 <UART_SetConfig+0x27c>)
      {
        huart->Instance->BRR = usartdiv;
      }
      else
      {
        ret = HAL_ERROR;
 800797a:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800797c:	4291      	cmp	r1, r2
 800797e:	d802      	bhi.n	8007986 <UART_SetConfig+0xc2>
        huart->Instance->BRR = usartdiv;
 8007980:	6822      	ldr	r2, [r4, #0]
 8007982:	60d3      	str	r3, [r2, #12]
 8007984:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007986:	2301      	movs	r3, #1
 8007988:	226a      	movs	r2, #106	; 0x6a
 800798a:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 800798c:	3a02      	subs	r2, #2
 800798e:	52a3      	strh	r3, [r4, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8007994:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8007996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007998:	4b6a      	ldr	r3, [pc, #424]	; (8007b44 <UART_SetConfig+0x280>)
 800799a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800799c:	2303      	movs	r3, #3
 800799e:	4013      	ands	r3, r2
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d100      	bne.n	80079a6 <UART_SetConfig+0xe2>
 80079a4:	e0af      	b.n	8007b06 <UART_SetConfig+0x242>
 80079a6:	d900      	bls.n	80079aa <UART_SetConfig+0xe6>
 80079a8:	e0af      	b.n	8007b0a <UART_SetConfig+0x246>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d100      	bne.n	80079b0 <UART_SetConfig+0xec>
 80079ae:	e0b0      	b.n	8007b12 <UART_SetConfig+0x24e>
 80079b0:	3b01      	subs	r3, #1
 80079b2:	1e5a      	subs	r2, r3, #1
 80079b4:	4193      	sbcs	r3, r2
 80079b6:	425a      	negs	r2, r3
 80079b8:	230c      	movs	r3, #12
 80079ba:	4013      	ands	r3, r2
 80079bc:	3304      	adds	r3, #4
 80079be:	e7b8      	b.n	8007932 <UART_SetConfig+0x6e>
 80079c0:	4b60      	ldr	r3, [pc, #384]	; (8007b44 <UART_SetConfig+0x280>)
 80079c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c4:	22c0      	movs	r2, #192	; 0xc0
 80079c6:	0112      	lsls	r2, r2, #4
 80079c8:	4013      	ands	r3, r2
 80079ca:	2280      	movs	r2, #128	; 0x80
 80079cc:	0112      	lsls	r2, r2, #4
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d049      	beq.n	8007a66 <UART_SetConfig+0x1a2>
 80079d2:	d80a      	bhi.n	80079ea <UART_SetConfig+0x126>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d03e      	beq.n	8007a56 <UART_SetConfig+0x192>
 80079d8:	2280      	movs	r2, #128	; 0x80
 80079da:	00d2      	lsls	r2, r2, #3
 80079dc:	2001      	movs	r0, #1
 80079de:	4293      	cmp	r3, r2
 80079e0:	d1d1      	bne.n	8007986 <UART_SetConfig+0xc2>
        pclk = HAL_RCC_GetSysClockFreq();
 80079e2:	f7fe ff79 	bl	80068d8 <HAL_RCC_GetSysClockFreq>
 80079e6:	0005      	movs	r5, r0
        break;
 80079e8:	e038      	b.n	8007a5c <UART_SetConfig+0x198>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ea:	22c0      	movs	r2, #192	; 0xc0
 80079ec:	0112      	lsls	r2, r2, #4
 80079ee:	2001      	movs	r0, #1
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d1c8      	bne.n	8007986 <UART_SetConfig+0xc2>
        pclk = (uint32_t) LSE_VALUE;
 80079f4:	2580      	movs	r5, #128	; 0x80
 80079f6:	022d      	lsls	r5, r5, #8
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	4a4f      	ldr	r2, [pc, #316]	; (8007b3c <UART_SetConfig+0x278>)
 80079fe:	5a9f      	ldrh	r7, [r3, r2]
 8007a00:	0039      	movs	r1, r7
 8007a02:	0028      	movs	r0, r5
 8007a04:	f7f8 fb9a 	bl	800013c <__udivsi3>
 8007a08:	0003      	movs	r3, r0
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a0a:	6866      	ldr	r6, [r4, #4]
 8007a0c:	0072      	lsls	r2, r6, #1
 8007a0e:	1992      	adds	r2, r2, r6
        ret = HAL_ERROR;
 8007a10:	2001      	movs	r0, #1
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d8b7      	bhi.n	8007986 <UART_SetConfig+0xc2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a16:	0332      	lsls	r2, r6, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d3b4      	bcc.n	8007986 <UART_SetConfig+0xc2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a1c:	003a      	movs	r2, r7
 8007a1e:	2300      	movs	r3, #0
 8007a20:	0028      	movs	r0, r5
 8007a22:	2100      	movs	r1, #0
 8007a24:	f7f8 fd78 	bl	8000518 <__aeabi_uldivmod>
 8007a28:	0e05      	lsrs	r5, r0, #24
 8007a2a:	020b      	lsls	r3, r1, #8
 8007a2c:	432b      	orrs	r3, r5
 8007a2e:	0202      	lsls	r2, r0, #8
 8007a30:	0870      	lsrs	r0, r6, #1
 8007a32:	2100      	movs	r1, #0
 8007a34:	1880      	adds	r0, r0, r2
 8007a36:	4159      	adcs	r1, r3
 8007a38:	0032      	movs	r2, r6
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f7f8 fd6c 	bl	8000518 <__aeabi_uldivmod>
 8007a40:	0003      	movs	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a42:	4a41      	ldr	r2, [pc, #260]	; (8007b48 <UART_SetConfig+0x284>)
 8007a44:	1881      	adds	r1, r0, r2
 8007a46:	4a41      	ldr	r2, [pc, #260]	; (8007b4c <UART_SetConfig+0x288>)
          ret = HAL_ERROR;
 8007a48:	2001      	movs	r0, #1
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a4a:	4291      	cmp	r1, r2
 8007a4c:	d89b      	bhi.n	8007986 <UART_SetConfig+0xc2>
          huart->Instance->BRR = usartdiv;
 8007a4e:	6822      	ldr	r2, [r4, #0]
 8007a50:	60d3      	str	r3, [r2, #12]
 8007a52:	2000      	movs	r0, #0
 8007a54:	e797      	b.n	8007986 <UART_SetConfig+0xc2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a56:	f7ff f869 	bl	8006b2c <HAL_RCC_GetPCLK1Freq>
 8007a5a:	0005      	movs	r5, r0
    if (pclk != 0U)
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	d100      	bne.n	8007a64 <UART_SetConfig+0x1a0>
 8007a62:	e790      	b.n	8007986 <UART_SetConfig+0xc2>
 8007a64:	e7c8      	b.n	80079f8 <UART_SetConfig+0x134>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a66:	4d34      	ldr	r5, [pc, #208]	; (8007b38 <UART_SetConfig+0x274>)
 8007a68:	e7c6      	b.n	80079f8 <UART_SetConfig+0x134>
    switch (clocksource)
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d034      	beq.n	8007ad8 <UART_SetConfig+0x214>
 8007a6e:	d827      	bhi.n	8007ac0 <UART_SetConfig+0x1fc>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d029      	beq.n	8007ac8 <UART_SetConfig+0x204>
 8007a74:	2001      	movs	r0, #1
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d000      	beq.n	8007a7c <UART_SetConfig+0x1b8>
 8007a7a:	e784      	b.n	8007986 <UART_SetConfig+0xc2>
        pclk = (uint32_t) HSI_VALUE;
 8007a7c:	4a2e      	ldr	r2, [pc, #184]	; (8007b38 <UART_SetConfig+0x274>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7e:	6865      	ldr	r5, [r4, #4]
 8007a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	492d      	ldr	r1, [pc, #180]	; (8007b3c <UART_SetConfig+0x278>)
 8007a86:	5a59      	ldrh	r1, [r3, r1]
 8007a88:	0010      	movs	r0, r2
 8007a8a:	f7f8 fb57 	bl	800013c <__udivsi3>
 8007a8e:	0040      	lsls	r0, r0, #1
 8007a90:	086b      	lsrs	r3, r5, #1
 8007a92:	18c0      	adds	r0, r0, r3
 8007a94:	0029      	movs	r1, r5
 8007a96:	f7f8 fb51 	bl	800013c <__udivsi3>
 8007a9a:	0003      	movs	r3, r0
 8007a9c:	0402      	lsls	r2, r0, #16
 8007a9e:	0c12      	lsrs	r2, r2, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa0:	0015      	movs	r5, r2
 8007aa2:	3d10      	subs	r5, #16
 8007aa4:	4926      	ldr	r1, [pc, #152]	; (8007b40 <UART_SetConfig+0x27c>)
        ret = HAL_ERROR;
 8007aa6:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa8:	428d      	cmp	r5, r1
 8007aaa:	d900      	bls.n	8007aae <UART_SetConfig+0x1ea>
 8007aac:	e76b      	b.n	8007986 <UART_SetConfig+0xc2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aae:	4828      	ldr	r0, [pc, #160]	; (8007b50 <UART_SetConfig+0x28c>)
 8007ab0:	4003      	ands	r3, r0
        huart->Instance->BRR = brrtemp;
 8007ab2:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ab4:	0712      	lsls	r2, r2, #28
 8007ab6:	0f52      	lsrs	r2, r2, #29
        huart->Instance->BRR = brrtemp;
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60cb      	str	r3, [r1, #12]
 8007abc:	2000      	movs	r0, #0
 8007abe:	e762      	b.n	8007986 <UART_SetConfig+0xc2>
    switch (clocksource)
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d0db      	beq.n	8007a7e <UART_SetConfig+0x1ba>
 8007ac6:	e75e      	b.n	8007986 <UART_SetConfig+0xc2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac8:	f7ff f830 	bl	8006b2c <HAL_RCC_GetPCLK1Freq>
 8007acc:	0002      	movs	r2, r0
    if (pclk != 0U)
 8007ace:	2000      	movs	r0, #0
 8007ad0:	2a00      	cmp	r2, #0
 8007ad2:	d100      	bne.n	8007ad6 <UART_SetConfig+0x212>
 8007ad4:	e757      	b.n	8007986 <UART_SetConfig+0xc2>
 8007ad6:	e7d2      	b.n	8007a7e <UART_SetConfig+0x1ba>
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad8:	f7fe fefe 	bl	80068d8 <HAL_RCC_GetSysClockFreq>
 8007adc:	0002      	movs	r2, r0
        break;
 8007ade:	e7f6      	b.n	8007ace <UART_SetConfig+0x20a>
    switch (clocksource)
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	d000      	beq.n	8007ae8 <UART_SetConfig+0x224>
 8007ae6:	e74e      	b.n	8007986 <UART_SetConfig+0xc2>
 8007ae8:	2380      	movs	r3, #128	; 0x80
 8007aea:	021b      	lsls	r3, r3, #8
 8007aec:	e733      	b.n	8007956 <UART_SetConfig+0x92>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aee:	f7ff f81d 	bl	8006b2c <HAL_RCC_GetPCLK1Freq>
 8007af2:	0003      	movs	r3, r0
    if (pclk != 0U)
 8007af4:	2000      	movs	r0, #0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d100      	bne.n	8007afc <UART_SetConfig+0x238>
 8007afa:	e744      	b.n	8007986 <UART_SetConfig+0xc2>
 8007afc:	e72b      	b.n	8007956 <UART_SetConfig+0x92>
        pclk = HAL_RCC_GetSysClockFreq();
 8007afe:	f7fe feeb 	bl	80068d8 <HAL_RCC_GetSysClockFreq>
 8007b02:	0003      	movs	r3, r0
        break;
 8007b04:	e7f6      	b.n	8007af4 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b06:	2302      	movs	r3, #2
 8007b08:	e713      	b.n	8007932 <UART_SetConfig+0x6e>
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	e711      	b.n	8007932 <UART_SetConfig+0x6e>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e70f      	b.n	8007932 <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b12:	2380      	movs	r3, #128	; 0x80
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	69e2      	ldr	r2, [r4, #28]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d0d5      	beq.n	8007ac8 <UART_SetConfig+0x204>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e70e      	b.n	800793e <UART_SetConfig+0x7a>
 8007b20:	cfff69f3 	.word	0xcfff69f3
 8007b24:	ffffcfff 	.word	0xffffcfff
 8007b28:	40008000 	.word	0x40008000
 8007b2c:	11fff4ff 	.word	0x11fff4ff
 8007b30:	40013800 	.word	0x40013800
 8007b34:	40004400 	.word	0x40004400
 8007b38:	00f42400 	.word	0x00f42400
 8007b3c:	0800d8e4 	.word	0x0800d8e4
 8007b40:	0000ffef 	.word	0x0000ffef
 8007b44:	40021000 	.word	0x40021000
 8007b48:	fffffd00 	.word	0xfffffd00
 8007b4c:	000ffcff 	.word	0x000ffcff
 8007b50:	0000fff0 	.word	0x0000fff0

08007b54 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b56:	07db      	lsls	r3, r3, #31
 8007b58:	d506      	bpl.n	8007b68 <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b5a:	6802      	ldr	r2, [r0, #0]
 8007b5c:	6853      	ldr	r3, [r2, #4]
 8007b5e:	492c      	ldr	r1, [pc, #176]	; (8007c10 <UART_AdvFeatureConfig+0xbc>)
 8007b60:	400b      	ands	r3, r1
 8007b62:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b6a:	079b      	lsls	r3, r3, #30
 8007b6c:	d506      	bpl.n	8007b7c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b6e:	6802      	ldr	r2, [r0, #0]
 8007b70:	6853      	ldr	r3, [r2, #4]
 8007b72:	4928      	ldr	r1, [pc, #160]	; (8007c14 <UART_AdvFeatureConfig+0xc0>)
 8007b74:	400b      	ands	r3, r1
 8007b76:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b7e:	075b      	lsls	r3, r3, #29
 8007b80:	d506      	bpl.n	8007b90 <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b82:	6802      	ldr	r2, [r0, #0]
 8007b84:	6853      	ldr	r3, [r2, #4]
 8007b86:	4924      	ldr	r1, [pc, #144]	; (8007c18 <UART_AdvFeatureConfig+0xc4>)
 8007b88:	400b      	ands	r3, r1
 8007b8a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b92:	071b      	lsls	r3, r3, #28
 8007b94:	d506      	bpl.n	8007ba4 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b96:	6802      	ldr	r2, [r0, #0]
 8007b98:	6853      	ldr	r3, [r2, #4]
 8007b9a:	4920      	ldr	r1, [pc, #128]	; (8007c1c <UART_AdvFeatureConfig+0xc8>)
 8007b9c:	400b      	ands	r3, r1
 8007b9e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ba4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ba6:	06db      	lsls	r3, r3, #27
 8007ba8:	d506      	bpl.n	8007bb8 <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007baa:	6802      	ldr	r2, [r0, #0]
 8007bac:	6893      	ldr	r3, [r2, #8]
 8007bae:	491c      	ldr	r1, [pc, #112]	; (8007c20 <UART_AdvFeatureConfig+0xcc>)
 8007bb0:	400b      	ands	r3, r1
 8007bb2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bb8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bba:	069b      	lsls	r3, r3, #26
 8007bbc:	d506      	bpl.n	8007bcc <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bbe:	6802      	ldr	r2, [r0, #0]
 8007bc0:	6893      	ldr	r3, [r2, #8]
 8007bc2:	4918      	ldr	r1, [pc, #96]	; (8007c24 <UART_AdvFeatureConfig+0xd0>)
 8007bc4:	400b      	ands	r3, r1
 8007bc6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bcc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bce:	065b      	lsls	r3, r3, #25
 8007bd0:	d50b      	bpl.n	8007bea <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bd2:	6802      	ldr	r2, [r0, #0]
 8007bd4:	6853      	ldr	r3, [r2, #4]
 8007bd6:	4914      	ldr	r1, [pc, #80]	; (8007c28 <UART_AdvFeatureConfig+0xd4>)
 8007bd8:	400b      	ands	r3, r1
 8007bda:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007bdc:	430b      	orrs	r3, r1
 8007bde:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007be0:	2380      	movs	r3, #128	; 0x80
 8007be2:	035b      	lsls	r3, r3, #13
 8007be4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d00a      	beq.n	8007c00 <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bec:	061b      	lsls	r3, r3, #24
 8007bee:	d506      	bpl.n	8007bfe <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bf0:	6802      	ldr	r2, [r0, #0]
 8007bf2:	6853      	ldr	r3, [r2, #4]
 8007bf4:	490d      	ldr	r1, [pc, #52]	; (8007c2c <UART_AdvFeatureConfig+0xd8>)
 8007bf6:	400b      	ands	r3, r1
 8007bf8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	6053      	str	r3, [r2, #4]
  }
}
 8007bfe:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c00:	6802      	ldr	r2, [r0, #0]
 8007c02:	6853      	ldr	r3, [r2, #4]
 8007c04:	490a      	ldr	r1, [pc, #40]	; (8007c30 <UART_AdvFeatureConfig+0xdc>)
 8007c06:	400b      	ands	r3, r1
 8007c08:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	6053      	str	r3, [r2, #4]
 8007c0e:	e7ec      	b.n	8007bea <UART_AdvFeatureConfig+0x96>
 8007c10:	fffdffff 	.word	0xfffdffff
 8007c14:	fffeffff 	.word	0xfffeffff
 8007c18:	fffbffff 	.word	0xfffbffff
 8007c1c:	ffff7fff 	.word	0xffff7fff
 8007c20:	ffffefff 	.word	0xffffefff
 8007c24:	ffffdfff 	.word	0xffffdfff
 8007c28:	ffefffff 	.word	0xffefffff
 8007c2c:	fff7ffff 	.word	0xfff7ffff
 8007c30:	ff9fffff 	.word	0xff9fffff

08007c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	46de      	mov	lr, fp
 8007c38:	4657      	mov	r7, sl
 8007c3a:	464e      	mov	r6, r9
 8007c3c:	4645      	mov	r5, r8
 8007c3e:	b5e0      	push	{r5, r6, r7, lr}
 8007c40:	4680      	mov	r8, r0
 8007c42:	000d      	movs	r5, r1
 8007c44:	0016      	movs	r6, r2
 8007c46:	4699      	mov	r9, r3
 8007c48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c4a:	2304      	movs	r3, #4
 8007c4c:	469a      	mov	sl, r3
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c4e:	2380      	movs	r3, #128	; 0x80
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	469b      	mov	fp, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c54:	4643      	mov	r3, r8
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69dc      	ldr	r4, [r3, #28]
 8007c5a:	402c      	ands	r4, r5
 8007c5c:	1b64      	subs	r4, r4, r5
 8007c5e:	4262      	negs	r2, r4
 8007c60:	4154      	adcs	r4, r2
 8007c62:	42b4      	cmp	r4, r6
 8007c64:	d148      	bne.n	8007cf8 <UART_WaitOnFlagUntilTimeout+0xc4>
    if (Timeout != HAL_MAX_DELAY)
 8007c66:	1c7a      	adds	r2, r7, #1
 8007c68:	d0f6      	beq.n	8007c58 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6a:	f7fd fbef 	bl	800544c <HAL_GetTick>
 8007c6e:	464b      	mov	r3, r9
 8007c70:	1ac0      	subs	r0, r0, r3
 8007c72:	42b8      	cmp	r0, r7
 8007c74:	d828      	bhi.n	8007cc8 <UART_WaitOnFlagUntilTimeout+0x94>
 8007c76:	2f00      	cmp	r7, #0
 8007c78:	d026      	beq.n	8007cc8 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c7a:	4643      	mov	r3, r8
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	4651      	mov	r1, sl
 8007c82:	4211      	tst	r1, r2
 8007c84:	d0e6      	beq.n	8007c54 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	4659      	mov	r1, fp
 8007c8a:	420a      	tst	r2, r1
 8007c8c:	d0e2      	beq.n	8007c54 <UART_WaitOnFlagUntilTimeout+0x20>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c8e:	2280      	movs	r2, #128	; 0x80
 8007c90:	0112      	lsls	r2, r2, #4
 8007c92:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c94:	4643      	mov	r3, r8
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	6813      	ldr	r3, [r2, #0]
 8007c9a:	491b      	ldr	r1, [pc, #108]	; (8007d08 <UART_WaitOnFlagUntilTimeout+0xd4>)
 8007c9c:	400b      	ands	r3, r1
 8007c9e:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca0:	4643      	mov	r3, r8
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	6893      	ldr	r3, [r2, #8]
 8007ca6:	31a3      	adds	r1, #163	; 0xa3
 8007ca8:	31ff      	adds	r1, #255	; 0xff
 8007caa:	438b      	bics	r3, r1
 8007cac:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007cae:	2320      	movs	r3, #32
 8007cb0:	2284      	movs	r2, #132	; 0x84
 8007cb2:	4641      	mov	r1, r8
 8007cb4:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007cb6:	3204      	adds	r2, #4
 8007cb8:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cba:	3204      	adds	r2, #4
 8007cbc:	508b      	str	r3, [r1, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cbe:	3360      	adds	r3, #96	; 0x60
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	54ca      	strb	r2, [r1, r3]

          return HAL_TIMEOUT;
 8007cc4:	2003      	movs	r0, #3
 8007cc6:	e018      	b.n	8007cfa <UART_WaitOnFlagUntilTimeout+0xc6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007cc8:	4643      	mov	r3, r8
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	6813      	ldr	r3, [r2, #0]
 8007cce:	490e      	ldr	r1, [pc, #56]	; (8007d08 <UART_WaitOnFlagUntilTimeout+0xd4>)
 8007cd0:	400b      	ands	r3, r1
 8007cd2:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd4:	4643      	mov	r3, r8
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	6893      	ldr	r3, [r2, #8]
 8007cda:	31a3      	adds	r1, #163	; 0xa3
 8007cdc:	31ff      	adds	r1, #255	; 0xff
 8007cde:	438b      	bics	r3, r1
 8007ce0:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007ce2:	2320      	movs	r3, #32
 8007ce4:	2284      	movs	r2, #132	; 0x84
 8007ce6:	4641      	mov	r1, r8
 8007ce8:	508b      	str	r3, [r1, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007cea:	3204      	adds	r2, #4
 8007cec:	508b      	str	r3, [r1, r2]
        __HAL_UNLOCK(huart);
 8007cee:	3360      	adds	r3, #96	; 0x60
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8007cf4:	2003      	movs	r0, #3
 8007cf6:	e000      	b.n	8007cfa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
      }
    }
  }
  return HAL_OK;
 8007cf8:	2000      	movs	r0, #0
}
 8007cfa:	bcf0      	pop	{r4, r5, r6, r7}
 8007cfc:	46bb      	mov	fp, r7
 8007cfe:	46b2      	mov	sl, r6
 8007d00:	46a9      	mov	r9, r5
 8007d02:	46a0      	mov	r8, r4
 8007d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	fffffe5f 	.word	0xfffffe5f

08007d0c <HAL_UART_Transmit>:
{
 8007d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0e:	46ce      	mov	lr, r9
 8007d10:	4647      	mov	r7, r8
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b083      	sub	sp, #12
 8007d16:	0004      	movs	r4, r0
 8007d18:	000d      	movs	r5, r1
 8007d1a:	0016      	movs	r6, r2
 8007d1c:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007d1e:	2384      	movs	r3, #132	; 0x84
 8007d20:	58c3      	ldr	r3, [r0, r3]
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d16a      	bne.n	8007dfc <HAL_UART_Transmit+0xf0>
    if ((pData == NULL) || (Size == 0U))
 8007d26:	2900      	cmp	r1, #0
 8007d28:	d100      	bne.n	8007d2c <HAL_UART_Transmit+0x20>
 8007d2a:	e06d      	b.n	8007e08 <HAL_UART_Transmit+0xfc>
 8007d2c:	2a00      	cmp	r2, #0
 8007d2e:	d100      	bne.n	8007d32 <HAL_UART_Transmit+0x26>
 8007d30:	e06c      	b.n	8007e0c <HAL_UART_Transmit+0x100>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d32:	2380      	movs	r3, #128	; 0x80
 8007d34:	015b      	lsls	r3, r3, #5
 8007d36:	6882      	ldr	r2, [r0, #8]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d024      	beq.n	8007d86 <HAL_UART_Transmit+0x7a>
    __HAL_LOCK(huart);
 8007d3c:	2380      	movs	r3, #128	; 0x80
 8007d3e:	5ce3      	ldrb	r3, [r4, r3]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d065      	beq.n	8007e10 <HAL_UART_Transmit+0x104>
 8007d44:	2380      	movs	r3, #128	; 0x80
 8007d46:	2201      	movs	r2, #1
 8007d48:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d4a:	330c      	adds	r3, #12
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d50:	3b08      	subs	r3, #8
 8007d52:	3221      	adds	r2, #33	; 0x21
 8007d54:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8007d56:	f7fd fb79 	bl	800544c <HAL_GetTick>
 8007d5a:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8007d5c:	2354      	movs	r3, #84	; 0x54
 8007d5e:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 8007d60:	3302      	adds	r3, #2
 8007d62:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d64:	2380      	movs	r3, #128	; 0x80
 8007d66:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4691      	mov	r9, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d6c:	68a2      	ldr	r2, [r4, #8]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d010      	beq.n	8007d94 <HAL_UART_Transmit+0x88>
    __HAL_UNLOCK(huart);
 8007d72:	2380      	movs	r3, #128	; 0x80
 8007d74:	2200      	movs	r2, #0
 8007d76:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8007d78:	3b2a      	subs	r3, #42	; 0x2a
 8007d7a:	5ae3      	ldrh	r3, [r4, r3]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d02f      	beq.n	8007de2 <HAL_UART_Transmit+0xd6>
      huart->TxXferCount--;
 8007d82:	2656      	movs	r6, #86	; 0x56
 8007d84:	e01d      	b.n	8007dc2 <HAL_UART_Transmit+0xb6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d86:	6903      	ldr	r3, [r0, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1d7      	bne.n	8007d3c <HAL_UART_Transmit+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d8c:	07cb      	lsls	r3, r1, #31
 8007d8e:	d5d5      	bpl.n	8007d3c <HAL_UART_Transmit+0x30>
        return  HAL_ERROR;
 8007d90:	2001      	movs	r0, #1
 8007d92:	e034      	b.n	8007dfe <HAL_UART_Transmit+0xf2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d94:	6923      	ldr	r3, [r4, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1eb      	bne.n	8007d72 <HAL_UART_Transmit+0x66>
      pdata16bits = (uint16_t *) pData;
 8007d9a:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8007d9c:	2500      	movs	r5, #0
 8007d9e:	e7e8      	b.n	8007d72 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007da0:	6822      	ldr	r2, [r4, #0]
 8007da2:	464b      	mov	r3, r9
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	05db      	lsls	r3, r3, #23
 8007da8:	0ddb      	lsrs	r3, r3, #23
 8007daa:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8007dac:	2302      	movs	r3, #2
 8007dae:	469c      	mov	ip, r3
 8007db0:	44e1      	add	r9, ip
      huart->TxXferCount--;
 8007db2:	5ba2      	ldrh	r2, [r4, r6]
 8007db4:	3a01      	subs	r2, #1
 8007db6:	b292      	uxth	r2, r2
 8007db8:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 8007dba:	5ba3      	ldrh	r3, [r4, r6]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00f      	beq.n	8007de2 <HAL_UART_Transmit+0xd6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dc2:	9700      	str	r7, [sp, #0]
 8007dc4:	4643      	mov	r3, r8
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2180      	movs	r1, #128	; 0x80
 8007dca:	0020      	movs	r0, r4
 8007dcc:	f7ff ff32 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d11f      	bne.n	8007e14 <HAL_UART_Transmit+0x108>
      if (pdata8bits == NULL)
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	d0e3      	beq.n	8007da0 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	782a      	ldrb	r2, [r5, #0]
 8007ddc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dde:	3501      	adds	r5, #1
 8007de0:	e7e7      	b.n	8007db2 <HAL_UART_Transmit+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007de2:	9700      	str	r7, [sp, #0]
 8007de4:	4643      	mov	r3, r8
 8007de6:	2200      	movs	r2, #0
 8007de8:	2140      	movs	r1, #64	; 0x40
 8007dea:	0020      	movs	r0, r4
 8007dec:	f7ff ff22 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d111      	bne.n	8007e18 <HAL_UART_Transmit+0x10c>
    huart->gState = HAL_UART_STATE_READY;
 8007df4:	2384      	movs	r3, #132	; 0x84
 8007df6:	2220      	movs	r2, #32
 8007df8:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8007dfa:	e000      	b.n	8007dfe <HAL_UART_Transmit+0xf2>
    return HAL_BUSY;
 8007dfc:	2002      	movs	r0, #2
}
 8007dfe:	b003      	add	sp, #12
 8007e00:	bcc0      	pop	{r6, r7}
 8007e02:	46b9      	mov	r9, r7
 8007e04:	46b0      	mov	r8, r6
 8007e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8007e08:	2001      	movs	r0, #1
 8007e0a:	e7f8      	b.n	8007dfe <HAL_UART_Transmit+0xf2>
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	e7f6      	b.n	8007dfe <HAL_UART_Transmit+0xf2>
    __HAL_LOCK(huart);
 8007e10:	2002      	movs	r0, #2
 8007e12:	e7f4      	b.n	8007dfe <HAL_UART_Transmit+0xf2>
        return HAL_TIMEOUT;
 8007e14:	2003      	movs	r0, #3
 8007e16:	e7f2      	b.n	8007dfe <HAL_UART_Transmit+0xf2>
      return HAL_TIMEOUT;
 8007e18:	2003      	movs	r0, #3
 8007e1a:	e7f0      	b.n	8007dfe <HAL_UART_Transmit+0xf2>

08007e1c <UART_CheckIdleState>:
{
 8007e1c:	b530      	push	{r4, r5, lr}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e22:	238c      	movs	r3, #140	; 0x8c
 8007e24:	2200      	movs	r2, #0
 8007e26:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8007e28:	f7fd fb10 	bl	800544c <HAL_GetTick>
 8007e2c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	071b      	lsls	r3, r3, #28
 8007e34:	d40f      	bmi.n	8007e56 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	075b      	lsls	r3, r3, #29
 8007e3c:	d418      	bmi.n	8007e70 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8007e3e:	2320      	movs	r3, #32
 8007e40:	2284      	movs	r2, #132	; 0x84
 8007e42:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007e44:	3204      	adds	r2, #4
 8007e46:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8007e4c:	3a08      	subs	r2, #8
 8007e4e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8007e50:	2000      	movs	r0, #0
}
 8007e52:	b003      	add	sp, #12
 8007e54:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e56:	2180      	movs	r1, #128	; 0x80
 8007e58:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <UART_CheckIdleState+0x70>)
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	0003      	movs	r3, r0
 8007e5e:	2200      	movs	r2, #0
 8007e60:	0389      	lsls	r1, r1, #14
 8007e62:	0020      	movs	r0, r4
 8007e64:	f7ff fee6 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d0e4      	beq.n	8007e36 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8007e6c:	2003      	movs	r0, #3
 8007e6e:	e7f0      	b.n	8007e52 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e70:	2180      	movs	r1, #128	; 0x80
 8007e72:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <UART_CheckIdleState+0x70>)
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	002b      	movs	r3, r5
 8007e78:	2200      	movs	r2, #0
 8007e7a:	03c9      	lsls	r1, r1, #15
 8007e7c:	0020      	movs	r0, r4
 8007e7e:	f7ff fed9 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d0db      	beq.n	8007e3e <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8007e86:	2003      	movs	r0, #3
 8007e88:	e7e3      	b.n	8007e52 <UART_CheckIdleState+0x36>
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	01ffffff 	.word	0x01ffffff

08007e90 <HAL_UART_Init>:
{
 8007e90:	b510      	push	{r4, lr}
 8007e92:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8007e94:	d030      	beq.n	8007ef8 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007e96:	2384      	movs	r3, #132	; 0x84
 8007e98:	58c3      	ldr	r3, [r0, r3]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d022      	beq.n	8007ee4 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8007e9e:	2384      	movs	r3, #132	; 0x84
 8007ea0:	2224      	movs	r2, #36	; 0x24
 8007ea2:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8007ea4:	6822      	ldr	r2, [r4, #0]
 8007ea6:	6813      	ldr	r3, [r2, #0]
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	438b      	bics	r3, r1
 8007eac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007eae:	0020      	movs	r0, r4
 8007eb0:	f7ff fd08 	bl	80078c4 <UART_SetConfig>
 8007eb4:	2801      	cmp	r0, #1
 8007eb6:	d014      	beq.n	8007ee2 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007eb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d118      	bne.n	8007ef0 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	6853      	ldr	r3, [r2, #4]
 8007ec2:	490e      	ldr	r1, [pc, #56]	; (8007efc <HAL_UART_Init+0x6c>)
 8007ec4:	400b      	ands	r3, r1
 8007ec6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	6893      	ldr	r3, [r2, #8]
 8007ecc:	212a      	movs	r1, #42	; 0x2a
 8007ece:	438b      	bics	r3, r1
 8007ed0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007ed2:	6822      	ldr	r2, [r4, #0]
 8007ed4:	6813      	ldr	r3, [r2, #0]
 8007ed6:	3929      	subs	r1, #41	; 0x29
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007edc:	0020      	movs	r0, r4
 8007ede:	f7ff ff9d 	bl	8007e1c <UART_CheckIdleState>
}
 8007ee2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007ee4:	3380      	adds	r3, #128	; 0x80
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8007eea:	f7fc fe85 	bl	8004bf8 <HAL_UART_MspInit>
 8007eee:	e7d6      	b.n	8007e9e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8007ef0:	0020      	movs	r0, r4
 8007ef2:	f7ff fe2f 	bl	8007b54 <UART_AdvFeatureConfig>
 8007ef6:	e7e2      	b.n	8007ebe <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8007ef8:	2001      	movs	r0, #1
 8007efa:	e7f2      	b.n	8007ee2 <HAL_UART_Init+0x52>
 8007efc:	ffffb7ff 	.word	0xffffb7ff

08007f00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	0004      	movs	r4, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007f06:	aa02      	add	r2, sp, #8
 8007f08:	4b14      	ldr	r3, [pc, #80]	; (8007f5c <UARTEx_SetNbDataToProcess+0x5c>)
 8007f0a:	cb03      	ldmia	r3!, {r0, r1}
 8007f0c:	c203      	stmia	r2!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007f0e:	466a      	mov	r2, sp
 8007f10:	4b13      	ldr	r3, [pc, #76]	; (8007f60 <UARTEx_SetNbDataToProcess+0x60>)
 8007f12:	cb03      	ldmia	r3!, {r0, r1}
 8007f14:	c203      	stmia	r2!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d106      	bne.n	8007f2a <UARTEx_SetNbDataToProcess+0x2a>
  {
    huart->NbTxDataToProcess = 1U;
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	226a      	movs	r2, #106	; 0x6a
 8007f20:	52a3      	strh	r3, [r4, r2]
    huart->NbRxDataToProcess = 1U;
 8007f22:	3a02      	subs	r2, #2
 8007f24:	52a3      	strh	r3, [r4, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f26:	b004      	add	sp, #16
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f32:	ae02      	add	r6, sp, #8
 8007f34:	5cf0      	ldrb	r0, [r6, r3]
 8007f36:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f38:	466a      	mov	r2, sp
 8007f3a:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f3c:	f7f8 f988 	bl	8000250 <__divsi3>
 8007f40:	236a      	movs	r3, #106	; 0x6a
 8007f42:	52e0      	strh	r0, [r4, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f44:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f46:	0f5b      	lsrs	r3, r3, #29
 8007f48:	5cf0      	ldrb	r0, [r6, r3]
 8007f4a:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f4c:	466a      	mov	r2, sp
 8007f4e:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f50:	f7f8 f97e 	bl	8000250 <__divsi3>
 8007f54:	2368      	movs	r3, #104	; 0x68
 8007f56:	52e0      	strh	r0, [r4, r3]
}
 8007f58:	e7e5      	b.n	8007f26 <UARTEx_SetNbDataToProcess+0x26>
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	0800d2e0 	.word	0x0800d2e0
 8007f60:	0800d8fc 	.word	0x0800d8fc

08007f64 <HAL_UARTEx_DisableFifoMode>:
{
 8007f64:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8007f66:	2380      	movs	r3, #128	; 0x80
 8007f68:	5cc3      	ldrb	r3, [r0, r3]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d015      	beq.n	8007f9a <HAL_UARTEx_DisableFifoMode+0x36>
 8007f6e:	2480      	movs	r4, #128	; 0x80
 8007f70:	2601      	movs	r6, #1
 8007f72:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8007f74:	2584      	movs	r5, #132	; 0x84
 8007f76:	2324      	movs	r3, #36	; 0x24
 8007f78:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f7a:	6802      	ldr	r2, [r0, #0]
 8007f7c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007f7e:	6811      	ldr	r1, [r2, #0]
 8007f80:	43b1      	bics	r1, r6
 8007f82:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f84:	4a06      	ldr	r2, [pc, #24]	; (8007fa0 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8007f86:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f88:	2200      	movs	r2, #0
 8007f8a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f8c:	6801      	ldr	r1, [r0, #0]
 8007f8e:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007f90:	2320      	movs	r3, #32
 8007f92:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8007f94:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8007f96:	2000      	movs	r0, #0
}
 8007f98:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8007f9a:	2002      	movs	r0, #2
 8007f9c:	e7fc      	b.n	8007f98 <HAL_UARTEx_DisableFifoMode+0x34>
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	dfffffff 	.word	0xdfffffff

08007fa4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	0004      	movs	r4, r0
 8007fa8:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8007faa:	2280      	movs	r2, #128	; 0x80
 8007fac:	5c82      	ldrb	r2, [r0, r2]
 8007fae:	2a01      	cmp	r2, #1
 8007fb0:	d01b      	beq.n	8007fea <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007fb2:	2580      	movs	r5, #128	; 0x80
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8007fb8:	2684      	movs	r6, #132	; 0x84
 8007fba:	2224      	movs	r2, #36	; 0x24
 8007fbc:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fbe:	6822      	ldr	r2, [r4, #0]
 8007fc0:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007fc2:	6811      	ldr	r1, [r2, #0]
 8007fc4:	4381      	bics	r1, r0
 8007fc6:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fc8:	6822      	ldr	r2, [r4, #0]
 8007fca:	6891      	ldr	r1, [r2, #8]
 8007fcc:	00c9      	lsls	r1, r1, #3
 8007fce:	08c9      	lsrs	r1, r1, #3
 8007fd0:	4319      	orrs	r1, r3
 8007fd2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007fd4:	0020      	movs	r0, r4
 8007fd6:	f7ff ff93 	bl	8007f00 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007fde:	2320      	movs	r3, #32
 8007fe0:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8007fe6:	2000      	movs	r0, #0
}
 8007fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8007fea:	2002      	movs	r0, #2
 8007fec:	e7fc      	b.n	8007fe8 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08007ff0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	0004      	movs	r4, r0
 8007ff4:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8007ff6:	2280      	movs	r2, #128	; 0x80
 8007ff8:	5c82      	ldrb	r2, [r0, r2]
 8007ffa:	2a01      	cmp	r2, #1
 8007ffc:	d01b      	beq.n	8008036 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007ffe:	2580      	movs	r5, #128	; 0x80
 8008000:	2001      	movs	r0, #1
 8008002:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8008004:	2684      	movs	r6, #132	; 0x84
 8008006:	2224      	movs	r2, #36	; 0x24
 8008008:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800800e:	6811      	ldr	r1, [r2, #0]
 8008010:	4381      	bics	r1, r0
 8008012:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008014:	6822      	ldr	r2, [r4, #0]
 8008016:	6891      	ldr	r1, [r2, #8]
 8008018:	4808      	ldr	r0, [pc, #32]	; (800803c <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 800801a:	4001      	ands	r1, r0
 800801c:	4319      	orrs	r1, r3
 800801e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008020:	0020      	movs	r0, r4
 8008022:	f7ff ff6d 	bl	8007f00 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800802a:	2320      	movs	r3, #32
 800802c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800802e:	2300      	movs	r3, #0
 8008030:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8008032:	2000      	movs	r0, #0
}
 8008034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8008036:	2002      	movs	r0, #2
 8008038:	e7fc      	b.n	8008034 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	f1ffffff 	.word	0xf1ffffff

08008040 <arm_max_f32>:
 8008040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008042:	46de      	mov	lr, fp
 8008044:	464e      	mov	r6, r9
 8008046:	4657      	mov	r7, sl
 8008048:	4645      	mov	r5, r8
 800804a:	469b      	mov	fp, r3
 800804c:	0003      	movs	r3, r0
 800804e:	b5e0      	push	{r5, r6, r7, lr}
 8008050:	cb10      	ldmia	r3!, {r4}
 8008052:	b085      	sub	sp, #20
 8008054:	4699      	mov	r9, r3
 8008056:	000b      	movs	r3, r1
 8008058:	3b01      	subs	r3, #1
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	089b      	lsrs	r3, r3, #2
 800805e:	9103      	str	r1, [sp, #12]
 8008060:	9201      	str	r2, [sp, #4]
 8008062:	9302      	str	r3, [sp, #8]
 8008064:	d06c      	beq.n	8008140 <arm_max_f32+0x100>
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	469a      	mov	sl, r3
 800806a:	2300      	movs	r3, #0
 800806c:	464d      	mov	r5, r9
 800806e:	2600      	movs	r6, #0
 8008070:	4698      	mov	r8, r3
 8008072:	682f      	ldr	r7, [r5, #0]
 8008074:	1c20      	adds	r0, r4, #0
 8008076:	1c39      	adds	r1, r7, #0
 8008078:	f7f8 fa26 	bl	80004c8 <__aeabi_fcmplt>
 800807c:	2800      	cmp	r0, #0
 800807e:	d002      	beq.n	8008086 <arm_max_f32+0x46>
 8008080:	1c73      	adds	r3, r6, #1
 8008082:	4698      	mov	r8, r3
 8008084:	1c3c      	adds	r4, r7, #0
 8008086:	686f      	ldr	r7, [r5, #4]
 8008088:	1c20      	adds	r0, r4, #0
 800808a:	1c39      	adds	r1, r7, #0
 800808c:	f7f8 fa1c 	bl	80004c8 <__aeabi_fcmplt>
 8008090:	2800      	cmp	r0, #0
 8008092:	d002      	beq.n	800809a <arm_max_f32+0x5a>
 8008094:	1cb3      	adds	r3, r6, #2
 8008096:	4698      	mov	r8, r3
 8008098:	1c3c      	adds	r4, r7, #0
 800809a:	68af      	ldr	r7, [r5, #8]
 800809c:	1c20      	adds	r0, r4, #0
 800809e:	1c39      	adds	r1, r7, #0
 80080a0:	f7f8 fa12 	bl	80004c8 <__aeabi_fcmplt>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d002      	beq.n	80080ae <arm_max_f32+0x6e>
 80080a8:	1cf3      	adds	r3, r6, #3
 80080aa:	4698      	mov	r8, r3
 80080ac:	1c3c      	adds	r4, r7, #0
 80080ae:	68ef      	ldr	r7, [r5, #12]
 80080b0:	1c20      	adds	r0, r4, #0
 80080b2:	1c39      	adds	r1, r7, #0
 80080b4:	3604      	adds	r6, #4
 80080b6:	f7f8 fa07 	bl	80004c8 <__aeabi_fcmplt>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d001      	beq.n	80080c2 <arm_max_f32+0x82>
 80080be:	46b0      	mov	r8, r6
 80080c0:	1c3c      	adds	r4, r7, #0
 80080c2:	3510      	adds	r5, #16
 80080c4:	45b2      	cmp	sl, r6
 80080c6:	d1d4      	bne.n	8008072 <arm_max_f32+0x32>
 80080c8:	9b02      	ldr	r3, [sp, #8]
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	4499      	add	r9, r3
 80080ce:	2503      	movs	r5, #3
 80080d0:	9b00      	ldr	r3, [sp, #0]
 80080d2:	401d      	ands	r5, r3
 80080d4:	d023      	beq.n	800811e <arm_max_f32+0xde>
 80080d6:	464b      	mov	r3, r9
 80080d8:	681e      	ldr	r6, [r3, #0]
 80080da:	1c21      	adds	r1, r4, #0
 80080dc:	1c30      	adds	r0, r6, #0
 80080de:	f7f8 fa07 	bl	80004f0 <__aeabi_fcmpgt>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d127      	bne.n	8008136 <arm_max_f32+0xf6>
 80080e6:	3d01      	subs	r5, #1
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	d018      	beq.n	800811e <arm_max_f32+0xde>
 80080ec:	464b      	mov	r3, r9
 80080ee:	685e      	ldr	r6, [r3, #4]
 80080f0:	1c20      	adds	r0, r4, #0
 80080f2:	1c31      	adds	r1, r6, #0
 80080f4:	f7f8 f9e8 	bl	80004c8 <__aeabi_fcmplt>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d003      	beq.n	8008104 <arm_max_f32+0xc4>
 80080fc:	9b03      	ldr	r3, [sp, #12]
 80080fe:	1c34      	adds	r4, r6, #0
 8008100:	1b5b      	subs	r3, r3, r5
 8008102:	4698      	mov	r8, r3
 8008104:	2d01      	cmp	r5, #1
 8008106:	d00a      	beq.n	800811e <arm_max_f32+0xde>
 8008108:	464b      	mov	r3, r9
 800810a:	689d      	ldr	r5, [r3, #8]
 800810c:	1c21      	adds	r1, r4, #0
 800810e:	1c28      	adds	r0, r5, #0
 8008110:	f7f8 f9ee 	bl	80004f0 <__aeabi_fcmpgt>
 8008114:	2800      	cmp	r0, #0
 8008116:	d002      	beq.n	800811e <arm_max_f32+0xde>
 8008118:	9b00      	ldr	r3, [sp, #0]
 800811a:	1c2c      	adds	r4, r5, #0
 800811c:	4698      	mov	r8, r3
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	4642      	mov	r2, r8
 8008122:	601c      	str	r4, [r3, #0]
 8008124:	465b      	mov	r3, fp
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	b005      	add	sp, #20
 800812a:	bc3c      	pop	{r2, r3, r4, r5}
 800812c:	4690      	mov	r8, r2
 800812e:	4699      	mov	r9, r3
 8008130:	46a2      	mov	sl, r4
 8008132:	46ab      	mov	fp, r5
 8008134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	1c34      	adds	r4, r6, #0
 800813a:	1b5b      	subs	r3, r3, r5
 800813c:	4698      	mov	r8, r3
 800813e:	e7d2      	b.n	80080e6 <arm_max_f32+0xa6>
 8008140:	2300      	movs	r3, #0
 8008142:	4698      	mov	r8, r3
 8008144:	e7c3      	b.n	80080ce <arm_max_f32+0x8e>
 8008146:	46c0      	nop			; (mov r8, r8)

08008148 <arm_cfft_radix8by2_f32>:
 8008148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814a:	464e      	mov	r6, r9
 800814c:	46de      	mov	lr, fp
 800814e:	4657      	mov	r7, sl
 8008150:	4645      	mov	r5, r8
 8008152:	b5e0      	push	{r5, r6, r7, lr}
 8008154:	8803      	ldrh	r3, [r0, #0]
 8008156:	468c      	mov	ip, r1
 8008158:	009a      	lsls	r2, r3, #2
 800815a:	0016      	movs	r6, r2
 800815c:	b093      	sub	sp, #76	; 0x4c
 800815e:	4466      	add	r6, ip
 8008160:	0004      	movs	r4, r0
 8008162:	900e      	str	r0, [sp, #56]	; 0x38
 8008164:	46b4      	mov	ip, r6
 8008166:	0008      	movs	r0, r1
 8008168:	9111      	str	r1, [sp, #68]	; 0x44
 800816a:	0859      	lsrs	r1, r3, #1
 800816c:	9110      	str	r1, [sp, #64]	; 0x40
 800816e:	0089      	lsls	r1, r1, #2
 8008170:	6862      	ldr	r2, [r4, #4]
 8008172:	960f      	str	r6, [sp, #60]	; 0x3c
 8008174:	0004      	movs	r4, r0
 8008176:	08db      	lsrs	r3, r3, #3
 8008178:	1840      	adds	r0, r0, r1
 800817a:	4461      	add	r1, ip
 800817c:	2b00      	cmp	r3, #0
 800817e:	d100      	bne.n	8008182 <arm_cfft_radix8by2_f32+0x3a>
 8008180:	e112      	b.n	80083a8 <arm_cfft_radix8by2_f32+0x260>
 8008182:	46a2      	mov	sl, r4
 8008184:	011b      	lsls	r3, r3, #4
 8008186:	4453      	add	r3, sl
 8008188:	4680      	mov	r8, r0
 800818a:	4691      	mov	r9, r2
 800818c:	468b      	mov	fp, r1
 800818e:	46b2      	mov	sl, r6
 8008190:	930d      	str	r3, [sp, #52]	; 0x34
 8008192:	6862      	ldr	r2, [r4, #4]
 8008194:	4655      	mov	r5, sl
 8008196:	9200      	str	r2, [sp, #0]
 8008198:	4652      	mov	r2, sl
 800819a:	68e1      	ldr	r1, [r4, #12]
 800819c:	686d      	ldr	r5, [r5, #4]
 800819e:	9101      	str	r1, [sp, #4]
 80081a0:	4641      	mov	r1, r8
 80081a2:	9502      	str	r5, [sp, #8]
 80081a4:	68d5      	ldr	r5, [r2, #12]
 80081a6:	4642      	mov	r2, r8
 80081a8:	6849      	ldr	r1, [r1, #4]
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	910a      	str	r1, [sp, #40]	; 0x28
 80081ae:	4641      	mov	r1, r8
 80081b0:	9203      	str	r2, [sp, #12]
 80081b2:	4642      	mov	r2, r8
 80081b4:	68c9      	ldr	r1, [r1, #12]
 80081b6:	6892      	ldr	r2, [r2, #8]
 80081b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80081ba:	4659      	mov	r1, fp
 80081bc:	9204      	str	r2, [sp, #16]
 80081be:	465a      	mov	r2, fp
 80081c0:	6849      	ldr	r1, [r1, #4]
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	4650      	mov	r0, sl
 80081c6:	9106      	str	r1, [sp, #24]
 80081c8:	4659      	mov	r1, fp
 80081ca:	9205      	str	r2, [sp, #20]
 80081cc:	465a      	mov	r2, fp
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	6800      	ldr	r0, [r0, #0]
 80081d2:	68c9      	ldr	r1, [r1, #12]
 80081d4:	6892      	ldr	r2, [r2, #8]
 80081d6:	910c      	str	r1, [sp, #48]	; 0x30
 80081d8:	9009      	str	r0, [sp, #36]	; 0x24
 80081da:	1c01      	adds	r1, r0, #0
 80081dc:	1c18      	adds	r0, r3, #0
 80081de:	9207      	str	r2, [sp, #28]
 80081e0:	9308      	str	r3, [sp, #32]
 80081e2:	4657      	mov	r7, sl
 80081e4:	f7f8 faa2 	bl	800072c <__aeabi_fadd>
 80081e8:	68bf      	ldr	r7, [r7, #8]
 80081ea:	9902      	ldr	r1, [sp, #8]
 80081ec:	6020      	str	r0, [r4, #0]
 80081ee:	9800      	ldr	r0, [sp, #0]
 80081f0:	f7f8 fa9c 	bl	800072c <__aeabi_fadd>
 80081f4:	68a6      	ldr	r6, [r4, #8]
 80081f6:	6060      	str	r0, [r4, #4]
 80081f8:	1c39      	adds	r1, r7, #0
 80081fa:	1c30      	adds	r0, r6, #0
 80081fc:	f7f8 fa96 	bl	800072c <__aeabi_fadd>
 8008200:	1c29      	adds	r1, r5, #0
 8008202:	60a0      	str	r0, [r4, #8]
 8008204:	9801      	ldr	r0, [sp, #4]
 8008206:	f7f8 fa91 	bl	800072c <__aeabi_fadd>
 800820a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800820c:	60e0      	str	r0, [r4, #12]
 800820e:	9808      	ldr	r0, [sp, #32]
 8008210:	f7f8 ff0c 	bl	800102c <__aeabi_fsub>
 8008214:	9902      	ldr	r1, [sp, #8]
 8008216:	9008      	str	r0, [sp, #32]
 8008218:	9800      	ldr	r0, [sp, #0]
 800821a:	f7f8 ff07 	bl	800102c <__aeabi_fsub>
 800821e:	1c39      	adds	r1, r7, #0
 8008220:	9000      	str	r0, [sp, #0]
 8008222:	1c30      	adds	r0, r6, #0
 8008224:	f7f8 ff02 	bl	800102c <__aeabi_fsub>
 8008228:	1c29      	adds	r1, r5, #0
 800822a:	9002      	str	r0, [sp, #8]
 800822c:	9801      	ldr	r0, [sp, #4]
 800822e:	f7f8 fefd 	bl	800102c <__aeabi_fsub>
 8008232:	9905      	ldr	r1, [sp, #20]
 8008234:	9001      	str	r0, [sp, #4]
 8008236:	9803      	ldr	r0, [sp, #12]
 8008238:	f7f8 fa78 	bl	800072c <__aeabi_fadd>
 800823c:	4643      	mov	r3, r8
 800823e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008240:	9906      	ldr	r1, [sp, #24]
 8008242:	6018      	str	r0, [r3, #0]
 8008244:	1c38      	adds	r0, r7, #0
 8008246:	f7f8 fa71 	bl	800072c <__aeabi_fadd>
 800824a:	4643      	mov	r3, r8
 800824c:	9907      	ldr	r1, [sp, #28]
 800824e:	6058      	str	r0, [r3, #4]
 8008250:	9804      	ldr	r0, [sp, #16]
 8008252:	f7f8 fa6b 	bl	800072c <__aeabi_fadd>
 8008256:	4643      	mov	r3, r8
 8008258:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800825a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800825c:	6098      	str	r0, [r3, #8]
 800825e:	1c31      	adds	r1, r6, #0
 8008260:	1c28      	adds	r0, r5, #0
 8008262:	f7f8 fa63 	bl	800072c <__aeabi_fadd>
 8008266:	4643      	mov	r3, r8
 8008268:	9903      	ldr	r1, [sp, #12]
 800826a:	60d8      	str	r0, [r3, #12]
 800826c:	9805      	ldr	r0, [sp, #20]
 800826e:	f7f8 fedd 	bl	800102c <__aeabi_fsub>
 8008272:	1c39      	adds	r1, r7, #0
 8008274:	9003      	str	r0, [sp, #12]
 8008276:	9806      	ldr	r0, [sp, #24]
 8008278:	f7f8 fed8 	bl	800102c <__aeabi_fsub>
 800827c:	9904      	ldr	r1, [sp, #16]
 800827e:	1c07      	adds	r7, r0, #0
 8008280:	9807      	ldr	r0, [sp, #28]
 8008282:	f7f8 fed3 	bl	800102c <__aeabi_fsub>
 8008286:	1c29      	adds	r1, r5, #0
 8008288:	9004      	str	r0, [sp, #16]
 800828a:	1c30      	adds	r0, r6, #0
 800828c:	f7f8 fece 	bl	800102c <__aeabi_fsub>
 8008290:	464b      	mov	r3, r9
 8008292:	681d      	ldr	r5, [r3, #0]
 8008294:	9005      	str	r0, [sp, #20]
 8008296:	1c29      	adds	r1, r5, #0
 8008298:	9808      	ldr	r0, [sp, #32]
 800829a:	685e      	ldr	r6, [r3, #4]
 800829c:	f7f8 fdac 	bl	8000df8 <__aeabi_fmul>
 80082a0:	1c31      	adds	r1, r6, #0
 80082a2:	9006      	str	r0, [sp, #24]
 80082a4:	9800      	ldr	r0, [sp, #0]
 80082a6:	f7f8 fda7 	bl	8000df8 <__aeabi_fmul>
 80082aa:	1c01      	adds	r1, r0, #0
 80082ac:	9806      	ldr	r0, [sp, #24]
 80082ae:	f7f8 fa3d 	bl	800072c <__aeabi_fadd>
 80082b2:	4653      	mov	r3, sl
 80082b4:	1c29      	adds	r1, r5, #0
 80082b6:	6018      	str	r0, [r3, #0]
 80082b8:	9800      	ldr	r0, [sp, #0]
 80082ba:	f7f8 fd9d 	bl	8000df8 <__aeabi_fmul>
 80082be:	1c31      	adds	r1, r6, #0
 80082c0:	9000      	str	r0, [sp, #0]
 80082c2:	9808      	ldr	r0, [sp, #32]
 80082c4:	f7f8 fd98 	bl	8000df8 <__aeabi_fmul>
 80082c8:	1c01      	adds	r1, r0, #0
 80082ca:	9800      	ldr	r0, [sp, #0]
 80082cc:	f7f8 feae 	bl	800102c <__aeabi_fsub>
 80082d0:	4653      	mov	r3, sl
 80082d2:	1c31      	adds	r1, r6, #0
 80082d4:	6058      	str	r0, [r3, #4]
 80082d6:	9803      	ldr	r0, [sp, #12]
 80082d8:	f7f8 fd8e 	bl	8000df8 <__aeabi_fmul>
 80082dc:	1c29      	adds	r1, r5, #0
 80082de:	9000      	str	r0, [sp, #0]
 80082e0:	1c38      	adds	r0, r7, #0
 80082e2:	f7f8 fd89 	bl	8000df8 <__aeabi_fmul>
 80082e6:	1c01      	adds	r1, r0, #0
 80082e8:	9800      	ldr	r0, [sp, #0]
 80082ea:	f7f8 fe9f 	bl	800102c <__aeabi_fsub>
 80082ee:	465b      	mov	r3, fp
 80082f0:	1c31      	adds	r1, r6, #0
 80082f2:	6018      	str	r0, [r3, #0]
 80082f4:	1c38      	adds	r0, r7, #0
 80082f6:	f7f8 fd7f 	bl	8000df8 <__aeabi_fmul>
 80082fa:	1c29      	adds	r1, r5, #0
 80082fc:	1c06      	adds	r6, r0, #0
 80082fe:	9803      	ldr	r0, [sp, #12]
 8008300:	f7f8 fd7a 	bl	8000df8 <__aeabi_fmul>
 8008304:	1c01      	adds	r1, r0, #0
 8008306:	1c30      	adds	r0, r6, #0
 8008308:	f7f8 fa10 	bl	800072c <__aeabi_fadd>
 800830c:	465b      	mov	r3, fp
 800830e:	6058      	str	r0, [r3, #4]
 8008310:	464b      	mov	r3, r9
 8008312:	689d      	ldr	r5, [r3, #8]
 8008314:	9802      	ldr	r0, [sp, #8]
 8008316:	1c29      	adds	r1, r5, #0
 8008318:	68de      	ldr	r6, [r3, #12]
 800831a:	f7f8 fd6d 	bl	8000df8 <__aeabi_fmul>
 800831e:	1c31      	adds	r1, r6, #0
 8008320:	1c07      	adds	r7, r0, #0
 8008322:	9801      	ldr	r0, [sp, #4]
 8008324:	f7f8 fd68 	bl	8000df8 <__aeabi_fmul>
 8008328:	1c01      	adds	r1, r0, #0
 800832a:	1c38      	adds	r0, r7, #0
 800832c:	f7f8 f9fe 	bl	800072c <__aeabi_fadd>
 8008330:	4653      	mov	r3, sl
 8008332:	1c29      	adds	r1, r5, #0
 8008334:	6098      	str	r0, [r3, #8]
 8008336:	9801      	ldr	r0, [sp, #4]
 8008338:	f7f8 fd5e 	bl	8000df8 <__aeabi_fmul>
 800833c:	1c31      	adds	r1, r6, #0
 800833e:	1c07      	adds	r7, r0, #0
 8008340:	9802      	ldr	r0, [sp, #8]
 8008342:	f7f8 fd59 	bl	8000df8 <__aeabi_fmul>
 8008346:	1c01      	adds	r1, r0, #0
 8008348:	1c38      	adds	r0, r7, #0
 800834a:	f7f8 fe6f 	bl	800102c <__aeabi_fsub>
 800834e:	4653      	mov	r3, sl
 8008350:	1c31      	adds	r1, r6, #0
 8008352:	60d8      	str	r0, [r3, #12]
 8008354:	9804      	ldr	r0, [sp, #16]
 8008356:	f7f8 fd4f 	bl	8000df8 <__aeabi_fmul>
 800835a:	1c29      	adds	r1, r5, #0
 800835c:	1c07      	adds	r7, r0, #0
 800835e:	9805      	ldr	r0, [sp, #20]
 8008360:	f7f8 fd4a 	bl	8000df8 <__aeabi_fmul>
 8008364:	1c01      	adds	r1, r0, #0
 8008366:	1c38      	adds	r0, r7, #0
 8008368:	f7f8 fe60 	bl	800102c <__aeabi_fsub>
 800836c:	465b      	mov	r3, fp
 800836e:	1c31      	adds	r1, r6, #0
 8008370:	6098      	str	r0, [r3, #8]
 8008372:	9805      	ldr	r0, [sp, #20]
 8008374:	f7f8 fd40 	bl	8000df8 <__aeabi_fmul>
 8008378:	1c29      	adds	r1, r5, #0
 800837a:	1c06      	adds	r6, r0, #0
 800837c:	9804      	ldr	r0, [sp, #16]
 800837e:	f7f8 fd3b 	bl	8000df8 <__aeabi_fmul>
 8008382:	1c01      	adds	r1, r0, #0
 8008384:	1c30      	adds	r0, r6, #0
 8008386:	f7f8 f9d1 	bl	800072c <__aeabi_fadd>
 800838a:	465b      	mov	r3, fp
 800838c:	60d8      	str	r0, [r3, #12]
 800838e:	2310      	movs	r3, #16
 8008390:	469c      	mov	ip, r3
 8008392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008394:	3410      	adds	r4, #16
 8008396:	44e0      	add	r8, ip
 8008398:	44e3      	add	fp, ip
 800839a:	44e2      	add	sl, ip
 800839c:	44e1      	add	r9, ip
 800839e:	429c      	cmp	r4, r3
 80083a0:	d000      	beq.n	80083a4 <arm_cfft_radix8by2_f32+0x25c>
 80083a2:	e6f6      	b.n	8008192 <arm_cfft_radix8by2_f32+0x4a>
 80083a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	466b      	mov	r3, sp
 80083aa:	2140      	movs	r1, #64	; 0x40
 80083ac:	185b      	adds	r3, r3, r1
 80083ae:	881c      	ldrh	r4, [r3, #0]
 80083b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80083b2:	0021      	movs	r1, r4
 80083b4:	2302      	movs	r3, #2
 80083b6:	f000 fd0d 	bl	8008dd4 <arm_radix8_butterfly_f32>
 80083ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083bc:	0021      	movs	r1, r4
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80083c2:	2302      	movs	r3, #2
 80083c4:	f000 fd06 	bl	8008dd4 <arm_radix8_butterfly_f32>
 80083c8:	b013      	add	sp, #76	; 0x4c
 80083ca:	bc3c      	pop	{r2, r3, r4, r5}
 80083cc:	4690      	mov	r8, r2
 80083ce:	4699      	mov	r9, r3
 80083d0:	46a2      	mov	sl, r4
 80083d2:	46ab      	mov	fp, r5
 80083d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d6:	46c0      	nop			; (mov r8, r8)

080083d8 <arm_cfft_radix8by4_f32>:
 80083d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083da:	46de      	mov	lr, fp
 80083dc:	4657      	mov	r7, sl
 80083de:	464e      	mov	r6, r9
 80083e0:	4645      	mov	r5, r8
 80083e2:	b5e0      	push	{r5, r6, r7, lr}
 80083e4:	8803      	ldrh	r3, [r0, #0]
 80083e6:	b0a3      	sub	sp, #140	; 0x8c
 80083e8:	085b      	lsrs	r3, r3, #1
 80083ea:	009a      	lsls	r2, r3, #2
 80083ec:	4690      	mov	r8, r2
 80083ee:	000a      	movs	r2, r1
 80083f0:	4442      	add	r2, r8
 80083f2:	0005      	movs	r5, r0
 80083f4:	9020      	str	r0, [sp, #128]	; 0x80
 80083f6:	0010      	movs	r0, r2
 80083f8:	000f      	movs	r7, r1
 80083fa:	4440      	add	r0, r8
 80083fc:	4692      	mov	sl, r2
 80083fe:	0002      	movs	r2, r0
 8008400:	683c      	ldr	r4, [r7, #0]
 8008402:	6869      	ldr	r1, [r5, #4]
 8008404:	6805      	ldr	r5, [r0, #0]
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	4442      	add	r2, r8
 800840a:	0006      	movs	r6, r0
 800840c:	9117      	str	r1, [sp, #92]	; 0x5c
 800840e:	1c20      	adds	r0, r4, #0
 8008410:	1c29      	adds	r1, r5, #0
 8008412:	931f      	str	r3, [sp, #124]	; 0x7c
 8008414:	4691      	mov	r9, r2
 8008416:	f7f8 f989 	bl	800072c <__aeabi_fadd>
 800841a:	1c29      	adds	r1, r5, #0
 800841c:	9001      	str	r0, [sp, #4]
 800841e:	1c20      	adds	r0, r4, #0
 8008420:	f7f8 fe04 	bl	800102c <__aeabi_fsub>
 8008424:	687c      	ldr	r4, [r7, #4]
 8008426:	6875      	ldr	r5, [r6, #4]
 8008428:	9002      	str	r0, [sp, #8]
 800842a:	1c29      	adds	r1, r5, #0
 800842c:	1c20      	adds	r0, r4, #0
 800842e:	9704      	str	r7, [sp, #16]
 8008430:	9600      	str	r6, [sp, #0]
 8008432:	f7f8 f97b 	bl	800072c <__aeabi_fadd>
 8008436:	9003      	str	r0, [sp, #12]
 8008438:	1c20      	adds	r0, r4, #0
 800843a:	4654      	mov	r4, sl
 800843c:	1c29      	adds	r1, r5, #0
 800843e:	f7f8 fdf5 	bl	800102c <__aeabi_fsub>
 8008442:	6867      	ldr	r7, [r4, #4]
 8008444:	464c      	mov	r4, r9
 8008446:	6866      	ldr	r6, [r4, #4]
 8008448:	4654      	mov	r4, sl
 800844a:	6825      	ldr	r5, [r4, #0]
 800844c:	464c      	mov	r4, r9
 800844e:	6824      	ldr	r4, [r4, #0]
 8008450:	4683      	mov	fp, r0
 8008452:	9901      	ldr	r1, [sp, #4]
 8008454:	1c28      	adds	r0, r5, #0
 8008456:	f7f8 f969 	bl	800072c <__aeabi_fadd>
 800845a:	1c21      	adds	r1, r4, #0
 800845c:	f7f8 f966 	bl	800072c <__aeabi_fadd>
 8008460:	4651      	mov	r1, sl
 8008462:	9a04      	ldr	r2, [sp, #16]
 8008464:	6010      	str	r0, [r2, #0]
 8008466:	6849      	ldr	r1, [r1, #4]
 8008468:	3208      	adds	r2, #8
 800846a:	9803      	ldr	r0, [sp, #12]
 800846c:	921a      	str	r2, [sp, #104]	; 0x68
 800846e:	f7f8 f95d 	bl	800072c <__aeabi_fadd>
 8008472:	4649      	mov	r1, r9
 8008474:	6849      	ldr	r1, [r1, #4]
 8008476:	f7f8 f959 	bl	800072c <__aeabi_fadd>
 800847a:	9a04      	ldr	r2, [sp, #16]
 800847c:	9902      	ldr	r1, [sp, #8]
 800847e:	6050      	str	r0, [r2, #4]
 8008480:	1c38      	adds	r0, r7, #0
 8008482:	f7f8 f953 	bl	800072c <__aeabi_fadd>
 8008486:	1c31      	adds	r1, r6, #0
 8008488:	f7f8 fdd0 	bl	800102c <__aeabi_fsub>
 800848c:	4652      	mov	r2, sl
 800848e:	6010      	str	r0, [r2, #0]
 8008490:	2208      	movs	r2, #8
 8008492:	1c29      	adds	r1, r5, #0
 8008494:	4452      	add	r2, sl
 8008496:	4658      	mov	r0, fp
 8008498:	9219      	str	r2, [sp, #100]	; 0x64
 800849a:	f7f8 fdc7 	bl	800102c <__aeabi_fsub>
 800849e:	1c21      	adds	r1, r4, #0
 80084a0:	f7f8 f944 	bl	800072c <__aeabi_fadd>
 80084a4:	4652      	mov	r2, sl
 80084a6:	1c29      	adds	r1, r5, #0
 80084a8:	6050      	str	r0, [r2, #4]
 80084aa:	9801      	ldr	r0, [sp, #4]
 80084ac:	f7f8 fdbe 	bl	800102c <__aeabi_fsub>
 80084b0:	1c21      	adds	r1, r4, #0
 80084b2:	f7f8 fdbb 	bl	800102c <__aeabi_fsub>
 80084b6:	9b00      	ldr	r3, [sp, #0]
 80084b8:	1c39      	adds	r1, r7, #0
 80084ba:	001a      	movs	r2, r3
 80084bc:	6018      	str	r0, [r3, #0]
 80084be:	3208      	adds	r2, #8
 80084c0:	9803      	ldr	r0, [sp, #12]
 80084c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80084c4:	f7f8 fdb2 	bl	800102c <__aeabi_fsub>
 80084c8:	1c31      	adds	r1, r6, #0
 80084ca:	f7f8 fdaf 	bl	800102c <__aeabi_fsub>
 80084ce:	9a00      	ldr	r2, [sp, #0]
 80084d0:	1c39      	adds	r1, r7, #0
 80084d2:	6050      	str	r0, [r2, #4]
 80084d4:	9802      	ldr	r0, [sp, #8]
 80084d6:	f7f8 fda9 	bl	800102c <__aeabi_fsub>
 80084da:	1c31      	adds	r1, r6, #0
 80084dc:	f7f8 f926 	bl	800072c <__aeabi_fadd>
 80084e0:	464e      	mov	r6, r9
 80084e2:	6030      	str	r0, [r6, #0]
 80084e4:	2008      	movs	r0, #8
 80084e6:	4448      	add	r0, r9
 80084e8:	9018      	str	r0, [sp, #96]	; 0x60
 80084ea:	4659      	mov	r1, fp
 80084ec:	1c28      	adds	r0, r5, #0
 80084ee:	f7f8 f91d 	bl	800072c <__aeabi_fadd>
 80084f2:	1c21      	adds	r1, r4, #0
 80084f4:	f7f8 fd9a 	bl	800102c <__aeabi_fsub>
 80084f8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80084fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80084fc:	000a      	movs	r2, r1
 80084fe:	3b02      	subs	r3, #2
 8008500:	3208      	adds	r2, #8
 8008502:	6070      	str	r0, [r6, #4]
 8008504:	921d      	str	r2, [sp, #116]	; 0x74
 8008506:	3118      	adds	r1, #24
 8008508:	3208      	adds	r2, #8
 800850a:	0858      	lsrs	r0, r3, #1
 800850c:	921e      	str	r2, [sp, #120]	; 0x78
 800850e:	911c      	str	r1, [sp, #112]	; 0x70
 8008510:	9021      	str	r0, [sp, #132]	; 0x84
 8008512:	d100      	bne.n	8008516 <arm_cfft_radix8by4_f32+0x13e>
 8008514:	e205      	b.n	8008922 <arm_cfft_radix8by4_f32+0x54a>
 8008516:	4643      	mov	r3, r8
 8008518:	3b0c      	subs	r3, #12
 800851a:	444b      	add	r3, r9
 800851c:	4698      	mov	r8, r3
 800851e:	2308      	movs	r3, #8
 8008520:	425b      	negs	r3, r3
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	3304      	adds	r3, #4
 8008526:	9303      	str	r3, [sp, #12]
 8008528:	330c      	adds	r3, #12
 800852a:	469b      	mov	fp, r3
 800852c:	260c      	movs	r6, #12
 800852e:	4653      	mov	r3, sl
 8008530:	46da      	mov	sl, fp
 8008532:	46cb      	mov	fp, r9
 8008534:	46b1      	mov	r9, r6
 8008536:	9015      	str	r0, [sp, #84]	; 0x54
 8008538:	9114      	str	r1, [sp, #80]	; 0x50
 800853a:	9213      	str	r2, [sp, #76]	; 0x4c
 800853c:	9302      	str	r3, [sp, #8]
 800853e:	4653      	mov	r3, sl
 8008540:	9f04      	ldr	r7, [sp, #16]
 8008542:	9e00      	ldr	r6, [sp, #0]
 8008544:	58fc      	ldr	r4, [r7, r3]
 8008546:	58f5      	ldr	r5, [r6, r3]
 8008548:	1c20      	adds	r0, r4, #0
 800854a:	1c29      	adds	r1, r5, #0
 800854c:	f7f8 f8ee 	bl	800072c <__aeabi_fadd>
 8008550:	1c29      	adds	r1, r5, #0
 8008552:	9005      	str	r0, [sp, #20]
 8008554:	1c20      	adds	r0, r4, #0
 8008556:	f7f8 fd69 	bl	800102c <__aeabi_fsub>
 800855a:	464b      	mov	r3, r9
 800855c:	58fc      	ldr	r4, [r7, r3]
 800855e:	58f5      	ldr	r5, [r6, r3]
 8008560:	9006      	str	r0, [sp, #24]
 8008562:	1c29      	adds	r1, r5, #0
 8008564:	1c20      	adds	r0, r4, #0
 8008566:	9704      	str	r7, [sp, #16]
 8008568:	9600      	str	r6, [sp, #0]
 800856a:	f7f8 f8df 	bl	800072c <__aeabi_fadd>
 800856e:	1c29      	adds	r1, r5, #0
 8008570:	9007      	str	r0, [sp, #28]
 8008572:	1c20      	adds	r0, r4, #0
 8008574:	f7f8 fd5a 	bl	800102c <__aeabi_fsub>
 8008578:	464b      	mov	r3, r9
 800857a:	9c02      	ldr	r4, [sp, #8]
 800857c:	464a      	mov	r2, r9
 800857e:	58e7      	ldr	r7, [r4, r3]
 8008580:	465b      	mov	r3, fp
 8008582:	589e      	ldr	r6, [r3, r2]
 8008584:	9906      	ldr	r1, [sp, #24]
 8008586:	9008      	str	r0, [sp, #32]
 8008588:	1c38      	adds	r0, r7, #0
 800858a:	f7f8 f8cf 	bl	800072c <__aeabi_fadd>
 800858e:	1c31      	adds	r1, r6, #0
 8008590:	f7f8 fd4c 	bl	800102c <__aeabi_fsub>
 8008594:	4653      	mov	r3, sl
 8008596:	4652      	mov	r2, sl
 8008598:	58e5      	ldr	r5, [r4, r3]
 800859a:	465b      	mov	r3, fp
 800859c:	9402      	str	r4, [sp, #8]
 800859e:	589c      	ldr	r4, [r3, r2]
 80085a0:	1c29      	adds	r1, r5, #0
 80085a2:	9009      	str	r0, [sp, #36]	; 0x24
 80085a4:	9808      	ldr	r0, [sp, #32]
 80085a6:	f7f8 fd41 	bl	800102c <__aeabi_fsub>
 80085aa:	1c21      	adds	r1, r4, #0
 80085ac:	f7f8 f8be 	bl	800072c <__aeabi_fadd>
 80085b0:	1c29      	adds	r1, r5, #0
 80085b2:	900a      	str	r0, [sp, #40]	; 0x28
 80085b4:	9805      	ldr	r0, [sp, #20]
 80085b6:	f7f8 fd39 	bl	800102c <__aeabi_fsub>
 80085ba:	1c21      	adds	r1, r4, #0
 80085bc:	f7f8 fd36 	bl	800102c <__aeabi_fsub>
 80085c0:	1c39      	adds	r1, r7, #0
 80085c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80085c4:	9807      	ldr	r0, [sp, #28]
 80085c6:	f7f8 fd31 	bl	800102c <__aeabi_fsub>
 80085ca:	1c31      	adds	r1, r6, #0
 80085cc:	f7f8 fd2e 	bl	800102c <__aeabi_fsub>
 80085d0:	1c39      	adds	r1, r7, #0
 80085d2:	900c      	str	r0, [sp, #48]	; 0x30
 80085d4:	9806      	ldr	r0, [sp, #24]
 80085d6:	f7f8 fd29 	bl	800102c <__aeabi_fsub>
 80085da:	1c31      	adds	r1, r6, #0
 80085dc:	f7f8 f8a6 	bl	800072c <__aeabi_fadd>
 80085e0:	9908      	ldr	r1, [sp, #32]
 80085e2:	9006      	str	r0, [sp, #24]
 80085e4:	1c28      	adds	r0, r5, #0
 80085e6:	f7f8 f8a1 	bl	800072c <__aeabi_fadd>
 80085ea:	1c21      	adds	r1, r4, #0
 80085ec:	f7f8 fd1e 	bl	800102c <__aeabi_fsub>
 80085f0:	9905      	ldr	r1, [sp, #20]
 80085f2:	9008      	str	r0, [sp, #32]
 80085f4:	1c28      	adds	r0, r5, #0
 80085f6:	f7f8 f899 	bl	800072c <__aeabi_fadd>
 80085fa:	1c21      	adds	r1, r4, #0
 80085fc:	f7f8 f896 	bl	800072c <__aeabi_fadd>
 8008600:	4653      	mov	r3, sl
 8008602:	9d04      	ldr	r5, [sp, #16]
 8008604:	9f02      	ldr	r7, [sp, #8]
 8008606:	50e8      	str	r0, [r5, r3]
 8008608:	464b      	mov	r3, r9
 800860a:	9807      	ldr	r0, [sp, #28]
 800860c:	58f9      	ldr	r1, [r7, r3]
 800860e:	f7f8 f88d 	bl	800072c <__aeabi_fadd>
 8008612:	464a      	mov	r2, r9
 8008614:	465b      	mov	r3, fp
 8008616:	5899      	ldr	r1, [r3, r2]
 8008618:	f7f8 f888 	bl	800072c <__aeabi_fadd>
 800861c:	464b      	mov	r3, r9
 800861e:	465a      	mov	r2, fp
 8008620:	50e8      	str	r0, [r5, r3]
 8008622:	9d01      	ldr	r5, [sp, #4]
 8008624:	597c      	ldr	r4, [r7, r5]
 8008626:	5955      	ldr	r5, [r2, r5]
 8008628:	1c20      	adds	r0, r4, #0
 800862a:	1c29      	adds	r1, r5, #0
 800862c:	f7f8 f87e 	bl	800072c <__aeabi_fadd>
 8008630:	1c29      	adds	r1, r5, #0
 8008632:	9005      	str	r0, [sp, #20]
 8008634:	1c20      	adds	r0, r4, #0
 8008636:	f7f8 fcf9 	bl	800102c <__aeabi_fsub>
 800863a:	003c      	movs	r4, r7
 800863c:	4659      	mov	r1, fp
 800863e:	9702      	str	r7, [sp, #8]
 8008640:	9f03      	ldr	r7, [sp, #12]
 8008642:	9007      	str	r0, [sp, #28]
 8008644:	59e4      	ldr	r4, [r4, r7]
 8008646:	59cd      	ldr	r5, [r1, r7]
 8008648:	1c20      	adds	r0, r4, #0
 800864a:	1c29      	adds	r1, r5, #0
 800864c:	f7f8 f86e 	bl	800072c <__aeabi_fadd>
 8008650:	1c29      	adds	r1, r5, #0
 8008652:	900d      	str	r0, [sp, #52]	; 0x34
 8008654:	1c20      	adds	r0, r4, #0
 8008656:	f7f8 fce9 	bl	800102c <__aeabi_fsub>
 800865a:	4641      	mov	r1, r8
 800865c:	9e00      	ldr	r6, [sp, #0]
 800865e:	688c      	ldr	r4, [r1, #8]
 8008660:	59f5      	ldr	r5, [r6, r7]
 8008662:	1c21      	adds	r1, r4, #0
 8008664:	900e      	str	r0, [sp, #56]	; 0x38
 8008666:	1c28      	adds	r0, r5, #0
 8008668:	9703      	str	r7, [sp, #12]
 800866a:	f7f8 fcdf 	bl	800102c <__aeabi_fsub>
 800866e:	9907      	ldr	r1, [sp, #28]
 8008670:	9016      	str	r0, [sp, #88]	; 0x58
 8008672:	f7f8 f85b 	bl	800072c <__aeabi_fadd>
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	900f      	str	r0, [sp, #60]	; 0x3c
 800867a:	58f7      	ldr	r7, [r6, r3]
 800867c:	4643      	mov	r3, r8
 800867e:	9600      	str	r6, [sp, #0]
 8008680:	685e      	ldr	r6, [r3, #4]
 8008682:	1c39      	adds	r1, r7, #0
 8008684:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008686:	f7f8 fcd1 	bl	800102c <__aeabi_fsub>
 800868a:	1c31      	adds	r1, r6, #0
 800868c:	f7f8 f84e 	bl	800072c <__aeabi_fadd>
 8008690:	1c39      	adds	r1, r7, #0
 8008692:	9010      	str	r0, [sp, #64]	; 0x40
 8008694:	9805      	ldr	r0, [sp, #20]
 8008696:	f7f8 fcc9 	bl	800102c <__aeabi_fsub>
 800869a:	1c31      	adds	r1, r6, #0
 800869c:	f7f8 fcc6 	bl	800102c <__aeabi_fsub>
 80086a0:	1c29      	adds	r1, r5, #0
 80086a2:	9011      	str	r0, [sp, #68]	; 0x44
 80086a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80086a6:	f7f8 fcc1 	bl	800102c <__aeabi_fsub>
 80086aa:	1c21      	adds	r1, r4, #0
 80086ac:	f7f8 fcbe 	bl	800102c <__aeabi_fsub>
 80086b0:	9907      	ldr	r1, [sp, #28]
 80086b2:	9012      	str	r0, [sp, #72]	; 0x48
 80086b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80086b6:	f7f8 fcb9 	bl	800102c <__aeabi_fsub>
 80086ba:	1c39      	adds	r1, r7, #0
 80086bc:	9007      	str	r0, [sp, #28]
 80086be:	1c30      	adds	r0, r6, #0
 80086c0:	f7f8 fcb4 	bl	800102c <__aeabi_fsub>
 80086c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80086c6:	f7f8 fcb1 	bl	800102c <__aeabi_fsub>
 80086ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086cc:	1c07      	adds	r7, r0, #0
 80086ce:	1c28      	adds	r0, r5, #0
 80086d0:	f7f8 f82c 	bl	800072c <__aeabi_fadd>
 80086d4:	1c21      	adds	r1, r4, #0
 80086d6:	f7f8 f829 	bl	800072c <__aeabi_fadd>
 80086da:	9a03      	ldr	r2, [sp, #12]
 80086dc:	9c02      	ldr	r4, [sp, #8]
 80086de:	9d01      	ldr	r5, [sp, #4]
 80086e0:	9e00      	ldr	r6, [sp, #0]
 80086e2:	50a0      	str	r0, [r4, r2]
 80086e4:	5971      	ldr	r1, [r6, r5]
 80086e6:	9805      	ldr	r0, [sp, #20]
 80086e8:	f7f8 f820 	bl	800072c <__aeabi_fadd>
 80086ec:	4643      	mov	r3, r8
 80086ee:	6859      	ldr	r1, [r3, #4]
 80086f0:	f7f8 f81c 	bl	800072c <__aeabi_fadd>
 80086f4:	4653      	mov	r3, sl
 80086f6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80086f8:	5160      	str	r0, [r4, r5]
 80086fa:	9501      	str	r5, [sp, #4]
 80086fc:	9402      	str	r4, [sp, #8]
 80086fe:	58cc      	ldr	r4, [r1, r3]
 8008700:	464b      	mov	r3, r9
 8008702:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008704:	58cd      	ldr	r5, [r1, r3]
 8008706:	1c21      	adds	r1, r4, #0
 8008708:	f7f8 fb76 	bl	8000df8 <__aeabi_fmul>
 800870c:	1c29      	adds	r1, r5, #0
 800870e:	1c06      	adds	r6, r0, #0
 8008710:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008712:	f7f8 fb71 	bl	8000df8 <__aeabi_fmul>
 8008716:	1c01      	adds	r1, r0, #0
 8008718:	1c30      	adds	r0, r6, #0
 800871a:	f7f8 f807 	bl	800072c <__aeabi_fadd>
 800871e:	4651      	mov	r1, sl
 8008720:	9b02      	ldr	r3, [sp, #8]
 8008722:	5058      	str	r0, [r3, r1]
 8008724:	1c21      	adds	r1, r4, #0
 8008726:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008728:	f7f8 fb66 	bl	8000df8 <__aeabi_fmul>
 800872c:	1c29      	adds	r1, r5, #0
 800872e:	1c06      	adds	r6, r0, #0
 8008730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008732:	f7f8 fb61 	bl	8000df8 <__aeabi_fmul>
 8008736:	1c01      	adds	r1, r0, #0
 8008738:	1c30      	adds	r0, r6, #0
 800873a:	f7f8 fc77 	bl	800102c <__aeabi_fsub>
 800873e:	4649      	mov	r1, r9
 8008740:	9b02      	ldr	r3, [sp, #8]
 8008742:	5058      	str	r0, [r3, r1]
 8008744:	1c29      	adds	r1, r5, #0
 8008746:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008748:	f7f8 fb56 	bl	8000df8 <__aeabi_fmul>
 800874c:	1c21      	adds	r1, r4, #0
 800874e:	1c06      	adds	r6, r0, #0
 8008750:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008752:	f7f8 fb51 	bl	8000df8 <__aeabi_fmul>
 8008756:	1c01      	adds	r1, r0, #0
 8008758:	1c30      	adds	r0, r6, #0
 800875a:	f7f8 fc67 	bl	800102c <__aeabi_fsub>
 800875e:	9a03      	ldr	r2, [sp, #12]
 8008760:	9e00      	ldr	r6, [sp, #0]
 8008762:	1c29      	adds	r1, r5, #0
 8008764:	50b0      	str	r0, [r6, r2]
 8008766:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008768:	f7f8 fb46 	bl	8000df8 <__aeabi_fmul>
 800876c:	1c21      	adds	r1, r4, #0
 800876e:	1c05      	adds	r5, r0, #0
 8008770:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008772:	f7f8 fb41 	bl	8000df8 <__aeabi_fmul>
 8008776:	1c01      	adds	r1, r0, #0
 8008778:	1c28      	adds	r0, r5, #0
 800877a:	f7f7 ffd7 	bl	800072c <__aeabi_fadd>
 800877e:	9d01      	ldr	r5, [sp, #4]
 8008780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008782:	5170      	str	r0, [r6, r5]
 8008784:	681c      	ldr	r4, [r3, #0]
 8008786:	685d      	ldr	r5, [r3, #4]
 8008788:	3310      	adds	r3, #16
 800878a:	1c21      	adds	r1, r4, #0
 800878c:	9600      	str	r6, [sp, #0]
 800878e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008790:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008792:	f7f8 fb31 	bl	8000df8 <__aeabi_fmul>
 8008796:	1c29      	adds	r1, r5, #0
 8008798:	1c06      	adds	r6, r0, #0
 800879a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800879c:	f7f8 fb2c 	bl	8000df8 <__aeabi_fmul>
 80087a0:	1c01      	adds	r1, r0, #0
 80087a2:	1c30      	adds	r0, r6, #0
 80087a4:	f7f7 ffc2 	bl	800072c <__aeabi_fadd>
 80087a8:	4653      	mov	r3, sl
 80087aa:	9e00      	ldr	r6, [sp, #0]
 80087ac:	1c21      	adds	r1, r4, #0
 80087ae:	50f0      	str	r0, [r6, r3]
 80087b0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80087b2:	f7f8 fb21 	bl	8000df8 <__aeabi_fmul>
 80087b6:	1c29      	adds	r1, r5, #0
 80087b8:	1c06      	adds	r6, r0, #0
 80087ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80087bc:	f7f8 fb1c 	bl	8000df8 <__aeabi_fmul>
 80087c0:	1c01      	adds	r1, r0, #0
 80087c2:	1c30      	adds	r0, r6, #0
 80087c4:	f7f8 fc32 	bl	800102c <__aeabi_fsub>
 80087c8:	2180      	movs	r1, #128	; 0x80
 80087ca:	464b      	mov	r3, r9
 80087cc:	0609      	lsls	r1, r1, #24
 80087ce:	468c      	mov	ip, r1
 80087d0:	9e00      	ldr	r6, [sp, #0]
 80087d2:	1c21      	adds	r1, r4, #0
 80087d4:	50f0      	str	r0, [r6, r3]
 80087d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087d8:	4463      	add	r3, ip
 80087da:	0018      	movs	r0, r3
 80087dc:	f7f8 fb0c 	bl	8000df8 <__aeabi_fmul>
 80087e0:	1c29      	adds	r1, r5, #0
 80087e2:	1c06      	adds	r6, r0, #0
 80087e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80087e6:	f7f8 fb07 	bl	8000df8 <__aeabi_fmul>
 80087ea:	1c01      	adds	r1, r0, #0
 80087ec:	1c30      	adds	r0, r6, #0
 80087ee:	f7f8 fc1d 	bl	800102c <__aeabi_fsub>
 80087f2:	465b      	mov	r3, fp
 80087f4:	9a03      	ldr	r2, [sp, #12]
 80087f6:	1c29      	adds	r1, r5, #0
 80087f8:	5098      	str	r0, [r3, r2]
 80087fa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80087fc:	f7f8 fafc 	bl	8000df8 <__aeabi_fmul>
 8008800:	1c21      	adds	r1, r4, #0
 8008802:	1c05      	adds	r5, r0, #0
 8008804:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008806:	f7f8 faf7 	bl	8000df8 <__aeabi_fmul>
 800880a:	1c01      	adds	r1, r0, #0
 800880c:	1c28      	adds	r0, r5, #0
 800880e:	f7f8 fc0d 	bl	800102c <__aeabi_fsub>
 8008812:	465b      	mov	r3, fp
 8008814:	9d01      	ldr	r5, [sp, #4]
 8008816:	5158      	str	r0, [r3, r5]
 8008818:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800881a:	9806      	ldr	r0, [sp, #24]
 800881c:	681c      	ldr	r4, [r3, #0]
 800881e:	685d      	ldr	r5, [r3, #4]
 8008820:	1c21      	adds	r1, r4, #0
 8008822:	3318      	adds	r3, #24
 8008824:	9314      	str	r3, [sp, #80]	; 0x50
 8008826:	f7f8 fae7 	bl	8000df8 <__aeabi_fmul>
 800882a:	1c29      	adds	r1, r5, #0
 800882c:	1c06      	adds	r6, r0, #0
 800882e:	9808      	ldr	r0, [sp, #32]
 8008830:	f7f8 fae2 	bl	8000df8 <__aeabi_fmul>
 8008834:	1c01      	adds	r1, r0, #0
 8008836:	1c30      	adds	r0, r6, #0
 8008838:	f7f7 ff78 	bl	800072c <__aeabi_fadd>
 800883c:	465b      	mov	r3, fp
 800883e:	4651      	mov	r1, sl
 8008840:	5058      	str	r0, [r3, r1]
 8008842:	1c21      	adds	r1, r4, #0
 8008844:	9808      	ldr	r0, [sp, #32]
 8008846:	f7f8 fad7 	bl	8000df8 <__aeabi_fmul>
 800884a:	1c29      	adds	r1, r5, #0
 800884c:	1c06      	adds	r6, r0, #0
 800884e:	9806      	ldr	r0, [sp, #24]
 8008850:	f7f8 fad2 	bl	8000df8 <__aeabi_fmul>
 8008854:	1c01      	adds	r1, r0, #0
 8008856:	1c30      	adds	r0, r6, #0
 8008858:	f7f8 fbe8 	bl	800102c <__aeabi_fsub>
 800885c:	465b      	mov	r3, fp
 800885e:	4649      	mov	r1, r9
 8008860:	5058      	str	r0, [r3, r1]
 8008862:	1c29      	adds	r1, r5, #0
 8008864:	1c38      	adds	r0, r7, #0
 8008866:	f7f8 fac7 	bl	8000df8 <__aeabi_fmul>
 800886a:	1c21      	adds	r1, r4, #0
 800886c:	1c06      	adds	r6, r0, #0
 800886e:	9807      	ldr	r0, [sp, #28]
 8008870:	f7f8 fac2 	bl	8000df8 <__aeabi_fmul>
 8008874:	1c01      	adds	r1, r0, #0
 8008876:	1c30      	adds	r0, r6, #0
 8008878:	f7f8 fbd8 	bl	800102c <__aeabi_fsub>
 800887c:	4643      	mov	r3, r8
 800887e:	1c29      	adds	r1, r5, #0
 8008880:	6098      	str	r0, [r3, #8]
 8008882:	9807      	ldr	r0, [sp, #28]
 8008884:	f7f8 fab8 	bl	8000df8 <__aeabi_fmul>
 8008888:	1c21      	adds	r1, r4, #0
 800888a:	1c05      	adds	r5, r0, #0
 800888c:	1c38      	adds	r0, r7, #0
 800888e:	f7f8 fab3 	bl	8000df8 <__aeabi_fmul>
 8008892:	1c01      	adds	r1, r0, #0
 8008894:	1c28      	adds	r0, r5, #0
 8008896:	f7f7 ff49 	bl	800072c <__aeabi_fadd>
 800889a:	2108      	movs	r1, #8
 800889c:	4249      	negs	r1, r1
 800889e:	468c      	mov	ip, r1
 80088a0:	4643      	mov	r3, r8
 80088a2:	3110      	adds	r1, #16
 80088a4:	44e0      	add	r8, ip
 80088a6:	468c      	mov	ip, r1
 80088a8:	9a03      	ldr	r2, [sp, #12]
 80088aa:	9d01      	ldr	r5, [sp, #4]
 80088ac:	6058      	str	r0, [r3, #4]
 80088ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088b0:	3a08      	subs	r2, #8
 80088b2:	3b01      	subs	r3, #1
 80088b4:	3d08      	subs	r5, #8
 80088b6:	9315      	str	r3, [sp, #84]	; 0x54
 80088b8:	44e2      	add	sl, ip
 80088ba:	44e1      	add	r9, ip
 80088bc:	9203      	str	r2, [sp, #12]
 80088be:	9501      	str	r5, [sp, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d000      	beq.n	80088c6 <arm_cfft_radix8by4_f32+0x4ee>
 80088c4:	e63b      	b.n	800853e <arm_cfft_radix8by4_f32+0x166>
 80088c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80088c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088ca:	468c      	mov	ip, r1
 80088cc:	9b02      	ldr	r3, [sp, #8]
 80088ce:	981e      	ldr	r0, [sp, #120]	; 0x78
 80088d0:	469a      	mov	sl, r3
 80088d2:	00d3      	lsls	r3, r2, #3
 80088d4:	449c      	add	ip, r3
 80088d6:	4661      	mov	r1, ip
 80088d8:	911a      	str	r1, [sp, #104]	; 0x68
 80088da:	991d      	ldr	r1, [sp, #116]	; 0x74
 80088dc:	46d9      	mov	r9, fp
 80088de:	468c      	mov	ip, r1
 80088e0:	449c      	add	ip, r3
 80088e2:	4661      	mov	r1, ip
 80088e4:	911d      	str	r1, [sp, #116]	; 0x74
 80088e6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80088e8:	468c      	mov	ip, r1
 80088ea:	449c      	add	ip, r3
 80088ec:	4661      	mov	r1, ip
 80088ee:	4684      	mov	ip, r0
 80088f0:	9119      	str	r1, [sp, #100]	; 0x64
 80088f2:	0011      	movs	r1, r2
 80088f4:	0112      	lsls	r2, r2, #4
 80088f6:	4494      	add	ip, r2
 80088f8:	4662      	mov	r2, ip
 80088fa:	921e      	str	r2, [sp, #120]	; 0x78
 80088fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80088fe:	4694      	mov	ip, r2
 8008900:	449c      	add	ip, r3
 8008902:	4662      	mov	r2, ip
 8008904:	468c      	mov	ip, r1
 8008906:	921b      	str	r2, [sp, #108]	; 0x6c
 8008908:	004a      	lsls	r2, r1, #1
 800890a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800890c:	4462      	add	r2, ip
 800890e:	468c      	mov	ip, r1
 8008910:	00d2      	lsls	r2, r2, #3
 8008912:	4494      	add	ip, r2
 8008914:	4662      	mov	r2, ip
 8008916:	921c      	str	r2, [sp, #112]	; 0x70
 8008918:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800891a:	4694      	mov	ip, r2
 800891c:	449c      	add	ip, r3
 800891e:	4663      	mov	r3, ip
 8008920:	9318      	str	r3, [sp, #96]	; 0x60
 8008922:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008924:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008926:	6834      	ldr	r4, [r6, #0]
 8008928:	683d      	ldr	r5, [r7, #0]
 800892a:	1c20      	adds	r0, r4, #0
 800892c:	1c29      	adds	r1, r5, #0
 800892e:	f7f7 fefd 	bl	800072c <__aeabi_fadd>
 8008932:	1c29      	adds	r1, r5, #0
 8008934:	9001      	str	r0, [sp, #4]
 8008936:	1c20      	adds	r0, r4, #0
 8008938:	f7f8 fb78 	bl	800102c <__aeabi_fsub>
 800893c:	6874      	ldr	r4, [r6, #4]
 800893e:	687d      	ldr	r5, [r7, #4]
 8008940:	4683      	mov	fp, r0
 8008942:	1c29      	adds	r1, r5, #0
 8008944:	1c20      	adds	r0, r4, #0
 8008946:	961a      	str	r6, [sp, #104]	; 0x68
 8008948:	971b      	str	r7, [sp, #108]	; 0x6c
 800894a:	f7f7 feef 	bl	800072c <__aeabi_fadd>
 800894e:	1c29      	adds	r1, r5, #0
 8008950:	9002      	str	r0, [sp, #8]
 8008952:	1c20      	adds	r0, r4, #0
 8008954:	f7f8 fb6a 	bl	800102c <__aeabi_fsub>
 8008958:	465b      	mov	r3, fp
 800895a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800895c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800895e:	6867      	ldr	r7, [r4, #4]
 8008960:	6876      	ldr	r6, [r6, #4]
 8008962:	4680      	mov	r8, r0
 8008964:	4659      	mov	r1, fp
 8008966:	1c38      	adds	r0, r7, #0
 8008968:	9303      	str	r3, [sp, #12]
 800896a:	f7f7 fedf 	bl	800072c <__aeabi_fadd>
 800896e:	1c31      	adds	r1, r6, #0
 8008970:	f7f8 fb5c 	bl	800102c <__aeabi_fsub>
 8008974:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008976:	6825      	ldr	r5, [r4, #0]
 8008978:	9419      	str	r4, [sp, #100]	; 0x64
 800897a:	681c      	ldr	r4, [r3, #0]
 800897c:	9005      	str	r0, [sp, #20]
 800897e:	1c29      	adds	r1, r5, #0
 8008980:	4640      	mov	r0, r8
 8008982:	f7f8 fb53 	bl	800102c <__aeabi_fsub>
 8008986:	1c21      	adds	r1, r4, #0
 8008988:	f7f7 fed0 	bl	800072c <__aeabi_fadd>
 800898c:	1c29      	adds	r1, r5, #0
 800898e:	4683      	mov	fp, r0
 8008990:	9801      	ldr	r0, [sp, #4]
 8008992:	f7f8 fb4b 	bl	800102c <__aeabi_fsub>
 8008996:	1c21      	adds	r1, r4, #0
 8008998:	f7f8 fb48 	bl	800102c <__aeabi_fsub>
 800899c:	1c39      	adds	r1, r7, #0
 800899e:	9006      	str	r0, [sp, #24]
 80089a0:	9802      	ldr	r0, [sp, #8]
 80089a2:	f7f8 fb43 	bl	800102c <__aeabi_fsub>
 80089a6:	1c31      	adds	r1, r6, #0
 80089a8:	f7f8 fb40 	bl	800102c <__aeabi_fsub>
 80089ac:	1c39      	adds	r1, r7, #0
 80089ae:	9007      	str	r0, [sp, #28]
 80089b0:	9803      	ldr	r0, [sp, #12]
 80089b2:	f7f8 fb3b 	bl	800102c <__aeabi_fsub>
 80089b6:	1c31      	adds	r1, r6, #0
 80089b8:	f7f7 feb8 	bl	800072c <__aeabi_fadd>
 80089bc:	4641      	mov	r1, r8
 80089be:	9003      	str	r0, [sp, #12]
 80089c0:	1c28      	adds	r0, r5, #0
 80089c2:	f7f7 feb3 	bl	800072c <__aeabi_fadd>
 80089c6:	1c21      	adds	r1, r4, #0
 80089c8:	f7f8 fb30 	bl	800102c <__aeabi_fsub>
 80089cc:	9901      	ldr	r1, [sp, #4]
 80089ce:	1c07      	adds	r7, r0, #0
 80089d0:	1c28      	adds	r0, r5, #0
 80089d2:	f7f7 feab 	bl	800072c <__aeabi_fadd>
 80089d6:	1c21      	adds	r1, r4, #0
 80089d8:	f7f7 fea8 	bl	800072c <__aeabi_fadd>
 80089dc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80089de:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80089e0:	6028      	str	r0, [r5, #0]
 80089e2:	6871      	ldr	r1, [r6, #4]
 80089e4:	9802      	ldr	r0, [sp, #8]
 80089e6:	f7f7 fea1 	bl	800072c <__aeabi_fadd>
 80089ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80089ec:	6859      	ldr	r1, [r3, #4]
 80089ee:	f7f7 fe9d 	bl	800072c <__aeabi_fadd>
 80089f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80089f4:	6068      	str	r0, [r5, #4]
 80089f6:	6815      	ldr	r5, [r2, #0]
 80089f8:	9b05      	ldr	r3, [sp, #20]
 80089fa:	1c29      	adds	r1, r5, #0
 80089fc:	1c18      	adds	r0, r3, #0
 80089fe:	6854      	ldr	r4, [r2, #4]
 8008a00:	4698      	mov	r8, r3
 8008a02:	f7f8 f9f9 	bl	8000df8 <__aeabi_fmul>
 8008a06:	1c21      	adds	r1, r4, #0
 8008a08:	1c06      	adds	r6, r0, #0
 8008a0a:	4658      	mov	r0, fp
 8008a0c:	f7f8 f9f4 	bl	8000df8 <__aeabi_fmul>
 8008a10:	1c01      	adds	r1, r0, #0
 8008a12:	1c30      	adds	r0, r6, #0
 8008a14:	f7f7 fe8a 	bl	800072c <__aeabi_fadd>
 8008a18:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008a1a:	1c29      	adds	r1, r5, #0
 8008a1c:	6030      	str	r0, [r6, #0]
 8008a1e:	4658      	mov	r0, fp
 8008a20:	f7f8 f9ea 	bl	8000df8 <__aeabi_fmul>
 8008a24:	1c21      	adds	r1, r4, #0
 8008a26:	1c05      	adds	r5, r0, #0
 8008a28:	4640      	mov	r0, r8
 8008a2a:	f7f8 f9e5 	bl	8000df8 <__aeabi_fmul>
 8008a2e:	1c01      	adds	r1, r0, #0
 8008a30:	1c28      	adds	r0, r5, #0
 8008a32:	f7f8 fafb 	bl	800102c <__aeabi_fsub>
 8008a36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a38:	6070      	str	r0, [r6, #4]
 8008a3a:	6815      	ldr	r5, [r2, #0]
 8008a3c:	9b06      	ldr	r3, [sp, #24]
 8008a3e:	1c29      	adds	r1, r5, #0
 8008a40:	1c18      	adds	r0, r3, #0
 8008a42:	6854      	ldr	r4, [r2, #4]
 8008a44:	4698      	mov	r8, r3
 8008a46:	f7f8 f9d7 	bl	8000df8 <__aeabi_fmul>
 8008a4a:	9b07      	ldr	r3, [sp, #28]
 8008a4c:	1c06      	adds	r6, r0, #0
 8008a4e:	1c21      	adds	r1, r4, #0
 8008a50:	1c18      	adds	r0, r3, #0
 8008a52:	469b      	mov	fp, r3
 8008a54:	f7f8 f9d0 	bl	8000df8 <__aeabi_fmul>
 8008a58:	1c01      	adds	r1, r0, #0
 8008a5a:	1c30      	adds	r0, r6, #0
 8008a5c:	f7f7 fe66 	bl	800072c <__aeabi_fadd>
 8008a60:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008a62:	1c29      	adds	r1, r5, #0
 8008a64:	6030      	str	r0, [r6, #0]
 8008a66:	4658      	mov	r0, fp
 8008a68:	f7f8 f9c6 	bl	8000df8 <__aeabi_fmul>
 8008a6c:	1c21      	adds	r1, r4, #0
 8008a6e:	1c05      	adds	r5, r0, #0
 8008a70:	4640      	mov	r0, r8
 8008a72:	f7f8 f9c1 	bl	8000df8 <__aeabi_fmul>
 8008a76:	1c01      	adds	r1, r0, #0
 8008a78:	1c28      	adds	r0, r5, #0
 8008a7a:	f7f8 fad7 	bl	800102c <__aeabi_fsub>
 8008a7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a80:	6070      	str	r0, [r6, #4]
 8008a82:	6815      	ldr	r5, [r2, #0]
 8008a84:	9b03      	ldr	r3, [sp, #12]
 8008a86:	1c29      	adds	r1, r5, #0
 8008a88:	1c18      	adds	r0, r3, #0
 8008a8a:	6854      	ldr	r4, [r2, #4]
 8008a8c:	4698      	mov	r8, r3
 8008a8e:	f7f8 f9b3 	bl	8000df8 <__aeabi_fmul>
 8008a92:	1c21      	adds	r1, r4, #0
 8008a94:	1c06      	adds	r6, r0, #0
 8008a96:	1c38      	adds	r0, r7, #0
 8008a98:	f7f8 f9ae 	bl	8000df8 <__aeabi_fmul>
 8008a9c:	1c01      	adds	r1, r0, #0
 8008a9e:	1c30      	adds	r0, r6, #0
 8008aa0:	f7f7 fe44 	bl	800072c <__aeabi_fadd>
 8008aa4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008aa6:	1c29      	adds	r1, r5, #0
 8008aa8:	6030      	str	r0, [r6, #0]
 8008aaa:	1c38      	adds	r0, r7, #0
 8008aac:	f7f8 f9a4 	bl	8000df8 <__aeabi_fmul>
 8008ab0:	1c21      	adds	r1, r4, #0
 8008ab2:	1c05      	adds	r5, r0, #0
 8008ab4:	4640      	mov	r0, r8
 8008ab6:	f7f8 f99f 	bl	8000df8 <__aeabi_fmul>
 8008aba:	1c01      	adds	r1, r0, #0
 8008abc:	1c28      	adds	r0, r5, #0
 8008abe:	f7f8 fab5 	bl	800102c <__aeabi_fsub>
 8008ac2:	466b      	mov	r3, sp
 8008ac4:	227c      	movs	r2, #124	; 0x7c
 8008ac6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008ac8:	6070      	str	r0, [r6, #4]
 8008aca:	189b      	adds	r3, r3, r2
 8008acc:	881c      	ldrh	r4, [r3, #0]
 8008ace:	686b      	ldr	r3, [r5, #4]
 8008ad0:	0021      	movs	r1, r4
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	9a01      	ldr	r2, [sp, #4]
 8008ad6:	9804      	ldr	r0, [sp, #16]
 8008ad8:	2304      	movs	r3, #4
 8008ada:	f000 f97b 	bl	8008dd4 <arm_radix8_butterfly_f32>
 8008ade:	686b      	ldr	r3, [r5, #4]
 8008ae0:	0021      	movs	r1, r4
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	9a01      	ldr	r2, [sp, #4]
 8008ae6:	4650      	mov	r0, sl
 8008ae8:	2304      	movs	r3, #4
 8008aea:	f000 f973 	bl	8008dd4 <arm_radix8_butterfly_f32>
 8008aee:	686b      	ldr	r3, [r5, #4]
 8008af0:	0021      	movs	r1, r4
 8008af2:	9301      	str	r3, [sp, #4]
 8008af4:	9a01      	ldr	r2, [sp, #4]
 8008af6:	9800      	ldr	r0, [sp, #0]
 8008af8:	2304      	movs	r3, #4
 8008afa:	f000 f96b 	bl	8008dd4 <arm_radix8_butterfly_f32>
 8008afe:	686a      	ldr	r2, [r5, #4]
 8008b00:	2304      	movs	r3, #4
 8008b02:	0021      	movs	r1, r4
 8008b04:	4648      	mov	r0, r9
 8008b06:	f000 f965 	bl	8008dd4 <arm_radix8_butterfly_f32>
 8008b0a:	b023      	add	sp, #140	; 0x8c
 8008b0c:	bc3c      	pop	{r2, r3, r4, r5}
 8008b0e:	4690      	mov	r8, r2
 8008b10:	4699      	mov	r9, r3
 8008b12:	46a2      	mov	sl, r4
 8008b14:	46ab      	mov	fp, r5
 8008b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b18 <arm_cfft_f32>:
 8008b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b1a:	46c6      	mov	lr, r8
 8008b1c:	b500      	push	{lr}
 8008b1e:	0006      	movs	r6, r0
 8008b20:	000d      	movs	r5, r1
 8008b22:	0017      	movs	r7, r2
 8008b24:	4698      	mov	r8, r3
 8008b26:	8804      	ldrh	r4, [r0, #0]
 8008b28:	2a01      	cmp	r2, #1
 8008b2a:	d05c      	beq.n	8008be6 <arm_cfft_f32+0xce>
 8008b2c:	2380      	movs	r3, #128	; 0x80
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	429c      	cmp	r4, r3
 8008b32:	d067      	beq.n	8008c04 <arm_cfft_f32+0xec>
 8008b34:	d91a      	bls.n	8008b6c <arm_cfft_f32+0x54>
 8008b36:	2380      	movs	r3, #128	; 0x80
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	429c      	cmp	r4, r3
 8008b3c:	d01d      	beq.n	8008b7a <arm_cfft_f32+0x62>
 8008b3e:	d94a      	bls.n	8008bd6 <arm_cfft_f32+0xbe>
 8008b40:	2380      	movs	r3, #128	; 0x80
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	429c      	cmp	r4, r3
 8008b46:	d05d      	beq.n	8008c04 <arm_cfft_f32+0xec>
 8008b48:	2380      	movs	r3, #128	; 0x80
 8008b4a:	015b      	lsls	r3, r3, #5
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d105      	bne.n	8008b5c <arm_cfft_f32+0x44>
 8008b50:	2301      	movs	r3, #1
 8008b52:	6872      	ldr	r2, [r6, #4]
 8008b54:	0021      	movs	r1, r4
 8008b56:	0028      	movs	r0, r5
 8008b58:	f000 f93c 	bl	8008dd4 <arm_radix8_butterfly_f32>
 8008b5c:	4643      	mov	r3, r8
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d112      	bne.n	8008b88 <arm_cfft_f32+0x70>
 8008b62:	2f01      	cmp	r7, #1
 8008b64:	d017      	beq.n	8008b96 <arm_cfft_f32+0x7e>
 8008b66:	bc04      	pop	{r2}
 8008b68:	4690      	mov	r8, r2
 8008b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b6c:	2c20      	cmp	r4, #32
 8008b6e:	d049      	beq.n	8008c04 <arm_cfft_f32+0xec>
 8008b70:	d936      	bls.n	8008be0 <arm_cfft_f32+0xc8>
 8008b72:	2c40      	cmp	r4, #64	; 0x40
 8008b74:	d0ec      	beq.n	8008b50 <arm_cfft_f32+0x38>
 8008b76:	2c80      	cmp	r4, #128	; 0x80
 8008b78:	d1f0      	bne.n	8008b5c <arm_cfft_f32+0x44>
 8008b7a:	0029      	movs	r1, r5
 8008b7c:	0030      	movs	r0, r6
 8008b7e:	f7ff fae3 	bl	8008148 <arm_cfft_radix8by2_f32>
 8008b82:	4643      	mov	r3, r8
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0ec      	beq.n	8008b62 <arm_cfft_f32+0x4a>
 8008b88:	68b2      	ldr	r2, [r6, #8]
 8008b8a:	89b1      	ldrh	r1, [r6, #12]
 8008b8c:	0028      	movs	r0, r5
 8008b8e:	f000 f843 	bl	8008c18 <arm_bitreversal_32>
 8008b92:	2f01      	cmp	r7, #1
 8008b94:	d1e7      	bne.n	8008b66 <arm_cfft_f32+0x4e>
 8008b96:	0020      	movs	r0, r4
 8008b98:	f7f8 fc8c 	bl	80014b4 <__aeabi_ui2f>
 8008b9c:	1c01      	adds	r1, r0, #0
 8008b9e:	20fe      	movs	r0, #254	; 0xfe
 8008ba0:	0580      	lsls	r0, r0, #22
 8008ba2:	f7f7 ff5f 	bl	8000a64 <__aeabi_fdiv>
 8008ba6:	1c07      	adds	r7, r0, #0
 8008ba8:	2c00      	cmp	r4, #0
 8008baa:	d0dc      	beq.n	8008b66 <arm_cfft_f32+0x4e>
 8008bac:	2600      	movs	r6, #0
 8008bae:	6828      	ldr	r0, [r5, #0]
 8008bb0:	1c39      	adds	r1, r7, #0
 8008bb2:	f7f8 f921 	bl	8000df8 <__aeabi_fmul>
 8008bb6:	2280      	movs	r2, #128	; 0x80
 8008bb8:	0612      	lsls	r2, r2, #24
 8008bba:	4694      	mov	ip, r2
 8008bbc:	686b      	ldr	r3, [r5, #4]
 8008bbe:	6028      	str	r0, [r5, #0]
 8008bc0:	4463      	add	r3, ip
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	1c39      	adds	r1, r7, #0
 8008bc6:	f7f8 f917 	bl	8000df8 <__aeabi_fmul>
 8008bca:	3601      	adds	r6, #1
 8008bcc:	6068      	str	r0, [r5, #4]
 8008bce:	3508      	adds	r5, #8
 8008bd0:	42b4      	cmp	r4, r6
 8008bd2:	d8ec      	bhi.n	8008bae <arm_cfft_f32+0x96>
 8008bd4:	e7c7      	b.n	8008b66 <arm_cfft_f32+0x4e>
 8008bd6:	2380      	movs	r3, #128	; 0x80
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	429c      	cmp	r4, r3
 8008bdc:	d0b8      	beq.n	8008b50 <arm_cfft_f32+0x38>
 8008bde:	e7bd      	b.n	8008b5c <arm_cfft_f32+0x44>
 8008be0:	2c10      	cmp	r4, #16
 8008be2:	d0ca      	beq.n	8008b7a <arm_cfft_f32+0x62>
 8008be4:	e7ba      	b.n	8008b5c <arm_cfft_f32+0x44>
 8008be6:	1d0b      	adds	r3, r1, #4
 8008be8:	2c00      	cmp	r4, #0
 8008bea:	d010      	beq.n	8008c0e <arm_cfft_f32+0xf6>
 8008bec:	2100      	movs	r1, #0
 8008bee:	2080      	movs	r0, #128	; 0x80
 8008bf0:	0600      	lsls	r0, r0, #24
 8008bf2:	4684      	mov	ip, r0
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	3101      	adds	r1, #1
 8008bf8:	4462      	add	r2, ip
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	3308      	adds	r3, #8
 8008bfe:	428c      	cmp	r4, r1
 8008c00:	d8f5      	bhi.n	8008bee <arm_cfft_f32+0xd6>
 8008c02:	e793      	b.n	8008b2c <arm_cfft_f32+0x14>
 8008c04:	0029      	movs	r1, r5
 8008c06:	0030      	movs	r0, r6
 8008c08:	f7ff fbe6 	bl	80083d8 <arm_cfft_radix8by4_f32>
 8008c0c:	e7a6      	b.n	8008b5c <arm_cfft_f32+0x44>
 8008c0e:	4643      	mov	r3, r8
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0a8      	beq.n	8008b66 <arm_cfft_f32+0x4e>
 8008c14:	e7b8      	b.n	8008b88 <arm_cfft_f32+0x70>
 8008c16:	46c0      	nop			; (mov r8, r8)

08008c18 <arm_bitreversal_32>:
 8008c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c1a:	46c6      	mov	lr, r8
 8008c1c:	4688      	mov	r8, r1
 8008c1e:	b500      	push	{lr}
 8008c20:	2900      	cmp	r1, #0
 8008c22:	d01a      	beq.n	8008c5a <arm_bitreversal_32+0x42>
 8008c24:	2500      	movs	r5, #0
 8008c26:	8814      	ldrh	r4, [r2, #0]
 8008c28:	3502      	adds	r5, #2
 8008c2a:	08a4      	lsrs	r4, r4, #2
 8008c2c:	00a4      	lsls	r4, r4, #2
 8008c2e:	1907      	adds	r7, r0, r4
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	3404      	adds	r4, #4
 8008c34:	469c      	mov	ip, r3
 8008c36:	8853      	ldrh	r3, [r2, #2]
 8008c38:	1904      	adds	r4, r0, r4
 8008c3a:	089b      	lsrs	r3, r3, #2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	18c6      	adds	r6, r0, r3
 8008c40:	6831      	ldr	r1, [r6, #0]
 8008c42:	3304      	adds	r3, #4
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	4661      	mov	r1, ip
 8008c48:	18c3      	adds	r3, r0, r3
 8008c4a:	6031      	str	r1, [r6, #0]
 8008c4c:	6826      	ldr	r6, [r4, #0]
 8008c4e:	6819      	ldr	r1, [r3, #0]
 8008c50:	3204      	adds	r2, #4
 8008c52:	6021      	str	r1, [r4, #0]
 8008c54:	601e      	str	r6, [r3, #0]
 8008c56:	4545      	cmp	r5, r8
 8008c58:	d3e5      	bcc.n	8008c26 <arm_bitreversal_32+0xe>
 8008c5a:	bc04      	pop	{r2}
 8008c5c:	4690      	mov	r8, r2
 8008c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c60 <arm_cmplx_mag_f32>:
 8008c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c62:	4657      	mov	r7, sl
 8008c64:	464e      	mov	r6, r9
 8008c66:	4645      	mov	r5, r8
 8008c68:	46de      	mov	lr, fp
 8008c6a:	b5e0      	push	{r5, r6, r7, lr}
 8008c6c:	0893      	lsrs	r3, r2, #2
 8008c6e:	b083      	sub	sp, #12
 8008c70:	4680      	mov	r8, r0
 8008c72:	4689      	mov	r9, r1
 8008c74:	9201      	str	r2, [sp, #4]
 8008c76:	469a      	mov	sl, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d06f      	beq.n	8008d5c <arm_cmplx_mag_f32+0xfc>
 8008c7c:	0004      	movs	r4, r0
 8008c7e:	000d      	movs	r5, r1
 8008c80:	001e      	movs	r6, r3
 8008c82:	6821      	ldr	r1, [r4, #0]
 8008c84:	6867      	ldr	r7, [r4, #4]
 8008c86:	1c08      	adds	r0, r1, #0
 8008c88:	f7f8 f8b6 	bl	8000df8 <__aeabi_fmul>
 8008c8c:	1c39      	adds	r1, r7, #0
 8008c8e:	4683      	mov	fp, r0
 8008c90:	1c38      	adds	r0, r7, #0
 8008c92:	f7f8 f8b1 	bl	8000df8 <__aeabi_fmul>
 8008c96:	1c01      	adds	r1, r0, #0
 8008c98:	4658      	mov	r0, fp
 8008c9a:	f7f7 fd47 	bl	800072c <__aeabi_fadd>
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	1c07      	adds	r7, r0, #0
 8008ca2:	f7f7 fc2f 	bl	8000504 <__aeabi_fcmpge>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d100      	bne.n	8008cac <arm_cmplx_mag_f32+0x4c>
 8008caa:	e084      	b.n	8008db6 <arm_cmplx_mag_f32+0x156>
 8008cac:	1c38      	adds	r0, r7, #0
 8008cae:	f003 fce9 	bl	800c684 <sqrtf>
 8008cb2:	6028      	str	r0, [r5, #0]
 8008cb4:	68a1      	ldr	r1, [r4, #8]
 8008cb6:	68e7      	ldr	r7, [r4, #12]
 8008cb8:	1c08      	adds	r0, r1, #0
 8008cba:	f7f8 f89d 	bl	8000df8 <__aeabi_fmul>
 8008cbe:	1c39      	adds	r1, r7, #0
 8008cc0:	4683      	mov	fp, r0
 8008cc2:	1c38      	adds	r0, r7, #0
 8008cc4:	f7f8 f898 	bl	8000df8 <__aeabi_fmul>
 8008cc8:	1c01      	adds	r1, r0, #0
 8008cca:	4658      	mov	r0, fp
 8008ccc:	f7f7 fd2e 	bl	800072c <__aeabi_fadd>
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	1c07      	adds	r7, r0, #0
 8008cd4:	f7f7 fc16 	bl	8000504 <__aeabi_fcmpge>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d100      	bne.n	8008cde <arm_cmplx_mag_f32+0x7e>
 8008cdc:	e074      	b.n	8008dc8 <arm_cmplx_mag_f32+0x168>
 8008cde:	1c38      	adds	r0, r7, #0
 8008ce0:	f003 fcd0 	bl	800c684 <sqrtf>
 8008ce4:	6068      	str	r0, [r5, #4]
 8008ce6:	6921      	ldr	r1, [r4, #16]
 8008ce8:	6967      	ldr	r7, [r4, #20]
 8008cea:	1c08      	adds	r0, r1, #0
 8008cec:	f7f8 f884 	bl	8000df8 <__aeabi_fmul>
 8008cf0:	1c39      	adds	r1, r7, #0
 8008cf2:	4683      	mov	fp, r0
 8008cf4:	1c38      	adds	r0, r7, #0
 8008cf6:	f7f8 f87f 	bl	8000df8 <__aeabi_fmul>
 8008cfa:	1c01      	adds	r1, r0, #0
 8008cfc:	4658      	mov	r0, fp
 8008cfe:	f7f7 fd15 	bl	800072c <__aeabi_fadd>
 8008d02:	2100      	movs	r1, #0
 8008d04:	1c07      	adds	r7, r0, #0
 8008d06:	f7f7 fbfd 	bl	8000504 <__aeabi_fcmpge>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d059      	beq.n	8008dc2 <arm_cmplx_mag_f32+0x162>
 8008d0e:	1c38      	adds	r0, r7, #0
 8008d10:	f003 fcb8 	bl	800c684 <sqrtf>
 8008d14:	60a8      	str	r0, [r5, #8]
 8008d16:	69a1      	ldr	r1, [r4, #24]
 8008d18:	69e7      	ldr	r7, [r4, #28]
 8008d1a:	1c08      	adds	r0, r1, #0
 8008d1c:	f7f8 f86c 	bl	8000df8 <__aeabi_fmul>
 8008d20:	1c39      	adds	r1, r7, #0
 8008d22:	4683      	mov	fp, r0
 8008d24:	1c38      	adds	r0, r7, #0
 8008d26:	f7f8 f867 	bl	8000df8 <__aeabi_fmul>
 8008d2a:	1c01      	adds	r1, r0, #0
 8008d2c:	4658      	mov	r0, fp
 8008d2e:	f7f7 fcfd 	bl	800072c <__aeabi_fadd>
 8008d32:	2100      	movs	r1, #0
 8008d34:	1c07      	adds	r7, r0, #0
 8008d36:	f7f7 fbe5 	bl	8000504 <__aeabi_fcmpge>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d03e      	beq.n	8008dbc <arm_cmplx_mag_f32+0x15c>
 8008d3e:	1c38      	adds	r0, r7, #0
 8008d40:	f003 fca0 	bl	800c684 <sqrtf>
 8008d44:	60e8      	str	r0, [r5, #12]
 8008d46:	3e01      	subs	r6, #1
 8008d48:	3420      	adds	r4, #32
 8008d4a:	3510      	adds	r5, #16
 8008d4c:	2e00      	cmp	r6, #0
 8008d4e:	d198      	bne.n	8008c82 <arm_cmplx_mag_f32+0x22>
 8008d50:	4653      	mov	r3, sl
 8008d52:	015b      	lsls	r3, r3, #5
 8008d54:	4498      	add	r8, r3
 8008d56:	4653      	mov	r3, sl
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	4499      	add	r9, r3
 8008d5c:	2503      	movs	r5, #3
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	401d      	ands	r5, r3
 8008d62:	d021      	beq.n	8008da8 <arm_cmplx_mag_f32+0x148>
 8008d64:	2300      	movs	r3, #0
 8008d66:	4644      	mov	r4, r8
 8008d68:	464f      	mov	r7, r9
 8008d6a:	4699      	mov	r9, r3
 8008d6c:	00ed      	lsls	r5, r5, #3
 8008d6e:	1965      	adds	r5, r4, r5
 8008d70:	6821      	ldr	r1, [r4, #0]
 8008d72:	6866      	ldr	r6, [r4, #4]
 8008d74:	1c08      	adds	r0, r1, #0
 8008d76:	f7f8 f83f 	bl	8000df8 <__aeabi_fmul>
 8008d7a:	1c31      	adds	r1, r6, #0
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	1c30      	adds	r0, r6, #0
 8008d80:	f7f8 f83a 	bl	8000df8 <__aeabi_fmul>
 8008d84:	1c01      	adds	r1, r0, #0
 8008d86:	4640      	mov	r0, r8
 8008d88:	f7f7 fcd0 	bl	800072c <__aeabi_fadd>
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	1c06      	adds	r6, r0, #0
 8008d90:	f7f7 fbb8 	bl	8000504 <__aeabi_fcmpge>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d01a      	beq.n	8008dce <arm_cmplx_mag_f32+0x16e>
 8008d98:	1c30      	adds	r0, r6, #0
 8008d9a:	f003 fc73 	bl	800c684 <sqrtf>
 8008d9e:	6038      	str	r0, [r7, #0]
 8008da0:	3408      	adds	r4, #8
 8008da2:	3704      	adds	r7, #4
 8008da4:	42a5      	cmp	r5, r4
 8008da6:	d1e3      	bne.n	8008d70 <arm_cmplx_mag_f32+0x110>
 8008da8:	b003      	add	sp, #12
 8008daa:	bc3c      	pop	{r2, r3, r4, r5}
 8008dac:	4690      	mov	r8, r2
 8008dae:	4699      	mov	r9, r3
 8008db0:	46a2      	mov	sl, r4
 8008db2:	46ab      	mov	fp, r5
 8008db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db6:	2300      	movs	r3, #0
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	e77b      	b.n	8008cb4 <arm_cmplx_mag_f32+0x54>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60eb      	str	r3, [r5, #12]
 8008dc0:	e7c1      	b.n	8008d46 <arm_cmplx_mag_f32+0xe6>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60ab      	str	r3, [r5, #8]
 8008dc6:	e7a6      	b.n	8008d16 <arm_cmplx_mag_f32+0xb6>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	606b      	str	r3, [r5, #4]
 8008dcc:	e78b      	b.n	8008ce6 <arm_cmplx_mag_f32+0x86>
 8008dce:	464b      	mov	r3, r9
 8008dd0:	603b      	str	r3, [r7, #0]
 8008dd2:	e7e5      	b.n	8008da0 <arm_cmplx_mag_f32+0x140>

08008dd4 <arm_radix8_butterfly_f32>:
 8008dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dd6:	46de      	mov	lr, fp
 8008dd8:	4657      	mov	r7, sl
 8008dda:	464e      	mov	r6, r9
 8008ddc:	4645      	mov	r5, r8
 8008dde:	b5e0      	push	{r5, r6, r7, lr}
 8008de0:	b0b5      	sub	sp, #212	; 0xd4
 8008de2:	9331      	str	r3, [sp, #196]	; 0xc4
 8008de4:	0003      	movs	r3, r0
 8008de6:	3304      	adds	r3, #4
 8008de8:	9305      	str	r3, [sp, #20]
 8008dea:	0013      	movs	r3, r2
 8008dec:	9118      	str	r1, [sp, #96]	; 0x60
 8008dee:	3304      	adds	r3, #4
 8008df0:	9333      	str	r3, [sp, #204]	; 0xcc
 8008df2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008df4:	9002      	str	r0, [sp, #8]
 8008df6:	911a      	str	r1, [sp, #104]	; 0x68
 8008df8:	9232      	str	r2, [sp, #200]	; 0xc8
 8008dfa:	08da      	lsrs	r2, r3, #3
 8008dfc:	4694      	mov	ip, r2
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	9319      	str	r3, [sp, #100]	; 0x64
 8008e02:	0053      	lsls	r3, r2, #1
 8008e04:	4463      	add	r3, ip
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	469c      	mov	ip, r3
 8008e0a:	9902      	ldr	r1, [sp, #8]
 8008e0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e0e:	4461      	add	r1, ip
 8008e10:	000b      	movs	r3, r1
 8008e12:	9100      	str	r1, [sp, #0]
 8008e14:	0151      	lsls	r1, r2, #5
 8008e16:	468b      	mov	fp, r1
 8008e18:	445b      	add	r3, fp
 8008e1a:	4698      	mov	r8, r3
 8008e1c:	0093      	lsls	r3, r2, #2
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	0018      	movs	r0, r3
 8008e24:	00d1      	lsls	r1, r2, #3
 8008e26:	4440      	add	r0, r8
 8008e28:	0113      	lsls	r3, r2, #4
 8008e2a:	4684      	mov	ip, r0
 8008e2c:	9315      	str	r3, [sp, #84]	; 0x54
 8008e2e:	000b      	movs	r3, r1
 8008e30:	4463      	add	r3, ip
 8008e32:	9014      	str	r0, [sp, #80]	; 0x50
 8008e34:	0018      	movs	r0, r3
 8008e36:	468c      	mov	ip, r1
 8008e38:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e3a:	424b      	negs	r3, r1
 8008e3c:	9230      	str	r2, [sp, #192]	; 0xc0
 8008e3e:	18c2      	adds	r2, r0, r3
 8008e40:	1d10      	adds	r0, r2, #4
 8008e42:	4462      	add	r2, ip
 8008e44:	4694      	mov	ip, r2
 8008e46:	2600      	movs	r6, #0
 8008e48:	4463      	add	r3, ip
 8008e4a:	9308      	str	r3, [sp, #32]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e50:	2300      	movs	r3, #0
 8008e52:	46da      	mov	sl, fp
 8008e54:	46b3      	mov	fp, r6
 8008e56:	9116      	str	r1, [sp, #88]	; 0x58
 8008e58:	1d11      	adds	r1, r2, #4
 8008e5a:	9012      	str	r0, [sp, #72]	; 0x48
 8008e5c:	920a      	str	r2, [sp, #40]	; 0x28
 8008e5e:	9101      	str	r1, [sp, #4]
 8008e60:	9309      	str	r3, [sp, #36]	; 0x24
 8008e62:	465b      	mov	r3, fp
 8008e64:	9d02      	ldr	r5, [sp, #8]
 8008e66:	58ec      	ldr	r4, [r5, r3]
 8008e68:	4653      	mov	r3, sl
 8008e6a:	58ed      	ldr	r5, [r5, r3]
 8008e6c:	1c20      	adds	r0, r4, #0
 8008e6e:	1c29      	adds	r1, r5, #0
 8008e70:	f7f7 fc5c 	bl	800072c <__aeabi_fadd>
 8008e74:	1c29      	adds	r1, r5, #0
 8008e76:	1c06      	adds	r6, r0, #0
 8008e78:	1c20      	adds	r0, r4, #0
 8008e7a:	f7f8 f8d7 	bl	800102c <__aeabi_fsub>
 8008e7e:	465a      	mov	r2, fp
 8008e80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e82:	900c      	str	r0, [sp, #48]	; 0x30
 8008e84:	589d      	ldr	r5, [r3, r2]
 8008e86:	4652      	mov	r2, sl
 8008e88:	589f      	ldr	r7, [r3, r2]
 8008e8a:	1c28      	adds	r0, r5, #0
 8008e8c:	1c39      	adds	r1, r7, #0
 8008e8e:	f7f7 fc4d 	bl	800072c <__aeabi_fadd>
 8008e92:	1c39      	adds	r1, r7, #0
 8008e94:	1c04      	adds	r4, r0, #0
 8008e96:	1c28      	adds	r0, r5, #0
 8008e98:	f7f8 f8c8 	bl	800102c <__aeabi_fsub>
 8008e9c:	465a      	mov	r2, fp
 8008e9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ea0:	900d      	str	r0, [sp, #52]	; 0x34
 8008ea2:	589d      	ldr	r5, [r3, r2]
 8008ea4:	4652      	mov	r2, sl
 8008ea6:	589f      	ldr	r7, [r3, r2]
 8008ea8:	1c28      	adds	r0, r5, #0
 8008eaa:	1c39      	adds	r1, r7, #0
 8008eac:	f7f7 fc3e 	bl	800072c <__aeabi_fadd>
 8008eb0:	1c39      	adds	r1, r7, #0
 8008eb2:	9003      	str	r0, [sp, #12]
 8008eb4:	1c28      	adds	r0, r5, #0
 8008eb6:	f7f8 f8b9 	bl	800102c <__aeabi_fsub>
 8008eba:	4642      	mov	r2, r8
 8008ebc:	9b00      	ldr	r3, [sp, #0]
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	681f      	ldr	r7, [r3, #0]
 8008ec2:	1c11      	adds	r1, r2, #0
 8008ec4:	900e      	str	r0, [sp, #56]	; 0x38
 8008ec6:	1c38      	adds	r0, r7, #0
 8008ec8:	4691      	mov	r9, r2
 8008eca:	f7f7 fc2f 	bl	800072c <__aeabi_fadd>
 8008ece:	4649      	mov	r1, r9
 8008ed0:	1c05      	adds	r5, r0, #0
 8008ed2:	1c38      	adds	r0, r7, #0
 8008ed4:	f7f8 f8aa 	bl	800102c <__aeabi_fsub>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	900f      	str	r0, [sp, #60]	; 0x3c
 8008edc:	1c19      	adds	r1, r3, #0
 8008ede:	1c30      	adds	r0, r6, #0
 8008ee0:	4699      	mov	r9, r3
 8008ee2:	f7f8 f8a3 	bl	800102c <__aeabi_fsub>
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	1c07      	adds	r7, r0, #0
 8008eea:	1c30      	adds	r0, r6, #0
 8008eec:	f7f7 fc1e 	bl	800072c <__aeabi_fadd>
 8008ef0:	1c29      	adds	r1, r5, #0
 8008ef2:	1c06      	adds	r6, r0, #0
 8008ef4:	1c20      	adds	r0, r4, #0
 8008ef6:	f7f8 f899 	bl	800102c <__aeabi_fsub>
 8008efa:	1c29      	adds	r1, r5, #0
 8008efc:	9010      	str	r0, [sp, #64]	; 0x40
 8008efe:	1c20      	adds	r0, r4, #0
 8008f00:	f7f7 fc14 	bl	800072c <__aeabi_fadd>
 8008f04:	1c04      	adds	r4, r0, #0
 8008f06:	1c01      	adds	r1, r0, #0
 8008f08:	1c30      	adds	r0, r6, #0
 8008f0a:	f7f7 fc0f 	bl	800072c <__aeabi_fadd>
 8008f0e:	465a      	mov	r2, fp
 8008f10:	9d02      	ldr	r5, [sp, #8]
 8008f12:	1c21      	adds	r1, r4, #0
 8008f14:	50a8      	str	r0, [r5, r2]
 8008f16:	1c30      	adds	r0, r6, #0
 8008f18:	f7f8 f888 	bl	800102c <__aeabi_fsub>
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	4659      	mov	r1, fp
 8008f20:	50a8      	str	r0, [r5, r2]
 8008f22:	9a05      	ldr	r2, [sp, #20]
 8008f24:	4656      	mov	r6, sl
 8008f26:	5854      	ldr	r4, [r2, r1]
 8008f28:	4651      	mov	r1, sl
 8008f2a:	5855      	ldr	r5, [r2, r1]
 8008f2c:	1c20      	adds	r0, r4, #0
 8008f2e:	1c29      	adds	r1, r5, #0
 8008f30:	f7f7 fbfc 	bl	800072c <__aeabi_fadd>
 8008f34:	1c29      	adds	r1, r5, #0
 8008f36:	9003      	str	r0, [sp, #12]
 8008f38:	4655      	mov	r5, sl
 8008f3a:	1c20      	adds	r0, r4, #0
 8008f3c:	465c      	mov	r4, fp
 8008f3e:	f7f8 f875 	bl	800102c <__aeabi_fsub>
 8008f42:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008f44:	9011      	str	r0, [sp, #68]	; 0x44
 8008f46:	590c      	ldr	r4, [r1, r4]
 8008f48:	594d      	ldr	r5, [r1, r5]
 8008f4a:	1c20      	adds	r0, r4, #0
 8008f4c:	1c29      	adds	r1, r5, #0
 8008f4e:	f7f7 fbed 	bl	800072c <__aeabi_fadd>
 8008f52:	1c29      	adds	r1, r5, #0
 8008f54:	465d      	mov	r5, fp
 8008f56:	9004      	str	r0, [sp, #16]
 8008f58:	1c20      	adds	r0, r4, #0
 8008f5a:	f7f8 f867 	bl	800102c <__aeabi_fsub>
 8008f5e:	9901      	ldr	r1, [sp, #4]
 8008f60:	1c04      	adds	r4, r0, #0
 8008f62:	594d      	ldr	r5, [r1, r5]
 8008f64:	598e      	ldr	r6, [r1, r6]
 8008f66:	1c28      	adds	r0, r5, #0
 8008f68:	1c31      	adds	r1, r6, #0
 8008f6a:	f7f7 fbdf 	bl	800072c <__aeabi_fadd>
 8008f6e:	1c31      	adds	r1, r6, #0
 8008f70:	4646      	mov	r6, r8
 8008f72:	4681      	mov	r9, r0
 8008f74:	1c28      	adds	r0, r5, #0
 8008f76:	f7f8 f859 	bl	800102c <__aeabi_fsub>
 8008f7a:	9b00      	ldr	r3, [sp, #0]
 8008f7c:	6876      	ldr	r6, [r6, #4]
 8008f7e:	685d      	ldr	r5, [r3, #4]
 8008f80:	1c31      	adds	r1, r6, #0
 8008f82:	9006      	str	r0, [sp, #24]
 8008f84:	1c28      	adds	r0, r5, #0
 8008f86:	f7f7 fbd1 	bl	800072c <__aeabi_fadd>
 8008f8a:	1c31      	adds	r1, r6, #0
 8008f8c:	9007      	str	r0, [sp, #28]
 8008f8e:	1c28      	adds	r0, r5, #0
 8008f90:	f7f8 f84c 	bl	800102c <__aeabi_fsub>
 8008f94:	4649      	mov	r1, r9
 8008f96:	1c06      	adds	r6, r0, #0
 8008f98:	9803      	ldr	r0, [sp, #12]
 8008f9a:	f7f8 f847 	bl	800102c <__aeabi_fsub>
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	1c05      	adds	r5, r0, #0
 8008fa2:	9803      	ldr	r0, [sp, #12]
 8008fa4:	f7f7 fbc2 	bl	800072c <__aeabi_fadd>
 8008fa8:	9907      	ldr	r1, [sp, #28]
 8008faa:	4681      	mov	r9, r0
 8008fac:	9804      	ldr	r0, [sp, #16]
 8008fae:	f7f8 f83d 	bl	800102c <__aeabi_fsub>
 8008fb2:	9907      	ldr	r1, [sp, #28]
 8008fb4:	9003      	str	r0, [sp, #12]
 8008fb6:	9804      	ldr	r0, [sp, #16]
 8008fb8:	f7f7 fbb8 	bl	800072c <__aeabi_fadd>
 8008fbc:	1c01      	adds	r1, r0, #0
 8008fbe:	9004      	str	r0, [sp, #16]
 8008fc0:	4648      	mov	r0, r9
 8008fc2:	f7f7 fbb3 	bl	800072c <__aeabi_fadd>
 8008fc6:	465b      	mov	r3, fp
 8008fc8:	9a05      	ldr	r2, [sp, #20]
 8008fca:	9904      	ldr	r1, [sp, #16]
 8008fcc:	50d0      	str	r0, [r2, r3]
 8008fce:	4648      	mov	r0, r9
 8008fd0:	f7f8 f82c 	bl	800102c <__aeabi_fsub>
 8008fd4:	4651      	mov	r1, sl
 8008fd6:	9a05      	ldr	r2, [sp, #20]
 8008fd8:	5050      	str	r0, [r2, r1]
 8008fda:	9b03      	ldr	r3, [sp, #12]
 8008fdc:	1c38      	adds	r0, r7, #0
 8008fde:	1c19      	adds	r1, r3, #0
 8008fe0:	4699      	mov	r9, r3
 8008fe2:	f7f7 fba3 	bl	800072c <__aeabi_fadd>
 8008fe6:	465b      	mov	r3, fp
 8008fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fea:	4649      	mov	r1, r9
 8008fec:	50d0      	str	r0, [r2, r3]
 8008fee:	1c38      	adds	r0, r7, #0
 8008ff0:	f7f8 f81c 	bl	800102c <__aeabi_fsub>
 8008ff4:	4657      	mov	r7, sl
 8008ff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ffa:	1c19      	adds	r1, r3, #0
 8008ffc:	51d0      	str	r0, [r2, r7]
 8008ffe:	1c28      	adds	r0, r5, #0
 8009000:	4699      	mov	r9, r3
 8009002:	f7f8 f813 	bl	800102c <__aeabi_fsub>
 8009006:	465a      	mov	r2, fp
 8009008:	9f01      	ldr	r7, [sp, #4]
 800900a:	1c29      	adds	r1, r5, #0
 800900c:	50b8      	str	r0, [r7, r2]
 800900e:	4648      	mov	r0, r9
 8009010:	f7f7 fb8c 	bl	800072c <__aeabi_fadd>
 8009014:	4652      	mov	r2, sl
 8009016:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009018:	50b8      	str	r0, [r7, r2]
 800901a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800901c:	1c28      	adds	r0, r5, #0
 800901e:	1c39      	adds	r1, r7, #0
 8009020:	f7f8 f804 	bl	800102c <__aeabi_fsub>
 8009024:	497e      	ldr	r1, [pc, #504]	; (8009220 <arm_radix8_butterfly_f32+0x44c>)
 8009026:	f7f7 fee7 	bl	8000df8 <__aeabi_fmul>
 800902a:	1c39      	adds	r1, r7, #0
 800902c:	4681      	mov	r9, r0
 800902e:	1c28      	adds	r0, r5, #0
 8009030:	f7f7 fb7c 	bl	800072c <__aeabi_fadd>
 8009034:	497a      	ldr	r1, [pc, #488]	; (8009220 <arm_radix8_butterfly_f32+0x44c>)
 8009036:	f7f7 fedf 	bl	8000df8 <__aeabi_fmul>
 800903a:	1c31      	adds	r1, r6, #0
 800903c:	1c05      	adds	r5, r0, #0
 800903e:	1c20      	adds	r0, r4, #0
 8009040:	f7f7 fff4 	bl	800102c <__aeabi_fsub>
 8009044:	4976      	ldr	r1, [pc, #472]	; (8009220 <arm_radix8_butterfly_f32+0x44c>)
 8009046:	f7f7 fed7 	bl	8000df8 <__aeabi_fmul>
 800904a:	1c31      	adds	r1, r6, #0
 800904c:	1c07      	adds	r7, r0, #0
 800904e:	1c20      	adds	r0, r4, #0
 8009050:	f7f7 fb6c 	bl	800072c <__aeabi_fadd>
 8009054:	4972      	ldr	r1, [pc, #456]	; (8009220 <arm_radix8_butterfly_f32+0x44c>)
 8009056:	f7f7 fecf 	bl	8000df8 <__aeabi_fmul>
 800905a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800905c:	4649      	mov	r1, r9
 800905e:	9003      	str	r0, [sp, #12]
 8009060:	1c20      	adds	r0, r4, #0
 8009062:	f7f7 ffe3 	bl	800102c <__aeabi_fsub>
 8009066:	4649      	mov	r1, r9
 8009068:	9004      	str	r0, [sp, #16]
 800906a:	1c20      	adds	r0, r4, #0
 800906c:	f7f7 fb5e 	bl	800072c <__aeabi_fadd>
 8009070:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009072:	1c29      	adds	r1, r5, #0
 8009074:	9007      	str	r0, [sp, #28]
 8009076:	1c30      	adds	r0, r6, #0
 8009078:	f7f7 ffd8 	bl	800102c <__aeabi_fsub>
 800907c:	1c29      	adds	r1, r5, #0
 800907e:	1c04      	adds	r4, r0, #0
 8009080:	1c30      	adds	r0, r6, #0
 8009082:	f7f7 fb53 	bl	800072c <__aeabi_fadd>
 8009086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009088:	1c06      	adds	r6, r0, #0
 800908a:	1c39      	adds	r1, r7, #0
 800908c:	1c18      	adds	r0, r3, #0
 800908e:	4699      	mov	r9, r3
 8009090:	f7f7 ffcc 	bl	800102c <__aeabi_fsub>
 8009094:	1c39      	adds	r1, r7, #0
 8009096:	1c05      	adds	r5, r0, #0
 8009098:	4648      	mov	r0, r9
 800909a:	f7f7 fb47 	bl	800072c <__aeabi_fadd>
 800909e:	9903      	ldr	r1, [sp, #12]
 80090a0:	1c07      	adds	r7, r0, #0
 80090a2:	9806      	ldr	r0, [sp, #24]
 80090a4:	f7f7 ffc2 	bl	800102c <__aeabi_fsub>
 80090a8:	9903      	ldr	r1, [sp, #12]
 80090aa:	4681      	mov	r9, r0
 80090ac:	9806      	ldr	r0, [sp, #24]
 80090ae:	f7f7 fb3d 	bl	800072c <__aeabi_fadd>
 80090b2:	1c01      	adds	r1, r0, #0
 80090b4:	9003      	str	r0, [sp, #12]
 80090b6:	9807      	ldr	r0, [sp, #28]
 80090b8:	f7f7 fb38 	bl	800072c <__aeabi_fadd>
 80090bc:	4659      	mov	r1, fp
 80090be:	9a08      	ldr	r2, [sp, #32]
 80090c0:	5050      	str	r0, [r2, r1]
 80090c2:	9903      	ldr	r1, [sp, #12]
 80090c4:	9807      	ldr	r0, [sp, #28]
 80090c6:	f7f7 ffb1 	bl	800102c <__aeabi_fsub>
 80090ca:	4641      	mov	r1, r8
 80090cc:	6008      	str	r0, [r1, #0]
 80090ce:	4649      	mov	r1, r9
 80090d0:	9804      	ldr	r0, [sp, #16]
 80090d2:	f7f7 fb2b 	bl	800072c <__aeabi_fadd>
 80090d6:	4651      	mov	r1, sl
 80090d8:	9a08      	ldr	r2, [sp, #32]
 80090da:	5050      	str	r0, [r2, r1]
 80090dc:	4649      	mov	r1, r9
 80090de:	9804      	ldr	r0, [sp, #16]
 80090e0:	f7f7 ffa4 	bl	800102c <__aeabi_fsub>
 80090e4:	9b00      	ldr	r3, [sp, #0]
 80090e6:	1c31      	adds	r1, r6, #0
 80090e8:	6018      	str	r0, [r3, #0]
 80090ea:	1c38      	adds	r0, r7, #0
 80090ec:	f7f7 ff9e 	bl	800102c <__aeabi_fsub>
 80090f0:	4659      	mov	r1, fp
 80090f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090f4:	5050      	str	r0, [r2, r1]
 80090f6:	1c39      	adds	r1, r7, #0
 80090f8:	1c30      	adds	r0, r6, #0
 80090fa:	f7f7 fb17 	bl	800072c <__aeabi_fadd>
 80090fe:	4641      	mov	r1, r8
 8009100:	6048      	str	r0, [r1, #4]
 8009102:	1c21      	adds	r1, r4, #0
 8009104:	1c28      	adds	r0, r5, #0
 8009106:	f7f7 ff91 	bl	800102c <__aeabi_fsub>
 800910a:	4651      	mov	r1, sl
 800910c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800910e:	5050      	str	r0, [r2, r1]
 8009110:	1c29      	adds	r1, r5, #0
 8009112:	1c20      	adds	r0, r4, #0
 8009114:	f7f7 fb0a 	bl	800072c <__aeabi_fadd>
 8009118:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800911a:	9b00      	ldr	r3, [sp, #0]
 800911c:	4694      	mov	ip, r2
 800911e:	6058      	str	r0, [r3, #4]
 8009120:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009122:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009124:	4460      	add	r0, ip
 8009126:	4694      	mov	ip, r2
 8009128:	4463      	add	r3, ip
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800912e:	9009      	str	r0, [sp, #36]	; 0x24
 8009130:	44e0      	add	r8, ip
 8009132:	44e3      	add	fp, ip
 8009134:	44e2      	add	sl, ip
 8009136:	4283      	cmp	r3, r0
 8009138:	d900      	bls.n	800913c <arm_radix8_butterfly_f32+0x368>
 800913a:	e692      	b.n	8008e62 <arm_radix8_butterfly_f32+0x8e>
 800913c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800913e:	2807      	cmp	r0, #7
 8009140:	d800      	bhi.n	8009144 <arm_radix8_butterfly_f32+0x370>
 8009142:	e2df      	b.n	8009704 <arm_radix8_butterfly_f32+0x930>
 8009144:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009146:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009148:	3308      	adds	r3, #8
 800914a:	932e      	str	r3, [sp, #184]	; 0xb8
 800914c:	000b      	movs	r3, r1
 800914e:	3308      	adds	r3, #8
 8009150:	932d      	str	r3, [sp, #180]	; 0xb4
 8009152:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009154:	001a      	movs	r2, r3
 8009156:	469c      	mov	ip, r3
 8009158:	3208      	adds	r2, #8
 800915a:	922c      	str	r2, [sp, #176]	; 0xb0
 800915c:	9a08      	ldr	r2, [sp, #32]
 800915e:	4462      	add	r2, ip
 8009160:	468c      	mov	ip, r1
 8009162:	1d13      	adds	r3, r2, #4
 8009164:	9311      	str	r3, [sp, #68]	; 0x44
 8009166:	0103      	lsls	r3, r0, #4
 8009168:	425b      	negs	r3, r3
 800916a:	9206      	str	r2, [sp, #24]
 800916c:	18d2      	adds	r2, r2, r3
 800916e:	1d10      	adds	r0, r2, #4
 8009170:	4462      	add	r2, ip
 8009172:	9029      	str	r0, [sp, #164]	; 0xa4
 8009174:	1d10      	adds	r0, r2, #4
 8009176:	18d2      	adds	r2, r2, r3
 8009178:	9028      	str	r0, [sp, #160]	; 0xa0
 800917a:	1d10      	adds	r0, r2, #4
 800917c:	4462      	add	r2, ip
 800917e:	9026      	str	r0, [sp, #152]	; 0x98
 8009180:	9225      	str	r2, [sp, #148]	; 0x94
 8009182:	1d10      	adds	r0, r2, #4
 8009184:	18d2      	adds	r2, r2, r3
 8009186:	4494      	add	ip, r2
 8009188:	3304      	adds	r3, #4
 800918a:	4463      	add	r3, ip
 800918c:	9327      	str	r3, [sp, #156]	; 0x9c
 800918e:	2301      	movs	r3, #1
 8009190:	9010      	str	r0, [sp, #64]	; 0x40
 8009192:	1d10      	adds	r0, r2, #4
 8009194:	4662      	mov	r2, ip
 8009196:	932b      	str	r3, [sp, #172]	; 0xac
 8009198:	2300      	movs	r3, #0
 800919a:	1d11      	adds	r1, r2, #4
 800919c:	902a      	str	r0, [sp, #168]	; 0xa8
 800919e:	9208      	str	r2, [sp, #32]
 80091a0:	9107      	str	r1, [sp, #28]
 80091a2:	932f      	str	r3, [sp, #188]	; 0xbc
 80091a4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80091a6:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80091a8:	469c      	mov	ip, r3
 80091aa:	4461      	add	r1, ip
 80091ac:	468c      	mov	ip, r1
 80091ae:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 80091b0:	00c8      	lsls	r0, r1, #3
 80091b2:	5823      	ldr	r3, [r4, r0]
 80091b4:	010e      	lsls	r6, r1, #4
 80091b6:	0027      	movs	r7, r4
 80091b8:	930c      	str	r3, [sp, #48]	; 0x30
 80091ba:	59a3      	ldr	r3, [r4, r6]
 80091bc:	912f      	str	r1, [sp, #188]	; 0xbc
 80091be:	931b      	str	r3, [sp, #108]	; 0x6c
 80091c0:	004b      	lsls	r3, r1, #1
 80091c2:	4463      	add	r3, ip
 80091c4:	00dd      	lsls	r5, r3, #3
 80091c6:	5962      	ldr	r2, [r4, r5]
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	921c      	str	r2, [sp, #112]	; 0x70
 80091cc:	014a      	lsls	r2, r1, #5
 80091ce:	4690      	mov	r8, r2
 80091d0:	58a2      	ldr	r2, [r4, r2]
 80091d2:	920d      	str	r2, [sp, #52]	; 0x34
 80091d4:	008a      	lsls	r2, r1, #2
 80091d6:	4462      	add	r2, ip
 80091d8:	00d2      	lsls	r2, r2, #3
 80091da:	58a4      	ldr	r4, [r4, r2]
 80091dc:	1a41      	subs	r1, r0, r1
 80091de:	941d      	str	r4, [sp, #116]	; 0x74
 80091e0:	58fc      	ldr	r4, [r7, r3]
 80091e2:	00c9      	lsls	r1, r1, #3
 80091e4:	941e      	str	r4, [sp, #120]	; 0x78
 80091e6:	587c      	ldr	r4, [r7, r1]
 80091e8:	9f33      	ldr	r7, [sp, #204]	; 0xcc
 80091ea:	940e      	str	r4, [sp, #56]	; 0x38
 80091ec:	59bc      	ldr	r4, [r7, r6]
 80091ee:	58fb      	ldr	r3, [r7, r3]
 80091f0:	941f      	str	r4, [sp, #124]	; 0x7c
 80091f2:	597c      	ldr	r4, [r7, r5]
 80091f4:	58ba      	ldr	r2, [r7, r2]
 80091f6:	9420      	str	r4, [sp, #128]	; 0x80
 80091f8:	4644      	mov	r4, r8
 80091fa:	5838      	ldr	r0, [r7, r0]
 80091fc:	593c      	ldr	r4, [r7, r4]
 80091fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8009200:	587b      	ldr	r3, [r7, r1]
 8009202:	9222      	str	r2, [sp, #136]	; 0x88
 8009204:	900f      	str	r0, [sp, #60]	; 0x3c
 8009206:	9421      	str	r4, [sp, #132]	; 0x84
 8009208:	9324      	str	r3, [sp, #144]	; 0x90
 800920a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800920c:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 800920e:	00da      	lsls	r2, r3, #3
 8009210:	9200      	str	r2, [sp, #0]
 8009212:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009214:	930b      	str	r3, [sp, #44]	; 0x2c
 8009216:	9204      	str	r2, [sp, #16]
 8009218:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800921a:	9601      	str	r6, [sp, #4]
 800921c:	9203      	str	r2, [sp, #12]
 800921e:	e001      	b.n	8009224 <arm_radix8_butterfly_f32+0x450>
 8009220:	3f3504f3 	.word	0x3f3504f3
 8009224:	9b02      	ldr	r3, [sp, #8]
 8009226:	9f00      	ldr	r7, [sp, #0]
 8009228:	9906      	ldr	r1, [sp, #24]
 800922a:	59dd      	ldr	r5, [r3, r7]
 800922c:	59ce      	ldr	r6, [r1, r7]
 800922e:	1c28      	adds	r0, r5, #0
 8009230:	1c31      	adds	r1, r6, #0
 8009232:	f7f7 fa7b 	bl	800072c <__aeabi_fadd>
 8009236:	1c31      	adds	r1, r6, #0
 8009238:	1c04      	adds	r4, r0, #0
 800923a:	1c28      	adds	r0, r5, #0
 800923c:	f7f7 fef6 	bl	800102c <__aeabi_fsub>
 8009240:	9a02      	ldr	r2, [sp, #8]
 8009242:	9e01      	ldr	r6, [sp, #4]
 8009244:	9906      	ldr	r1, [sp, #24]
 8009246:	5995      	ldr	r5, [r2, r6]
 8009248:	598f      	ldr	r7, [r1, r6]
 800924a:	9012      	str	r0, [sp, #72]	; 0x48
 800924c:	1c39      	adds	r1, r7, #0
 800924e:	1c28      	adds	r0, r5, #0
 8009250:	f7f7 fa6c 	bl	800072c <__aeabi_fadd>
 8009254:	1c39      	adds	r1, r7, #0
 8009256:	1c06      	adds	r6, r0, #0
 8009258:	1c28      	adds	r0, r5, #0
 800925a:	f7f7 fee7 	bl	800102c <__aeabi_fsub>
 800925e:	9a02      	ldr	r2, [sp, #8]
 8009260:	9b06      	ldr	r3, [sp, #24]
 8009262:	9903      	ldr	r1, [sp, #12]
 8009264:	9013      	str	r0, [sp, #76]	; 0x4c
 8009266:	5855      	ldr	r5, [r2, r1]
 8009268:	585f      	ldr	r7, [r3, r1]
 800926a:	1c28      	adds	r0, r5, #0
 800926c:	1c39      	adds	r1, r7, #0
 800926e:	f7f7 fa5d 	bl	800072c <__aeabi_fadd>
 8009272:	1c39      	adds	r1, r7, #0
 8009274:	4680      	mov	r8, r0
 8009276:	1c28      	adds	r0, r5, #0
 8009278:	f7f7 fed8 	bl	800102c <__aeabi_fsub>
 800927c:	9b04      	ldr	r3, [sp, #16]
 800927e:	9a02      	ldr	r2, [sp, #8]
 8009280:	9906      	ldr	r1, [sp, #24]
 8009282:	58d5      	ldr	r5, [r2, r3]
 8009284:	58ca      	ldr	r2, [r1, r3]
 8009286:	9014      	str	r0, [sp, #80]	; 0x50
 8009288:	1c11      	adds	r1, r2, #0
 800928a:	1c28      	adds	r0, r5, #0
 800928c:	4691      	mov	r9, r2
 800928e:	f7f7 fa4d 	bl	800072c <__aeabi_fadd>
 8009292:	4649      	mov	r1, r9
 8009294:	1c07      	adds	r7, r0, #0
 8009296:	1c28      	adds	r0, r5, #0
 8009298:	f7f7 fec8 	bl	800102c <__aeabi_fsub>
 800929c:	4641      	mov	r1, r8
 800929e:	9015      	str	r0, [sp, #84]	; 0x54
 80092a0:	1c20      	adds	r0, r4, #0
 80092a2:	f7f7 fec3 	bl	800102c <__aeabi_fsub>
 80092a6:	4641      	mov	r1, r8
 80092a8:	1c05      	adds	r5, r0, #0
 80092aa:	1c20      	adds	r0, r4, #0
 80092ac:	f7f7 fa3e 	bl	800072c <__aeabi_fadd>
 80092b0:	1c39      	adds	r1, r7, #0
 80092b2:	4680      	mov	r8, r0
 80092b4:	1c30      	adds	r0, r6, #0
 80092b6:	f7f7 feb9 	bl	800102c <__aeabi_fsub>
 80092ba:	1c39      	adds	r1, r7, #0
 80092bc:	1c04      	adds	r4, r0, #0
 80092be:	1c30      	adds	r0, r6, #0
 80092c0:	f7f7 fa34 	bl	800072c <__aeabi_fadd>
 80092c4:	1c06      	adds	r6, r0, #0
 80092c6:	1c01      	adds	r1, r0, #0
 80092c8:	4640      	mov	r0, r8
 80092ca:	f7f7 fa2f 	bl	800072c <__aeabi_fadd>
 80092ce:	9f00      	ldr	r7, [sp, #0]
 80092d0:	9a02      	ldr	r2, [sp, #8]
 80092d2:	1c31      	adds	r1, r6, #0
 80092d4:	51d0      	str	r0, [r2, r7]
 80092d6:	4640      	mov	r0, r8
 80092d8:	f7f7 fea8 	bl	800102c <__aeabi_fsub>
 80092dc:	003b      	movs	r3, r7
 80092de:	9a05      	ldr	r2, [sp, #20]
 80092e0:	9009      	str	r0, [sp, #36]	; 0x24
 80092e2:	59d6      	ldr	r6, [r2, r7]
 80092e4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80092e6:	1c30      	adds	r0, r6, #0
 80092e8:	58ff      	ldr	r7, [r7, r3]
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	1c39      	adds	r1, r7, #0
 80092ee:	f7f7 fa1d 	bl	800072c <__aeabi_fadd>
 80092f2:	1c39      	adds	r1, r7, #0
 80092f4:	4680      	mov	r8, r0
 80092f6:	1c30      	adds	r0, r6, #0
 80092f8:	f7f7 fe98 	bl	800102c <__aeabi_fsub>
 80092fc:	9e01      	ldr	r6, [sp, #4]
 80092fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009300:	9f05      	ldr	r7, [sp, #20]
 8009302:	9016      	str	r0, [sp, #88]	; 0x58
 8009304:	59bf      	ldr	r7, [r7, r6]
 8009306:	598e      	ldr	r6, [r1, r6]
 8009308:	1c38      	adds	r0, r7, #0
 800930a:	1c31      	adds	r1, r6, #0
 800930c:	f7f7 fa0e 	bl	800072c <__aeabi_fadd>
 8009310:	46b1      	mov	r9, r6
 8009312:	1c06      	adds	r6, r0, #0
 8009314:	4649      	mov	r1, r9
 8009316:	1c38      	adds	r0, r7, #0
 8009318:	f7f7 fe88 	bl	800102c <__aeabi_fsub>
 800931c:	9b00      	ldr	r3, [sp, #0]
 800931e:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8009320:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009322:	9903      	ldr	r1, [sp, #12]
 8009324:	58ff      	ldr	r7, [r7, r3]
 8009326:	5851      	ldr	r1, [r2, r1]
 8009328:	9017      	str	r0, [sp, #92]	; 0x5c
 800932a:	1c38      	adds	r0, r7, #0
 800932c:	468a      	mov	sl, r1
 800932e:	f7f7 f9fd 	bl	800072c <__aeabi_fadd>
 8009332:	4651      	mov	r1, sl
 8009334:	4681      	mov	r9, r0
 8009336:	1c38      	adds	r0, r7, #0
 8009338:	f7f7 fe78 	bl	800102c <__aeabi_fsub>
 800933c:	9f01      	ldr	r7, [sp, #4]
 800933e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009340:	900a      	str	r0, [sp, #40]	; 0x28
 8009342:	59c9      	ldr	r1, [r1, r7]
 8009344:	9f04      	ldr	r7, [sp, #16]
 8009346:	468a      	mov	sl, r1
 8009348:	9910      	ldr	r1, [sp, #64]	; 0x40
 800934a:	4650      	mov	r0, sl
 800934c:	59ca      	ldr	r2, [r1, r7]
 800934e:	1c11      	adds	r1, r2, #0
 8009350:	4693      	mov	fp, r2
 8009352:	f7f7 f9eb 	bl	800072c <__aeabi_fadd>
 8009356:	4659      	mov	r1, fp
 8009358:	1c07      	adds	r7, r0, #0
 800935a:	4650      	mov	r0, sl
 800935c:	f7f7 fe66 	bl	800102c <__aeabi_fsub>
 8009360:	4649      	mov	r1, r9
 8009362:	4683      	mov	fp, r0
 8009364:	4640      	mov	r0, r8
 8009366:	f7f7 fe61 	bl	800102c <__aeabi_fsub>
 800936a:	4649      	mov	r1, r9
 800936c:	4682      	mov	sl, r0
 800936e:	4640      	mov	r0, r8
 8009370:	f7f7 f9dc 	bl	800072c <__aeabi_fadd>
 8009374:	1c39      	adds	r1, r7, #0
 8009376:	4680      	mov	r8, r0
 8009378:	1c30      	adds	r0, r6, #0
 800937a:	f7f7 fe57 	bl	800102c <__aeabi_fsub>
 800937e:	1c39      	adds	r1, r7, #0
 8009380:	4681      	mov	r9, r0
 8009382:	1c30      	adds	r0, r6, #0
 8009384:	f7f7 f9d2 	bl	800072c <__aeabi_fadd>
 8009388:	4649      	mov	r1, r9
 800938a:	1c07      	adds	r7, r0, #0
 800938c:	1c28      	adds	r0, r5, #0
 800938e:	f7f7 f9cd 	bl	800072c <__aeabi_fadd>
 8009392:	4649      	mov	r1, r9
 8009394:	1c06      	adds	r6, r0, #0
 8009396:	1c28      	adds	r0, r5, #0
 8009398:	f7f7 fe48 	bl	800102c <__aeabi_fsub>
 800939c:	1c39      	adds	r1, r7, #0
 800939e:	1c05      	adds	r5, r0, #0
 80093a0:	4640      	mov	r0, r8
 80093a2:	f7f7 f9c3 	bl	800072c <__aeabi_fadd>
 80093a6:	9a05      	ldr	r2, [sp, #20]
 80093a8:	9b00      	ldr	r3, [sp, #0]
 80093aa:	1c39      	adds	r1, r7, #0
 80093ac:	50d0      	str	r0, [r2, r3]
 80093ae:	4640      	mov	r0, r8
 80093b0:	f7f7 fe3c 	bl	800102c <__aeabi_fsub>
 80093b4:	1c21      	adds	r1, r4, #0
 80093b6:	4680      	mov	r8, r0
 80093b8:	4650      	mov	r0, sl
 80093ba:	f7f7 fe37 	bl	800102c <__aeabi_fsub>
 80093be:	4651      	mov	r1, sl
 80093c0:	1c07      	adds	r7, r0, #0
 80093c2:	1c20      	adds	r0, r4, #0
 80093c4:	f7f7 f9b2 	bl	800072c <__aeabi_fadd>
 80093c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093ca:	1c04      	adds	r4, r0, #0
 80093cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80093ce:	f7f7 fd13 	bl	8000df8 <__aeabi_fmul>
 80093d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093d4:	4681      	mov	r9, r0
 80093d6:	4641      	mov	r1, r8
 80093d8:	1c18      	adds	r0, r3, #0
 80093da:	469a      	mov	sl, r3
 80093dc:	f7f7 fd0c 	bl	8000df8 <__aeabi_fmul>
 80093e0:	1c01      	adds	r1, r0, #0
 80093e2:	4648      	mov	r0, r9
 80093e4:	f7f7 f9a2 	bl	800072c <__aeabi_fadd>
 80093e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80093ea:	9b00      	ldr	r3, [sp, #0]
 80093ec:	4641      	mov	r1, r8
 80093ee:	50d0      	str	r0, [r2, r3]
 80093f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80093f2:	f7f7 fd01 	bl	8000df8 <__aeabi_fmul>
 80093f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093f8:	4680      	mov	r8, r0
 80093fa:	4650      	mov	r0, sl
 80093fc:	f7f7 fcfc 	bl	8000df8 <__aeabi_fmul>
 8009400:	1c01      	adds	r1, r0, #0
 8009402:	4640      	mov	r0, r8
 8009404:	f7f7 fe12 	bl	800102c <__aeabi_fsub>
 8009408:	9910      	ldr	r1, [sp, #64]	; 0x40
 800940a:	9b00      	ldr	r3, [sp, #0]
 800940c:	50c8      	str	r0, [r1, r3]
 800940e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009410:	1c31      	adds	r1, r6, #0
 8009412:	1c18      	adds	r0, r3, #0
 8009414:	469a      	mov	sl, r3
 8009416:	f7f7 fcef 	bl	8000df8 <__aeabi_fmul>
 800941a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800941c:	4680      	mov	r8, r0
 800941e:	1c39      	adds	r1, r7, #0
 8009420:	1c18      	adds	r0, r3, #0
 8009422:	4699      	mov	r9, r3
 8009424:	f7f7 fce8 	bl	8000df8 <__aeabi_fmul>
 8009428:	1c01      	adds	r1, r0, #0
 800942a:	4640      	mov	r0, r8
 800942c:	f7f7 f97e 	bl	800072c <__aeabi_fadd>
 8009430:	9a02      	ldr	r2, [sp, #8]
 8009432:	9903      	ldr	r1, [sp, #12]
 8009434:	5050      	str	r0, [r2, r1]
 8009436:	1c39      	adds	r1, r7, #0
 8009438:	4650      	mov	r0, sl
 800943a:	f7f7 fcdd 	bl	8000df8 <__aeabi_fmul>
 800943e:	1c31      	adds	r1, r6, #0
 8009440:	1c07      	adds	r7, r0, #0
 8009442:	4648      	mov	r0, r9
 8009444:	f7f7 fcd8 	bl	8000df8 <__aeabi_fmul>
 8009448:	1c01      	adds	r1, r0, #0
 800944a:	1c38      	adds	r0, r7, #0
 800944c:	f7f7 fdee 	bl	800102c <__aeabi_fsub>
 8009450:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	1c29      	adds	r1, r5, #0
 8009456:	50f0      	str	r0, [r6, r3]
 8009458:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800945a:	1c18      	adds	r0, r3, #0
 800945c:	4699      	mov	r9, r3
 800945e:	f7f7 fccb 	bl	8000df8 <__aeabi_fmul>
 8009462:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009464:	1c06      	adds	r6, r0, #0
 8009466:	1c21      	adds	r1, r4, #0
 8009468:	1c18      	adds	r0, r3, #0
 800946a:	4698      	mov	r8, r3
 800946c:	f7f7 fcc4 	bl	8000df8 <__aeabi_fmul>
 8009470:	1c01      	adds	r1, r0, #0
 8009472:	1c30      	adds	r0, r6, #0
 8009474:	f7f7 f95a 	bl	800072c <__aeabi_fadd>
 8009478:	9e03      	ldr	r6, [sp, #12]
 800947a:	9f08      	ldr	r7, [sp, #32]
 800947c:	1c21      	adds	r1, r4, #0
 800947e:	51b8      	str	r0, [r7, r6]
 8009480:	4648      	mov	r0, r9
 8009482:	f7f7 fcb9 	bl	8000df8 <__aeabi_fmul>
 8009486:	1c29      	adds	r1, r5, #0
 8009488:	1c04      	adds	r4, r0, #0
 800948a:	4640      	mov	r0, r8
 800948c:	f7f7 fcb4 	bl	8000df8 <__aeabi_fmul>
 8009490:	1c01      	adds	r1, r0, #0
 8009492:	1c20      	adds	r0, r4, #0
 8009494:	f7f7 fdca 	bl	800102c <__aeabi_fsub>
 8009498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800949a:	9c07      	ldr	r4, [sp, #28]
 800949c:	469a      	mov	sl, r3
 800949e:	1c19      	adds	r1, r3, #0
 80094a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094a2:	51a0      	str	r0, [r4, r6]
 80094a4:	1c18      	adds	r0, r3, #0
 80094a6:	4698      	mov	r8, r3
 80094a8:	9603      	str	r6, [sp, #12]
 80094aa:	f7f7 fdbf 	bl	800102c <__aeabi_fsub>
 80094ae:	4999      	ldr	r1, [pc, #612]	; (8009714 <arm_radix8_butterfly_f32+0x940>)
 80094b0:	f7f7 fca2 	bl	8000df8 <__aeabi_fmul>
 80094b4:	4651      	mov	r1, sl
 80094b6:	1c04      	adds	r4, r0, #0
 80094b8:	4640      	mov	r0, r8
 80094ba:	f7f7 f937 	bl	800072c <__aeabi_fadd>
 80094be:	4995      	ldr	r1, [pc, #596]	; (8009714 <arm_radix8_butterfly_f32+0x940>)
 80094c0:	f7f7 fc9a 	bl	8000df8 <__aeabi_fmul>
 80094c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094c6:	1c05      	adds	r5, r0, #0
 80094c8:	4659      	mov	r1, fp
 80094ca:	1c18      	adds	r0, r3, #0
 80094cc:	4698      	mov	r8, r3
 80094ce:	f7f7 fdad 	bl	800102c <__aeabi_fsub>
 80094d2:	4990      	ldr	r1, [pc, #576]	; (8009714 <arm_radix8_butterfly_f32+0x940>)
 80094d4:	f7f7 fc90 	bl	8000df8 <__aeabi_fmul>
 80094d8:	4659      	mov	r1, fp
 80094da:	1c07      	adds	r7, r0, #0
 80094dc:	4640      	mov	r0, r8
 80094de:	f7f7 f925 	bl	800072c <__aeabi_fadd>
 80094e2:	498c      	ldr	r1, [pc, #560]	; (8009714 <arm_radix8_butterfly_f32+0x940>)
 80094e4:	f7f7 fc88 	bl	8000df8 <__aeabi_fmul>
 80094e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094ea:	4683      	mov	fp, r0
 80094ec:	1c21      	adds	r1, r4, #0
 80094ee:	1c18      	adds	r0, r3, #0
 80094f0:	469a      	mov	sl, r3
 80094f2:	f7f7 fd9b 	bl	800102c <__aeabi_fsub>
 80094f6:	1c21      	adds	r1, r4, #0
 80094f8:	4680      	mov	r8, r0
 80094fa:	4650      	mov	r0, sl
 80094fc:	f7f7 f916 	bl	800072c <__aeabi_fadd>
 8009500:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009502:	4682      	mov	sl, r0
 8009504:	1c29      	adds	r1, r5, #0
 8009506:	1c18      	adds	r0, r3, #0
 8009508:	4699      	mov	r9, r3
 800950a:	f7f7 fd8f 	bl	800102c <__aeabi_fsub>
 800950e:	1c29      	adds	r1, r5, #0
 8009510:	1c04      	adds	r4, r0, #0
 8009512:	4648      	mov	r0, r9
 8009514:	f7f7 f90a 	bl	800072c <__aeabi_fadd>
 8009518:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800951a:	1c06      	adds	r6, r0, #0
 800951c:	1c39      	adds	r1, r7, #0
 800951e:	1c18      	adds	r0, r3, #0
 8009520:	4699      	mov	r9, r3
 8009522:	f7f7 fd83 	bl	800102c <__aeabi_fsub>
 8009526:	1c39      	adds	r1, r7, #0
 8009528:	1c05      	adds	r5, r0, #0
 800952a:	4648      	mov	r0, r9
 800952c:	f7f7 f8fe 	bl	800072c <__aeabi_fadd>
 8009530:	4659      	mov	r1, fp
 8009532:	1c07      	adds	r7, r0, #0
 8009534:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009536:	f7f7 fd79 	bl	800102c <__aeabi_fsub>
 800953a:	4659      	mov	r1, fp
 800953c:	4681      	mov	r9, r0
 800953e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009540:	f7f7 f8f4 	bl	800072c <__aeabi_fadd>
 8009544:	4683      	mov	fp, r0
 8009546:	1c01      	adds	r1, r0, #0
 8009548:	4650      	mov	r0, sl
 800954a:	f7f7 f8ef 	bl	800072c <__aeabi_fadd>
 800954e:	4659      	mov	r1, fp
 8009550:	9009      	str	r0, [sp, #36]	; 0x24
 8009552:	4650      	mov	r0, sl
 8009554:	f7f7 fd6a 	bl	800102c <__aeabi_fsub>
 8009558:	4649      	mov	r1, r9
 800955a:	4682      	mov	sl, r0
 800955c:	4640      	mov	r0, r8
 800955e:	f7f7 f8e5 	bl	800072c <__aeabi_fadd>
 8009562:	4649      	mov	r1, r9
 8009564:	4683      	mov	fp, r0
 8009566:	4640      	mov	r0, r8
 8009568:	f7f7 fd60 	bl	800102c <__aeabi_fsub>
 800956c:	1c31      	adds	r1, r6, #0
 800956e:	4681      	mov	r9, r0
 8009570:	1c38      	adds	r0, r7, #0
 8009572:	f7f7 fd5b 	bl	800102c <__aeabi_fsub>
 8009576:	1c39      	adds	r1, r7, #0
 8009578:	4680      	mov	r8, r0
 800957a:	1c30      	adds	r0, r6, #0
 800957c:	f7f7 f8d6 	bl	800072c <__aeabi_fadd>
 8009580:	1c21      	adds	r1, r4, #0
 8009582:	1c07      	adds	r7, r0, #0
 8009584:	1c28      	adds	r0, r5, #0
 8009586:	f7f7 fd51 	bl	800102c <__aeabi_fsub>
 800958a:	1c29      	adds	r1, r5, #0
 800958c:	1c06      	adds	r6, r0, #0
 800958e:	1c20      	adds	r0, r4, #0
 8009590:	f7f7 f8cc 	bl	800072c <__aeabi_fadd>
 8009594:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009596:	1c04      	adds	r4, r0, #0
 8009598:	980c      	ldr	r0, [sp, #48]	; 0x30
 800959a:	f7f7 fc2d 	bl	8000df8 <__aeabi_fmul>
 800959e:	4641      	mov	r1, r8
 80095a0:	1c05      	adds	r5, r0, #0
 80095a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80095a4:	f7f7 fc28 	bl	8000df8 <__aeabi_fmul>
 80095a8:	1c01      	adds	r1, r0, #0
 80095aa:	1c28      	adds	r0, r5, #0
 80095ac:	f7f7 f8be 	bl	800072c <__aeabi_fadd>
 80095b0:	9a01      	ldr	r2, [sp, #4]
 80095b2:	9d02      	ldr	r5, [sp, #8]
 80095b4:	4641      	mov	r1, r8
 80095b6:	50a8      	str	r0, [r5, r2]
 80095b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80095ba:	f7f7 fc1d 	bl	8000df8 <__aeabi_fmul>
 80095be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095c0:	1c05      	adds	r5, r0, #0
 80095c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80095c4:	f7f7 fc18 	bl	8000df8 <__aeabi_fmul>
 80095c8:	1c01      	adds	r1, r0, #0
 80095ca:	1c28      	adds	r0, r5, #0
 80095cc:	f7f7 fd2e 	bl	800102c <__aeabi_fsub>
 80095d0:	9a01      	ldr	r2, [sp, #4]
 80095d2:	9905      	ldr	r1, [sp, #20]
 80095d4:	5088      	str	r0, [r1, r2]
 80095d6:	4651      	mov	r1, sl
 80095d8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80095da:	f7f7 fc0d 	bl	8000df8 <__aeabi_fmul>
 80095de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80095e0:	1c05      	adds	r5, r0, #0
 80095e2:	1c39      	adds	r1, r7, #0
 80095e4:	1c18      	adds	r0, r3, #0
 80095e6:	4698      	mov	r8, r3
 80095e8:	f7f7 fc06 	bl	8000df8 <__aeabi_fmul>
 80095ec:	1c01      	adds	r1, r0, #0
 80095ee:	1c28      	adds	r0, r5, #0
 80095f0:	f7f7 f89c 	bl	800072c <__aeabi_fadd>
 80095f4:	9a04      	ldr	r2, [sp, #16]
 80095f6:	9908      	ldr	r1, [sp, #32]
 80095f8:	5088      	str	r0, [r1, r2]
 80095fa:	1c39      	adds	r1, r7, #0
 80095fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80095fe:	f7f7 fbfb 	bl	8000df8 <__aeabi_fmul>
 8009602:	4651      	mov	r1, sl
 8009604:	1c05      	adds	r5, r0, #0
 8009606:	4640      	mov	r0, r8
 8009608:	f7f7 fbf6 	bl	8000df8 <__aeabi_fmul>
 800960c:	1c01      	adds	r1, r0, #0
 800960e:	1c28      	adds	r0, r5, #0
 8009610:	f7f7 fd0c 	bl	800102c <__aeabi_fsub>
 8009614:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009616:	9d07      	ldr	r5, [sp, #28]
 8009618:	9f04      	ldr	r7, [sp, #16]
 800961a:	4659      	mov	r1, fp
 800961c:	51e8      	str	r0, [r5, r7]
 800961e:	1c18      	adds	r0, r3, #0
 8009620:	469a      	mov	sl, r3
 8009622:	f7f7 fbe9 	bl	8000df8 <__aeabi_fmul>
 8009626:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009628:	1c05      	adds	r5, r0, #0
 800962a:	1c31      	adds	r1, r6, #0
 800962c:	1c18      	adds	r0, r3, #0
 800962e:	4698      	mov	r8, r3
 8009630:	f7f7 fbe2 	bl	8000df8 <__aeabi_fmul>
 8009634:	1c01      	adds	r1, r0, #0
 8009636:	1c28      	adds	r0, r5, #0
 8009638:	f7f7 f878 	bl	800072c <__aeabi_fadd>
 800963c:	9f01      	ldr	r7, [sp, #4]
 800963e:	9908      	ldr	r1, [sp, #32]
 8009640:	51c8      	str	r0, [r1, r7]
 8009642:	1c31      	adds	r1, r6, #0
 8009644:	4650      	mov	r0, sl
 8009646:	f7f7 fbd7 	bl	8000df8 <__aeabi_fmul>
 800964a:	4659      	mov	r1, fp
 800964c:	1c05      	adds	r5, r0, #0
 800964e:	4640      	mov	r0, r8
 8009650:	f7f7 fbd2 	bl	8000df8 <__aeabi_fmul>
 8009654:	1c01      	adds	r1, r0, #0
 8009656:	1c28      	adds	r0, r5, #0
 8009658:	f7f7 fce8 	bl	800102c <__aeabi_fsub>
 800965c:	9a07      	ldr	r2, [sp, #28]
 800965e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009660:	51d0      	str	r0, [r2, r7]
 8009662:	4649      	mov	r1, r9
 8009664:	1c18      	adds	r0, r3, #0
 8009666:	469a      	mov	sl, r3
 8009668:	f7f7 fbc6 	bl	8000df8 <__aeabi_fmul>
 800966c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800966e:	1c05      	adds	r5, r0, #0
 8009670:	1c21      	adds	r1, r4, #0
 8009672:	1c18      	adds	r0, r3, #0
 8009674:	4698      	mov	r8, r3
 8009676:	f7f7 fbbf 	bl	8000df8 <__aeabi_fmul>
 800967a:	1c01      	adds	r1, r0, #0
 800967c:	1c28      	adds	r0, r5, #0
 800967e:	f7f7 f855 	bl	800072c <__aeabi_fadd>
 8009682:	003e      	movs	r6, r7
 8009684:	9d02      	ldr	r5, [sp, #8]
 8009686:	9f04      	ldr	r7, [sp, #16]
 8009688:	1c21      	adds	r1, r4, #0
 800968a:	51e8      	str	r0, [r5, r7]
 800968c:	4650      	mov	r0, sl
 800968e:	f7f7 fbb3 	bl	8000df8 <__aeabi_fmul>
 8009692:	4649      	mov	r1, r9
 8009694:	1c04      	adds	r4, r0, #0
 8009696:	4640      	mov	r0, r8
 8009698:	f7f7 fbae 	bl	8000df8 <__aeabi_fmul>
 800969c:	1c01      	adds	r1, r0, #0
 800969e:	1c20      	adds	r0, r4, #0
 80096a0:	f7f7 fcc4 	bl	800102c <__aeabi_fsub>
 80096a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80096a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80096a8:	51a0      	str	r0, [r4, r6]
 80096aa:	9818      	ldr	r0, [sp, #96]	; 0x60
 80096ac:	0032      	movs	r2, r6
 80096ae:	4684      	mov	ip, r0
 80096b0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80096b2:	4465      	add	r5, ip
 80096b4:	4684      	mov	ip, r0
 80096b6:	9b00      	ldr	r3, [sp, #0]
 80096b8:	9903      	ldr	r1, [sp, #12]
 80096ba:	4463      	add	r3, ip
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80096c0:	4462      	add	r2, ip
 80096c2:	4461      	add	r1, ip
 80096c4:	4467      	add	r7, ip
 80096c6:	950b      	str	r5, [sp, #44]	; 0x2c
 80096c8:	9201      	str	r2, [sp, #4]
 80096ca:	9103      	str	r1, [sp, #12]
 80096cc:	9704      	str	r7, [sp, #16]
 80096ce:	42ab      	cmp	r3, r5
 80096d0:	d900      	bls.n	80096d4 <arm_radix8_butterfly_f32+0x900>
 80096d2:	e5a7      	b.n	8009224 <arm_radix8_butterfly_f32+0x450>
 80096d4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80096d6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80096d8:	3208      	adds	r2, #8
 80096da:	922e      	str	r2, [sp, #184]	; 0xb8
 80096dc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80096de:	3301      	adds	r3, #1
 80096e0:	3208      	adds	r2, #8
 80096e2:	922d      	str	r2, [sp, #180]	; 0xb4
 80096e4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80096e6:	932b      	str	r3, [sp, #172]	; 0xac
 80096e8:	3208      	adds	r2, #8
 80096ea:	922c      	str	r2, [sp, #176]	; 0xb0
 80096ec:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d000      	beq.n	80096f4 <arm_radix8_butterfly_f32+0x920>
 80096f2:	e557      	b.n	80091a4 <arm_radix8_butterfly_f32+0x3d0>
 80096f4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80096f6:	9218      	str	r2, [sp, #96]	; 0x60
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	9331      	str	r3, [sp, #196]	; 0xc4
 80096fe:	0013      	movs	r3, r2
 8009700:	f7ff fb7b 	bl	8008dfa <arm_radix8_butterfly_f32+0x26>
 8009704:	b035      	add	sp, #212	; 0xd4
 8009706:	bc3c      	pop	{r2, r3, r4, r5}
 8009708:	4690      	mov	r8, r2
 800970a:	4699      	mov	r9, r3
 800970c:	46a2      	mov	sl, r4
 800970e:	46ab      	mov	fp, r5
 8009710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009712:	46c0      	nop			; (mov r8, r8)
 8009714:	3f3504f3 	.word	0x3f3504f3

08009718 <__errno>:
 8009718:	4b01      	ldr	r3, [pc, #4]	; (8009720 <__errno+0x8>)
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	4770      	bx	lr
 800971e:	46c0      	nop			; (mov r8, r8)
 8009720:	20000084 	.word	0x20000084

08009724 <__libc_init_array>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	2600      	movs	r6, #0
 8009728:	4d0c      	ldr	r5, [pc, #48]	; (800975c <__libc_init_array+0x38>)
 800972a:	4c0d      	ldr	r4, [pc, #52]	; (8009760 <__libc_init_array+0x3c>)
 800972c:	1b64      	subs	r4, r4, r5
 800972e:	10a4      	asrs	r4, r4, #2
 8009730:	42a6      	cmp	r6, r4
 8009732:	d109      	bne.n	8009748 <__libc_init_array+0x24>
 8009734:	2600      	movs	r6, #0
 8009736:	f003 fdc5 	bl	800d2c4 <_init>
 800973a:	4d0a      	ldr	r5, [pc, #40]	; (8009764 <__libc_init_array+0x40>)
 800973c:	4c0a      	ldr	r4, [pc, #40]	; (8009768 <__libc_init_array+0x44>)
 800973e:	1b64      	subs	r4, r4, r5
 8009740:	10a4      	asrs	r4, r4, #2
 8009742:	42a6      	cmp	r6, r4
 8009744:	d105      	bne.n	8009752 <__libc_init_array+0x2e>
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	00b3      	lsls	r3, r6, #2
 800974a:	58eb      	ldr	r3, [r5, r3]
 800974c:	4798      	blx	r3
 800974e:	3601      	adds	r6, #1
 8009750:	e7ee      	b.n	8009730 <__libc_init_array+0xc>
 8009752:	00b3      	lsls	r3, r6, #2
 8009754:	58eb      	ldr	r3, [r5, r3]
 8009756:	4798      	blx	r3
 8009758:	3601      	adds	r6, #1
 800975a:	e7f2      	b.n	8009742 <__libc_init_array+0x1e>
 800975c:	0800e674 	.word	0x0800e674
 8009760:	0800e674 	.word	0x0800e674
 8009764:	0800e674 	.word	0x0800e674
 8009768:	0800e678 	.word	0x0800e678

0800976c <memset>:
 800976c:	0003      	movs	r3, r0
 800976e:	1882      	adds	r2, r0, r2
 8009770:	4293      	cmp	r3, r2
 8009772:	d100      	bne.n	8009776 <memset+0xa>
 8009774:	4770      	bx	lr
 8009776:	7019      	strb	r1, [r3, #0]
 8009778:	3301      	adds	r3, #1
 800977a:	e7f9      	b.n	8009770 <memset+0x4>

0800977c <__cvt>:
 800977c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800977e:	001e      	movs	r6, r3
 8009780:	2300      	movs	r3, #0
 8009782:	0014      	movs	r4, r2
 8009784:	b08b      	sub	sp, #44	; 0x2c
 8009786:	429e      	cmp	r6, r3
 8009788:	da04      	bge.n	8009794 <__cvt+0x18>
 800978a:	2180      	movs	r1, #128	; 0x80
 800978c:	0609      	lsls	r1, r1, #24
 800978e:	1873      	adds	r3, r6, r1
 8009790:	001e      	movs	r6, r3
 8009792:	232d      	movs	r3, #45	; 0x2d
 8009794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009796:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009798:	7013      	strb	r3, [r2, #0]
 800979a:	2320      	movs	r3, #32
 800979c:	2203      	movs	r2, #3
 800979e:	439f      	bics	r7, r3
 80097a0:	2f46      	cmp	r7, #70	; 0x46
 80097a2:	d007      	beq.n	80097b4 <__cvt+0x38>
 80097a4:	003b      	movs	r3, r7
 80097a6:	3b45      	subs	r3, #69	; 0x45
 80097a8:	4259      	negs	r1, r3
 80097aa:	414b      	adcs	r3, r1
 80097ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80097ae:	3a01      	subs	r2, #1
 80097b0:	18cb      	adds	r3, r1, r3
 80097b2:	9310      	str	r3, [sp, #64]	; 0x40
 80097b4:	ab09      	add	r3, sp, #36	; 0x24
 80097b6:	9304      	str	r3, [sp, #16]
 80097b8:	ab08      	add	r3, sp, #32
 80097ba:	9303      	str	r3, [sp, #12]
 80097bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097be:	9200      	str	r2, [sp, #0]
 80097c0:	9302      	str	r3, [sp, #8]
 80097c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097c4:	0022      	movs	r2, r4
 80097c6:	9301      	str	r3, [sp, #4]
 80097c8:	0033      	movs	r3, r6
 80097ca:	f000 fcfd 	bl	800a1c8 <_dtoa_r>
 80097ce:	0005      	movs	r5, r0
 80097d0:	2f47      	cmp	r7, #71	; 0x47
 80097d2:	d102      	bne.n	80097da <__cvt+0x5e>
 80097d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097d6:	07db      	lsls	r3, r3, #31
 80097d8:	d528      	bpl.n	800982c <__cvt+0xb0>
 80097da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097dc:	18eb      	adds	r3, r5, r3
 80097de:	9307      	str	r3, [sp, #28]
 80097e0:	2f46      	cmp	r7, #70	; 0x46
 80097e2:	d114      	bne.n	800980e <__cvt+0x92>
 80097e4:	782b      	ldrb	r3, [r5, #0]
 80097e6:	2b30      	cmp	r3, #48	; 0x30
 80097e8:	d10c      	bne.n	8009804 <__cvt+0x88>
 80097ea:	2200      	movs	r2, #0
 80097ec:	2300      	movs	r3, #0
 80097ee:	0020      	movs	r0, r4
 80097f0:	0031      	movs	r1, r6
 80097f2:	f7f6 fe29 	bl	8000448 <__aeabi_dcmpeq>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d104      	bne.n	8009804 <__cvt+0x88>
 80097fa:	2301      	movs	r3, #1
 80097fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097fe:	1a9b      	subs	r3, r3, r2
 8009800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009806:	9a07      	ldr	r2, [sp, #28]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	18d3      	adds	r3, r2, r3
 800980c:	9307      	str	r3, [sp, #28]
 800980e:	2200      	movs	r2, #0
 8009810:	2300      	movs	r3, #0
 8009812:	0020      	movs	r0, r4
 8009814:	0031      	movs	r1, r6
 8009816:	f7f6 fe17 	bl	8000448 <__aeabi_dcmpeq>
 800981a:	2800      	cmp	r0, #0
 800981c:	d001      	beq.n	8009822 <__cvt+0xa6>
 800981e:	9b07      	ldr	r3, [sp, #28]
 8009820:	9309      	str	r3, [sp, #36]	; 0x24
 8009822:	2230      	movs	r2, #48	; 0x30
 8009824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009826:	9907      	ldr	r1, [sp, #28]
 8009828:	428b      	cmp	r3, r1
 800982a:	d306      	bcc.n	800983a <__cvt+0xbe>
 800982c:	0028      	movs	r0, r5
 800982e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009830:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009832:	1b5b      	subs	r3, r3, r5
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	b00b      	add	sp, #44	; 0x2c
 8009838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800983a:	1c59      	adds	r1, r3, #1
 800983c:	9109      	str	r1, [sp, #36]	; 0x24
 800983e:	701a      	strb	r2, [r3, #0]
 8009840:	e7f0      	b.n	8009824 <__cvt+0xa8>

08009842 <__exponent>:
 8009842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009844:	1c83      	adds	r3, r0, #2
 8009846:	b087      	sub	sp, #28
 8009848:	9303      	str	r3, [sp, #12]
 800984a:	0005      	movs	r5, r0
 800984c:	000c      	movs	r4, r1
 800984e:	232b      	movs	r3, #43	; 0x2b
 8009850:	7002      	strb	r2, [r0, #0]
 8009852:	2900      	cmp	r1, #0
 8009854:	da01      	bge.n	800985a <__exponent+0x18>
 8009856:	424c      	negs	r4, r1
 8009858:	3302      	adds	r3, #2
 800985a:	706b      	strb	r3, [r5, #1]
 800985c:	2c09      	cmp	r4, #9
 800985e:	dd31      	ble.n	80098c4 <__exponent+0x82>
 8009860:	270a      	movs	r7, #10
 8009862:	ab04      	add	r3, sp, #16
 8009864:	1dde      	adds	r6, r3, #7
 8009866:	0020      	movs	r0, r4
 8009868:	0039      	movs	r1, r7
 800986a:	9601      	str	r6, [sp, #4]
 800986c:	f7f6 fdd6 	bl	800041c <__aeabi_idivmod>
 8009870:	3e01      	subs	r6, #1
 8009872:	3130      	adds	r1, #48	; 0x30
 8009874:	0020      	movs	r0, r4
 8009876:	7031      	strb	r1, [r6, #0]
 8009878:	0039      	movs	r1, r7
 800987a:	9402      	str	r4, [sp, #8]
 800987c:	f7f6 fce8 	bl	8000250 <__divsi3>
 8009880:	9b02      	ldr	r3, [sp, #8]
 8009882:	0004      	movs	r4, r0
 8009884:	2b63      	cmp	r3, #99	; 0x63
 8009886:	dcee      	bgt.n	8009866 <__exponent+0x24>
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	3430      	adds	r4, #48	; 0x30
 800988c:	1e9a      	subs	r2, r3, #2
 800988e:	0013      	movs	r3, r2
 8009890:	9903      	ldr	r1, [sp, #12]
 8009892:	7014      	strb	r4, [r2, #0]
 8009894:	a804      	add	r0, sp, #16
 8009896:	3007      	adds	r0, #7
 8009898:	4298      	cmp	r0, r3
 800989a:	d80e      	bhi.n	80098ba <__exponent+0x78>
 800989c:	ab04      	add	r3, sp, #16
 800989e:	3307      	adds	r3, #7
 80098a0:	2000      	movs	r0, #0
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d804      	bhi.n	80098b0 <__exponent+0x6e>
 80098a6:	ab04      	add	r3, sp, #16
 80098a8:	3009      	adds	r0, #9
 80098aa:	18c0      	adds	r0, r0, r3
 80098ac:	9b01      	ldr	r3, [sp, #4]
 80098ae:	1ac0      	subs	r0, r0, r3
 80098b0:	9b03      	ldr	r3, [sp, #12]
 80098b2:	1818      	adds	r0, r3, r0
 80098b4:	1b40      	subs	r0, r0, r5
 80098b6:	b007      	add	sp, #28
 80098b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ba:	7818      	ldrb	r0, [r3, #0]
 80098bc:	3301      	adds	r3, #1
 80098be:	7008      	strb	r0, [r1, #0]
 80098c0:	3101      	adds	r1, #1
 80098c2:	e7e7      	b.n	8009894 <__exponent+0x52>
 80098c4:	2330      	movs	r3, #48	; 0x30
 80098c6:	18e4      	adds	r4, r4, r3
 80098c8:	70ab      	strb	r3, [r5, #2]
 80098ca:	1d28      	adds	r0, r5, #4
 80098cc:	70ec      	strb	r4, [r5, #3]
 80098ce:	e7f1      	b.n	80098b4 <__exponent+0x72>

080098d0 <_printf_float>:
 80098d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d2:	b095      	sub	sp, #84	; 0x54
 80098d4:	000c      	movs	r4, r1
 80098d6:	9208      	str	r2, [sp, #32]
 80098d8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80098da:	9309      	str	r3, [sp, #36]	; 0x24
 80098dc:	0007      	movs	r7, r0
 80098de:	f001 fa91 	bl	800ae04 <_localeconv_r>
 80098e2:	6803      	ldr	r3, [r0, #0]
 80098e4:	0018      	movs	r0, r3
 80098e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80098e8:	f7f6 fc0c 	bl	8000104 <strlen>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9312      	str	r3, [sp, #72]	; 0x48
 80098f0:	7e23      	ldrb	r3, [r4, #24]
 80098f2:	2207      	movs	r2, #7
 80098f4:	001e      	movs	r6, r3
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	900d      	str	r0, [sp, #52]	; 0x34
 80098fa:	930c      	str	r3, [sp, #48]	; 0x30
 80098fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	05c9      	lsls	r1, r1, #23
 8009902:	d547      	bpl.n	8009994 <_printf_float+0xc4>
 8009904:	189b      	adds	r3, r3, r2
 8009906:	4393      	bics	r3, r2
 8009908:	001a      	movs	r2, r3
 800990a:	3208      	adds	r2, #8
 800990c:	602a      	str	r2, [r5, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	64a2      	str	r2, [r4, #72]	; 0x48
 8009914:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009916:	2201      	movs	r2, #1
 8009918:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800991a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800991c:	930a      	str	r3, [sp, #40]	; 0x28
 800991e:	006b      	lsls	r3, r5, #1
 8009920:	085b      	lsrs	r3, r3, #1
 8009922:	930e      	str	r3, [sp, #56]	; 0x38
 8009924:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009926:	4ba8      	ldr	r3, [pc, #672]	; (8009bc8 <_printf_float+0x2f8>)
 8009928:	990e      	ldr	r1, [sp, #56]	; 0x38
 800992a:	4252      	negs	r2, r2
 800992c:	f7f9 fb6c 	bl	8003008 <__aeabi_dcmpun>
 8009930:	2800      	cmp	r0, #0
 8009932:	d131      	bne.n	8009998 <_printf_float+0xc8>
 8009934:	2201      	movs	r2, #1
 8009936:	4ba4      	ldr	r3, [pc, #656]	; (8009bc8 <_printf_float+0x2f8>)
 8009938:	980a      	ldr	r0, [sp, #40]	; 0x28
 800993a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800993c:	4252      	negs	r2, r2
 800993e:	f7f6 fd93 	bl	8000468 <__aeabi_dcmple>
 8009942:	2800      	cmp	r0, #0
 8009944:	d128      	bne.n	8009998 <_printf_float+0xc8>
 8009946:	2200      	movs	r2, #0
 8009948:	2300      	movs	r3, #0
 800994a:	0029      	movs	r1, r5
 800994c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800994e:	f7f6 fd81 	bl	8000454 <__aeabi_dcmplt>
 8009952:	2800      	cmp	r0, #0
 8009954:	d003      	beq.n	800995e <_printf_float+0x8e>
 8009956:	0023      	movs	r3, r4
 8009958:	222d      	movs	r2, #45	; 0x2d
 800995a:	3343      	adds	r3, #67	; 0x43
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	4d9b      	ldr	r5, [pc, #620]	; (8009bcc <_printf_float+0x2fc>)
 8009960:	2e47      	cmp	r6, #71	; 0x47
 8009962:	d900      	bls.n	8009966 <_printf_float+0x96>
 8009964:	4d9a      	ldr	r5, [pc, #616]	; (8009bd0 <_printf_float+0x300>)
 8009966:	2303      	movs	r3, #3
 8009968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800996a:	6123      	str	r3, [r4, #16]
 800996c:	3301      	adds	r3, #1
 800996e:	439a      	bics	r2, r3
 8009970:	2300      	movs	r3, #0
 8009972:	6022      	str	r2, [r4, #0]
 8009974:	930a      	str	r3, [sp, #40]	; 0x28
 8009976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009978:	0021      	movs	r1, r4
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	0038      	movs	r0, r7
 800997e:	9b08      	ldr	r3, [sp, #32]
 8009980:	aa13      	add	r2, sp, #76	; 0x4c
 8009982:	f000 f9f3 	bl	8009d6c <_printf_common>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d000      	beq.n	800998c <_printf_float+0xbc>
 800998a:	e09e      	b.n	8009aca <_printf_float+0x1fa>
 800998c:	2001      	movs	r0, #1
 800998e:	4240      	negs	r0, r0
 8009990:	b015      	add	sp, #84	; 0x54
 8009992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009994:	3307      	adds	r3, #7
 8009996:	e7b6      	b.n	8009906 <_printf_float+0x36>
 8009998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800999a:	002b      	movs	r3, r5
 800999c:	0010      	movs	r0, r2
 800999e:	0029      	movs	r1, r5
 80099a0:	f7f9 fb32 	bl	8003008 <__aeabi_dcmpun>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d00a      	beq.n	80099be <_printf_float+0xee>
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	da03      	bge.n	80099b4 <_printf_float+0xe4>
 80099ac:	0023      	movs	r3, r4
 80099ae:	222d      	movs	r2, #45	; 0x2d
 80099b0:	3343      	adds	r3, #67	; 0x43
 80099b2:	701a      	strb	r2, [r3, #0]
 80099b4:	4d87      	ldr	r5, [pc, #540]	; (8009bd4 <_printf_float+0x304>)
 80099b6:	2e47      	cmp	r6, #71	; 0x47
 80099b8:	d9d5      	bls.n	8009966 <_printf_float+0x96>
 80099ba:	4d87      	ldr	r5, [pc, #540]	; (8009bd8 <_printf_float+0x308>)
 80099bc:	e7d3      	b.n	8009966 <_printf_float+0x96>
 80099be:	2220      	movs	r2, #32
 80099c0:	0031      	movs	r1, r6
 80099c2:	6863      	ldr	r3, [r4, #4]
 80099c4:	4391      	bics	r1, r2
 80099c6:	910e      	str	r1, [sp, #56]	; 0x38
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	d147      	bne.n	8009a5c <_printf_float+0x18c>
 80099cc:	3307      	adds	r3, #7
 80099ce:	6063      	str	r3, [r4, #4]
 80099d0:	2380      	movs	r3, #128	; 0x80
 80099d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	4313      	orrs	r3, r2
 80099d8:	2200      	movs	r2, #0
 80099da:	9206      	str	r2, [sp, #24]
 80099dc:	aa12      	add	r2, sp, #72	; 0x48
 80099de:	9205      	str	r2, [sp, #20]
 80099e0:	aa11      	add	r2, sp, #68	; 0x44
 80099e2:	9203      	str	r2, [sp, #12]
 80099e4:	2223      	movs	r2, #35	; 0x23
 80099e6:	a908      	add	r1, sp, #32
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	6863      	ldr	r3, [r4, #4]
 80099ee:	1852      	adds	r2, r2, r1
 80099f0:	9202      	str	r2, [sp, #8]
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	0038      	movs	r0, r7
 80099f6:	002b      	movs	r3, r5
 80099f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099fa:	9604      	str	r6, [sp, #16]
 80099fc:	f7ff febe 	bl	800977c <__cvt>
 8009a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a02:	0005      	movs	r5, r0
 8009a04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a06:	2b47      	cmp	r3, #71	; 0x47
 8009a08:	d108      	bne.n	8009a1c <_printf_float+0x14c>
 8009a0a:	1ccb      	adds	r3, r1, #3
 8009a0c:	db02      	blt.n	8009a14 <_printf_float+0x144>
 8009a0e:	6863      	ldr	r3, [r4, #4]
 8009a10:	4299      	cmp	r1, r3
 8009a12:	dd46      	ble.n	8009aa2 <_printf_float+0x1d2>
 8009a14:	0033      	movs	r3, r6
 8009a16:	3b02      	subs	r3, #2
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	001e      	movs	r6, r3
 8009a1c:	2e65      	cmp	r6, #101	; 0x65
 8009a1e:	d824      	bhi.n	8009a6a <_printf_float+0x19a>
 8009a20:	0020      	movs	r0, r4
 8009a22:	0032      	movs	r2, r6
 8009a24:	3901      	subs	r1, #1
 8009a26:	3050      	adds	r0, #80	; 0x50
 8009a28:	9111      	str	r1, [sp, #68]	; 0x44
 8009a2a:	f7ff ff0a 	bl	8009842 <__exponent>
 8009a2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a30:	900a      	str	r0, [sp, #40]	; 0x28
 8009a32:	1813      	adds	r3, r2, r0
 8009a34:	6123      	str	r3, [r4, #16]
 8009a36:	2a01      	cmp	r2, #1
 8009a38:	dc02      	bgt.n	8009a40 <_printf_float+0x170>
 8009a3a:	6822      	ldr	r2, [r4, #0]
 8009a3c:	07d2      	lsls	r2, r2, #31
 8009a3e:	d501      	bpl.n	8009a44 <_printf_float+0x174>
 8009a40:	3301      	adds	r3, #1
 8009a42:	6123      	str	r3, [r4, #16]
 8009a44:	2323      	movs	r3, #35	; 0x23
 8009a46:	aa08      	add	r2, sp, #32
 8009a48:	189b      	adds	r3, r3, r2
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d100      	bne.n	8009a52 <_printf_float+0x182>
 8009a50:	e791      	b.n	8009976 <_printf_float+0xa6>
 8009a52:	0023      	movs	r3, r4
 8009a54:	222d      	movs	r2, #45	; 0x2d
 8009a56:	3343      	adds	r3, #67	; 0x43
 8009a58:	701a      	strb	r2, [r3, #0]
 8009a5a:	e78c      	b.n	8009976 <_printf_float+0xa6>
 8009a5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a5e:	2a47      	cmp	r2, #71	; 0x47
 8009a60:	d1b6      	bne.n	80099d0 <_printf_float+0x100>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1b4      	bne.n	80099d0 <_printf_float+0x100>
 8009a66:	3301      	adds	r3, #1
 8009a68:	e7b1      	b.n	80099ce <_printf_float+0xfe>
 8009a6a:	2e66      	cmp	r6, #102	; 0x66
 8009a6c:	d11b      	bne.n	8009aa6 <_printf_float+0x1d6>
 8009a6e:	6863      	ldr	r3, [r4, #4]
 8009a70:	2900      	cmp	r1, #0
 8009a72:	dd0d      	ble.n	8009a90 <_printf_float+0x1c0>
 8009a74:	6121      	str	r1, [r4, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d102      	bne.n	8009a80 <_printf_float+0x1b0>
 8009a7a:	6822      	ldr	r2, [r4, #0]
 8009a7c:	07d2      	lsls	r2, r2, #31
 8009a7e:	d502      	bpl.n	8009a86 <_printf_float+0x1b6>
 8009a80:	3301      	adds	r3, #1
 8009a82:	1859      	adds	r1, r3, r1
 8009a84:	6121      	str	r1, [r4, #16]
 8009a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a88:	65a3      	str	r3, [r4, #88]	; 0x58
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8009a8e:	e7d9      	b.n	8009a44 <_printf_float+0x174>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d103      	bne.n	8009a9c <_printf_float+0x1cc>
 8009a94:	2201      	movs	r2, #1
 8009a96:	6821      	ldr	r1, [r4, #0]
 8009a98:	4211      	tst	r1, r2
 8009a9a:	d000      	beq.n	8009a9e <_printf_float+0x1ce>
 8009a9c:	1c9a      	adds	r2, r3, #2
 8009a9e:	6122      	str	r2, [r4, #16]
 8009aa0:	e7f1      	b.n	8009a86 <_printf_float+0x1b6>
 8009aa2:	2367      	movs	r3, #103	; 0x67
 8009aa4:	001e      	movs	r6, r3
 8009aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	db06      	blt.n	8009abc <_printf_float+0x1ec>
 8009aae:	6822      	ldr	r2, [r4, #0]
 8009ab0:	6123      	str	r3, [r4, #16]
 8009ab2:	07d2      	lsls	r2, r2, #31
 8009ab4:	d5e7      	bpl.n	8009a86 <_printf_float+0x1b6>
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	6123      	str	r3, [r4, #16]
 8009aba:	e7e4      	b.n	8009a86 <_printf_float+0x1b6>
 8009abc:	2101      	movs	r1, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	dc01      	bgt.n	8009ac6 <_printf_float+0x1f6>
 8009ac2:	1849      	adds	r1, r1, r1
 8009ac4:	1ac9      	subs	r1, r1, r3
 8009ac6:	1852      	adds	r2, r2, r1
 8009ac8:	e7e9      	b.n	8009a9e <_printf_float+0x1ce>
 8009aca:	6822      	ldr	r2, [r4, #0]
 8009acc:	0553      	lsls	r3, r2, #21
 8009ace:	d408      	bmi.n	8009ae2 <_printf_float+0x212>
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	002a      	movs	r2, r5
 8009ad4:	0038      	movs	r0, r7
 8009ad6:	9908      	ldr	r1, [sp, #32]
 8009ad8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ada:	47a8      	blx	r5
 8009adc:	1c43      	adds	r3, r0, #1
 8009ade:	d129      	bne.n	8009b34 <_printf_float+0x264>
 8009ae0:	e754      	b.n	800998c <_printf_float+0xbc>
 8009ae2:	2e65      	cmp	r6, #101	; 0x65
 8009ae4:	d800      	bhi.n	8009ae8 <_printf_float+0x218>
 8009ae6:	e0ec      	b.n	8009cc2 <_printf_float+0x3f2>
 8009ae8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009aea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009aec:	2200      	movs	r2, #0
 8009aee:	2300      	movs	r3, #0
 8009af0:	f7f6 fcaa 	bl	8000448 <__aeabi_dcmpeq>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d034      	beq.n	8009b62 <_printf_float+0x292>
 8009af8:	2301      	movs	r3, #1
 8009afa:	0038      	movs	r0, r7
 8009afc:	4a37      	ldr	r2, [pc, #220]	; (8009bdc <_printf_float+0x30c>)
 8009afe:	9908      	ldr	r1, [sp, #32]
 8009b00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b02:	47a8      	blx	r5
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d100      	bne.n	8009b0a <_printf_float+0x23a>
 8009b08:	e740      	b.n	800998c <_printf_float+0xbc>
 8009b0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	db02      	blt.n	8009b18 <_printf_float+0x248>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	07db      	lsls	r3, r3, #31
 8009b16:	d50d      	bpl.n	8009b34 <_printf_float+0x264>
 8009b18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b1a:	0038      	movs	r0, r7
 8009b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b20:	9908      	ldr	r1, [sp, #32]
 8009b22:	47a8      	blx	r5
 8009b24:	2500      	movs	r5, #0
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	d100      	bne.n	8009b2c <_printf_float+0x25c>
 8009b2a:	e72f      	b.n	800998c <_printf_float+0xbc>
 8009b2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	42ab      	cmp	r3, r5
 8009b32:	dc0a      	bgt.n	8009b4a <_printf_float+0x27a>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	079b      	lsls	r3, r3, #30
 8009b38:	d500      	bpl.n	8009b3c <_printf_float+0x26c>
 8009b3a:	e114      	b.n	8009d66 <_printf_float+0x496>
 8009b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b3e:	68e0      	ldr	r0, [r4, #12]
 8009b40:	4298      	cmp	r0, r3
 8009b42:	db00      	blt.n	8009b46 <_printf_float+0x276>
 8009b44:	e724      	b.n	8009990 <_printf_float+0xc0>
 8009b46:	0018      	movs	r0, r3
 8009b48:	e722      	b.n	8009990 <_printf_float+0xc0>
 8009b4a:	0022      	movs	r2, r4
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	0038      	movs	r0, r7
 8009b50:	9908      	ldr	r1, [sp, #32]
 8009b52:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b54:	321a      	adds	r2, #26
 8009b56:	47b0      	blx	r6
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d100      	bne.n	8009b5e <_printf_float+0x28e>
 8009b5c:	e716      	b.n	800998c <_printf_float+0xbc>
 8009b5e:	3501      	adds	r5, #1
 8009b60:	e7e4      	b.n	8009b2c <_printf_float+0x25c>
 8009b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	dc3b      	bgt.n	8009be0 <_printf_float+0x310>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	0038      	movs	r0, r7
 8009b6c:	4a1b      	ldr	r2, [pc, #108]	; (8009bdc <_printf_float+0x30c>)
 8009b6e:	9908      	ldr	r1, [sp, #32]
 8009b70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b72:	47b0      	blx	r6
 8009b74:	1c43      	adds	r3, r0, #1
 8009b76:	d100      	bne.n	8009b7a <_printf_float+0x2aa>
 8009b78:	e708      	b.n	800998c <_printf_float+0xbc>
 8009b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	d102      	bne.n	8009b88 <_printf_float+0x2b8>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	07db      	lsls	r3, r3, #31
 8009b86:	d5d5      	bpl.n	8009b34 <_printf_float+0x264>
 8009b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b8a:	0038      	movs	r0, r7
 8009b8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b8e:	9908      	ldr	r1, [sp, #32]
 8009b90:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b92:	47b0      	blx	r6
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d100      	bne.n	8009b9a <_printf_float+0x2ca>
 8009b98:	e6f8      	b.n	800998c <_printf_float+0xbc>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ba2:	425b      	negs	r3, r3
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	dc01      	bgt.n	8009bac <_printf_float+0x2dc>
 8009ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009baa:	e792      	b.n	8009ad2 <_printf_float+0x202>
 8009bac:	0022      	movs	r2, r4
 8009bae:	2301      	movs	r3, #1
 8009bb0:	0038      	movs	r0, r7
 8009bb2:	9908      	ldr	r1, [sp, #32]
 8009bb4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009bb6:	321a      	adds	r2, #26
 8009bb8:	47b0      	blx	r6
 8009bba:	1c43      	adds	r3, r0, #1
 8009bbc:	d100      	bne.n	8009bc0 <_printf_float+0x2f0>
 8009bbe:	e6e5      	b.n	800998c <_printf_float+0xbc>
 8009bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	e7ea      	b.n	8009b9c <_printf_float+0x2cc>
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	7fefffff 	.word	0x7fefffff
 8009bcc:	0800debc 	.word	0x0800debc
 8009bd0:	0800dec0 	.word	0x0800dec0
 8009bd4:	0800dec4 	.word	0x0800dec4
 8009bd8:	0800dec8 	.word	0x0800dec8
 8009bdc:	0800decc 	.word	0x0800decc
 8009be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009be2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009be4:	920a      	str	r2, [sp, #40]	; 0x28
 8009be6:	429a      	cmp	r2, r3
 8009be8:	dd00      	ble.n	8009bec <_printf_float+0x31c>
 8009bea:	930a      	str	r3, [sp, #40]	; 0x28
 8009bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dc3d      	bgt.n	8009c6e <_printf_float+0x39e>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	930e      	str	r3, [sp, #56]	; 0x38
 8009bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf8:	43db      	mvns	r3, r3
 8009bfa:	17db      	asrs	r3, r3, #31
 8009bfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c02:	930c      	str	r3, [sp, #48]	; 0x30
 8009c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c06:	4013      	ands	r3, r2
 8009c08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	dc36      	bgt.n	8009c80 <_printf_float+0x3b0>
 8009c12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c16:	4293      	cmp	r3, r2
 8009c18:	db40      	blt.n	8009c9c <_printf_float+0x3cc>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	07db      	lsls	r3, r3, #31
 8009c1e:	d43d      	bmi.n	8009c9c <_printf_float+0x3cc>
 8009c20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c24:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	1a52      	subs	r2, r2, r1
 8009c2a:	920a      	str	r2, [sp, #40]	; 0x28
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	dd00      	ble.n	8009c32 <_printf_float+0x362>
 8009c30:	930a      	str	r3, [sp, #40]	; 0x28
 8009c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	dc3a      	bgt.n	8009cae <_printf_float+0x3de>
 8009c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c3a:	2500      	movs	r5, #0
 8009c3c:	43db      	mvns	r3, r3
 8009c3e:	17db      	asrs	r3, r3, #31
 8009c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c48:	1a9b      	subs	r3, r3, r2
 8009c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c4c:	400a      	ands	r2, r1
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	42ab      	cmp	r3, r5
 8009c52:	dc00      	bgt.n	8009c56 <_printf_float+0x386>
 8009c54:	e76e      	b.n	8009b34 <_printf_float+0x264>
 8009c56:	0022      	movs	r2, r4
 8009c58:	2301      	movs	r3, #1
 8009c5a:	0038      	movs	r0, r7
 8009c5c:	9908      	ldr	r1, [sp, #32]
 8009c5e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c60:	321a      	adds	r2, #26
 8009c62:	47b0      	blx	r6
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d100      	bne.n	8009c6a <_printf_float+0x39a>
 8009c68:	e690      	b.n	800998c <_printf_float+0xbc>
 8009c6a:	3501      	adds	r5, #1
 8009c6c:	e7e9      	b.n	8009c42 <_printf_float+0x372>
 8009c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c70:	002a      	movs	r2, r5
 8009c72:	0038      	movs	r0, r7
 8009c74:	9908      	ldr	r1, [sp, #32]
 8009c76:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c78:	47b0      	blx	r6
 8009c7a:	1c43      	adds	r3, r0, #1
 8009c7c:	d1b9      	bne.n	8009bf2 <_printf_float+0x322>
 8009c7e:	e685      	b.n	800998c <_printf_float+0xbc>
 8009c80:	0022      	movs	r2, r4
 8009c82:	2301      	movs	r3, #1
 8009c84:	0038      	movs	r0, r7
 8009c86:	9908      	ldr	r1, [sp, #32]
 8009c88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c8a:	321a      	adds	r2, #26
 8009c8c:	47b0      	blx	r6
 8009c8e:	1c43      	adds	r3, r0, #1
 8009c90:	d100      	bne.n	8009c94 <_printf_float+0x3c4>
 8009c92:	e67b      	b.n	800998c <_printf_float+0xbc>
 8009c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c96:	3301      	adds	r3, #1
 8009c98:	930e      	str	r3, [sp, #56]	; 0x38
 8009c9a:	e7b0      	b.n	8009bfe <_printf_float+0x32e>
 8009c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c9e:	0038      	movs	r0, r7
 8009ca0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ca2:	9908      	ldr	r1, [sp, #32]
 8009ca4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009ca6:	47b0      	blx	r6
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d1b9      	bne.n	8009c20 <_printf_float+0x350>
 8009cac:	e66e      	b.n	800998c <_printf_float+0xbc>
 8009cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cb0:	0038      	movs	r0, r7
 8009cb2:	18ea      	adds	r2, r5, r3
 8009cb4:	9908      	ldr	r1, [sp, #32]
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009cba:	47a8      	blx	r5
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d1bb      	bne.n	8009c38 <_printf_float+0x368>
 8009cc0:	e664      	b.n	800998c <_printf_float+0xbc>
 8009cc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	dc02      	bgt.n	8009cce <_printf_float+0x3fe>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	421a      	tst	r2, r3
 8009ccc:	d038      	beq.n	8009d40 <_printf_float+0x470>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	002a      	movs	r2, r5
 8009cd2:	0038      	movs	r0, r7
 8009cd4:	9908      	ldr	r1, [sp, #32]
 8009cd6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009cd8:	47b0      	blx	r6
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	d100      	bne.n	8009ce0 <_printf_float+0x410>
 8009cde:	e655      	b.n	800998c <_printf_float+0xbc>
 8009ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ce2:	0038      	movs	r0, r7
 8009ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ce6:	9908      	ldr	r1, [sp, #32]
 8009ce8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009cea:	47b0      	blx	r6
 8009cec:	1c43      	adds	r3, r0, #1
 8009cee:	d100      	bne.n	8009cf2 <_printf_float+0x422>
 8009cf0:	e64c      	b.n	800998c <_printf_float+0xbc>
 8009cf2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009cf4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f7f6 fba5 	bl	8000448 <__aeabi_dcmpeq>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d11c      	bne.n	8009d3c <_printf_float+0x46c>
 8009d02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d04:	1c6a      	adds	r2, r5, #1
 8009d06:	3b01      	subs	r3, #1
 8009d08:	0038      	movs	r0, r7
 8009d0a:	9908      	ldr	r1, [sp, #32]
 8009d0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009d0e:	47a8      	blx	r5
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d10f      	bne.n	8009d34 <_printf_float+0x464>
 8009d14:	e63a      	b.n	800998c <_printf_float+0xbc>
 8009d16:	0022      	movs	r2, r4
 8009d18:	2301      	movs	r3, #1
 8009d1a:	0038      	movs	r0, r7
 8009d1c:	9908      	ldr	r1, [sp, #32]
 8009d1e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009d20:	321a      	adds	r2, #26
 8009d22:	47b0      	blx	r6
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d100      	bne.n	8009d2a <_printf_float+0x45a>
 8009d28:	e630      	b.n	800998c <_printf_float+0xbc>
 8009d2a:	3501      	adds	r5, #1
 8009d2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	42ab      	cmp	r3, r5
 8009d32:	dcf0      	bgt.n	8009d16 <_printf_float+0x446>
 8009d34:	0022      	movs	r2, r4
 8009d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d38:	3250      	adds	r2, #80	; 0x50
 8009d3a:	e6cb      	b.n	8009ad4 <_printf_float+0x204>
 8009d3c:	2500      	movs	r5, #0
 8009d3e:	e7f5      	b.n	8009d2c <_printf_float+0x45c>
 8009d40:	002a      	movs	r2, r5
 8009d42:	e7e1      	b.n	8009d08 <_printf_float+0x438>
 8009d44:	0022      	movs	r2, r4
 8009d46:	2301      	movs	r3, #1
 8009d48:	0038      	movs	r0, r7
 8009d4a:	9908      	ldr	r1, [sp, #32]
 8009d4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009d4e:	3219      	adds	r2, #25
 8009d50:	47b0      	blx	r6
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	d100      	bne.n	8009d58 <_printf_float+0x488>
 8009d56:	e619      	b.n	800998c <_printf_float+0xbc>
 8009d58:	3501      	adds	r5, #1
 8009d5a:	68e3      	ldr	r3, [r4, #12]
 8009d5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d5e:	1a9b      	subs	r3, r3, r2
 8009d60:	42ab      	cmp	r3, r5
 8009d62:	dcef      	bgt.n	8009d44 <_printf_float+0x474>
 8009d64:	e6ea      	b.n	8009b3c <_printf_float+0x26c>
 8009d66:	2500      	movs	r5, #0
 8009d68:	e7f7      	b.n	8009d5a <_printf_float+0x48a>
 8009d6a:	46c0      	nop			; (mov r8, r8)

08009d6c <_printf_common>:
 8009d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d6e:	0015      	movs	r5, r2
 8009d70:	9301      	str	r3, [sp, #4]
 8009d72:	688a      	ldr	r2, [r1, #8]
 8009d74:	690b      	ldr	r3, [r1, #16]
 8009d76:	000c      	movs	r4, r1
 8009d78:	9000      	str	r0, [sp, #0]
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	da00      	bge.n	8009d80 <_printf_common+0x14>
 8009d7e:	0013      	movs	r3, r2
 8009d80:	0022      	movs	r2, r4
 8009d82:	602b      	str	r3, [r5, #0]
 8009d84:	3243      	adds	r2, #67	; 0x43
 8009d86:	7812      	ldrb	r2, [r2, #0]
 8009d88:	2a00      	cmp	r2, #0
 8009d8a:	d001      	beq.n	8009d90 <_printf_common+0x24>
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	602b      	str	r3, [r5, #0]
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	069b      	lsls	r3, r3, #26
 8009d94:	d502      	bpl.n	8009d9c <_printf_common+0x30>
 8009d96:	682b      	ldr	r3, [r5, #0]
 8009d98:	3302      	adds	r3, #2
 8009d9a:	602b      	str	r3, [r5, #0]
 8009d9c:	6822      	ldr	r2, [r4, #0]
 8009d9e:	2306      	movs	r3, #6
 8009da0:	0017      	movs	r7, r2
 8009da2:	401f      	ands	r7, r3
 8009da4:	421a      	tst	r2, r3
 8009da6:	d027      	beq.n	8009df8 <_printf_common+0x8c>
 8009da8:	0023      	movs	r3, r4
 8009daa:	3343      	adds	r3, #67	; 0x43
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	1e5a      	subs	r2, r3, #1
 8009db0:	4193      	sbcs	r3, r2
 8009db2:	6822      	ldr	r2, [r4, #0]
 8009db4:	0692      	lsls	r2, r2, #26
 8009db6:	d430      	bmi.n	8009e1a <_printf_common+0xae>
 8009db8:	0022      	movs	r2, r4
 8009dba:	9901      	ldr	r1, [sp, #4]
 8009dbc:	9800      	ldr	r0, [sp, #0]
 8009dbe:	9e08      	ldr	r6, [sp, #32]
 8009dc0:	3243      	adds	r2, #67	; 0x43
 8009dc2:	47b0      	blx	r6
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d025      	beq.n	8009e14 <_printf_common+0xa8>
 8009dc8:	2306      	movs	r3, #6
 8009dca:	6820      	ldr	r0, [r4, #0]
 8009dcc:	682a      	ldr	r2, [r5, #0]
 8009dce:	68e1      	ldr	r1, [r4, #12]
 8009dd0:	2500      	movs	r5, #0
 8009dd2:	4003      	ands	r3, r0
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d103      	bne.n	8009de0 <_printf_common+0x74>
 8009dd8:	1a8d      	subs	r5, r1, r2
 8009dda:	43eb      	mvns	r3, r5
 8009ddc:	17db      	asrs	r3, r3, #31
 8009dde:	401d      	ands	r5, r3
 8009de0:	68a3      	ldr	r3, [r4, #8]
 8009de2:	6922      	ldr	r2, [r4, #16]
 8009de4:	4293      	cmp	r3, r2
 8009de6:	dd01      	ble.n	8009dec <_printf_common+0x80>
 8009de8:	1a9b      	subs	r3, r3, r2
 8009dea:	18ed      	adds	r5, r5, r3
 8009dec:	2700      	movs	r7, #0
 8009dee:	42bd      	cmp	r5, r7
 8009df0:	d120      	bne.n	8009e34 <_printf_common+0xc8>
 8009df2:	2000      	movs	r0, #0
 8009df4:	e010      	b.n	8009e18 <_printf_common+0xac>
 8009df6:	3701      	adds	r7, #1
 8009df8:	68e3      	ldr	r3, [r4, #12]
 8009dfa:	682a      	ldr	r2, [r5, #0]
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	42bb      	cmp	r3, r7
 8009e00:	ddd2      	ble.n	8009da8 <_printf_common+0x3c>
 8009e02:	0022      	movs	r2, r4
 8009e04:	2301      	movs	r3, #1
 8009e06:	9901      	ldr	r1, [sp, #4]
 8009e08:	9800      	ldr	r0, [sp, #0]
 8009e0a:	9e08      	ldr	r6, [sp, #32]
 8009e0c:	3219      	adds	r2, #25
 8009e0e:	47b0      	blx	r6
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d1f0      	bne.n	8009df6 <_printf_common+0x8a>
 8009e14:	2001      	movs	r0, #1
 8009e16:	4240      	negs	r0, r0
 8009e18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e1a:	2030      	movs	r0, #48	; 0x30
 8009e1c:	18e1      	adds	r1, r4, r3
 8009e1e:	3143      	adds	r1, #67	; 0x43
 8009e20:	7008      	strb	r0, [r1, #0]
 8009e22:	0021      	movs	r1, r4
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	3145      	adds	r1, #69	; 0x45
 8009e28:	7809      	ldrb	r1, [r1, #0]
 8009e2a:	18a2      	adds	r2, r4, r2
 8009e2c:	3243      	adds	r2, #67	; 0x43
 8009e2e:	3302      	adds	r3, #2
 8009e30:	7011      	strb	r1, [r2, #0]
 8009e32:	e7c1      	b.n	8009db8 <_printf_common+0x4c>
 8009e34:	0022      	movs	r2, r4
 8009e36:	2301      	movs	r3, #1
 8009e38:	9901      	ldr	r1, [sp, #4]
 8009e3a:	9800      	ldr	r0, [sp, #0]
 8009e3c:	9e08      	ldr	r6, [sp, #32]
 8009e3e:	321a      	adds	r2, #26
 8009e40:	47b0      	blx	r6
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d0e6      	beq.n	8009e14 <_printf_common+0xa8>
 8009e46:	3701      	adds	r7, #1
 8009e48:	e7d1      	b.n	8009dee <_printf_common+0x82>
	...

08009e4c <_printf_i>:
 8009e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e4e:	b08b      	sub	sp, #44	; 0x2c
 8009e50:	9206      	str	r2, [sp, #24]
 8009e52:	000a      	movs	r2, r1
 8009e54:	3243      	adds	r2, #67	; 0x43
 8009e56:	9307      	str	r3, [sp, #28]
 8009e58:	9005      	str	r0, [sp, #20]
 8009e5a:	9204      	str	r2, [sp, #16]
 8009e5c:	7e0a      	ldrb	r2, [r1, #24]
 8009e5e:	000c      	movs	r4, r1
 8009e60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e62:	2a78      	cmp	r2, #120	; 0x78
 8009e64:	d806      	bhi.n	8009e74 <_printf_i+0x28>
 8009e66:	2a62      	cmp	r2, #98	; 0x62
 8009e68:	d808      	bhi.n	8009e7c <_printf_i+0x30>
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	d100      	bne.n	8009e70 <_printf_i+0x24>
 8009e6e:	e0c0      	b.n	8009ff2 <_printf_i+0x1a6>
 8009e70:	2a58      	cmp	r2, #88	; 0x58
 8009e72:	d052      	beq.n	8009f1a <_printf_i+0xce>
 8009e74:	0026      	movs	r6, r4
 8009e76:	3642      	adds	r6, #66	; 0x42
 8009e78:	7032      	strb	r2, [r6, #0]
 8009e7a:	e022      	b.n	8009ec2 <_printf_i+0x76>
 8009e7c:	0010      	movs	r0, r2
 8009e7e:	3863      	subs	r0, #99	; 0x63
 8009e80:	2815      	cmp	r0, #21
 8009e82:	d8f7      	bhi.n	8009e74 <_printf_i+0x28>
 8009e84:	f7f6 f950 	bl	8000128 <__gnu_thumb1_case_shi>
 8009e88:	001f0016 	.word	0x001f0016
 8009e8c:	fff6fff6 	.word	0xfff6fff6
 8009e90:	fff6fff6 	.word	0xfff6fff6
 8009e94:	fff6001f 	.word	0xfff6001f
 8009e98:	fff6fff6 	.word	0xfff6fff6
 8009e9c:	00a8fff6 	.word	0x00a8fff6
 8009ea0:	009a0036 	.word	0x009a0036
 8009ea4:	fff6fff6 	.word	0xfff6fff6
 8009ea8:	fff600b9 	.word	0xfff600b9
 8009eac:	fff60036 	.word	0xfff60036
 8009eb0:	009efff6 	.word	0x009efff6
 8009eb4:	0026      	movs	r6, r4
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	3642      	adds	r6, #66	; 0x42
 8009eba:	1d11      	adds	r1, r2, #4
 8009ebc:	6019      	str	r1, [r3, #0]
 8009ebe:	6813      	ldr	r3, [r2, #0]
 8009ec0:	7033      	strb	r3, [r6, #0]
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e0a7      	b.n	800a016 <_printf_i+0x1ca>
 8009ec6:	6808      	ldr	r0, [r1, #0]
 8009ec8:	6819      	ldr	r1, [r3, #0]
 8009eca:	1d0a      	adds	r2, r1, #4
 8009ecc:	0605      	lsls	r5, r0, #24
 8009ece:	d50b      	bpl.n	8009ee8 <_printf_i+0x9c>
 8009ed0:	680d      	ldr	r5, [r1, #0]
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	da03      	bge.n	8009ee0 <_printf_i+0x94>
 8009ed8:	232d      	movs	r3, #45	; 0x2d
 8009eda:	9a04      	ldr	r2, [sp, #16]
 8009edc:	426d      	negs	r5, r5
 8009ede:	7013      	strb	r3, [r2, #0]
 8009ee0:	4b61      	ldr	r3, [pc, #388]	; (800a068 <_printf_i+0x21c>)
 8009ee2:	270a      	movs	r7, #10
 8009ee4:	9303      	str	r3, [sp, #12]
 8009ee6:	e032      	b.n	8009f4e <_printf_i+0x102>
 8009ee8:	680d      	ldr	r5, [r1, #0]
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	0641      	lsls	r1, r0, #25
 8009eee:	d5f1      	bpl.n	8009ed4 <_printf_i+0x88>
 8009ef0:	b22d      	sxth	r5, r5
 8009ef2:	e7ef      	b.n	8009ed4 <_printf_i+0x88>
 8009ef4:	680d      	ldr	r5, [r1, #0]
 8009ef6:	6819      	ldr	r1, [r3, #0]
 8009ef8:	1d08      	adds	r0, r1, #4
 8009efa:	6018      	str	r0, [r3, #0]
 8009efc:	062e      	lsls	r6, r5, #24
 8009efe:	d501      	bpl.n	8009f04 <_printf_i+0xb8>
 8009f00:	680d      	ldr	r5, [r1, #0]
 8009f02:	e003      	b.n	8009f0c <_printf_i+0xc0>
 8009f04:	066d      	lsls	r5, r5, #25
 8009f06:	d5fb      	bpl.n	8009f00 <_printf_i+0xb4>
 8009f08:	680d      	ldr	r5, [r1, #0]
 8009f0a:	b2ad      	uxth	r5, r5
 8009f0c:	4b56      	ldr	r3, [pc, #344]	; (800a068 <_printf_i+0x21c>)
 8009f0e:	270a      	movs	r7, #10
 8009f10:	9303      	str	r3, [sp, #12]
 8009f12:	2a6f      	cmp	r2, #111	; 0x6f
 8009f14:	d117      	bne.n	8009f46 <_printf_i+0xfa>
 8009f16:	2708      	movs	r7, #8
 8009f18:	e015      	b.n	8009f46 <_printf_i+0xfa>
 8009f1a:	3145      	adds	r1, #69	; 0x45
 8009f1c:	700a      	strb	r2, [r1, #0]
 8009f1e:	4a52      	ldr	r2, [pc, #328]	; (800a068 <_printf_i+0x21c>)
 8009f20:	9203      	str	r2, [sp, #12]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	6821      	ldr	r1, [r4, #0]
 8009f26:	ca20      	ldmia	r2!, {r5}
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	0608      	lsls	r0, r1, #24
 8009f2c:	d550      	bpl.n	8009fd0 <_printf_i+0x184>
 8009f2e:	07cb      	lsls	r3, r1, #31
 8009f30:	d502      	bpl.n	8009f38 <_printf_i+0xec>
 8009f32:	2320      	movs	r3, #32
 8009f34:	4319      	orrs	r1, r3
 8009f36:	6021      	str	r1, [r4, #0]
 8009f38:	2710      	movs	r7, #16
 8009f3a:	2d00      	cmp	r5, #0
 8009f3c:	d103      	bne.n	8009f46 <_printf_i+0xfa>
 8009f3e:	2320      	movs	r3, #32
 8009f40:	6822      	ldr	r2, [r4, #0]
 8009f42:	439a      	bics	r2, r3
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	0023      	movs	r3, r4
 8009f48:	2200      	movs	r2, #0
 8009f4a:	3343      	adds	r3, #67	; 0x43
 8009f4c:	701a      	strb	r2, [r3, #0]
 8009f4e:	6863      	ldr	r3, [r4, #4]
 8009f50:	60a3      	str	r3, [r4, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	db03      	blt.n	8009f5e <_printf_i+0x112>
 8009f56:	2204      	movs	r2, #4
 8009f58:	6821      	ldr	r1, [r4, #0]
 8009f5a:	4391      	bics	r1, r2
 8009f5c:	6021      	str	r1, [r4, #0]
 8009f5e:	2d00      	cmp	r5, #0
 8009f60:	d102      	bne.n	8009f68 <_printf_i+0x11c>
 8009f62:	9e04      	ldr	r6, [sp, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00c      	beq.n	8009f82 <_printf_i+0x136>
 8009f68:	9e04      	ldr	r6, [sp, #16]
 8009f6a:	0028      	movs	r0, r5
 8009f6c:	0039      	movs	r1, r7
 8009f6e:	f7f6 f96b 	bl	8000248 <__aeabi_uidivmod>
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	3e01      	subs	r6, #1
 8009f76:	5c5b      	ldrb	r3, [r3, r1]
 8009f78:	7033      	strb	r3, [r6, #0]
 8009f7a:	002b      	movs	r3, r5
 8009f7c:	0005      	movs	r5, r0
 8009f7e:	429f      	cmp	r7, r3
 8009f80:	d9f3      	bls.n	8009f6a <_printf_i+0x11e>
 8009f82:	2f08      	cmp	r7, #8
 8009f84:	d109      	bne.n	8009f9a <_printf_i+0x14e>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	07db      	lsls	r3, r3, #31
 8009f8a:	d506      	bpl.n	8009f9a <_printf_i+0x14e>
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	6922      	ldr	r2, [r4, #16]
 8009f90:	4293      	cmp	r3, r2
 8009f92:	dc02      	bgt.n	8009f9a <_printf_i+0x14e>
 8009f94:	2330      	movs	r3, #48	; 0x30
 8009f96:	3e01      	subs	r6, #1
 8009f98:	7033      	strb	r3, [r6, #0]
 8009f9a:	9b04      	ldr	r3, [sp, #16]
 8009f9c:	1b9b      	subs	r3, r3, r6
 8009f9e:	6123      	str	r3, [r4, #16]
 8009fa0:	9b07      	ldr	r3, [sp, #28]
 8009fa2:	0021      	movs	r1, r4
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	9805      	ldr	r0, [sp, #20]
 8009fa8:	9b06      	ldr	r3, [sp, #24]
 8009faa:	aa09      	add	r2, sp, #36	; 0x24
 8009fac:	f7ff fede 	bl	8009d6c <_printf_common>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d135      	bne.n	800a020 <_printf_i+0x1d4>
 8009fb4:	2001      	movs	r0, #1
 8009fb6:	4240      	negs	r0, r0
 8009fb8:	b00b      	add	sp, #44	; 0x2c
 8009fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	6809      	ldr	r1, [r1, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	6022      	str	r2, [r4, #0]
 8009fc4:	0022      	movs	r2, r4
 8009fc6:	2178      	movs	r1, #120	; 0x78
 8009fc8:	3245      	adds	r2, #69	; 0x45
 8009fca:	7011      	strb	r1, [r2, #0]
 8009fcc:	4a27      	ldr	r2, [pc, #156]	; (800a06c <_printf_i+0x220>)
 8009fce:	e7a7      	b.n	8009f20 <_printf_i+0xd4>
 8009fd0:	0648      	lsls	r0, r1, #25
 8009fd2:	d5ac      	bpl.n	8009f2e <_printf_i+0xe2>
 8009fd4:	b2ad      	uxth	r5, r5
 8009fd6:	e7aa      	b.n	8009f2e <_printf_i+0xe2>
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	680d      	ldr	r5, [r1, #0]
 8009fdc:	1d10      	adds	r0, r2, #4
 8009fde:	6949      	ldr	r1, [r1, #20]
 8009fe0:	6018      	str	r0, [r3, #0]
 8009fe2:	6813      	ldr	r3, [r2, #0]
 8009fe4:	062e      	lsls	r6, r5, #24
 8009fe6:	d501      	bpl.n	8009fec <_printf_i+0x1a0>
 8009fe8:	6019      	str	r1, [r3, #0]
 8009fea:	e002      	b.n	8009ff2 <_printf_i+0x1a6>
 8009fec:	066d      	lsls	r5, r5, #25
 8009fee:	d5fb      	bpl.n	8009fe8 <_printf_i+0x19c>
 8009ff0:	8019      	strh	r1, [r3, #0]
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	9e04      	ldr	r6, [sp, #16]
 8009ff6:	6123      	str	r3, [r4, #16]
 8009ff8:	e7d2      	b.n	8009fa0 <_printf_i+0x154>
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	1d11      	adds	r1, r2, #4
 8009ffe:	6019      	str	r1, [r3, #0]
 800a000:	6816      	ldr	r6, [r2, #0]
 800a002:	2100      	movs	r1, #0
 800a004:	0030      	movs	r0, r6
 800a006:	6862      	ldr	r2, [r4, #4]
 800a008:	f000 ff0a 	bl	800ae20 <memchr>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d001      	beq.n	800a014 <_printf_i+0x1c8>
 800a010:	1b80      	subs	r0, r0, r6
 800a012:	6060      	str	r0, [r4, #4]
 800a014:	6863      	ldr	r3, [r4, #4]
 800a016:	6123      	str	r3, [r4, #16]
 800a018:	2300      	movs	r3, #0
 800a01a:	9a04      	ldr	r2, [sp, #16]
 800a01c:	7013      	strb	r3, [r2, #0]
 800a01e:	e7bf      	b.n	8009fa0 <_printf_i+0x154>
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	0032      	movs	r2, r6
 800a024:	9906      	ldr	r1, [sp, #24]
 800a026:	9805      	ldr	r0, [sp, #20]
 800a028:	9d07      	ldr	r5, [sp, #28]
 800a02a:	47a8      	blx	r5
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d0c1      	beq.n	8009fb4 <_printf_i+0x168>
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	079b      	lsls	r3, r3, #30
 800a034:	d415      	bmi.n	800a062 <_printf_i+0x216>
 800a036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a038:	68e0      	ldr	r0, [r4, #12]
 800a03a:	4298      	cmp	r0, r3
 800a03c:	dabc      	bge.n	8009fb8 <_printf_i+0x16c>
 800a03e:	0018      	movs	r0, r3
 800a040:	e7ba      	b.n	8009fb8 <_printf_i+0x16c>
 800a042:	0022      	movs	r2, r4
 800a044:	2301      	movs	r3, #1
 800a046:	9906      	ldr	r1, [sp, #24]
 800a048:	9805      	ldr	r0, [sp, #20]
 800a04a:	9e07      	ldr	r6, [sp, #28]
 800a04c:	3219      	adds	r2, #25
 800a04e:	47b0      	blx	r6
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d0af      	beq.n	8009fb4 <_printf_i+0x168>
 800a054:	3501      	adds	r5, #1
 800a056:	68e3      	ldr	r3, [r4, #12]
 800a058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a05a:	1a9b      	subs	r3, r3, r2
 800a05c:	42ab      	cmp	r3, r5
 800a05e:	dcf0      	bgt.n	800a042 <_printf_i+0x1f6>
 800a060:	e7e9      	b.n	800a036 <_printf_i+0x1ea>
 800a062:	2500      	movs	r5, #0
 800a064:	e7f7      	b.n	800a056 <_printf_i+0x20a>
 800a066:	46c0      	nop			; (mov r8, r8)
 800a068:	0800dece 	.word	0x0800dece
 800a06c:	0800dedf 	.word	0x0800dedf

0800a070 <siprintf>:
 800a070:	b40e      	push	{r1, r2, r3}
 800a072:	b500      	push	{lr}
 800a074:	490b      	ldr	r1, [pc, #44]	; (800a0a4 <siprintf+0x34>)
 800a076:	b09c      	sub	sp, #112	; 0x70
 800a078:	ab1d      	add	r3, sp, #116	; 0x74
 800a07a:	9002      	str	r0, [sp, #8]
 800a07c:	9006      	str	r0, [sp, #24]
 800a07e:	9107      	str	r1, [sp, #28]
 800a080:	9104      	str	r1, [sp, #16]
 800a082:	4809      	ldr	r0, [pc, #36]	; (800a0a8 <siprintf+0x38>)
 800a084:	4909      	ldr	r1, [pc, #36]	; (800a0ac <siprintf+0x3c>)
 800a086:	cb04      	ldmia	r3!, {r2}
 800a088:	9105      	str	r1, [sp, #20]
 800a08a:	6800      	ldr	r0, [r0, #0]
 800a08c:	a902      	add	r1, sp, #8
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	f001 fb90 	bl	800b7b4 <_svfiprintf_r>
 800a094:	2300      	movs	r3, #0
 800a096:	9a02      	ldr	r2, [sp, #8]
 800a098:	7013      	strb	r3, [r2, #0]
 800a09a:	b01c      	add	sp, #112	; 0x70
 800a09c:	bc08      	pop	{r3}
 800a09e:	b003      	add	sp, #12
 800a0a0:	4718      	bx	r3
 800a0a2:	46c0      	nop			; (mov r8, r8)
 800a0a4:	7fffffff 	.word	0x7fffffff
 800a0a8:	20000084 	.word	0x20000084
 800a0ac:	ffff0208 	.word	0xffff0208

0800a0b0 <quorem>:
 800a0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0b2:	0006      	movs	r6, r0
 800a0b4:	690d      	ldr	r5, [r1, #16]
 800a0b6:	6933      	ldr	r3, [r6, #16]
 800a0b8:	b087      	sub	sp, #28
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	9102      	str	r1, [sp, #8]
 800a0be:	42ab      	cmp	r3, r5
 800a0c0:	db6b      	blt.n	800a19a <quorem+0xea>
 800a0c2:	000b      	movs	r3, r1
 800a0c4:	3d01      	subs	r5, #1
 800a0c6:	00ac      	lsls	r4, r5, #2
 800a0c8:	3314      	adds	r3, #20
 800a0ca:	9305      	str	r3, [sp, #20]
 800a0cc:	191b      	adds	r3, r3, r4
 800a0ce:	9303      	str	r3, [sp, #12]
 800a0d0:	0033      	movs	r3, r6
 800a0d2:	3314      	adds	r3, #20
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	191c      	adds	r4, r3, r4
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	6827      	ldr	r7, [r4, #0]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	0038      	movs	r0, r7
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	0019      	movs	r1, r3
 800a0e6:	9304      	str	r3, [sp, #16]
 800a0e8:	f7f6 f828 	bl	800013c <__udivsi3>
 800a0ec:	9b04      	ldr	r3, [sp, #16]
 800a0ee:	9000      	str	r0, [sp, #0]
 800a0f0:	429f      	cmp	r7, r3
 800a0f2:	d329      	bcc.n	800a148 <quorem+0x98>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	469c      	mov	ip, r3
 800a0f8:	9801      	ldr	r0, [sp, #4]
 800a0fa:	9f05      	ldr	r7, [sp, #20]
 800a0fc:	9304      	str	r3, [sp, #16]
 800a0fe:	cf08      	ldmia	r7!, {r3}
 800a100:	9a00      	ldr	r2, [sp, #0]
 800a102:	b299      	uxth	r1, r3
 800a104:	4351      	muls	r1, r2
 800a106:	0c1b      	lsrs	r3, r3, #16
 800a108:	4353      	muls	r3, r2
 800a10a:	4461      	add	r1, ip
 800a10c:	0c0a      	lsrs	r2, r1, #16
 800a10e:	189b      	adds	r3, r3, r2
 800a110:	0c1a      	lsrs	r2, r3, #16
 800a112:	9305      	str	r3, [sp, #20]
 800a114:	6803      	ldr	r3, [r0, #0]
 800a116:	4694      	mov	ip, r2
 800a118:	b29a      	uxth	r2, r3
 800a11a:	9b04      	ldr	r3, [sp, #16]
 800a11c:	b289      	uxth	r1, r1
 800a11e:	18d2      	adds	r2, r2, r3
 800a120:	6803      	ldr	r3, [r0, #0]
 800a122:	1a52      	subs	r2, r2, r1
 800a124:	0c19      	lsrs	r1, r3, #16
 800a126:	466b      	mov	r3, sp
 800a128:	8a9b      	ldrh	r3, [r3, #20]
 800a12a:	1acb      	subs	r3, r1, r3
 800a12c:	1411      	asrs	r1, r2, #16
 800a12e:	185b      	adds	r3, r3, r1
 800a130:	1419      	asrs	r1, r3, #16
 800a132:	b292      	uxth	r2, r2
 800a134:	041b      	lsls	r3, r3, #16
 800a136:	431a      	orrs	r2, r3
 800a138:	9b03      	ldr	r3, [sp, #12]
 800a13a:	9104      	str	r1, [sp, #16]
 800a13c:	c004      	stmia	r0!, {r2}
 800a13e:	42bb      	cmp	r3, r7
 800a140:	d2dd      	bcs.n	800a0fe <quorem+0x4e>
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d02e      	beq.n	800a1a6 <quorem+0xf6>
 800a148:	0030      	movs	r0, r6
 800a14a:	9902      	ldr	r1, [sp, #8]
 800a14c:	f001 f902 	bl	800b354 <__mcmp>
 800a150:	2800      	cmp	r0, #0
 800a152:	db21      	blt.n	800a198 <quorem+0xe8>
 800a154:	0030      	movs	r0, r6
 800a156:	2400      	movs	r4, #0
 800a158:	9b00      	ldr	r3, [sp, #0]
 800a15a:	9902      	ldr	r1, [sp, #8]
 800a15c:	3301      	adds	r3, #1
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	3014      	adds	r0, #20
 800a162:	3114      	adds	r1, #20
 800a164:	6802      	ldr	r2, [r0, #0]
 800a166:	c908      	ldmia	r1!, {r3}
 800a168:	b292      	uxth	r2, r2
 800a16a:	1914      	adds	r4, r2, r4
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	1aa2      	subs	r2, r4, r2
 800a170:	6804      	ldr	r4, [r0, #0]
 800a172:	0c1b      	lsrs	r3, r3, #16
 800a174:	0c24      	lsrs	r4, r4, #16
 800a176:	1ae3      	subs	r3, r4, r3
 800a178:	1414      	asrs	r4, r2, #16
 800a17a:	191b      	adds	r3, r3, r4
 800a17c:	141c      	asrs	r4, r3, #16
 800a17e:	b292      	uxth	r2, r2
 800a180:	041b      	lsls	r3, r3, #16
 800a182:	4313      	orrs	r3, r2
 800a184:	c008      	stmia	r0!, {r3}
 800a186:	9b03      	ldr	r3, [sp, #12]
 800a188:	428b      	cmp	r3, r1
 800a18a:	d2eb      	bcs.n	800a164 <quorem+0xb4>
 800a18c:	9a01      	ldr	r2, [sp, #4]
 800a18e:	00ab      	lsls	r3, r5, #2
 800a190:	18d3      	adds	r3, r2, r3
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	2a00      	cmp	r2, #0
 800a196:	d010      	beq.n	800a1ba <quorem+0x10a>
 800a198:	9800      	ldr	r0, [sp, #0]
 800a19a:	b007      	add	sp, #28
 800a19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d104      	bne.n	800a1ae <quorem+0xfe>
 800a1a4:	3d01      	subs	r5, #1
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	3c04      	subs	r4, #4
 800a1aa:	42a3      	cmp	r3, r4
 800a1ac:	d3f7      	bcc.n	800a19e <quorem+0xee>
 800a1ae:	6135      	str	r5, [r6, #16]
 800a1b0:	e7ca      	b.n	800a148 <quorem+0x98>
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	2a00      	cmp	r2, #0
 800a1b6:	d104      	bne.n	800a1c2 <quorem+0x112>
 800a1b8:	3d01      	subs	r5, #1
 800a1ba:	9a01      	ldr	r2, [sp, #4]
 800a1bc:	3b04      	subs	r3, #4
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d3f7      	bcc.n	800a1b2 <quorem+0x102>
 800a1c2:	6135      	str	r5, [r6, #16]
 800a1c4:	e7e8      	b.n	800a198 <quorem+0xe8>
	...

0800a1c8 <_dtoa_r>:
 800a1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ca:	b09d      	sub	sp, #116	; 0x74
 800a1cc:	9202      	str	r2, [sp, #8]
 800a1ce:	9303      	str	r3, [sp, #12]
 800a1d0:	9b02      	ldr	r3, [sp, #8]
 800a1d2:	9c03      	ldr	r4, [sp, #12]
 800a1d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a1d6:	940b      	str	r4, [sp, #44]	; 0x2c
 800a1d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a1da:	0007      	movs	r7, r0
 800a1dc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a1de:	2c00      	cmp	r4, #0
 800a1e0:	d10e      	bne.n	800a200 <_dtoa_r+0x38>
 800a1e2:	2010      	movs	r0, #16
 800a1e4:	f000 fe12 	bl	800ae0c <malloc>
 800a1e8:	1e02      	subs	r2, r0, #0
 800a1ea:	6278      	str	r0, [r7, #36]	; 0x24
 800a1ec:	d104      	bne.n	800a1f8 <_dtoa_r+0x30>
 800a1ee:	21ea      	movs	r1, #234	; 0xea
 800a1f0:	4bc0      	ldr	r3, [pc, #768]	; (800a4f4 <_dtoa_r+0x32c>)
 800a1f2:	48c1      	ldr	r0, [pc, #772]	; (800a4f8 <_dtoa_r+0x330>)
 800a1f4:	f001 fbf0 	bl	800b9d8 <__assert_func>
 800a1f8:	6044      	str	r4, [r0, #4]
 800a1fa:	6084      	str	r4, [r0, #8]
 800a1fc:	6004      	str	r4, [r0, #0]
 800a1fe:	60c4      	str	r4, [r0, #12]
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	6819      	ldr	r1, [r3, #0]
 800a204:	2900      	cmp	r1, #0
 800a206:	d00a      	beq.n	800a21e <_dtoa_r+0x56>
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	2301      	movs	r3, #1
 800a20c:	4093      	lsls	r3, r2
 800a20e:	604a      	str	r2, [r1, #4]
 800a210:	608b      	str	r3, [r1, #8]
 800a212:	0038      	movs	r0, r7
 800a214:	f000 fe5c 	bl	800aed0 <_Bfree>
 800a218:	2200      	movs	r2, #0
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	da21      	bge.n	800a268 <_dtoa_r+0xa0>
 800a224:	2301      	movs	r3, #1
 800a226:	602b      	str	r3, [r5, #0]
 800a228:	9b03      	ldr	r3, [sp, #12]
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	085b      	lsrs	r3, r3, #1
 800a22e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a230:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a232:	4bb2      	ldr	r3, [pc, #712]	; (800a4fc <_dtoa_r+0x334>)
 800a234:	002a      	movs	r2, r5
 800a236:	9318      	str	r3, [sp, #96]	; 0x60
 800a238:	401a      	ands	r2, r3
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d117      	bne.n	800a26e <_dtoa_r+0xa6>
 800a23e:	4bb0      	ldr	r3, [pc, #704]	; (800a500 <_dtoa_r+0x338>)
 800a240:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a242:	0328      	lsls	r0, r5, #12
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	9b02      	ldr	r3, [sp, #8]
 800a248:	0b00      	lsrs	r0, r0, #12
 800a24a:	4318      	orrs	r0, r3
 800a24c:	d101      	bne.n	800a252 <_dtoa_r+0x8a>
 800a24e:	f000 fdc3 	bl	800add8 <_dtoa_r+0xc10>
 800a252:	48ac      	ldr	r0, [pc, #688]	; (800a504 <_dtoa_r+0x33c>)
 800a254:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a256:	9005      	str	r0, [sp, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <_dtoa_r+0x9a>
 800a25c:	4baa      	ldr	r3, [pc, #680]	; (800a508 <_dtoa_r+0x340>)
 800a25e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a260:	6013      	str	r3, [r2, #0]
 800a262:	9805      	ldr	r0, [sp, #20]
 800a264:	b01d      	add	sp, #116	; 0x74
 800a266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a268:	2300      	movs	r3, #0
 800a26a:	602b      	str	r3, [r5, #0]
 800a26c:	e7e0      	b.n	800a230 <_dtoa_r+0x68>
 800a26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a270:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a272:	9312      	str	r3, [sp, #72]	; 0x48
 800a274:	9413      	str	r4, [sp, #76]	; 0x4c
 800a276:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a278:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a27a:	2200      	movs	r2, #0
 800a27c:	2300      	movs	r3, #0
 800a27e:	f7f6 f8e3 	bl	8000448 <__aeabi_dcmpeq>
 800a282:	1e04      	subs	r4, r0, #0
 800a284:	d00b      	beq.n	800a29e <_dtoa_r+0xd6>
 800a286:	2301      	movs	r3, #1
 800a288:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a28a:	6013      	str	r3, [r2, #0]
 800a28c:	4b9f      	ldr	r3, [pc, #636]	; (800a50c <_dtoa_r+0x344>)
 800a28e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a290:	9305      	str	r3, [sp, #20]
 800a292:	2a00      	cmp	r2, #0
 800a294:	d0e5      	beq.n	800a262 <_dtoa_r+0x9a>
 800a296:	4a9e      	ldr	r2, [pc, #632]	; (800a510 <_dtoa_r+0x348>)
 800a298:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a29a:	600a      	str	r2, [r1, #0]
 800a29c:	e7e1      	b.n	800a262 <_dtoa_r+0x9a>
 800a29e:	ab1a      	add	r3, sp, #104	; 0x68
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	ab1b      	add	r3, sp, #108	; 0x6c
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	0038      	movs	r0, r7
 800a2a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2ac:	f001 f906 	bl	800b4bc <__d2b>
 800a2b0:	006e      	lsls	r6, r5, #1
 800a2b2:	9004      	str	r0, [sp, #16]
 800a2b4:	0d76      	lsrs	r6, r6, #21
 800a2b6:	d100      	bne.n	800a2ba <_dtoa_r+0xf2>
 800a2b8:	e07c      	b.n	800a3b4 <_dtoa_r+0x1ec>
 800a2ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a2bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a2be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2c0:	4a94      	ldr	r2, [pc, #592]	; (800a514 <_dtoa_r+0x34c>)
 800a2c2:	031b      	lsls	r3, r3, #12
 800a2c4:	0b1b      	lsrs	r3, r3, #12
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	0011      	movs	r1, r2
 800a2ca:	4b93      	ldr	r3, [pc, #588]	; (800a518 <_dtoa_r+0x350>)
 800a2cc:	9416      	str	r4, [sp, #88]	; 0x58
 800a2ce:	18f6      	adds	r6, r6, r3
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4b92      	ldr	r3, [pc, #584]	; (800a51c <_dtoa_r+0x354>)
 800a2d4:	f7f8 fb06 	bl	80028e4 <__aeabi_dsub>
 800a2d8:	4a91      	ldr	r2, [pc, #580]	; (800a520 <_dtoa_r+0x358>)
 800a2da:	4b92      	ldr	r3, [pc, #584]	; (800a524 <_dtoa_r+0x35c>)
 800a2dc:	f7f8 f896 	bl	800240c <__aeabi_dmul>
 800a2e0:	4a91      	ldr	r2, [pc, #580]	; (800a528 <_dtoa_r+0x360>)
 800a2e2:	4b92      	ldr	r3, [pc, #584]	; (800a52c <_dtoa_r+0x364>)
 800a2e4:	f7f7 f922 	bl	800152c <__aeabi_dadd>
 800a2e8:	0004      	movs	r4, r0
 800a2ea:	0030      	movs	r0, r6
 800a2ec:	000d      	movs	r5, r1
 800a2ee:	f7f8 fedf 	bl	80030b0 <__aeabi_i2d>
 800a2f2:	4a8f      	ldr	r2, [pc, #572]	; (800a530 <_dtoa_r+0x368>)
 800a2f4:	4b8f      	ldr	r3, [pc, #572]	; (800a534 <_dtoa_r+0x36c>)
 800a2f6:	f7f8 f889 	bl	800240c <__aeabi_dmul>
 800a2fa:	0002      	movs	r2, r0
 800a2fc:	000b      	movs	r3, r1
 800a2fe:	0020      	movs	r0, r4
 800a300:	0029      	movs	r1, r5
 800a302:	f7f7 f913 	bl	800152c <__aeabi_dadd>
 800a306:	0004      	movs	r4, r0
 800a308:	000d      	movs	r5, r1
 800a30a:	f7f8 fe9b 	bl	8003044 <__aeabi_d2iz>
 800a30e:	2200      	movs	r2, #0
 800a310:	9002      	str	r0, [sp, #8]
 800a312:	2300      	movs	r3, #0
 800a314:	0020      	movs	r0, r4
 800a316:	0029      	movs	r1, r5
 800a318:	f7f6 f89c 	bl	8000454 <__aeabi_dcmplt>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d00b      	beq.n	800a338 <_dtoa_r+0x170>
 800a320:	9802      	ldr	r0, [sp, #8]
 800a322:	f7f8 fec5 	bl	80030b0 <__aeabi_i2d>
 800a326:	002b      	movs	r3, r5
 800a328:	0022      	movs	r2, r4
 800a32a:	f7f6 f88d 	bl	8000448 <__aeabi_dcmpeq>
 800a32e:	4243      	negs	r3, r0
 800a330:	4158      	adcs	r0, r3
 800a332:	9b02      	ldr	r3, [sp, #8]
 800a334:	1a1b      	subs	r3, r3, r0
 800a336:	9302      	str	r3, [sp, #8]
 800a338:	2301      	movs	r3, #1
 800a33a:	9315      	str	r3, [sp, #84]	; 0x54
 800a33c:	9b02      	ldr	r3, [sp, #8]
 800a33e:	2b16      	cmp	r3, #22
 800a340:	d80f      	bhi.n	800a362 <_dtoa_r+0x19a>
 800a342:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a344:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a346:	00da      	lsls	r2, r3, #3
 800a348:	4b7b      	ldr	r3, [pc, #492]	; (800a538 <_dtoa_r+0x370>)
 800a34a:	189b      	adds	r3, r3, r2
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	f7f6 f880 	bl	8000454 <__aeabi_dcmplt>
 800a354:	2800      	cmp	r0, #0
 800a356:	d049      	beq.n	800a3ec <_dtoa_r+0x224>
 800a358:	9b02      	ldr	r3, [sp, #8]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	9302      	str	r3, [sp, #8]
 800a35e:	2300      	movs	r3, #0
 800a360:	9315      	str	r3, [sp, #84]	; 0x54
 800a362:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a364:	1b9e      	subs	r6, r3, r6
 800a366:	2300      	movs	r3, #0
 800a368:	9308      	str	r3, [sp, #32]
 800a36a:	0033      	movs	r3, r6
 800a36c:	3b01      	subs	r3, #1
 800a36e:	930d      	str	r3, [sp, #52]	; 0x34
 800a370:	d504      	bpl.n	800a37c <_dtoa_r+0x1b4>
 800a372:	2301      	movs	r3, #1
 800a374:	1b9b      	subs	r3, r3, r6
 800a376:	9308      	str	r3, [sp, #32]
 800a378:	2300      	movs	r3, #0
 800a37a:	930d      	str	r3, [sp, #52]	; 0x34
 800a37c:	9b02      	ldr	r3, [sp, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	db36      	blt.n	800a3f0 <_dtoa_r+0x228>
 800a382:	9a02      	ldr	r2, [sp, #8]
 800a384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a386:	4694      	mov	ip, r2
 800a388:	4463      	add	r3, ip
 800a38a:	930d      	str	r3, [sp, #52]	; 0x34
 800a38c:	2300      	movs	r3, #0
 800a38e:	9214      	str	r2, [sp, #80]	; 0x50
 800a390:	930e      	str	r3, [sp, #56]	; 0x38
 800a392:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a394:	2401      	movs	r4, #1
 800a396:	2b09      	cmp	r3, #9
 800a398:	d862      	bhi.n	800a460 <_dtoa_r+0x298>
 800a39a:	2b05      	cmp	r3, #5
 800a39c:	dd02      	ble.n	800a3a4 <_dtoa_r+0x1dc>
 800a39e:	2400      	movs	r4, #0
 800a3a0:	3b04      	subs	r3, #4
 800a3a2:	9322      	str	r3, [sp, #136]	; 0x88
 800a3a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3a6:	1e98      	subs	r0, r3, #2
 800a3a8:	2803      	cmp	r0, #3
 800a3aa:	d862      	bhi.n	800a472 <_dtoa_r+0x2aa>
 800a3ac:	f7f5 feb2 	bl	8000114 <__gnu_thumb1_case_uqi>
 800a3b0:	56343629 	.word	0x56343629
 800a3b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a3b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a3b8:	189e      	adds	r6, r3, r2
 800a3ba:	4b60      	ldr	r3, [pc, #384]	; (800a53c <_dtoa_r+0x374>)
 800a3bc:	18f2      	adds	r2, r6, r3
 800a3be:	2a20      	cmp	r2, #32
 800a3c0:	dd0f      	ble.n	800a3e2 <_dtoa_r+0x21a>
 800a3c2:	2340      	movs	r3, #64	; 0x40
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	409d      	lsls	r5, r3
 800a3c8:	4b5d      	ldr	r3, [pc, #372]	; (800a540 <_dtoa_r+0x378>)
 800a3ca:	9802      	ldr	r0, [sp, #8]
 800a3cc:	18f3      	adds	r3, r6, r3
 800a3ce:	40d8      	lsrs	r0, r3
 800a3d0:	4328      	orrs	r0, r5
 800a3d2:	f7f8 fe9d 	bl	8003110 <__aeabi_ui2d>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	4c5a      	ldr	r4, [pc, #360]	; (800a544 <_dtoa_r+0x37c>)
 800a3da:	3e01      	subs	r6, #1
 800a3dc:	1909      	adds	r1, r1, r4
 800a3de:	9316      	str	r3, [sp, #88]	; 0x58
 800a3e0:	e776      	b.n	800a2d0 <_dtoa_r+0x108>
 800a3e2:	2320      	movs	r3, #32
 800a3e4:	9802      	ldr	r0, [sp, #8]
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	4098      	lsls	r0, r3
 800a3ea:	e7f2      	b.n	800a3d2 <_dtoa_r+0x20a>
 800a3ec:	9015      	str	r0, [sp, #84]	; 0x54
 800a3ee:	e7b8      	b.n	800a362 <_dtoa_r+0x19a>
 800a3f0:	9b08      	ldr	r3, [sp, #32]
 800a3f2:	9a02      	ldr	r2, [sp, #8]
 800a3f4:	1a9b      	subs	r3, r3, r2
 800a3f6:	9308      	str	r3, [sp, #32]
 800a3f8:	4253      	negs	r3, r2
 800a3fa:	930e      	str	r3, [sp, #56]	; 0x38
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	9314      	str	r3, [sp, #80]	; 0x50
 800a400:	e7c7      	b.n	800a392 <_dtoa_r+0x1ca>
 800a402:	2300      	movs	r3, #0
 800a404:	930f      	str	r3, [sp, #60]	; 0x3c
 800a406:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dc36      	bgt.n	800a47a <_dtoa_r+0x2b2>
 800a40c:	2301      	movs	r3, #1
 800a40e:	001a      	movs	r2, r3
 800a410:	930c      	str	r3, [sp, #48]	; 0x30
 800a412:	9306      	str	r3, [sp, #24]
 800a414:	9223      	str	r2, [sp, #140]	; 0x8c
 800a416:	e00d      	b.n	800a434 <_dtoa_r+0x26c>
 800a418:	2301      	movs	r3, #1
 800a41a:	e7f3      	b.n	800a404 <_dtoa_r+0x23c>
 800a41c:	2300      	movs	r3, #0
 800a41e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a420:	930f      	str	r3, [sp, #60]	; 0x3c
 800a422:	4694      	mov	ip, r2
 800a424:	9b02      	ldr	r3, [sp, #8]
 800a426:	4463      	add	r3, ip
 800a428:	930c      	str	r3, [sp, #48]	; 0x30
 800a42a:	3301      	adds	r3, #1
 800a42c:	9306      	str	r3, [sp, #24]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	dc00      	bgt.n	800a434 <_dtoa_r+0x26c>
 800a432:	2301      	movs	r3, #1
 800a434:	2200      	movs	r2, #0
 800a436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a438:	6042      	str	r2, [r0, #4]
 800a43a:	3204      	adds	r2, #4
 800a43c:	0015      	movs	r5, r2
 800a43e:	3514      	adds	r5, #20
 800a440:	6841      	ldr	r1, [r0, #4]
 800a442:	429d      	cmp	r5, r3
 800a444:	d91d      	bls.n	800a482 <_dtoa_r+0x2ba>
 800a446:	0038      	movs	r0, r7
 800a448:	f000 fcfe 	bl	800ae48 <_Balloc>
 800a44c:	9005      	str	r0, [sp, #20]
 800a44e:	2800      	cmp	r0, #0
 800a450:	d11b      	bne.n	800a48a <_dtoa_r+0x2c2>
 800a452:	21d5      	movs	r1, #213	; 0xd5
 800a454:	0002      	movs	r2, r0
 800a456:	4b3c      	ldr	r3, [pc, #240]	; (800a548 <_dtoa_r+0x380>)
 800a458:	0049      	lsls	r1, r1, #1
 800a45a:	e6ca      	b.n	800a1f2 <_dtoa_r+0x2a>
 800a45c:	2301      	movs	r3, #1
 800a45e:	e7de      	b.n	800a41e <_dtoa_r+0x256>
 800a460:	2300      	movs	r3, #0
 800a462:	940f      	str	r4, [sp, #60]	; 0x3c
 800a464:	9322      	str	r3, [sp, #136]	; 0x88
 800a466:	3b01      	subs	r3, #1
 800a468:	930c      	str	r3, [sp, #48]	; 0x30
 800a46a:	9306      	str	r3, [sp, #24]
 800a46c:	2200      	movs	r2, #0
 800a46e:	3313      	adds	r3, #19
 800a470:	e7d0      	b.n	800a414 <_dtoa_r+0x24c>
 800a472:	2301      	movs	r3, #1
 800a474:	930f      	str	r3, [sp, #60]	; 0x3c
 800a476:	3b02      	subs	r3, #2
 800a478:	e7f6      	b.n	800a468 <_dtoa_r+0x2a0>
 800a47a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a47c:	930c      	str	r3, [sp, #48]	; 0x30
 800a47e:	9306      	str	r3, [sp, #24]
 800a480:	e7d8      	b.n	800a434 <_dtoa_r+0x26c>
 800a482:	3101      	adds	r1, #1
 800a484:	6041      	str	r1, [r0, #4]
 800a486:	0052      	lsls	r2, r2, #1
 800a488:	e7d8      	b.n	800a43c <_dtoa_r+0x274>
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	9a05      	ldr	r2, [sp, #20]
 800a48e:	601a      	str	r2, [r3, #0]
 800a490:	9b06      	ldr	r3, [sp, #24]
 800a492:	2b0e      	cmp	r3, #14
 800a494:	d900      	bls.n	800a498 <_dtoa_r+0x2d0>
 800a496:	e0eb      	b.n	800a670 <_dtoa_r+0x4a8>
 800a498:	2c00      	cmp	r4, #0
 800a49a:	d100      	bne.n	800a49e <_dtoa_r+0x2d6>
 800a49c:	e0e8      	b.n	800a670 <_dtoa_r+0x4a8>
 800a49e:	9b02      	ldr	r3, [sp, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	dd68      	ble.n	800a576 <_dtoa_r+0x3ae>
 800a4a4:	001a      	movs	r2, r3
 800a4a6:	210f      	movs	r1, #15
 800a4a8:	4b23      	ldr	r3, [pc, #140]	; (800a538 <_dtoa_r+0x370>)
 800a4aa:	400a      	ands	r2, r1
 800a4ac:	00d2      	lsls	r2, r2, #3
 800a4ae:	189b      	adds	r3, r3, r2
 800a4b0:	681d      	ldr	r5, [r3, #0]
 800a4b2:	685e      	ldr	r6, [r3, #4]
 800a4b4:	9b02      	ldr	r3, [sp, #8]
 800a4b6:	111c      	asrs	r4, r3, #4
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	9310      	str	r3, [sp, #64]	; 0x40
 800a4bc:	9b02      	ldr	r3, [sp, #8]
 800a4be:	05db      	lsls	r3, r3, #23
 800a4c0:	d50b      	bpl.n	800a4da <_dtoa_r+0x312>
 800a4c2:	4b22      	ldr	r3, [pc, #136]	; (800a54c <_dtoa_r+0x384>)
 800a4c4:	400c      	ands	r4, r1
 800a4c6:	6a1a      	ldr	r2, [r3, #32]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a4cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a4ce:	f7f7 fb97 	bl	8001c00 <__aeabi_ddiv>
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	900a      	str	r0, [sp, #40]	; 0x28
 800a4d6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a4d8:	9310      	str	r3, [sp, #64]	; 0x40
 800a4da:	4b1c      	ldr	r3, [pc, #112]	; (800a54c <_dtoa_r+0x384>)
 800a4dc:	9307      	str	r3, [sp, #28]
 800a4de:	2c00      	cmp	r4, #0
 800a4e0:	d136      	bne.n	800a550 <_dtoa_r+0x388>
 800a4e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4e6:	002a      	movs	r2, r5
 800a4e8:	0033      	movs	r3, r6
 800a4ea:	f7f7 fb89 	bl	8001c00 <__aeabi_ddiv>
 800a4ee:	900a      	str	r0, [sp, #40]	; 0x28
 800a4f0:	910b      	str	r1, [sp, #44]	; 0x2c
 800a4f2:	e05c      	b.n	800a5ae <_dtoa_r+0x3e6>
 800a4f4:	0800defd 	.word	0x0800defd
 800a4f8:	0800df14 	.word	0x0800df14
 800a4fc:	7ff00000 	.word	0x7ff00000
 800a500:	0000270f 	.word	0x0000270f
 800a504:	0800def9 	.word	0x0800def9
 800a508:	0800defc 	.word	0x0800defc
 800a50c:	0800decc 	.word	0x0800decc
 800a510:	0800decd 	.word	0x0800decd
 800a514:	3ff00000 	.word	0x3ff00000
 800a518:	fffffc01 	.word	0xfffffc01
 800a51c:	3ff80000 	.word	0x3ff80000
 800a520:	636f4361 	.word	0x636f4361
 800a524:	3fd287a7 	.word	0x3fd287a7
 800a528:	8b60c8b3 	.word	0x8b60c8b3
 800a52c:	3fc68a28 	.word	0x3fc68a28
 800a530:	509f79fb 	.word	0x509f79fb
 800a534:	3fd34413 	.word	0x3fd34413
 800a538:	0800e010 	.word	0x0800e010
 800a53c:	00000432 	.word	0x00000432
 800a540:	00000412 	.word	0x00000412
 800a544:	fe100000 	.word	0xfe100000
 800a548:	0800df73 	.word	0x0800df73
 800a54c:	0800dfe8 	.word	0x0800dfe8
 800a550:	2301      	movs	r3, #1
 800a552:	421c      	tst	r4, r3
 800a554:	d00b      	beq.n	800a56e <_dtoa_r+0x3a6>
 800a556:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a558:	0028      	movs	r0, r5
 800a55a:	3301      	adds	r3, #1
 800a55c:	9310      	str	r3, [sp, #64]	; 0x40
 800a55e:	9b07      	ldr	r3, [sp, #28]
 800a560:	0031      	movs	r1, r6
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f7f7 ff51 	bl	800240c <__aeabi_dmul>
 800a56a:	0005      	movs	r5, r0
 800a56c:	000e      	movs	r6, r1
 800a56e:	9b07      	ldr	r3, [sp, #28]
 800a570:	1064      	asrs	r4, r4, #1
 800a572:	3308      	adds	r3, #8
 800a574:	e7b2      	b.n	800a4dc <_dtoa_r+0x314>
 800a576:	2302      	movs	r3, #2
 800a578:	9310      	str	r3, [sp, #64]	; 0x40
 800a57a:	9b02      	ldr	r3, [sp, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d016      	beq.n	800a5ae <_dtoa_r+0x3e6>
 800a580:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a582:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a584:	425c      	negs	r4, r3
 800a586:	230f      	movs	r3, #15
 800a588:	4ab5      	ldr	r2, [pc, #724]	; (800a860 <_dtoa_r+0x698>)
 800a58a:	4023      	ands	r3, r4
 800a58c:	00db      	lsls	r3, r3, #3
 800a58e:	18d3      	adds	r3, r2, r3
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f7f7 ff3a 	bl	800240c <__aeabi_dmul>
 800a598:	2601      	movs	r6, #1
 800a59a:	2300      	movs	r3, #0
 800a59c:	900a      	str	r0, [sp, #40]	; 0x28
 800a59e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a5a0:	4db0      	ldr	r5, [pc, #704]	; (800a864 <_dtoa_r+0x69c>)
 800a5a2:	1124      	asrs	r4, r4, #4
 800a5a4:	2c00      	cmp	r4, #0
 800a5a6:	d000      	beq.n	800a5aa <_dtoa_r+0x3e2>
 800a5a8:	e094      	b.n	800a6d4 <_dtoa_r+0x50c>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d19f      	bne.n	800a4ee <_dtoa_r+0x326>
 800a5ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d100      	bne.n	800a5b6 <_dtoa_r+0x3ee>
 800a5b4:	e09b      	b.n	800a6ee <_dtoa_r+0x526>
 800a5b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a5b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	0020      	movs	r0, r4
 800a5be:	0029      	movs	r1, r5
 800a5c0:	4ba9      	ldr	r3, [pc, #676]	; (800a868 <_dtoa_r+0x6a0>)
 800a5c2:	f7f5 ff47 	bl	8000454 <__aeabi_dcmplt>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d100      	bne.n	800a5cc <_dtoa_r+0x404>
 800a5ca:	e090      	b.n	800a6ee <_dtoa_r+0x526>
 800a5cc:	9b06      	ldr	r3, [sp, #24]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d100      	bne.n	800a5d4 <_dtoa_r+0x40c>
 800a5d2:	e08c      	b.n	800a6ee <_dtoa_r+0x526>
 800a5d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	dd46      	ble.n	800a668 <_dtoa_r+0x4a0>
 800a5da:	9b02      	ldr	r3, [sp, #8]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	0020      	movs	r0, r4
 800a5e0:	0029      	movs	r1, r5
 800a5e2:	1e5e      	subs	r6, r3, #1
 800a5e4:	4ba1      	ldr	r3, [pc, #644]	; (800a86c <_dtoa_r+0x6a4>)
 800a5e6:	f7f7 ff11 	bl	800240c <__aeabi_dmul>
 800a5ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5ec:	900a      	str	r0, [sp, #40]	; 0x28
 800a5ee:	910b      	str	r1, [sp, #44]	; 0x2c
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	9310      	str	r3, [sp, #64]	; 0x40
 800a5f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a5f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a5fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a5fc:	9307      	str	r3, [sp, #28]
 800a5fe:	f7f8 fd57 	bl	80030b0 <__aeabi_i2d>
 800a602:	0022      	movs	r2, r4
 800a604:	002b      	movs	r3, r5
 800a606:	f7f7 ff01 	bl	800240c <__aeabi_dmul>
 800a60a:	2200      	movs	r2, #0
 800a60c:	4b98      	ldr	r3, [pc, #608]	; (800a870 <_dtoa_r+0x6a8>)
 800a60e:	f7f6 ff8d 	bl	800152c <__aeabi_dadd>
 800a612:	9010      	str	r0, [sp, #64]	; 0x40
 800a614:	9111      	str	r1, [sp, #68]	; 0x44
 800a616:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a61a:	920a      	str	r2, [sp, #40]	; 0x28
 800a61c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a61e:	4a95      	ldr	r2, [pc, #596]	; (800a874 <_dtoa_r+0x6ac>)
 800a620:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a622:	4694      	mov	ip, r2
 800a624:	4463      	add	r3, ip
 800a626:	9317      	str	r3, [sp, #92]	; 0x5c
 800a628:	930b      	str	r3, [sp, #44]	; 0x2c
 800a62a:	9b07      	ldr	r3, [sp, #28]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d161      	bne.n	800a6f4 <_dtoa_r+0x52c>
 800a630:	2200      	movs	r2, #0
 800a632:	0020      	movs	r0, r4
 800a634:	0029      	movs	r1, r5
 800a636:	4b90      	ldr	r3, [pc, #576]	; (800a878 <_dtoa_r+0x6b0>)
 800a638:	f7f8 f954 	bl	80028e4 <__aeabi_dsub>
 800a63c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a63e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a640:	0004      	movs	r4, r0
 800a642:	000d      	movs	r5, r1
 800a644:	f7f5 ff1a 	bl	800047c <__aeabi_dcmpgt>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d000      	beq.n	800a64e <_dtoa_r+0x486>
 800a64c:	e2b5      	b.n	800abba <_dtoa_r+0x9f2>
 800a64e:	488b      	ldr	r0, [pc, #556]	; (800a87c <_dtoa_r+0x6b4>)
 800a650:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a652:	4684      	mov	ip, r0
 800a654:	4461      	add	r1, ip
 800a656:	000b      	movs	r3, r1
 800a658:	0020      	movs	r0, r4
 800a65a:	0029      	movs	r1, r5
 800a65c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a65e:	f7f5 fef9 	bl	8000454 <__aeabi_dcmplt>
 800a662:	2800      	cmp	r0, #0
 800a664:	d000      	beq.n	800a668 <_dtoa_r+0x4a0>
 800a666:	e2a5      	b.n	800abb4 <_dtoa_r+0x9ec>
 800a668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a66a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a66c:	930a      	str	r3, [sp, #40]	; 0x28
 800a66e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a670:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a672:	2b00      	cmp	r3, #0
 800a674:	da00      	bge.n	800a678 <_dtoa_r+0x4b0>
 800a676:	e171      	b.n	800a95c <_dtoa_r+0x794>
 800a678:	9a02      	ldr	r2, [sp, #8]
 800a67a:	2a0e      	cmp	r2, #14
 800a67c:	dd00      	ble.n	800a680 <_dtoa_r+0x4b8>
 800a67e:	e16d      	b.n	800a95c <_dtoa_r+0x794>
 800a680:	4b77      	ldr	r3, [pc, #476]	; (800a860 <_dtoa_r+0x698>)
 800a682:	00d2      	lsls	r2, r2, #3
 800a684:	189b      	adds	r3, r3, r2
 800a686:	685c      	ldr	r4, [r3, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	9308      	str	r3, [sp, #32]
 800a68c:	9409      	str	r4, [sp, #36]	; 0x24
 800a68e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a690:	2b00      	cmp	r3, #0
 800a692:	db00      	blt.n	800a696 <_dtoa_r+0x4ce>
 800a694:	e0f6      	b.n	800a884 <_dtoa_r+0x6bc>
 800a696:	9b06      	ldr	r3, [sp, #24]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	dd00      	ble.n	800a69e <_dtoa_r+0x4d6>
 800a69c:	e0f2      	b.n	800a884 <_dtoa_r+0x6bc>
 800a69e:	d000      	beq.n	800a6a2 <_dtoa_r+0x4da>
 800a6a0:	e288      	b.n	800abb4 <_dtoa_r+0x9ec>
 800a6a2:	9808      	ldr	r0, [sp, #32]
 800a6a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	4b73      	ldr	r3, [pc, #460]	; (800a878 <_dtoa_r+0x6b0>)
 800a6aa:	f7f7 feaf 	bl	800240c <__aeabi_dmul>
 800a6ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6b2:	f7f5 feed 	bl	8000490 <__aeabi_dcmpge>
 800a6b6:	9e06      	ldr	r6, [sp, #24]
 800a6b8:	0035      	movs	r5, r6
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d000      	beq.n	800a6c0 <_dtoa_r+0x4f8>
 800a6be:	e25f      	b.n	800ab80 <_dtoa_r+0x9b8>
 800a6c0:	9b05      	ldr	r3, [sp, #20]
 800a6c2:	9a05      	ldr	r2, [sp, #20]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	9307      	str	r3, [sp, #28]
 800a6c8:	2331      	movs	r3, #49	; 0x31
 800a6ca:	7013      	strb	r3, [r2, #0]
 800a6cc:	9b02      	ldr	r3, [sp, #8]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	9302      	str	r3, [sp, #8]
 800a6d2:	e25a      	b.n	800ab8a <_dtoa_r+0x9c2>
 800a6d4:	4234      	tst	r4, r6
 800a6d6:	d007      	beq.n	800a6e8 <_dtoa_r+0x520>
 800a6d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6da:	3301      	adds	r3, #1
 800a6dc:	9310      	str	r3, [sp, #64]	; 0x40
 800a6de:	682a      	ldr	r2, [r5, #0]
 800a6e0:	686b      	ldr	r3, [r5, #4]
 800a6e2:	f7f7 fe93 	bl	800240c <__aeabi_dmul>
 800a6e6:	0033      	movs	r3, r6
 800a6e8:	1064      	asrs	r4, r4, #1
 800a6ea:	3508      	adds	r5, #8
 800a6ec:	e75a      	b.n	800a5a4 <_dtoa_r+0x3dc>
 800a6ee:	9e02      	ldr	r6, [sp, #8]
 800a6f0:	9b06      	ldr	r3, [sp, #24]
 800a6f2:	e780      	b.n	800a5f6 <_dtoa_r+0x42e>
 800a6f4:	9b07      	ldr	r3, [sp, #28]
 800a6f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6f8:	1e5a      	subs	r2, r3, #1
 800a6fa:	4b59      	ldr	r3, [pc, #356]	; (800a860 <_dtoa_r+0x698>)
 800a6fc:	00d2      	lsls	r2, r2, #3
 800a6fe:	189b      	adds	r3, r3, r2
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	2900      	cmp	r1, #0
 800a706:	d051      	beq.n	800a7ac <_dtoa_r+0x5e4>
 800a708:	2000      	movs	r0, #0
 800a70a:	495d      	ldr	r1, [pc, #372]	; (800a880 <_dtoa_r+0x6b8>)
 800a70c:	f7f7 fa78 	bl	8001c00 <__aeabi_ddiv>
 800a710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a714:	f7f8 f8e6 	bl	80028e4 <__aeabi_dsub>
 800a718:	9a05      	ldr	r2, [sp, #20]
 800a71a:	9b05      	ldr	r3, [sp, #20]
 800a71c:	4694      	mov	ip, r2
 800a71e:	9310      	str	r3, [sp, #64]	; 0x40
 800a720:	9b07      	ldr	r3, [sp, #28]
 800a722:	900a      	str	r0, [sp, #40]	; 0x28
 800a724:	910b      	str	r1, [sp, #44]	; 0x2c
 800a726:	4463      	add	r3, ip
 800a728:	9319      	str	r3, [sp, #100]	; 0x64
 800a72a:	0029      	movs	r1, r5
 800a72c:	0020      	movs	r0, r4
 800a72e:	f7f8 fc89 	bl	8003044 <__aeabi_d2iz>
 800a732:	9017      	str	r0, [sp, #92]	; 0x5c
 800a734:	f7f8 fcbc 	bl	80030b0 <__aeabi_i2d>
 800a738:	0002      	movs	r2, r0
 800a73a:	000b      	movs	r3, r1
 800a73c:	0020      	movs	r0, r4
 800a73e:	0029      	movs	r1, r5
 800a740:	f7f8 f8d0 	bl	80028e4 <__aeabi_dsub>
 800a744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a746:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a748:	3301      	adds	r3, #1
 800a74a:	9307      	str	r3, [sp, #28]
 800a74c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a74e:	0004      	movs	r4, r0
 800a750:	3330      	adds	r3, #48	; 0x30
 800a752:	7013      	strb	r3, [r2, #0]
 800a754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a758:	000d      	movs	r5, r1
 800a75a:	f7f5 fe7b 	bl	8000454 <__aeabi_dcmplt>
 800a75e:	2800      	cmp	r0, #0
 800a760:	d175      	bne.n	800a84e <_dtoa_r+0x686>
 800a762:	0022      	movs	r2, r4
 800a764:	002b      	movs	r3, r5
 800a766:	2000      	movs	r0, #0
 800a768:	493f      	ldr	r1, [pc, #252]	; (800a868 <_dtoa_r+0x6a0>)
 800a76a:	f7f8 f8bb 	bl	80028e4 <__aeabi_dsub>
 800a76e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a772:	f7f5 fe6f 	bl	8000454 <__aeabi_dcmplt>
 800a776:	2800      	cmp	r0, #0
 800a778:	d000      	beq.n	800a77c <_dtoa_r+0x5b4>
 800a77a:	e0d1      	b.n	800a920 <_dtoa_r+0x758>
 800a77c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a77e:	9a07      	ldr	r2, [sp, #28]
 800a780:	4293      	cmp	r3, r2
 800a782:	d100      	bne.n	800a786 <_dtoa_r+0x5be>
 800a784:	e770      	b.n	800a668 <_dtoa_r+0x4a0>
 800a786:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a78a:	2200      	movs	r2, #0
 800a78c:	4b37      	ldr	r3, [pc, #220]	; (800a86c <_dtoa_r+0x6a4>)
 800a78e:	f7f7 fe3d 	bl	800240c <__aeabi_dmul>
 800a792:	4b36      	ldr	r3, [pc, #216]	; (800a86c <_dtoa_r+0x6a4>)
 800a794:	900a      	str	r0, [sp, #40]	; 0x28
 800a796:	910b      	str	r1, [sp, #44]	; 0x2c
 800a798:	2200      	movs	r2, #0
 800a79a:	0020      	movs	r0, r4
 800a79c:	0029      	movs	r1, r5
 800a79e:	f7f7 fe35 	bl	800240c <__aeabi_dmul>
 800a7a2:	9b07      	ldr	r3, [sp, #28]
 800a7a4:	0004      	movs	r4, r0
 800a7a6:	000d      	movs	r5, r1
 800a7a8:	9310      	str	r3, [sp, #64]	; 0x40
 800a7aa:	e7be      	b.n	800a72a <_dtoa_r+0x562>
 800a7ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7b0:	f7f7 fe2c 	bl	800240c <__aeabi_dmul>
 800a7b4:	9a05      	ldr	r2, [sp, #20]
 800a7b6:	9b05      	ldr	r3, [sp, #20]
 800a7b8:	4694      	mov	ip, r2
 800a7ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a7bc:	9b07      	ldr	r3, [sp, #28]
 800a7be:	9010      	str	r0, [sp, #64]	; 0x40
 800a7c0:	9111      	str	r1, [sp, #68]	; 0x44
 800a7c2:	4463      	add	r3, ip
 800a7c4:	9319      	str	r3, [sp, #100]	; 0x64
 800a7c6:	0029      	movs	r1, r5
 800a7c8:	0020      	movs	r0, r4
 800a7ca:	f7f8 fc3b 	bl	8003044 <__aeabi_d2iz>
 800a7ce:	9017      	str	r0, [sp, #92]	; 0x5c
 800a7d0:	f7f8 fc6e 	bl	80030b0 <__aeabi_i2d>
 800a7d4:	0002      	movs	r2, r0
 800a7d6:	000b      	movs	r3, r1
 800a7d8:	0020      	movs	r0, r4
 800a7da:	0029      	movs	r1, r5
 800a7dc:	f7f8 f882 	bl	80028e4 <__aeabi_dsub>
 800a7e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7e4:	3330      	adds	r3, #48	; 0x30
 800a7e6:	7013      	strb	r3, [r2, #0]
 800a7e8:	0013      	movs	r3, r2
 800a7ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	0004      	movs	r4, r0
 800a7f0:	000d      	movs	r5, r1
 800a7f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d12c      	bne.n	800a852 <_dtoa_r+0x68a>
 800a7f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a7fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a7fc:	9a05      	ldr	r2, [sp, #20]
 800a7fe:	9b07      	ldr	r3, [sp, #28]
 800a800:	4694      	mov	ip, r2
 800a802:	4463      	add	r3, ip
 800a804:	2200      	movs	r2, #0
 800a806:	9307      	str	r3, [sp, #28]
 800a808:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <_dtoa_r+0x6b8>)
 800a80a:	f7f6 fe8f 	bl	800152c <__aeabi_dadd>
 800a80e:	0002      	movs	r2, r0
 800a810:	000b      	movs	r3, r1
 800a812:	0020      	movs	r0, r4
 800a814:	0029      	movs	r1, r5
 800a816:	f7f5 fe31 	bl	800047c <__aeabi_dcmpgt>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d000      	beq.n	800a820 <_dtoa_r+0x658>
 800a81e:	e07f      	b.n	800a920 <_dtoa_r+0x758>
 800a820:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a824:	2000      	movs	r0, #0
 800a826:	4916      	ldr	r1, [pc, #88]	; (800a880 <_dtoa_r+0x6b8>)
 800a828:	f7f8 f85c 	bl	80028e4 <__aeabi_dsub>
 800a82c:	0002      	movs	r2, r0
 800a82e:	000b      	movs	r3, r1
 800a830:	0020      	movs	r0, r4
 800a832:	0029      	movs	r1, r5
 800a834:	f7f5 fe0e 	bl	8000454 <__aeabi_dcmplt>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d100      	bne.n	800a83e <_dtoa_r+0x676>
 800a83c:	e714      	b.n	800a668 <_dtoa_r+0x4a0>
 800a83e:	9b07      	ldr	r3, [sp, #28]
 800a840:	001a      	movs	r2, r3
 800a842:	3a01      	subs	r2, #1
 800a844:	9207      	str	r2, [sp, #28]
 800a846:	7812      	ldrb	r2, [r2, #0]
 800a848:	2a30      	cmp	r2, #48	; 0x30
 800a84a:	d0f8      	beq.n	800a83e <_dtoa_r+0x676>
 800a84c:	9307      	str	r3, [sp, #28]
 800a84e:	9602      	str	r6, [sp, #8]
 800a850:	e054      	b.n	800a8fc <_dtoa_r+0x734>
 800a852:	2200      	movs	r2, #0
 800a854:	4b05      	ldr	r3, [pc, #20]	; (800a86c <_dtoa_r+0x6a4>)
 800a856:	f7f7 fdd9 	bl	800240c <__aeabi_dmul>
 800a85a:	0004      	movs	r4, r0
 800a85c:	000d      	movs	r5, r1
 800a85e:	e7b2      	b.n	800a7c6 <_dtoa_r+0x5fe>
 800a860:	0800e010 	.word	0x0800e010
 800a864:	0800dfe8 	.word	0x0800dfe8
 800a868:	3ff00000 	.word	0x3ff00000
 800a86c:	40240000 	.word	0x40240000
 800a870:	401c0000 	.word	0x401c0000
 800a874:	fcc00000 	.word	0xfcc00000
 800a878:	40140000 	.word	0x40140000
 800a87c:	7cc00000 	.word	0x7cc00000
 800a880:	3fe00000 	.word	0x3fe00000
 800a884:	9b06      	ldr	r3, [sp, #24]
 800a886:	9e05      	ldr	r6, [sp, #20]
 800a888:	3b01      	subs	r3, #1
 800a88a:	199b      	adds	r3, r3, r6
 800a88c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a88e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a890:	930a      	str	r3, [sp, #40]	; 0x28
 800a892:	9a08      	ldr	r2, [sp, #32]
 800a894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a896:	0020      	movs	r0, r4
 800a898:	0029      	movs	r1, r5
 800a89a:	f7f7 f9b1 	bl	8001c00 <__aeabi_ddiv>
 800a89e:	f7f8 fbd1 	bl	8003044 <__aeabi_d2iz>
 800a8a2:	9006      	str	r0, [sp, #24]
 800a8a4:	f7f8 fc04 	bl	80030b0 <__aeabi_i2d>
 800a8a8:	9a08      	ldr	r2, [sp, #32]
 800a8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ac:	f7f7 fdae 	bl	800240c <__aeabi_dmul>
 800a8b0:	0002      	movs	r2, r0
 800a8b2:	000b      	movs	r3, r1
 800a8b4:	0020      	movs	r0, r4
 800a8b6:	0029      	movs	r1, r5
 800a8b8:	f7f8 f814 	bl	80028e4 <__aeabi_dsub>
 800a8bc:	0033      	movs	r3, r6
 800a8be:	9a06      	ldr	r2, [sp, #24]
 800a8c0:	3601      	adds	r6, #1
 800a8c2:	3230      	adds	r2, #48	; 0x30
 800a8c4:	701a      	strb	r2, [r3, #0]
 800a8c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8c8:	9607      	str	r6, [sp, #28]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d139      	bne.n	800a942 <_dtoa_r+0x77a>
 800a8ce:	0002      	movs	r2, r0
 800a8d0:	000b      	movs	r3, r1
 800a8d2:	f7f6 fe2b 	bl	800152c <__aeabi_dadd>
 800a8d6:	9a08      	ldr	r2, [sp, #32]
 800a8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8da:	0004      	movs	r4, r0
 800a8dc:	000d      	movs	r5, r1
 800a8de:	f7f5 fdcd 	bl	800047c <__aeabi_dcmpgt>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d11b      	bne.n	800a91e <_dtoa_r+0x756>
 800a8e6:	9a08      	ldr	r2, [sp, #32]
 800a8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ea:	0020      	movs	r0, r4
 800a8ec:	0029      	movs	r1, r5
 800a8ee:	f7f5 fdab 	bl	8000448 <__aeabi_dcmpeq>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d002      	beq.n	800a8fc <_dtoa_r+0x734>
 800a8f6:	9b06      	ldr	r3, [sp, #24]
 800a8f8:	07db      	lsls	r3, r3, #31
 800a8fa:	d410      	bmi.n	800a91e <_dtoa_r+0x756>
 800a8fc:	0038      	movs	r0, r7
 800a8fe:	9904      	ldr	r1, [sp, #16]
 800a900:	f000 fae6 	bl	800aed0 <_Bfree>
 800a904:	2300      	movs	r3, #0
 800a906:	9a07      	ldr	r2, [sp, #28]
 800a908:	9802      	ldr	r0, [sp, #8]
 800a90a:	7013      	strb	r3, [r2, #0]
 800a90c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a90e:	3001      	adds	r0, #1
 800a910:	6018      	str	r0, [r3, #0]
 800a912:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a914:	2b00      	cmp	r3, #0
 800a916:	d100      	bne.n	800a91a <_dtoa_r+0x752>
 800a918:	e4a3      	b.n	800a262 <_dtoa_r+0x9a>
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	e4a1      	b.n	800a262 <_dtoa_r+0x9a>
 800a91e:	9e02      	ldr	r6, [sp, #8]
 800a920:	9b07      	ldr	r3, [sp, #28]
 800a922:	9307      	str	r3, [sp, #28]
 800a924:	3b01      	subs	r3, #1
 800a926:	781a      	ldrb	r2, [r3, #0]
 800a928:	2a39      	cmp	r2, #57	; 0x39
 800a92a:	d106      	bne.n	800a93a <_dtoa_r+0x772>
 800a92c:	9a05      	ldr	r2, [sp, #20]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d1f7      	bne.n	800a922 <_dtoa_r+0x75a>
 800a932:	2230      	movs	r2, #48	; 0x30
 800a934:	9905      	ldr	r1, [sp, #20]
 800a936:	3601      	adds	r6, #1
 800a938:	700a      	strb	r2, [r1, #0]
 800a93a:	781a      	ldrb	r2, [r3, #0]
 800a93c:	3201      	adds	r2, #1
 800a93e:	701a      	strb	r2, [r3, #0]
 800a940:	e785      	b.n	800a84e <_dtoa_r+0x686>
 800a942:	2200      	movs	r2, #0
 800a944:	4bad      	ldr	r3, [pc, #692]	; (800abfc <_dtoa_r+0xa34>)
 800a946:	f7f7 fd61 	bl	800240c <__aeabi_dmul>
 800a94a:	2200      	movs	r2, #0
 800a94c:	2300      	movs	r3, #0
 800a94e:	0004      	movs	r4, r0
 800a950:	000d      	movs	r5, r1
 800a952:	f7f5 fd79 	bl	8000448 <__aeabi_dcmpeq>
 800a956:	2800      	cmp	r0, #0
 800a958:	d09b      	beq.n	800a892 <_dtoa_r+0x6ca>
 800a95a:	e7cf      	b.n	800a8fc <_dtoa_r+0x734>
 800a95c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a95e:	2a00      	cmp	r2, #0
 800a960:	d100      	bne.n	800a964 <_dtoa_r+0x79c>
 800a962:	e082      	b.n	800aa6a <_dtoa_r+0x8a2>
 800a964:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a966:	2a01      	cmp	r2, #1
 800a968:	dc66      	bgt.n	800aa38 <_dtoa_r+0x870>
 800a96a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a96c:	2a00      	cmp	r2, #0
 800a96e:	d05f      	beq.n	800aa30 <_dtoa_r+0x868>
 800a970:	4aa3      	ldr	r2, [pc, #652]	; (800ac00 <_dtoa_r+0xa38>)
 800a972:	189b      	adds	r3, r3, r2
 800a974:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a976:	9c08      	ldr	r4, [sp, #32]
 800a978:	9a08      	ldr	r2, [sp, #32]
 800a97a:	2101      	movs	r1, #1
 800a97c:	18d2      	adds	r2, r2, r3
 800a97e:	9208      	str	r2, [sp, #32]
 800a980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a982:	0038      	movs	r0, r7
 800a984:	18d3      	adds	r3, r2, r3
 800a986:	930d      	str	r3, [sp, #52]	; 0x34
 800a988:	f000 fb52 	bl	800b030 <__i2b>
 800a98c:	0005      	movs	r5, r0
 800a98e:	2c00      	cmp	r4, #0
 800a990:	dd0e      	ble.n	800a9b0 <_dtoa_r+0x7e8>
 800a992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a994:	2b00      	cmp	r3, #0
 800a996:	dd0b      	ble.n	800a9b0 <_dtoa_r+0x7e8>
 800a998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a99a:	0023      	movs	r3, r4
 800a99c:	4294      	cmp	r4, r2
 800a99e:	dd00      	ble.n	800a9a2 <_dtoa_r+0x7da>
 800a9a0:	0013      	movs	r3, r2
 800a9a2:	9a08      	ldr	r2, [sp, #32]
 800a9a4:	1ae4      	subs	r4, r4, r3
 800a9a6:	1ad2      	subs	r2, r2, r3
 800a9a8:	9208      	str	r2, [sp, #32]
 800a9aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	930d      	str	r3, [sp, #52]	; 0x34
 800a9b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d01f      	beq.n	800a9f6 <_dtoa_r+0x82e>
 800a9b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d05a      	beq.n	800aa72 <_dtoa_r+0x8aa>
 800a9bc:	2e00      	cmp	r6, #0
 800a9be:	dd11      	ble.n	800a9e4 <_dtoa_r+0x81c>
 800a9c0:	0029      	movs	r1, r5
 800a9c2:	0032      	movs	r2, r6
 800a9c4:	0038      	movs	r0, r7
 800a9c6:	f000 fbf9 	bl	800b1bc <__pow5mult>
 800a9ca:	9a04      	ldr	r2, [sp, #16]
 800a9cc:	0001      	movs	r1, r0
 800a9ce:	0005      	movs	r5, r0
 800a9d0:	0038      	movs	r0, r7
 800a9d2:	f000 fb43 	bl	800b05c <__multiply>
 800a9d6:	9904      	ldr	r1, [sp, #16]
 800a9d8:	9007      	str	r0, [sp, #28]
 800a9da:	0038      	movs	r0, r7
 800a9dc:	f000 fa78 	bl	800aed0 <_Bfree>
 800a9e0:	9b07      	ldr	r3, [sp, #28]
 800a9e2:	9304      	str	r3, [sp, #16]
 800a9e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9e6:	1b9a      	subs	r2, r3, r6
 800a9e8:	42b3      	cmp	r3, r6
 800a9ea:	d004      	beq.n	800a9f6 <_dtoa_r+0x82e>
 800a9ec:	0038      	movs	r0, r7
 800a9ee:	9904      	ldr	r1, [sp, #16]
 800a9f0:	f000 fbe4 	bl	800b1bc <__pow5mult>
 800a9f4:	9004      	str	r0, [sp, #16]
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	0038      	movs	r0, r7
 800a9fa:	f000 fb19 	bl	800b030 <__i2b>
 800a9fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa00:	0006      	movs	r6, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	dd37      	ble.n	800aa76 <_dtoa_r+0x8ae>
 800aa06:	001a      	movs	r2, r3
 800aa08:	0001      	movs	r1, r0
 800aa0a:	0038      	movs	r0, r7
 800aa0c:	f000 fbd6 	bl	800b1bc <__pow5mult>
 800aa10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa12:	0006      	movs	r6, r0
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	dd33      	ble.n	800aa80 <_dtoa_r+0x8b8>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	9307      	str	r3, [sp, #28]
 800aa1c:	6933      	ldr	r3, [r6, #16]
 800aa1e:	3303      	adds	r3, #3
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	18f3      	adds	r3, r6, r3
 800aa24:	6858      	ldr	r0, [r3, #4]
 800aa26:	f000 fabb 	bl	800afa0 <__hi0bits>
 800aa2a:	2320      	movs	r3, #32
 800aa2c:	1a18      	subs	r0, r3, r0
 800aa2e:	e03f      	b.n	800aab0 <_dtoa_r+0x8e8>
 800aa30:	2336      	movs	r3, #54	; 0x36
 800aa32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aa34:	1a9b      	subs	r3, r3, r2
 800aa36:	e79d      	b.n	800a974 <_dtoa_r+0x7ac>
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	1e5e      	subs	r6, r3, #1
 800aa3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa3e:	42b3      	cmp	r3, r6
 800aa40:	db08      	blt.n	800aa54 <_dtoa_r+0x88c>
 800aa42:	1b9e      	subs	r6, r3, r6
 800aa44:	9b06      	ldr	r3, [sp, #24]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	da0c      	bge.n	800aa64 <_dtoa_r+0x89c>
 800aa4a:	9b08      	ldr	r3, [sp, #32]
 800aa4c:	9a06      	ldr	r2, [sp, #24]
 800aa4e:	1a9c      	subs	r4, r3, r2
 800aa50:	2300      	movs	r3, #0
 800aa52:	e791      	b.n	800a978 <_dtoa_r+0x7b0>
 800aa54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa58:	1af3      	subs	r3, r6, r3
 800aa5a:	18d3      	adds	r3, r2, r3
 800aa5c:	960e      	str	r6, [sp, #56]	; 0x38
 800aa5e:	9314      	str	r3, [sp, #80]	; 0x50
 800aa60:	2600      	movs	r6, #0
 800aa62:	e7ef      	b.n	800aa44 <_dtoa_r+0x87c>
 800aa64:	9c08      	ldr	r4, [sp, #32]
 800aa66:	9b06      	ldr	r3, [sp, #24]
 800aa68:	e786      	b.n	800a978 <_dtoa_r+0x7b0>
 800aa6a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800aa6c:	9c08      	ldr	r4, [sp, #32]
 800aa6e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aa70:	e78d      	b.n	800a98e <_dtoa_r+0x7c6>
 800aa72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa74:	e7ba      	b.n	800a9ec <_dtoa_r+0x824>
 800aa76:	2300      	movs	r3, #0
 800aa78:	9307      	str	r3, [sp, #28]
 800aa7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	dc13      	bgt.n	800aaa8 <_dtoa_r+0x8e0>
 800aa80:	2300      	movs	r3, #0
 800aa82:	9307      	str	r3, [sp, #28]
 800aa84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10e      	bne.n	800aaa8 <_dtoa_r+0x8e0>
 800aa8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa8c:	031b      	lsls	r3, r3, #12
 800aa8e:	d10b      	bne.n	800aaa8 <_dtoa_r+0x8e0>
 800aa90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aa92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa94:	4213      	tst	r3, r2
 800aa96:	d007      	beq.n	800aaa8 <_dtoa_r+0x8e0>
 800aa98:	9b08      	ldr	r3, [sp, #32]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	9308      	str	r3, [sp, #32]
 800aa9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	930d      	str	r3, [sp, #52]	; 0x34
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	9307      	str	r3, [sp, #28]
 800aaa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaaa:	2001      	movs	r0, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1b5      	bne.n	800aa1c <_dtoa_r+0x854>
 800aab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aab2:	221f      	movs	r2, #31
 800aab4:	1818      	adds	r0, r3, r0
 800aab6:	0003      	movs	r3, r0
 800aab8:	4013      	ands	r3, r2
 800aaba:	4210      	tst	r0, r2
 800aabc:	d046      	beq.n	800ab4c <_dtoa_r+0x984>
 800aabe:	3201      	adds	r2, #1
 800aac0:	1ad2      	subs	r2, r2, r3
 800aac2:	2a04      	cmp	r2, #4
 800aac4:	dd3f      	ble.n	800ab46 <_dtoa_r+0x97e>
 800aac6:	221c      	movs	r2, #28
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	9a08      	ldr	r2, [sp, #32]
 800aacc:	18e4      	adds	r4, r4, r3
 800aace:	18d2      	adds	r2, r2, r3
 800aad0:	9208      	str	r2, [sp, #32]
 800aad2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aad4:	18d3      	adds	r3, r2, r3
 800aad6:	930d      	str	r3, [sp, #52]	; 0x34
 800aad8:	9b08      	ldr	r3, [sp, #32]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	dd05      	ble.n	800aaea <_dtoa_r+0x922>
 800aade:	001a      	movs	r2, r3
 800aae0:	0038      	movs	r0, r7
 800aae2:	9904      	ldr	r1, [sp, #16]
 800aae4:	f000 fbc6 	bl	800b274 <__lshift>
 800aae8:	9004      	str	r0, [sp, #16]
 800aaea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	dd05      	ble.n	800aafc <_dtoa_r+0x934>
 800aaf0:	0031      	movs	r1, r6
 800aaf2:	001a      	movs	r2, r3
 800aaf4:	0038      	movs	r0, r7
 800aaf6:	f000 fbbd 	bl	800b274 <__lshift>
 800aafa:	0006      	movs	r6, r0
 800aafc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d026      	beq.n	800ab50 <_dtoa_r+0x988>
 800ab02:	0031      	movs	r1, r6
 800ab04:	9804      	ldr	r0, [sp, #16]
 800ab06:	f000 fc25 	bl	800b354 <__mcmp>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	da20      	bge.n	800ab50 <_dtoa_r+0x988>
 800ab0e:	9b02      	ldr	r3, [sp, #8]
 800ab10:	220a      	movs	r2, #10
 800ab12:	3b01      	subs	r3, #1
 800ab14:	9302      	str	r3, [sp, #8]
 800ab16:	0038      	movs	r0, r7
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9904      	ldr	r1, [sp, #16]
 800ab1c:	f000 f9fc 	bl	800af18 <__multadd>
 800ab20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab22:	9004      	str	r0, [sp, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d100      	bne.n	800ab2a <_dtoa_r+0x962>
 800ab28:	e160      	b.n	800adec <_dtoa_r+0xc24>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	0029      	movs	r1, r5
 800ab2e:	220a      	movs	r2, #10
 800ab30:	0038      	movs	r0, r7
 800ab32:	f000 f9f1 	bl	800af18 <__multadd>
 800ab36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab38:	0005      	movs	r5, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	dc47      	bgt.n	800abce <_dtoa_r+0xa06>
 800ab3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	dc0d      	bgt.n	800ab60 <_dtoa_r+0x998>
 800ab44:	e043      	b.n	800abce <_dtoa_r+0xa06>
 800ab46:	2a04      	cmp	r2, #4
 800ab48:	d0c6      	beq.n	800aad8 <_dtoa_r+0x910>
 800ab4a:	0013      	movs	r3, r2
 800ab4c:	331c      	adds	r3, #28
 800ab4e:	e7bc      	b.n	800aaca <_dtoa_r+0x902>
 800ab50:	9b06      	ldr	r3, [sp, #24]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dc35      	bgt.n	800abc2 <_dtoa_r+0x9fa>
 800ab56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	dd32      	ble.n	800abc2 <_dtoa_r+0x9fa>
 800ab5c:	9b06      	ldr	r3, [sp, #24]
 800ab5e:	930c      	str	r3, [sp, #48]	; 0x30
 800ab60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10c      	bne.n	800ab80 <_dtoa_r+0x9b8>
 800ab66:	0031      	movs	r1, r6
 800ab68:	2205      	movs	r2, #5
 800ab6a:	0038      	movs	r0, r7
 800ab6c:	f000 f9d4 	bl	800af18 <__multadd>
 800ab70:	0006      	movs	r6, r0
 800ab72:	0001      	movs	r1, r0
 800ab74:	9804      	ldr	r0, [sp, #16]
 800ab76:	f000 fbed 	bl	800b354 <__mcmp>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	dd00      	ble.n	800ab80 <_dtoa_r+0x9b8>
 800ab7e:	e59f      	b.n	800a6c0 <_dtoa_r+0x4f8>
 800ab80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab82:	43db      	mvns	r3, r3
 800ab84:	9302      	str	r3, [sp, #8]
 800ab86:	9b05      	ldr	r3, [sp, #20]
 800ab88:	9307      	str	r3, [sp, #28]
 800ab8a:	2400      	movs	r4, #0
 800ab8c:	0031      	movs	r1, r6
 800ab8e:	0038      	movs	r0, r7
 800ab90:	f000 f99e 	bl	800aed0 <_Bfree>
 800ab94:	2d00      	cmp	r5, #0
 800ab96:	d100      	bne.n	800ab9a <_dtoa_r+0x9d2>
 800ab98:	e6b0      	b.n	800a8fc <_dtoa_r+0x734>
 800ab9a:	2c00      	cmp	r4, #0
 800ab9c:	d005      	beq.n	800abaa <_dtoa_r+0x9e2>
 800ab9e:	42ac      	cmp	r4, r5
 800aba0:	d003      	beq.n	800abaa <_dtoa_r+0x9e2>
 800aba2:	0021      	movs	r1, r4
 800aba4:	0038      	movs	r0, r7
 800aba6:	f000 f993 	bl	800aed0 <_Bfree>
 800abaa:	0029      	movs	r1, r5
 800abac:	0038      	movs	r0, r7
 800abae:	f000 f98f 	bl	800aed0 <_Bfree>
 800abb2:	e6a3      	b.n	800a8fc <_dtoa_r+0x734>
 800abb4:	2600      	movs	r6, #0
 800abb6:	0035      	movs	r5, r6
 800abb8:	e7e2      	b.n	800ab80 <_dtoa_r+0x9b8>
 800abba:	9602      	str	r6, [sp, #8]
 800abbc:	9e07      	ldr	r6, [sp, #28]
 800abbe:	0035      	movs	r5, r6
 800abc0:	e57e      	b.n	800a6c0 <_dtoa_r+0x4f8>
 800abc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d100      	bne.n	800abca <_dtoa_r+0xa02>
 800abc8:	e0c8      	b.n	800ad5c <_dtoa_r+0xb94>
 800abca:	9b06      	ldr	r3, [sp, #24]
 800abcc:	930c      	str	r3, [sp, #48]	; 0x30
 800abce:	2c00      	cmp	r4, #0
 800abd0:	dd05      	ble.n	800abde <_dtoa_r+0xa16>
 800abd2:	0029      	movs	r1, r5
 800abd4:	0022      	movs	r2, r4
 800abd6:	0038      	movs	r0, r7
 800abd8:	f000 fb4c 	bl	800b274 <__lshift>
 800abdc:	0005      	movs	r5, r0
 800abde:	9b07      	ldr	r3, [sp, #28]
 800abe0:	0028      	movs	r0, r5
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d01f      	beq.n	800ac26 <_dtoa_r+0xa5e>
 800abe6:	0038      	movs	r0, r7
 800abe8:	6869      	ldr	r1, [r5, #4]
 800abea:	f000 f92d 	bl	800ae48 <_Balloc>
 800abee:	1e04      	subs	r4, r0, #0
 800abf0:	d10c      	bne.n	800ac0c <_dtoa_r+0xa44>
 800abf2:	0002      	movs	r2, r0
 800abf4:	4b03      	ldr	r3, [pc, #12]	; (800ac04 <_dtoa_r+0xa3c>)
 800abf6:	4904      	ldr	r1, [pc, #16]	; (800ac08 <_dtoa_r+0xa40>)
 800abf8:	f7ff fafb 	bl	800a1f2 <_dtoa_r+0x2a>
 800abfc:	40240000 	.word	0x40240000
 800ac00:	00000433 	.word	0x00000433
 800ac04:	0800df73 	.word	0x0800df73
 800ac08:	000002ea 	.word	0x000002ea
 800ac0c:	0029      	movs	r1, r5
 800ac0e:	692b      	ldr	r3, [r5, #16]
 800ac10:	310c      	adds	r1, #12
 800ac12:	1c9a      	adds	r2, r3, #2
 800ac14:	0092      	lsls	r2, r2, #2
 800ac16:	300c      	adds	r0, #12
 800ac18:	f000 f90d 	bl	800ae36 <memcpy>
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	0021      	movs	r1, r4
 800ac20:	0038      	movs	r0, r7
 800ac22:	f000 fb27 	bl	800b274 <__lshift>
 800ac26:	002c      	movs	r4, r5
 800ac28:	0005      	movs	r5, r0
 800ac2a:	9b05      	ldr	r3, [sp, #20]
 800ac2c:	9308      	str	r3, [sp, #32]
 800ac2e:	0031      	movs	r1, r6
 800ac30:	9804      	ldr	r0, [sp, #16]
 800ac32:	f7ff fa3d 	bl	800a0b0 <quorem>
 800ac36:	0003      	movs	r3, r0
 800ac38:	0021      	movs	r1, r4
 800ac3a:	3330      	adds	r3, #48	; 0x30
 800ac3c:	900e      	str	r0, [sp, #56]	; 0x38
 800ac3e:	9804      	ldr	r0, [sp, #16]
 800ac40:	9306      	str	r3, [sp, #24]
 800ac42:	f000 fb87 	bl	800b354 <__mcmp>
 800ac46:	002a      	movs	r2, r5
 800ac48:	900f      	str	r0, [sp, #60]	; 0x3c
 800ac4a:	0031      	movs	r1, r6
 800ac4c:	0038      	movs	r0, r7
 800ac4e:	f000 fb9d 	bl	800b38c <__mdiff>
 800ac52:	68c3      	ldr	r3, [r0, #12]
 800ac54:	9007      	str	r0, [sp, #28]
 800ac56:	9310      	str	r3, [sp, #64]	; 0x40
 800ac58:	2301      	movs	r3, #1
 800ac5a:	930d      	str	r3, [sp, #52]	; 0x34
 800ac5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d104      	bne.n	800ac6c <_dtoa_r+0xaa4>
 800ac62:	0001      	movs	r1, r0
 800ac64:	9804      	ldr	r0, [sp, #16]
 800ac66:	f000 fb75 	bl	800b354 <__mcmp>
 800ac6a:	900d      	str	r0, [sp, #52]	; 0x34
 800ac6c:	0038      	movs	r0, r7
 800ac6e:	9907      	ldr	r1, [sp, #28]
 800ac70:	f000 f92e 	bl	800aed0 <_Bfree>
 800ac74:	2301      	movs	r3, #1
 800ac76:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac7a:	4018      	ands	r0, r3
 800ac7c:	9b08      	ldr	r3, [sp, #32]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	9307      	str	r3, [sp, #28]
 800ac82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac84:	4313      	orrs	r3, r2
 800ac86:	4303      	orrs	r3, r0
 800ac88:	d10c      	bne.n	800aca4 <_dtoa_r+0xadc>
 800ac8a:	9b06      	ldr	r3, [sp, #24]
 800ac8c:	2b39      	cmp	r3, #57	; 0x39
 800ac8e:	d025      	beq.n	800acdc <_dtoa_r+0xb14>
 800ac90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	dd02      	ble.n	800ac9c <_dtoa_r+0xad4>
 800ac96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac98:	3331      	adds	r3, #49	; 0x31
 800ac9a:	9306      	str	r3, [sp, #24]
 800ac9c:	9b08      	ldr	r3, [sp, #32]
 800ac9e:	9a06      	ldr	r2, [sp, #24]
 800aca0:	701a      	strb	r2, [r3, #0]
 800aca2:	e773      	b.n	800ab8c <_dtoa_r+0x9c4>
 800aca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	db03      	blt.n	800acb2 <_dtoa_r+0xaea>
 800acaa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800acac:	4313      	orrs	r3, r2
 800acae:	4303      	orrs	r3, r0
 800acb0:	d11f      	bne.n	800acf2 <_dtoa_r+0xb2a>
 800acb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	ddf1      	ble.n	800ac9c <_dtoa_r+0xad4>
 800acb8:	9904      	ldr	r1, [sp, #16]
 800acba:	2201      	movs	r2, #1
 800acbc:	0038      	movs	r0, r7
 800acbe:	f000 fad9 	bl	800b274 <__lshift>
 800acc2:	0031      	movs	r1, r6
 800acc4:	9004      	str	r0, [sp, #16]
 800acc6:	f000 fb45 	bl	800b354 <__mcmp>
 800acca:	2800      	cmp	r0, #0
 800accc:	dc03      	bgt.n	800acd6 <_dtoa_r+0xb0e>
 800acce:	d1e5      	bne.n	800ac9c <_dtoa_r+0xad4>
 800acd0:	9b06      	ldr	r3, [sp, #24]
 800acd2:	07db      	lsls	r3, r3, #31
 800acd4:	d5e2      	bpl.n	800ac9c <_dtoa_r+0xad4>
 800acd6:	9b06      	ldr	r3, [sp, #24]
 800acd8:	2b39      	cmp	r3, #57	; 0x39
 800acda:	d1dc      	bne.n	800ac96 <_dtoa_r+0xace>
 800acdc:	2339      	movs	r3, #57	; 0x39
 800acde:	9a08      	ldr	r2, [sp, #32]
 800ace0:	7013      	strb	r3, [r2, #0]
 800ace2:	9b07      	ldr	r3, [sp, #28]
 800ace4:	9307      	str	r3, [sp, #28]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	781a      	ldrb	r2, [r3, #0]
 800acea:	2a39      	cmp	r2, #57	; 0x39
 800acec:	d06c      	beq.n	800adc8 <_dtoa_r+0xc00>
 800acee:	3201      	adds	r2, #1
 800acf0:	e7d6      	b.n	800aca0 <_dtoa_r+0xad8>
 800acf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dd07      	ble.n	800ad08 <_dtoa_r+0xb40>
 800acf8:	9b06      	ldr	r3, [sp, #24]
 800acfa:	2b39      	cmp	r3, #57	; 0x39
 800acfc:	d0ee      	beq.n	800acdc <_dtoa_r+0xb14>
 800acfe:	9b06      	ldr	r3, [sp, #24]
 800ad00:	9a08      	ldr	r2, [sp, #32]
 800ad02:	3301      	adds	r3, #1
 800ad04:	7013      	strb	r3, [r2, #0]
 800ad06:	e741      	b.n	800ab8c <_dtoa_r+0x9c4>
 800ad08:	9b08      	ldr	r3, [sp, #32]
 800ad0a:	9a06      	ldr	r2, [sp, #24]
 800ad0c:	701a      	strb	r2, [r3, #0]
 800ad0e:	2301      	movs	r3, #1
 800ad10:	9a05      	ldr	r2, [sp, #20]
 800ad12:	1a9b      	subs	r3, r3, r2
 800ad14:	9a08      	ldr	r2, [sp, #32]
 800ad16:	189b      	adds	r3, r3, r2
 800ad18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d03e      	beq.n	800ad9c <_dtoa_r+0xbd4>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	220a      	movs	r2, #10
 800ad22:	9904      	ldr	r1, [sp, #16]
 800ad24:	0038      	movs	r0, r7
 800ad26:	f000 f8f7 	bl	800af18 <__multadd>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	9004      	str	r0, [sp, #16]
 800ad2e:	220a      	movs	r2, #10
 800ad30:	0021      	movs	r1, r4
 800ad32:	0038      	movs	r0, r7
 800ad34:	42ac      	cmp	r4, r5
 800ad36:	d106      	bne.n	800ad46 <_dtoa_r+0xb7e>
 800ad38:	f000 f8ee 	bl	800af18 <__multadd>
 800ad3c:	0004      	movs	r4, r0
 800ad3e:	0005      	movs	r5, r0
 800ad40:	9b07      	ldr	r3, [sp, #28]
 800ad42:	9308      	str	r3, [sp, #32]
 800ad44:	e773      	b.n	800ac2e <_dtoa_r+0xa66>
 800ad46:	f000 f8e7 	bl	800af18 <__multadd>
 800ad4a:	0029      	movs	r1, r5
 800ad4c:	0004      	movs	r4, r0
 800ad4e:	2300      	movs	r3, #0
 800ad50:	220a      	movs	r2, #10
 800ad52:	0038      	movs	r0, r7
 800ad54:	f000 f8e0 	bl	800af18 <__multadd>
 800ad58:	0005      	movs	r5, r0
 800ad5a:	e7f1      	b.n	800ad40 <_dtoa_r+0xb78>
 800ad5c:	9b06      	ldr	r3, [sp, #24]
 800ad5e:	930c      	str	r3, [sp, #48]	; 0x30
 800ad60:	2400      	movs	r4, #0
 800ad62:	0031      	movs	r1, r6
 800ad64:	9804      	ldr	r0, [sp, #16]
 800ad66:	f7ff f9a3 	bl	800a0b0 <quorem>
 800ad6a:	9b05      	ldr	r3, [sp, #20]
 800ad6c:	3030      	adds	r0, #48	; 0x30
 800ad6e:	5518      	strb	r0, [r3, r4]
 800ad70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad72:	3401      	adds	r4, #1
 800ad74:	9006      	str	r0, [sp, #24]
 800ad76:	42a3      	cmp	r3, r4
 800ad78:	dd07      	ble.n	800ad8a <_dtoa_r+0xbc2>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	220a      	movs	r2, #10
 800ad7e:	0038      	movs	r0, r7
 800ad80:	9904      	ldr	r1, [sp, #16]
 800ad82:	f000 f8c9 	bl	800af18 <__multadd>
 800ad86:	9004      	str	r0, [sp, #16]
 800ad88:	e7eb      	b.n	800ad62 <_dtoa_r+0xb9a>
 800ad8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dd00      	ble.n	800ad94 <_dtoa_r+0xbcc>
 800ad92:	0018      	movs	r0, r3
 800ad94:	2400      	movs	r4, #0
 800ad96:	9b05      	ldr	r3, [sp, #20]
 800ad98:	181b      	adds	r3, r3, r0
 800ad9a:	9307      	str	r3, [sp, #28]
 800ad9c:	9904      	ldr	r1, [sp, #16]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	0038      	movs	r0, r7
 800ada2:	f000 fa67 	bl	800b274 <__lshift>
 800ada6:	0031      	movs	r1, r6
 800ada8:	9004      	str	r0, [sp, #16]
 800adaa:	f000 fad3 	bl	800b354 <__mcmp>
 800adae:	2800      	cmp	r0, #0
 800adb0:	dc97      	bgt.n	800ace2 <_dtoa_r+0xb1a>
 800adb2:	d102      	bne.n	800adba <_dtoa_r+0xbf2>
 800adb4:	9b06      	ldr	r3, [sp, #24]
 800adb6:	07db      	lsls	r3, r3, #31
 800adb8:	d493      	bmi.n	800ace2 <_dtoa_r+0xb1a>
 800adba:	9b07      	ldr	r3, [sp, #28]
 800adbc:	9307      	str	r3, [sp, #28]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	781a      	ldrb	r2, [r3, #0]
 800adc2:	2a30      	cmp	r2, #48	; 0x30
 800adc4:	d0fa      	beq.n	800adbc <_dtoa_r+0xbf4>
 800adc6:	e6e1      	b.n	800ab8c <_dtoa_r+0x9c4>
 800adc8:	9a05      	ldr	r2, [sp, #20]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d18a      	bne.n	800ace4 <_dtoa_r+0xb1c>
 800adce:	9b02      	ldr	r3, [sp, #8]
 800add0:	3301      	adds	r3, #1
 800add2:	9302      	str	r3, [sp, #8]
 800add4:	2331      	movs	r3, #49	; 0x31
 800add6:	e795      	b.n	800ad04 <_dtoa_r+0xb3c>
 800add8:	4b08      	ldr	r3, [pc, #32]	; (800adfc <_dtoa_r+0xc34>)
 800adda:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800addc:	9305      	str	r3, [sp, #20]
 800adde:	4b08      	ldr	r3, [pc, #32]	; (800ae00 <_dtoa_r+0xc38>)
 800ade0:	2a00      	cmp	r2, #0
 800ade2:	d001      	beq.n	800ade8 <_dtoa_r+0xc20>
 800ade4:	f7ff fa3b 	bl	800a25e <_dtoa_r+0x96>
 800ade8:	f7ff fa3b 	bl	800a262 <_dtoa_r+0x9a>
 800adec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adee:	2b00      	cmp	r3, #0
 800adf0:	dcb6      	bgt.n	800ad60 <_dtoa_r+0xb98>
 800adf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	dd00      	ble.n	800adfa <_dtoa_r+0xc32>
 800adf8:	e6b2      	b.n	800ab60 <_dtoa_r+0x998>
 800adfa:	e7b1      	b.n	800ad60 <_dtoa_r+0xb98>
 800adfc:	0800def0 	.word	0x0800def0
 800ae00:	0800def8 	.word	0x0800def8

0800ae04 <_localeconv_r>:
 800ae04:	4800      	ldr	r0, [pc, #0]	; (800ae08 <_localeconv_r+0x4>)
 800ae06:	4770      	bx	lr
 800ae08:	200001d8 	.word	0x200001d8

0800ae0c <malloc>:
 800ae0c:	b510      	push	{r4, lr}
 800ae0e:	4b03      	ldr	r3, [pc, #12]	; (800ae1c <malloc+0x10>)
 800ae10:	0001      	movs	r1, r0
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	f000 fc0e 	bl	800b634 <_malloc_r>
 800ae18:	bd10      	pop	{r4, pc}
 800ae1a:	46c0      	nop			; (mov r8, r8)
 800ae1c:	20000084 	.word	0x20000084

0800ae20 <memchr>:
 800ae20:	b2c9      	uxtb	r1, r1
 800ae22:	1882      	adds	r2, r0, r2
 800ae24:	4290      	cmp	r0, r2
 800ae26:	d101      	bne.n	800ae2c <memchr+0xc>
 800ae28:	2000      	movs	r0, #0
 800ae2a:	4770      	bx	lr
 800ae2c:	7803      	ldrb	r3, [r0, #0]
 800ae2e:	428b      	cmp	r3, r1
 800ae30:	d0fb      	beq.n	800ae2a <memchr+0xa>
 800ae32:	3001      	adds	r0, #1
 800ae34:	e7f6      	b.n	800ae24 <memchr+0x4>

0800ae36 <memcpy>:
 800ae36:	2300      	movs	r3, #0
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d100      	bne.n	800ae40 <memcpy+0xa>
 800ae3e:	bd10      	pop	{r4, pc}
 800ae40:	5ccc      	ldrb	r4, [r1, r3]
 800ae42:	54c4      	strb	r4, [r0, r3]
 800ae44:	3301      	adds	r3, #1
 800ae46:	e7f8      	b.n	800ae3a <memcpy+0x4>

0800ae48 <_Balloc>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae4c:	0006      	movs	r6, r0
 800ae4e:	000c      	movs	r4, r1
 800ae50:	2d00      	cmp	r5, #0
 800ae52:	d10e      	bne.n	800ae72 <_Balloc+0x2a>
 800ae54:	2010      	movs	r0, #16
 800ae56:	f7ff ffd9 	bl	800ae0c <malloc>
 800ae5a:	1e02      	subs	r2, r0, #0
 800ae5c:	6270      	str	r0, [r6, #36]	; 0x24
 800ae5e:	d104      	bne.n	800ae6a <_Balloc+0x22>
 800ae60:	2166      	movs	r1, #102	; 0x66
 800ae62:	4b19      	ldr	r3, [pc, #100]	; (800aec8 <_Balloc+0x80>)
 800ae64:	4819      	ldr	r0, [pc, #100]	; (800aecc <_Balloc+0x84>)
 800ae66:	f000 fdb7 	bl	800b9d8 <__assert_func>
 800ae6a:	6045      	str	r5, [r0, #4]
 800ae6c:	6085      	str	r5, [r0, #8]
 800ae6e:	6005      	str	r5, [r0, #0]
 800ae70:	60c5      	str	r5, [r0, #12]
 800ae72:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800ae74:	68eb      	ldr	r3, [r5, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d013      	beq.n	800aea2 <_Balloc+0x5a>
 800ae7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ae7c:	00a2      	lsls	r2, r4, #2
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	189b      	adds	r3, r3, r2
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d118      	bne.n	800aeba <_Balloc+0x72>
 800ae88:	2101      	movs	r1, #1
 800ae8a:	000d      	movs	r5, r1
 800ae8c:	40a5      	lsls	r5, r4
 800ae8e:	1d6a      	adds	r2, r5, #5
 800ae90:	0030      	movs	r0, r6
 800ae92:	0092      	lsls	r2, r2, #2
 800ae94:	f000 fb76 	bl	800b584 <_calloc_r>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d00c      	beq.n	800aeb6 <_Balloc+0x6e>
 800ae9c:	6044      	str	r4, [r0, #4]
 800ae9e:	6085      	str	r5, [r0, #8]
 800aea0:	e00d      	b.n	800aebe <_Balloc+0x76>
 800aea2:	2221      	movs	r2, #33	; 0x21
 800aea4:	2104      	movs	r1, #4
 800aea6:	0030      	movs	r0, r6
 800aea8:	f000 fb6c 	bl	800b584 <_calloc_r>
 800aeac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aeae:	60e8      	str	r0, [r5, #12]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1e1      	bne.n	800ae7a <_Balloc+0x32>
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	bd70      	pop	{r4, r5, r6, pc}
 800aeba:	6802      	ldr	r2, [r0, #0]
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	2300      	movs	r3, #0
 800aec0:	6103      	str	r3, [r0, #16]
 800aec2:	60c3      	str	r3, [r0, #12]
 800aec4:	e7f8      	b.n	800aeb8 <_Balloc+0x70>
 800aec6:	46c0      	nop			; (mov r8, r8)
 800aec8:	0800defd 	.word	0x0800defd
 800aecc:	0800df84 	.word	0x0800df84

0800aed0 <_Bfree>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aed4:	0005      	movs	r5, r0
 800aed6:	000c      	movs	r4, r1
 800aed8:	2e00      	cmp	r6, #0
 800aeda:	d10e      	bne.n	800aefa <_Bfree+0x2a>
 800aedc:	2010      	movs	r0, #16
 800aede:	f7ff ff95 	bl	800ae0c <malloc>
 800aee2:	1e02      	subs	r2, r0, #0
 800aee4:	6268      	str	r0, [r5, #36]	; 0x24
 800aee6:	d104      	bne.n	800aef2 <_Bfree+0x22>
 800aee8:	218a      	movs	r1, #138	; 0x8a
 800aeea:	4b09      	ldr	r3, [pc, #36]	; (800af10 <_Bfree+0x40>)
 800aeec:	4809      	ldr	r0, [pc, #36]	; (800af14 <_Bfree+0x44>)
 800aeee:	f000 fd73 	bl	800b9d8 <__assert_func>
 800aef2:	6046      	str	r6, [r0, #4]
 800aef4:	6086      	str	r6, [r0, #8]
 800aef6:	6006      	str	r6, [r0, #0]
 800aef8:	60c6      	str	r6, [r0, #12]
 800aefa:	2c00      	cmp	r4, #0
 800aefc:	d007      	beq.n	800af0e <_Bfree+0x3e>
 800aefe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af00:	6862      	ldr	r2, [r4, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	0092      	lsls	r2, r2, #2
 800af06:	189b      	adds	r3, r3, r2
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	6022      	str	r2, [r4, #0]
 800af0c:	601c      	str	r4, [r3, #0]
 800af0e:	bd70      	pop	{r4, r5, r6, pc}
 800af10:	0800defd 	.word	0x0800defd
 800af14:	0800df84 	.word	0x0800df84

0800af18 <__multadd>:
 800af18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af1a:	000e      	movs	r6, r1
 800af1c:	9001      	str	r0, [sp, #4]
 800af1e:	000c      	movs	r4, r1
 800af20:	001d      	movs	r5, r3
 800af22:	2000      	movs	r0, #0
 800af24:	690f      	ldr	r7, [r1, #16]
 800af26:	3614      	adds	r6, #20
 800af28:	6833      	ldr	r3, [r6, #0]
 800af2a:	3001      	adds	r0, #1
 800af2c:	b299      	uxth	r1, r3
 800af2e:	4351      	muls	r1, r2
 800af30:	0c1b      	lsrs	r3, r3, #16
 800af32:	4353      	muls	r3, r2
 800af34:	1949      	adds	r1, r1, r5
 800af36:	0c0d      	lsrs	r5, r1, #16
 800af38:	195b      	adds	r3, r3, r5
 800af3a:	0c1d      	lsrs	r5, r3, #16
 800af3c:	b289      	uxth	r1, r1
 800af3e:	041b      	lsls	r3, r3, #16
 800af40:	185b      	adds	r3, r3, r1
 800af42:	c608      	stmia	r6!, {r3}
 800af44:	4287      	cmp	r7, r0
 800af46:	dcef      	bgt.n	800af28 <__multadd+0x10>
 800af48:	2d00      	cmp	r5, #0
 800af4a:	d022      	beq.n	800af92 <__multadd+0x7a>
 800af4c:	68a3      	ldr	r3, [r4, #8]
 800af4e:	42bb      	cmp	r3, r7
 800af50:	dc19      	bgt.n	800af86 <__multadd+0x6e>
 800af52:	6863      	ldr	r3, [r4, #4]
 800af54:	9801      	ldr	r0, [sp, #4]
 800af56:	1c59      	adds	r1, r3, #1
 800af58:	f7ff ff76 	bl	800ae48 <_Balloc>
 800af5c:	1e06      	subs	r6, r0, #0
 800af5e:	d105      	bne.n	800af6c <__multadd+0x54>
 800af60:	0002      	movs	r2, r0
 800af62:	21b5      	movs	r1, #181	; 0xb5
 800af64:	4b0c      	ldr	r3, [pc, #48]	; (800af98 <__multadd+0x80>)
 800af66:	480d      	ldr	r0, [pc, #52]	; (800af9c <__multadd+0x84>)
 800af68:	f000 fd36 	bl	800b9d8 <__assert_func>
 800af6c:	0021      	movs	r1, r4
 800af6e:	6923      	ldr	r3, [r4, #16]
 800af70:	310c      	adds	r1, #12
 800af72:	1c9a      	adds	r2, r3, #2
 800af74:	0092      	lsls	r2, r2, #2
 800af76:	300c      	adds	r0, #12
 800af78:	f7ff ff5d 	bl	800ae36 <memcpy>
 800af7c:	0021      	movs	r1, r4
 800af7e:	9801      	ldr	r0, [sp, #4]
 800af80:	f7ff ffa6 	bl	800aed0 <_Bfree>
 800af84:	0034      	movs	r4, r6
 800af86:	1d3b      	adds	r3, r7, #4
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	18e3      	adds	r3, r4, r3
 800af8c:	605d      	str	r5, [r3, #4]
 800af8e:	1c7b      	adds	r3, r7, #1
 800af90:	6123      	str	r3, [r4, #16]
 800af92:	0020      	movs	r0, r4
 800af94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af96:	46c0      	nop			; (mov r8, r8)
 800af98:	0800df73 	.word	0x0800df73
 800af9c:	0800df84 	.word	0x0800df84

0800afa0 <__hi0bits>:
 800afa0:	0003      	movs	r3, r0
 800afa2:	0c02      	lsrs	r2, r0, #16
 800afa4:	2000      	movs	r0, #0
 800afa6:	4282      	cmp	r2, r0
 800afa8:	d101      	bne.n	800afae <__hi0bits+0xe>
 800afaa:	041b      	lsls	r3, r3, #16
 800afac:	3010      	adds	r0, #16
 800afae:	0e1a      	lsrs	r2, r3, #24
 800afb0:	d101      	bne.n	800afb6 <__hi0bits+0x16>
 800afb2:	3008      	adds	r0, #8
 800afb4:	021b      	lsls	r3, r3, #8
 800afb6:	0f1a      	lsrs	r2, r3, #28
 800afb8:	d101      	bne.n	800afbe <__hi0bits+0x1e>
 800afba:	3004      	adds	r0, #4
 800afbc:	011b      	lsls	r3, r3, #4
 800afbe:	0f9a      	lsrs	r2, r3, #30
 800afc0:	d101      	bne.n	800afc6 <__hi0bits+0x26>
 800afc2:	3002      	adds	r0, #2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	db03      	blt.n	800afd2 <__hi0bits+0x32>
 800afca:	3001      	adds	r0, #1
 800afcc:	005b      	lsls	r3, r3, #1
 800afce:	d400      	bmi.n	800afd2 <__hi0bits+0x32>
 800afd0:	2020      	movs	r0, #32
 800afd2:	4770      	bx	lr

0800afd4 <__lo0bits>:
 800afd4:	6803      	ldr	r3, [r0, #0]
 800afd6:	0002      	movs	r2, r0
 800afd8:	2107      	movs	r1, #7
 800afda:	0018      	movs	r0, r3
 800afdc:	4008      	ands	r0, r1
 800afde:	420b      	tst	r3, r1
 800afe0:	d00d      	beq.n	800affe <__lo0bits+0x2a>
 800afe2:	3906      	subs	r1, #6
 800afe4:	2000      	movs	r0, #0
 800afe6:	420b      	tst	r3, r1
 800afe8:	d105      	bne.n	800aff6 <__lo0bits+0x22>
 800afea:	3002      	adds	r0, #2
 800afec:	4203      	tst	r3, r0
 800afee:	d003      	beq.n	800aff8 <__lo0bits+0x24>
 800aff0:	40cb      	lsrs	r3, r1
 800aff2:	0008      	movs	r0, r1
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	4770      	bx	lr
 800aff8:	089b      	lsrs	r3, r3, #2
 800affa:	6013      	str	r3, [r2, #0]
 800affc:	e7fb      	b.n	800aff6 <__lo0bits+0x22>
 800affe:	b299      	uxth	r1, r3
 800b000:	2900      	cmp	r1, #0
 800b002:	d101      	bne.n	800b008 <__lo0bits+0x34>
 800b004:	2010      	movs	r0, #16
 800b006:	0c1b      	lsrs	r3, r3, #16
 800b008:	b2d9      	uxtb	r1, r3
 800b00a:	2900      	cmp	r1, #0
 800b00c:	d101      	bne.n	800b012 <__lo0bits+0x3e>
 800b00e:	3008      	adds	r0, #8
 800b010:	0a1b      	lsrs	r3, r3, #8
 800b012:	0719      	lsls	r1, r3, #28
 800b014:	d101      	bne.n	800b01a <__lo0bits+0x46>
 800b016:	3004      	adds	r0, #4
 800b018:	091b      	lsrs	r3, r3, #4
 800b01a:	0799      	lsls	r1, r3, #30
 800b01c:	d101      	bne.n	800b022 <__lo0bits+0x4e>
 800b01e:	3002      	adds	r0, #2
 800b020:	089b      	lsrs	r3, r3, #2
 800b022:	07d9      	lsls	r1, r3, #31
 800b024:	d4e9      	bmi.n	800affa <__lo0bits+0x26>
 800b026:	3001      	adds	r0, #1
 800b028:	085b      	lsrs	r3, r3, #1
 800b02a:	d1e6      	bne.n	800affa <__lo0bits+0x26>
 800b02c:	2020      	movs	r0, #32
 800b02e:	e7e2      	b.n	800aff6 <__lo0bits+0x22>

0800b030 <__i2b>:
 800b030:	b510      	push	{r4, lr}
 800b032:	000c      	movs	r4, r1
 800b034:	2101      	movs	r1, #1
 800b036:	f7ff ff07 	bl	800ae48 <_Balloc>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d106      	bne.n	800b04c <__i2b+0x1c>
 800b03e:	21a0      	movs	r1, #160	; 0xa0
 800b040:	0002      	movs	r2, r0
 800b042:	4b04      	ldr	r3, [pc, #16]	; (800b054 <__i2b+0x24>)
 800b044:	4804      	ldr	r0, [pc, #16]	; (800b058 <__i2b+0x28>)
 800b046:	0049      	lsls	r1, r1, #1
 800b048:	f000 fcc6 	bl	800b9d8 <__assert_func>
 800b04c:	2301      	movs	r3, #1
 800b04e:	6144      	str	r4, [r0, #20]
 800b050:	6103      	str	r3, [r0, #16]
 800b052:	bd10      	pop	{r4, pc}
 800b054:	0800df73 	.word	0x0800df73
 800b058:	0800df84 	.word	0x0800df84

0800b05c <__multiply>:
 800b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b05e:	690b      	ldr	r3, [r1, #16]
 800b060:	0014      	movs	r4, r2
 800b062:	6912      	ldr	r2, [r2, #16]
 800b064:	000d      	movs	r5, r1
 800b066:	b089      	sub	sp, #36	; 0x24
 800b068:	4293      	cmp	r3, r2
 800b06a:	da01      	bge.n	800b070 <__multiply+0x14>
 800b06c:	0025      	movs	r5, r4
 800b06e:	000c      	movs	r4, r1
 800b070:	692f      	ldr	r7, [r5, #16]
 800b072:	6926      	ldr	r6, [r4, #16]
 800b074:	6869      	ldr	r1, [r5, #4]
 800b076:	19bb      	adds	r3, r7, r6
 800b078:	9302      	str	r3, [sp, #8]
 800b07a:	68ab      	ldr	r3, [r5, #8]
 800b07c:	19ba      	adds	r2, r7, r6
 800b07e:	4293      	cmp	r3, r2
 800b080:	da00      	bge.n	800b084 <__multiply+0x28>
 800b082:	3101      	adds	r1, #1
 800b084:	f7ff fee0 	bl	800ae48 <_Balloc>
 800b088:	9001      	str	r0, [sp, #4]
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d106      	bne.n	800b09c <__multiply+0x40>
 800b08e:	215e      	movs	r1, #94	; 0x5e
 800b090:	0002      	movs	r2, r0
 800b092:	4b48      	ldr	r3, [pc, #288]	; (800b1b4 <__multiply+0x158>)
 800b094:	4848      	ldr	r0, [pc, #288]	; (800b1b8 <__multiply+0x15c>)
 800b096:	31ff      	adds	r1, #255	; 0xff
 800b098:	f000 fc9e 	bl	800b9d8 <__assert_func>
 800b09c:	9b01      	ldr	r3, [sp, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	3314      	adds	r3, #20
 800b0a2:	469c      	mov	ip, r3
 800b0a4:	19bb      	adds	r3, r7, r6
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4463      	add	r3, ip
 800b0aa:	9303      	str	r3, [sp, #12]
 800b0ac:	4663      	mov	r3, ip
 800b0ae:	9903      	ldr	r1, [sp, #12]
 800b0b0:	428b      	cmp	r3, r1
 800b0b2:	d32c      	bcc.n	800b10e <__multiply+0xb2>
 800b0b4:	002b      	movs	r3, r5
 800b0b6:	0022      	movs	r2, r4
 800b0b8:	3314      	adds	r3, #20
 800b0ba:	00bf      	lsls	r7, r7, #2
 800b0bc:	3214      	adds	r2, #20
 800b0be:	9306      	str	r3, [sp, #24]
 800b0c0:	00b6      	lsls	r6, r6, #2
 800b0c2:	19db      	adds	r3, r3, r7
 800b0c4:	9304      	str	r3, [sp, #16]
 800b0c6:	1993      	adds	r3, r2, r6
 800b0c8:	9307      	str	r3, [sp, #28]
 800b0ca:	2304      	movs	r3, #4
 800b0cc:	9305      	str	r3, [sp, #20]
 800b0ce:	002b      	movs	r3, r5
 800b0d0:	9904      	ldr	r1, [sp, #16]
 800b0d2:	3315      	adds	r3, #21
 800b0d4:	9200      	str	r2, [sp, #0]
 800b0d6:	4299      	cmp	r1, r3
 800b0d8:	d305      	bcc.n	800b0e6 <__multiply+0x8a>
 800b0da:	1b4b      	subs	r3, r1, r5
 800b0dc:	3b15      	subs	r3, #21
 800b0de:	089b      	lsrs	r3, r3, #2
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	9305      	str	r3, [sp, #20]
 800b0e6:	9b07      	ldr	r3, [sp, #28]
 800b0e8:	9a00      	ldr	r2, [sp, #0]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d311      	bcc.n	800b112 <__multiply+0xb6>
 800b0ee:	9b02      	ldr	r3, [sp, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	dd06      	ble.n	800b102 <__multiply+0xa6>
 800b0f4:	9b03      	ldr	r3, [sp, #12]
 800b0f6:	3b04      	subs	r3, #4
 800b0f8:	9303      	str	r3, [sp, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d054      	beq.n	800b1ac <__multiply+0x150>
 800b102:	9b01      	ldr	r3, [sp, #4]
 800b104:	9a02      	ldr	r2, [sp, #8]
 800b106:	0018      	movs	r0, r3
 800b108:	611a      	str	r2, [r3, #16]
 800b10a:	b009      	add	sp, #36	; 0x24
 800b10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b10e:	c304      	stmia	r3!, {r2}
 800b110:	e7cd      	b.n	800b0ae <__multiply+0x52>
 800b112:	9b00      	ldr	r3, [sp, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	b298      	uxth	r0, r3
 800b118:	2800      	cmp	r0, #0
 800b11a:	d01c      	beq.n	800b156 <__multiply+0xfa>
 800b11c:	4667      	mov	r7, ip
 800b11e:	2400      	movs	r4, #0
 800b120:	9e06      	ldr	r6, [sp, #24]
 800b122:	ce02      	ldmia	r6!, {r1}
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	b28b      	uxth	r3, r1
 800b128:	4343      	muls	r3, r0
 800b12a:	0c09      	lsrs	r1, r1, #16
 800b12c:	4341      	muls	r1, r0
 800b12e:	b292      	uxth	r2, r2
 800b130:	189b      	adds	r3, r3, r2
 800b132:	191b      	adds	r3, r3, r4
 800b134:	000c      	movs	r4, r1
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	0c11      	lsrs	r1, r2, #16
 800b13a:	1861      	adds	r1, r4, r1
 800b13c:	0c1c      	lsrs	r4, r3, #16
 800b13e:	1909      	adds	r1, r1, r4
 800b140:	0c0c      	lsrs	r4, r1, #16
 800b142:	b29b      	uxth	r3, r3
 800b144:	0409      	lsls	r1, r1, #16
 800b146:	430b      	orrs	r3, r1
 800b148:	c708      	stmia	r7!, {r3}
 800b14a:	9b04      	ldr	r3, [sp, #16]
 800b14c:	42b3      	cmp	r3, r6
 800b14e:	d8e8      	bhi.n	800b122 <__multiply+0xc6>
 800b150:	4663      	mov	r3, ip
 800b152:	9a05      	ldr	r2, [sp, #20]
 800b154:	509c      	str	r4, [r3, r2]
 800b156:	9b00      	ldr	r3, [sp, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	0c1e      	lsrs	r6, r3, #16
 800b15c:	d020      	beq.n	800b1a0 <__multiply+0x144>
 800b15e:	4663      	mov	r3, ip
 800b160:	002c      	movs	r4, r5
 800b162:	4660      	mov	r0, ip
 800b164:	2700      	movs	r7, #0
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3414      	adds	r4, #20
 800b16a:	6822      	ldr	r2, [r4, #0]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	b291      	uxth	r1, r2
 800b170:	4371      	muls	r1, r6
 800b172:	6802      	ldr	r2, [r0, #0]
 800b174:	0c12      	lsrs	r2, r2, #16
 800b176:	1889      	adds	r1, r1, r2
 800b178:	19cf      	adds	r7, r1, r7
 800b17a:	0439      	lsls	r1, r7, #16
 800b17c:	430b      	orrs	r3, r1
 800b17e:	6003      	str	r3, [r0, #0]
 800b180:	cc02      	ldmia	r4!, {r1}
 800b182:	6843      	ldr	r3, [r0, #4]
 800b184:	0c09      	lsrs	r1, r1, #16
 800b186:	4371      	muls	r1, r6
 800b188:	b29b      	uxth	r3, r3
 800b18a:	0c3f      	lsrs	r7, r7, #16
 800b18c:	18cb      	adds	r3, r1, r3
 800b18e:	9a04      	ldr	r2, [sp, #16]
 800b190:	19db      	adds	r3, r3, r7
 800b192:	0c1f      	lsrs	r7, r3, #16
 800b194:	3004      	adds	r0, #4
 800b196:	42a2      	cmp	r2, r4
 800b198:	d8e7      	bhi.n	800b16a <__multiply+0x10e>
 800b19a:	4662      	mov	r2, ip
 800b19c:	9905      	ldr	r1, [sp, #20]
 800b19e:	5053      	str	r3, [r2, r1]
 800b1a0:	9b00      	ldr	r3, [sp, #0]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	2304      	movs	r3, #4
 800b1a8:	449c      	add	ip, r3
 800b1aa:	e79c      	b.n	800b0e6 <__multiply+0x8a>
 800b1ac:	9b02      	ldr	r3, [sp, #8]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	9302      	str	r3, [sp, #8]
 800b1b2:	e79c      	b.n	800b0ee <__multiply+0x92>
 800b1b4:	0800df73 	.word	0x0800df73
 800b1b8:	0800df84 	.word	0x0800df84

0800b1bc <__pow5mult>:
 800b1bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1be:	2303      	movs	r3, #3
 800b1c0:	0015      	movs	r5, r2
 800b1c2:	0007      	movs	r7, r0
 800b1c4:	000e      	movs	r6, r1
 800b1c6:	401a      	ands	r2, r3
 800b1c8:	421d      	tst	r5, r3
 800b1ca:	d008      	beq.n	800b1de <__pow5mult+0x22>
 800b1cc:	4925      	ldr	r1, [pc, #148]	; (800b264 <__pow5mult+0xa8>)
 800b1ce:	3a01      	subs	r2, #1
 800b1d0:	0092      	lsls	r2, r2, #2
 800b1d2:	5852      	ldr	r2, [r2, r1]
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	0031      	movs	r1, r6
 800b1d8:	f7ff fe9e 	bl	800af18 <__multadd>
 800b1dc:	0006      	movs	r6, r0
 800b1de:	10ad      	asrs	r5, r5, #2
 800b1e0:	d03d      	beq.n	800b25e <__pow5mult+0xa2>
 800b1e2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b1e4:	2c00      	cmp	r4, #0
 800b1e6:	d10f      	bne.n	800b208 <__pow5mult+0x4c>
 800b1e8:	2010      	movs	r0, #16
 800b1ea:	f7ff fe0f 	bl	800ae0c <malloc>
 800b1ee:	1e02      	subs	r2, r0, #0
 800b1f0:	6278      	str	r0, [r7, #36]	; 0x24
 800b1f2:	d105      	bne.n	800b200 <__pow5mult+0x44>
 800b1f4:	21d7      	movs	r1, #215	; 0xd7
 800b1f6:	4b1c      	ldr	r3, [pc, #112]	; (800b268 <__pow5mult+0xac>)
 800b1f8:	481c      	ldr	r0, [pc, #112]	; (800b26c <__pow5mult+0xb0>)
 800b1fa:	0049      	lsls	r1, r1, #1
 800b1fc:	f000 fbec 	bl	800b9d8 <__assert_func>
 800b200:	6044      	str	r4, [r0, #4]
 800b202:	6084      	str	r4, [r0, #8]
 800b204:	6004      	str	r4, [r0, #0]
 800b206:	60c4      	str	r4, [r0, #12]
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	689c      	ldr	r4, [r3, #8]
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	2c00      	cmp	r4, #0
 800b210:	d108      	bne.n	800b224 <__pow5mult+0x68>
 800b212:	0038      	movs	r0, r7
 800b214:	4916      	ldr	r1, [pc, #88]	; (800b270 <__pow5mult+0xb4>)
 800b216:	f7ff ff0b 	bl	800b030 <__i2b>
 800b21a:	9b01      	ldr	r3, [sp, #4]
 800b21c:	0004      	movs	r4, r0
 800b21e:	6098      	str	r0, [r3, #8]
 800b220:	2300      	movs	r3, #0
 800b222:	6003      	str	r3, [r0, #0]
 800b224:	2301      	movs	r3, #1
 800b226:	421d      	tst	r5, r3
 800b228:	d00a      	beq.n	800b240 <__pow5mult+0x84>
 800b22a:	0031      	movs	r1, r6
 800b22c:	0022      	movs	r2, r4
 800b22e:	0038      	movs	r0, r7
 800b230:	f7ff ff14 	bl	800b05c <__multiply>
 800b234:	0031      	movs	r1, r6
 800b236:	9001      	str	r0, [sp, #4]
 800b238:	0038      	movs	r0, r7
 800b23a:	f7ff fe49 	bl	800aed0 <_Bfree>
 800b23e:	9e01      	ldr	r6, [sp, #4]
 800b240:	106d      	asrs	r5, r5, #1
 800b242:	d00c      	beq.n	800b25e <__pow5mult+0xa2>
 800b244:	6820      	ldr	r0, [r4, #0]
 800b246:	2800      	cmp	r0, #0
 800b248:	d107      	bne.n	800b25a <__pow5mult+0x9e>
 800b24a:	0022      	movs	r2, r4
 800b24c:	0021      	movs	r1, r4
 800b24e:	0038      	movs	r0, r7
 800b250:	f7ff ff04 	bl	800b05c <__multiply>
 800b254:	2300      	movs	r3, #0
 800b256:	6020      	str	r0, [r4, #0]
 800b258:	6003      	str	r3, [r0, #0]
 800b25a:	0004      	movs	r4, r0
 800b25c:	e7e2      	b.n	800b224 <__pow5mult+0x68>
 800b25e:	0030      	movs	r0, r6
 800b260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b262:	46c0      	nop			; (mov r8, r8)
 800b264:	0800e0d8 	.word	0x0800e0d8
 800b268:	0800defd 	.word	0x0800defd
 800b26c:	0800df84 	.word	0x0800df84
 800b270:	00000271 	.word	0x00000271

0800b274 <__lshift>:
 800b274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b276:	000c      	movs	r4, r1
 800b278:	0017      	movs	r7, r2
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	1155      	asrs	r5, r2, #5
 800b27e:	b087      	sub	sp, #28
 800b280:	18eb      	adds	r3, r5, r3
 800b282:	9302      	str	r3, [sp, #8]
 800b284:	3301      	adds	r3, #1
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	6849      	ldr	r1, [r1, #4]
 800b28a:	68a3      	ldr	r3, [r4, #8]
 800b28c:	9004      	str	r0, [sp, #16]
 800b28e:	9a01      	ldr	r2, [sp, #4]
 800b290:	4293      	cmp	r3, r2
 800b292:	db11      	blt.n	800b2b8 <__lshift+0x44>
 800b294:	9804      	ldr	r0, [sp, #16]
 800b296:	f7ff fdd7 	bl	800ae48 <_Balloc>
 800b29a:	0002      	movs	r2, r0
 800b29c:	2300      	movs	r3, #0
 800b29e:	3214      	adds	r2, #20
 800b2a0:	0006      	movs	r6, r0
 800b2a2:	0011      	movs	r1, r2
 800b2a4:	9203      	str	r2, [sp, #12]
 800b2a6:	4298      	cmp	r0, r3
 800b2a8:	d10d      	bne.n	800b2c6 <__lshift+0x52>
 800b2aa:	21da      	movs	r1, #218	; 0xda
 800b2ac:	0002      	movs	r2, r0
 800b2ae:	4b27      	ldr	r3, [pc, #156]	; (800b34c <__lshift+0xd8>)
 800b2b0:	4827      	ldr	r0, [pc, #156]	; (800b350 <__lshift+0xdc>)
 800b2b2:	31ff      	adds	r1, #255	; 0xff
 800b2b4:	f000 fb90 	bl	800b9d8 <__assert_func>
 800b2b8:	3101      	adds	r1, #1
 800b2ba:	005b      	lsls	r3, r3, #1
 800b2bc:	e7e7      	b.n	800b28e <__lshift+0x1a>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	0098      	lsls	r0, r3, #2
 800b2c2:	500a      	str	r2, [r1, r0]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	42ab      	cmp	r3, r5
 800b2c8:	dbf9      	blt.n	800b2be <__lshift+0x4a>
 800b2ca:	43eb      	mvns	r3, r5
 800b2cc:	17db      	asrs	r3, r3, #31
 800b2ce:	401d      	ands	r5, r3
 800b2d0:	9b03      	ldr	r3, [sp, #12]
 800b2d2:	00ad      	lsls	r5, r5, #2
 800b2d4:	211f      	movs	r1, #31
 800b2d6:	0038      	movs	r0, r7
 800b2d8:	195d      	adds	r5, r3, r5
 800b2da:	0023      	movs	r3, r4
 800b2dc:	6922      	ldr	r2, [r4, #16]
 800b2de:	3314      	adds	r3, #20
 800b2e0:	0092      	lsls	r2, r2, #2
 800b2e2:	4008      	ands	r0, r1
 800b2e4:	4684      	mov	ip, r0
 800b2e6:	189a      	adds	r2, r3, r2
 800b2e8:	420f      	tst	r7, r1
 800b2ea:	d02a      	beq.n	800b342 <__lshift+0xce>
 800b2ec:	3101      	adds	r1, #1
 800b2ee:	1a09      	subs	r1, r1, r0
 800b2f0:	9105      	str	r1, [sp, #20]
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	9503      	str	r5, [sp, #12]
 800b2f6:	4667      	mov	r7, ip
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	40b8      	lsls	r0, r7
 800b2fc:	4301      	orrs	r1, r0
 800b2fe:	9803      	ldr	r0, [sp, #12]
 800b300:	c002      	stmia	r0!, {r1}
 800b302:	cb02      	ldmia	r3!, {r1}
 800b304:	9003      	str	r0, [sp, #12]
 800b306:	9805      	ldr	r0, [sp, #20]
 800b308:	40c1      	lsrs	r1, r0
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d8f3      	bhi.n	800b2f6 <__lshift+0x82>
 800b30e:	0020      	movs	r0, r4
 800b310:	3015      	adds	r0, #21
 800b312:	2304      	movs	r3, #4
 800b314:	4282      	cmp	r2, r0
 800b316:	d304      	bcc.n	800b322 <__lshift+0xae>
 800b318:	1b13      	subs	r3, r2, r4
 800b31a:	3b15      	subs	r3, #21
 800b31c:	089b      	lsrs	r3, r3, #2
 800b31e:	3301      	adds	r3, #1
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	50e9      	str	r1, [r5, r3]
 800b324:	2900      	cmp	r1, #0
 800b326:	d002      	beq.n	800b32e <__lshift+0xba>
 800b328:	9b02      	ldr	r3, [sp, #8]
 800b32a:	3302      	adds	r3, #2
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	9804      	ldr	r0, [sp, #16]
 800b332:	3b01      	subs	r3, #1
 800b334:	0021      	movs	r1, r4
 800b336:	6133      	str	r3, [r6, #16]
 800b338:	f7ff fdca 	bl	800aed0 <_Bfree>
 800b33c:	0030      	movs	r0, r6
 800b33e:	b007      	add	sp, #28
 800b340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b342:	cb02      	ldmia	r3!, {r1}
 800b344:	c502      	stmia	r5!, {r1}
 800b346:	429a      	cmp	r2, r3
 800b348:	d8fb      	bhi.n	800b342 <__lshift+0xce>
 800b34a:	e7f0      	b.n	800b32e <__lshift+0xba>
 800b34c:	0800df73 	.word	0x0800df73
 800b350:	0800df84 	.word	0x0800df84

0800b354 <__mcmp>:
 800b354:	6902      	ldr	r2, [r0, #16]
 800b356:	690b      	ldr	r3, [r1, #16]
 800b358:	b530      	push	{r4, r5, lr}
 800b35a:	0004      	movs	r4, r0
 800b35c:	1ad0      	subs	r0, r2, r3
 800b35e:	429a      	cmp	r2, r3
 800b360:	d10d      	bne.n	800b37e <__mcmp+0x2a>
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	3414      	adds	r4, #20
 800b366:	3114      	adds	r1, #20
 800b368:	18e2      	adds	r2, r4, r3
 800b36a:	18c9      	adds	r1, r1, r3
 800b36c:	3a04      	subs	r2, #4
 800b36e:	3904      	subs	r1, #4
 800b370:	6815      	ldr	r5, [r2, #0]
 800b372:	680b      	ldr	r3, [r1, #0]
 800b374:	429d      	cmp	r5, r3
 800b376:	d003      	beq.n	800b380 <__mcmp+0x2c>
 800b378:	2001      	movs	r0, #1
 800b37a:	429d      	cmp	r5, r3
 800b37c:	d303      	bcc.n	800b386 <__mcmp+0x32>
 800b37e:	bd30      	pop	{r4, r5, pc}
 800b380:	4294      	cmp	r4, r2
 800b382:	d3f3      	bcc.n	800b36c <__mcmp+0x18>
 800b384:	e7fb      	b.n	800b37e <__mcmp+0x2a>
 800b386:	4240      	negs	r0, r0
 800b388:	e7f9      	b.n	800b37e <__mcmp+0x2a>
	...

0800b38c <__mdiff>:
 800b38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b38e:	000e      	movs	r6, r1
 800b390:	0007      	movs	r7, r0
 800b392:	0011      	movs	r1, r2
 800b394:	0030      	movs	r0, r6
 800b396:	b087      	sub	sp, #28
 800b398:	0014      	movs	r4, r2
 800b39a:	f7ff ffdb 	bl	800b354 <__mcmp>
 800b39e:	1e05      	subs	r5, r0, #0
 800b3a0:	d110      	bne.n	800b3c4 <__mdiff+0x38>
 800b3a2:	0001      	movs	r1, r0
 800b3a4:	0038      	movs	r0, r7
 800b3a6:	f7ff fd4f 	bl	800ae48 <_Balloc>
 800b3aa:	1e02      	subs	r2, r0, #0
 800b3ac:	d104      	bne.n	800b3b8 <__mdiff+0x2c>
 800b3ae:	4b40      	ldr	r3, [pc, #256]	; (800b4b0 <__mdiff+0x124>)
 800b3b0:	4940      	ldr	r1, [pc, #256]	; (800b4b4 <__mdiff+0x128>)
 800b3b2:	4841      	ldr	r0, [pc, #260]	; (800b4b8 <__mdiff+0x12c>)
 800b3b4:	f000 fb10 	bl	800b9d8 <__assert_func>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	6145      	str	r5, [r0, #20]
 800b3bc:	6103      	str	r3, [r0, #16]
 800b3be:	0010      	movs	r0, r2
 800b3c0:	b007      	add	sp, #28
 800b3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	db04      	blt.n	800b3d6 <__mdiff+0x4a>
 800b3cc:	0023      	movs	r3, r4
 800b3ce:	0034      	movs	r4, r6
 800b3d0:	001e      	movs	r6, r3
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	0038      	movs	r0, r7
 800b3d8:	6861      	ldr	r1, [r4, #4]
 800b3da:	f7ff fd35 	bl	800ae48 <_Balloc>
 800b3de:	1e02      	subs	r2, r0, #0
 800b3e0:	d103      	bne.n	800b3ea <__mdiff+0x5e>
 800b3e2:	2190      	movs	r1, #144	; 0x90
 800b3e4:	4b32      	ldr	r3, [pc, #200]	; (800b4b0 <__mdiff+0x124>)
 800b3e6:	0089      	lsls	r1, r1, #2
 800b3e8:	e7e3      	b.n	800b3b2 <__mdiff+0x26>
 800b3ea:	9b01      	ldr	r3, [sp, #4]
 800b3ec:	2700      	movs	r7, #0
 800b3ee:	60c3      	str	r3, [r0, #12]
 800b3f0:	6920      	ldr	r0, [r4, #16]
 800b3f2:	3414      	adds	r4, #20
 800b3f4:	9401      	str	r4, [sp, #4]
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	0084      	lsls	r4, r0, #2
 800b3fa:	191b      	adds	r3, r3, r4
 800b3fc:	0034      	movs	r4, r6
 800b3fe:	9302      	str	r3, [sp, #8]
 800b400:	6933      	ldr	r3, [r6, #16]
 800b402:	3414      	adds	r4, #20
 800b404:	0099      	lsls	r1, r3, #2
 800b406:	1863      	adds	r3, r4, r1
 800b408:	9303      	str	r3, [sp, #12]
 800b40a:	0013      	movs	r3, r2
 800b40c:	3314      	adds	r3, #20
 800b40e:	469c      	mov	ip, r3
 800b410:	9305      	str	r3, [sp, #20]
 800b412:	9b01      	ldr	r3, [sp, #4]
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	9b04      	ldr	r3, [sp, #16]
 800b418:	cc02      	ldmia	r4!, {r1}
 800b41a:	cb20      	ldmia	r3!, {r5}
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	b2ab      	uxth	r3, r5
 800b420:	19df      	adds	r7, r3, r7
 800b422:	b28b      	uxth	r3, r1
 800b424:	1afb      	subs	r3, r7, r3
 800b426:	0c2d      	lsrs	r5, r5, #16
 800b428:	0c09      	lsrs	r1, r1, #16
 800b42a:	1a69      	subs	r1, r5, r1
 800b42c:	141d      	asrs	r5, r3, #16
 800b42e:	1949      	adds	r1, r1, r5
 800b430:	140f      	asrs	r7, r1, #16
 800b432:	b29b      	uxth	r3, r3
 800b434:	0409      	lsls	r1, r1, #16
 800b436:	430b      	orrs	r3, r1
 800b438:	4661      	mov	r1, ip
 800b43a:	c108      	stmia	r1!, {r3}
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	468c      	mov	ip, r1
 800b440:	42a3      	cmp	r3, r4
 800b442:	d8e8      	bhi.n	800b416 <__mdiff+0x8a>
 800b444:	0031      	movs	r1, r6
 800b446:	9c03      	ldr	r4, [sp, #12]
 800b448:	3115      	adds	r1, #21
 800b44a:	2304      	movs	r3, #4
 800b44c:	428c      	cmp	r4, r1
 800b44e:	d304      	bcc.n	800b45a <__mdiff+0xce>
 800b450:	1ba3      	subs	r3, r4, r6
 800b452:	3b15      	subs	r3, #21
 800b454:	089b      	lsrs	r3, r3, #2
 800b456:	3301      	adds	r3, #1
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	9901      	ldr	r1, [sp, #4]
 800b45c:	18cc      	adds	r4, r1, r3
 800b45e:	9905      	ldr	r1, [sp, #20]
 800b460:	0026      	movs	r6, r4
 800b462:	18cb      	adds	r3, r1, r3
 800b464:	469c      	mov	ip, r3
 800b466:	9902      	ldr	r1, [sp, #8]
 800b468:	428e      	cmp	r6, r1
 800b46a:	d310      	bcc.n	800b48e <__mdiff+0x102>
 800b46c:	9e02      	ldr	r6, [sp, #8]
 800b46e:	1ee5      	subs	r5, r4, #3
 800b470:	2100      	movs	r1, #0
 800b472:	42ae      	cmp	r6, r5
 800b474:	d304      	bcc.n	800b480 <__mdiff+0xf4>
 800b476:	0031      	movs	r1, r6
 800b478:	3103      	adds	r1, #3
 800b47a:	1b09      	subs	r1, r1, r4
 800b47c:	0889      	lsrs	r1, r1, #2
 800b47e:	0089      	lsls	r1, r1, #2
 800b480:	185b      	adds	r3, r3, r1
 800b482:	3b04      	subs	r3, #4
 800b484:	6819      	ldr	r1, [r3, #0]
 800b486:	2900      	cmp	r1, #0
 800b488:	d00f      	beq.n	800b4aa <__mdiff+0x11e>
 800b48a:	6110      	str	r0, [r2, #16]
 800b48c:	e797      	b.n	800b3be <__mdiff+0x32>
 800b48e:	ce02      	ldmia	r6!, {r1}
 800b490:	b28d      	uxth	r5, r1
 800b492:	19ed      	adds	r5, r5, r7
 800b494:	0c0f      	lsrs	r7, r1, #16
 800b496:	1429      	asrs	r1, r5, #16
 800b498:	1879      	adds	r1, r7, r1
 800b49a:	140f      	asrs	r7, r1, #16
 800b49c:	b2ad      	uxth	r5, r5
 800b49e:	0409      	lsls	r1, r1, #16
 800b4a0:	430d      	orrs	r5, r1
 800b4a2:	4661      	mov	r1, ip
 800b4a4:	c120      	stmia	r1!, {r5}
 800b4a6:	468c      	mov	ip, r1
 800b4a8:	e7dd      	b.n	800b466 <__mdiff+0xda>
 800b4aa:	3801      	subs	r0, #1
 800b4ac:	e7e9      	b.n	800b482 <__mdiff+0xf6>
 800b4ae:	46c0      	nop			; (mov r8, r8)
 800b4b0:	0800df73 	.word	0x0800df73
 800b4b4:	00000232 	.word	0x00000232
 800b4b8:	0800df84 	.word	0x0800df84

0800b4bc <__d2b>:
 800b4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4be:	2101      	movs	r1, #1
 800b4c0:	0014      	movs	r4, r2
 800b4c2:	001e      	movs	r6, r3
 800b4c4:	9f08      	ldr	r7, [sp, #32]
 800b4c6:	f7ff fcbf 	bl	800ae48 <_Balloc>
 800b4ca:	1e05      	subs	r5, r0, #0
 800b4cc:	d105      	bne.n	800b4da <__d2b+0x1e>
 800b4ce:	0002      	movs	r2, r0
 800b4d0:	4b26      	ldr	r3, [pc, #152]	; (800b56c <__d2b+0xb0>)
 800b4d2:	4927      	ldr	r1, [pc, #156]	; (800b570 <__d2b+0xb4>)
 800b4d4:	4827      	ldr	r0, [pc, #156]	; (800b574 <__d2b+0xb8>)
 800b4d6:	f000 fa7f 	bl	800b9d8 <__assert_func>
 800b4da:	0333      	lsls	r3, r6, #12
 800b4dc:	0076      	lsls	r6, r6, #1
 800b4de:	0b1b      	lsrs	r3, r3, #12
 800b4e0:	0d76      	lsrs	r6, r6, #21
 800b4e2:	d124      	bne.n	800b52e <__d2b+0x72>
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	2c00      	cmp	r4, #0
 800b4e8:	d027      	beq.n	800b53a <__d2b+0x7e>
 800b4ea:	4668      	mov	r0, sp
 800b4ec:	9400      	str	r4, [sp, #0]
 800b4ee:	f7ff fd71 	bl	800afd4 <__lo0bits>
 800b4f2:	9c00      	ldr	r4, [sp, #0]
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d01e      	beq.n	800b536 <__d2b+0x7a>
 800b4f8:	9b01      	ldr	r3, [sp, #4]
 800b4fa:	2120      	movs	r1, #32
 800b4fc:	001a      	movs	r2, r3
 800b4fe:	1a09      	subs	r1, r1, r0
 800b500:	408a      	lsls	r2, r1
 800b502:	40c3      	lsrs	r3, r0
 800b504:	4322      	orrs	r2, r4
 800b506:	616a      	str	r2, [r5, #20]
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	9c01      	ldr	r4, [sp, #4]
 800b50c:	61ac      	str	r4, [r5, #24]
 800b50e:	1e63      	subs	r3, r4, #1
 800b510:	419c      	sbcs	r4, r3
 800b512:	3401      	adds	r4, #1
 800b514:	612c      	str	r4, [r5, #16]
 800b516:	2e00      	cmp	r6, #0
 800b518:	d018      	beq.n	800b54c <__d2b+0x90>
 800b51a:	4b17      	ldr	r3, [pc, #92]	; (800b578 <__d2b+0xbc>)
 800b51c:	18f6      	adds	r6, r6, r3
 800b51e:	2335      	movs	r3, #53	; 0x35
 800b520:	1836      	adds	r6, r6, r0
 800b522:	1a18      	subs	r0, r3, r0
 800b524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b526:	603e      	str	r6, [r7, #0]
 800b528:	6018      	str	r0, [r3, #0]
 800b52a:	0028      	movs	r0, r5
 800b52c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b52e:	2280      	movs	r2, #128	; 0x80
 800b530:	0352      	lsls	r2, r2, #13
 800b532:	4313      	orrs	r3, r2
 800b534:	e7d6      	b.n	800b4e4 <__d2b+0x28>
 800b536:	616c      	str	r4, [r5, #20]
 800b538:	e7e7      	b.n	800b50a <__d2b+0x4e>
 800b53a:	a801      	add	r0, sp, #4
 800b53c:	f7ff fd4a 	bl	800afd4 <__lo0bits>
 800b540:	2401      	movs	r4, #1
 800b542:	9b01      	ldr	r3, [sp, #4]
 800b544:	612c      	str	r4, [r5, #16]
 800b546:	616b      	str	r3, [r5, #20]
 800b548:	3020      	adds	r0, #32
 800b54a:	e7e4      	b.n	800b516 <__d2b+0x5a>
 800b54c:	4b0b      	ldr	r3, [pc, #44]	; (800b57c <__d2b+0xc0>)
 800b54e:	18c0      	adds	r0, r0, r3
 800b550:	4b0b      	ldr	r3, [pc, #44]	; (800b580 <__d2b+0xc4>)
 800b552:	6038      	str	r0, [r7, #0]
 800b554:	18e3      	adds	r3, r4, r3
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	18eb      	adds	r3, r5, r3
 800b55a:	6958      	ldr	r0, [r3, #20]
 800b55c:	f7ff fd20 	bl	800afa0 <__hi0bits>
 800b560:	0164      	lsls	r4, r4, #5
 800b562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b564:	1a24      	subs	r4, r4, r0
 800b566:	601c      	str	r4, [r3, #0]
 800b568:	e7df      	b.n	800b52a <__d2b+0x6e>
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	0800df73 	.word	0x0800df73
 800b570:	0000030a 	.word	0x0000030a
 800b574:	0800df84 	.word	0x0800df84
 800b578:	fffffbcd 	.word	0xfffffbcd
 800b57c:	fffffbce 	.word	0xfffffbce
 800b580:	3fffffff 	.word	0x3fffffff

0800b584 <_calloc_r>:
 800b584:	434a      	muls	r2, r1
 800b586:	b570      	push	{r4, r5, r6, lr}
 800b588:	0011      	movs	r1, r2
 800b58a:	0015      	movs	r5, r2
 800b58c:	f000 f852 	bl	800b634 <_malloc_r>
 800b590:	1e04      	subs	r4, r0, #0
 800b592:	d003      	beq.n	800b59c <_calloc_r+0x18>
 800b594:	002a      	movs	r2, r5
 800b596:	2100      	movs	r1, #0
 800b598:	f7fe f8e8 	bl	800976c <memset>
 800b59c:	0020      	movs	r0, r4
 800b59e:	bd70      	pop	{r4, r5, r6, pc}

0800b5a0 <_free_r>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	0005      	movs	r5, r0
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	d010      	beq.n	800b5ca <_free_r+0x2a>
 800b5a8:	1f0c      	subs	r4, r1, #4
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	da00      	bge.n	800b5b2 <_free_r+0x12>
 800b5b0:	18e4      	adds	r4, r4, r3
 800b5b2:	0028      	movs	r0, r5
 800b5b4:	f000 fa64 	bl	800ba80 <__malloc_lock>
 800b5b8:	4a1d      	ldr	r2, [pc, #116]	; (800b630 <_free_r+0x90>)
 800b5ba:	6813      	ldr	r3, [r2, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d105      	bne.n	800b5cc <_free_r+0x2c>
 800b5c0:	6063      	str	r3, [r4, #4]
 800b5c2:	6014      	str	r4, [r2, #0]
 800b5c4:	0028      	movs	r0, r5
 800b5c6:	f000 fa63 	bl	800ba90 <__malloc_unlock>
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	42a3      	cmp	r3, r4
 800b5ce:	d908      	bls.n	800b5e2 <_free_r+0x42>
 800b5d0:	6821      	ldr	r1, [r4, #0]
 800b5d2:	1860      	adds	r0, r4, r1
 800b5d4:	4283      	cmp	r3, r0
 800b5d6:	d1f3      	bne.n	800b5c0 <_free_r+0x20>
 800b5d8:	6818      	ldr	r0, [r3, #0]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	1841      	adds	r1, r0, r1
 800b5de:	6021      	str	r1, [r4, #0]
 800b5e0:	e7ee      	b.n	800b5c0 <_free_r+0x20>
 800b5e2:	001a      	movs	r2, r3
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <_free_r+0x4e>
 800b5ea:	42a3      	cmp	r3, r4
 800b5ec:	d9f9      	bls.n	800b5e2 <_free_r+0x42>
 800b5ee:	6811      	ldr	r1, [r2, #0]
 800b5f0:	1850      	adds	r0, r2, r1
 800b5f2:	42a0      	cmp	r0, r4
 800b5f4:	d10b      	bne.n	800b60e <_free_r+0x6e>
 800b5f6:	6820      	ldr	r0, [r4, #0]
 800b5f8:	1809      	adds	r1, r1, r0
 800b5fa:	1850      	adds	r0, r2, r1
 800b5fc:	6011      	str	r1, [r2, #0]
 800b5fe:	4283      	cmp	r3, r0
 800b600:	d1e0      	bne.n	800b5c4 <_free_r+0x24>
 800b602:	6818      	ldr	r0, [r3, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	1841      	adds	r1, r0, r1
 800b608:	6011      	str	r1, [r2, #0]
 800b60a:	6053      	str	r3, [r2, #4]
 800b60c:	e7da      	b.n	800b5c4 <_free_r+0x24>
 800b60e:	42a0      	cmp	r0, r4
 800b610:	d902      	bls.n	800b618 <_free_r+0x78>
 800b612:	230c      	movs	r3, #12
 800b614:	602b      	str	r3, [r5, #0]
 800b616:	e7d5      	b.n	800b5c4 <_free_r+0x24>
 800b618:	6821      	ldr	r1, [r4, #0]
 800b61a:	1860      	adds	r0, r4, r1
 800b61c:	4283      	cmp	r3, r0
 800b61e:	d103      	bne.n	800b628 <_free_r+0x88>
 800b620:	6818      	ldr	r0, [r3, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	1841      	adds	r1, r0, r1
 800b626:	6021      	str	r1, [r4, #0]
 800b628:	6063      	str	r3, [r4, #4]
 800b62a:	6054      	str	r4, [r2, #4]
 800b62c:	e7ca      	b.n	800b5c4 <_free_r+0x24>
 800b62e:	46c0      	nop			; (mov r8, r8)
 800b630:	20000480 	.word	0x20000480

0800b634 <_malloc_r>:
 800b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b636:	2303      	movs	r3, #3
 800b638:	1ccd      	adds	r5, r1, #3
 800b63a:	439d      	bics	r5, r3
 800b63c:	3508      	adds	r5, #8
 800b63e:	0006      	movs	r6, r0
 800b640:	2d0c      	cmp	r5, #12
 800b642:	d21f      	bcs.n	800b684 <_malloc_r+0x50>
 800b644:	250c      	movs	r5, #12
 800b646:	42a9      	cmp	r1, r5
 800b648:	d81e      	bhi.n	800b688 <_malloc_r+0x54>
 800b64a:	0030      	movs	r0, r6
 800b64c:	f000 fa18 	bl	800ba80 <__malloc_lock>
 800b650:	4925      	ldr	r1, [pc, #148]	; (800b6e8 <_malloc_r+0xb4>)
 800b652:	680a      	ldr	r2, [r1, #0]
 800b654:	0014      	movs	r4, r2
 800b656:	2c00      	cmp	r4, #0
 800b658:	d11a      	bne.n	800b690 <_malloc_r+0x5c>
 800b65a:	4f24      	ldr	r7, [pc, #144]	; (800b6ec <_malloc_r+0xb8>)
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d104      	bne.n	800b66c <_malloc_r+0x38>
 800b662:	0021      	movs	r1, r4
 800b664:	0030      	movs	r0, r6
 800b666:	f000 f9a5 	bl	800b9b4 <_sbrk_r>
 800b66a:	6038      	str	r0, [r7, #0]
 800b66c:	0029      	movs	r1, r5
 800b66e:	0030      	movs	r0, r6
 800b670:	f000 f9a0 	bl	800b9b4 <_sbrk_r>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d12b      	bne.n	800b6d0 <_malloc_r+0x9c>
 800b678:	230c      	movs	r3, #12
 800b67a:	0030      	movs	r0, r6
 800b67c:	6033      	str	r3, [r6, #0]
 800b67e:	f000 fa07 	bl	800ba90 <__malloc_unlock>
 800b682:	e003      	b.n	800b68c <_malloc_r+0x58>
 800b684:	2d00      	cmp	r5, #0
 800b686:	dade      	bge.n	800b646 <_malloc_r+0x12>
 800b688:	230c      	movs	r3, #12
 800b68a:	6033      	str	r3, [r6, #0]
 800b68c:	2000      	movs	r0, #0
 800b68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	1b5b      	subs	r3, r3, r5
 800b694:	d419      	bmi.n	800b6ca <_malloc_r+0x96>
 800b696:	2b0b      	cmp	r3, #11
 800b698:	d903      	bls.n	800b6a2 <_malloc_r+0x6e>
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	18e4      	adds	r4, r4, r3
 800b69e:	6025      	str	r5, [r4, #0]
 800b6a0:	e003      	b.n	800b6aa <_malloc_r+0x76>
 800b6a2:	6863      	ldr	r3, [r4, #4]
 800b6a4:	42a2      	cmp	r2, r4
 800b6a6:	d10e      	bne.n	800b6c6 <_malloc_r+0x92>
 800b6a8:	600b      	str	r3, [r1, #0]
 800b6aa:	0030      	movs	r0, r6
 800b6ac:	f000 f9f0 	bl	800ba90 <__malloc_unlock>
 800b6b0:	0020      	movs	r0, r4
 800b6b2:	2207      	movs	r2, #7
 800b6b4:	300b      	adds	r0, #11
 800b6b6:	1d23      	adds	r3, r4, #4
 800b6b8:	4390      	bics	r0, r2
 800b6ba:	1ac2      	subs	r2, r0, r3
 800b6bc:	4298      	cmp	r0, r3
 800b6be:	d0e6      	beq.n	800b68e <_malloc_r+0x5a>
 800b6c0:	1a1b      	subs	r3, r3, r0
 800b6c2:	50a3      	str	r3, [r4, r2]
 800b6c4:	e7e3      	b.n	800b68e <_malloc_r+0x5a>
 800b6c6:	6053      	str	r3, [r2, #4]
 800b6c8:	e7ef      	b.n	800b6aa <_malloc_r+0x76>
 800b6ca:	0022      	movs	r2, r4
 800b6cc:	6864      	ldr	r4, [r4, #4]
 800b6ce:	e7c2      	b.n	800b656 <_malloc_r+0x22>
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	1cc4      	adds	r4, r0, #3
 800b6d4:	439c      	bics	r4, r3
 800b6d6:	42a0      	cmp	r0, r4
 800b6d8:	d0e1      	beq.n	800b69e <_malloc_r+0x6a>
 800b6da:	1a21      	subs	r1, r4, r0
 800b6dc:	0030      	movs	r0, r6
 800b6de:	f000 f969 	bl	800b9b4 <_sbrk_r>
 800b6e2:	1c43      	adds	r3, r0, #1
 800b6e4:	d1db      	bne.n	800b69e <_malloc_r+0x6a>
 800b6e6:	e7c7      	b.n	800b678 <_malloc_r+0x44>
 800b6e8:	20000480 	.word	0x20000480
 800b6ec:	20000484 	.word	0x20000484

0800b6f0 <__ssputs_r>:
 800b6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6f2:	688e      	ldr	r6, [r1, #8]
 800b6f4:	b085      	sub	sp, #20
 800b6f6:	0007      	movs	r7, r0
 800b6f8:	000c      	movs	r4, r1
 800b6fa:	9203      	str	r2, [sp, #12]
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	429e      	cmp	r6, r3
 800b700:	d83c      	bhi.n	800b77c <__ssputs_r+0x8c>
 800b702:	2390      	movs	r3, #144	; 0x90
 800b704:	898a      	ldrh	r2, [r1, #12]
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	421a      	tst	r2, r3
 800b70a:	d034      	beq.n	800b776 <__ssputs_r+0x86>
 800b70c:	2503      	movs	r5, #3
 800b70e:	6909      	ldr	r1, [r1, #16]
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	1a5b      	subs	r3, r3, r1
 800b714:	9302      	str	r3, [sp, #8]
 800b716:	6963      	ldr	r3, [r4, #20]
 800b718:	9802      	ldr	r0, [sp, #8]
 800b71a:	435d      	muls	r5, r3
 800b71c:	0feb      	lsrs	r3, r5, #31
 800b71e:	195d      	adds	r5, r3, r5
 800b720:	9b01      	ldr	r3, [sp, #4]
 800b722:	106d      	asrs	r5, r5, #1
 800b724:	3301      	adds	r3, #1
 800b726:	181b      	adds	r3, r3, r0
 800b728:	42ab      	cmp	r3, r5
 800b72a:	d900      	bls.n	800b72e <__ssputs_r+0x3e>
 800b72c:	001d      	movs	r5, r3
 800b72e:	0553      	lsls	r3, r2, #21
 800b730:	d532      	bpl.n	800b798 <__ssputs_r+0xa8>
 800b732:	0029      	movs	r1, r5
 800b734:	0038      	movs	r0, r7
 800b736:	f7ff ff7d 	bl	800b634 <_malloc_r>
 800b73a:	1e06      	subs	r6, r0, #0
 800b73c:	d109      	bne.n	800b752 <__ssputs_r+0x62>
 800b73e:	230c      	movs	r3, #12
 800b740:	603b      	str	r3, [r7, #0]
 800b742:	2340      	movs	r3, #64	; 0x40
 800b744:	2001      	movs	r0, #1
 800b746:	89a2      	ldrh	r2, [r4, #12]
 800b748:	4240      	negs	r0, r0
 800b74a:	4313      	orrs	r3, r2
 800b74c:	81a3      	strh	r3, [r4, #12]
 800b74e:	b005      	add	sp, #20
 800b750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b752:	9a02      	ldr	r2, [sp, #8]
 800b754:	6921      	ldr	r1, [r4, #16]
 800b756:	f7ff fb6e 	bl	800ae36 <memcpy>
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	4a14      	ldr	r2, [pc, #80]	; (800b7b0 <__ssputs_r+0xc0>)
 800b75e:	401a      	ands	r2, r3
 800b760:	2380      	movs	r3, #128	; 0x80
 800b762:	4313      	orrs	r3, r2
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	9b02      	ldr	r3, [sp, #8]
 800b768:	6126      	str	r6, [r4, #16]
 800b76a:	18f6      	adds	r6, r6, r3
 800b76c:	6026      	str	r6, [r4, #0]
 800b76e:	6165      	str	r5, [r4, #20]
 800b770:	9e01      	ldr	r6, [sp, #4]
 800b772:	1aed      	subs	r5, r5, r3
 800b774:	60a5      	str	r5, [r4, #8]
 800b776:	9b01      	ldr	r3, [sp, #4]
 800b778:	429e      	cmp	r6, r3
 800b77a:	d900      	bls.n	800b77e <__ssputs_r+0x8e>
 800b77c:	9e01      	ldr	r6, [sp, #4]
 800b77e:	0032      	movs	r2, r6
 800b780:	9903      	ldr	r1, [sp, #12]
 800b782:	6820      	ldr	r0, [r4, #0]
 800b784:	f000 f968 	bl	800ba58 <memmove>
 800b788:	68a3      	ldr	r3, [r4, #8]
 800b78a:	2000      	movs	r0, #0
 800b78c:	1b9b      	subs	r3, r3, r6
 800b78e:	60a3      	str	r3, [r4, #8]
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	199e      	adds	r6, r3, r6
 800b794:	6026      	str	r6, [r4, #0]
 800b796:	e7da      	b.n	800b74e <__ssputs_r+0x5e>
 800b798:	002a      	movs	r2, r5
 800b79a:	0038      	movs	r0, r7
 800b79c:	f000 f980 	bl	800baa0 <_realloc_r>
 800b7a0:	1e06      	subs	r6, r0, #0
 800b7a2:	d1e0      	bne.n	800b766 <__ssputs_r+0x76>
 800b7a4:	0038      	movs	r0, r7
 800b7a6:	6921      	ldr	r1, [r4, #16]
 800b7a8:	f7ff fefa 	bl	800b5a0 <_free_r>
 800b7ac:	e7c7      	b.n	800b73e <__ssputs_r+0x4e>
 800b7ae:	46c0      	nop			; (mov r8, r8)
 800b7b0:	fffffb7f 	.word	0xfffffb7f

0800b7b4 <_svfiprintf_r>:
 800b7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7b6:	b0a1      	sub	sp, #132	; 0x84
 800b7b8:	9003      	str	r0, [sp, #12]
 800b7ba:	001d      	movs	r5, r3
 800b7bc:	898b      	ldrh	r3, [r1, #12]
 800b7be:	000f      	movs	r7, r1
 800b7c0:	0016      	movs	r6, r2
 800b7c2:	061b      	lsls	r3, r3, #24
 800b7c4:	d511      	bpl.n	800b7ea <_svfiprintf_r+0x36>
 800b7c6:	690b      	ldr	r3, [r1, #16]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10e      	bne.n	800b7ea <_svfiprintf_r+0x36>
 800b7cc:	2140      	movs	r1, #64	; 0x40
 800b7ce:	f7ff ff31 	bl	800b634 <_malloc_r>
 800b7d2:	6038      	str	r0, [r7, #0]
 800b7d4:	6138      	str	r0, [r7, #16]
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d105      	bne.n	800b7e6 <_svfiprintf_r+0x32>
 800b7da:	230c      	movs	r3, #12
 800b7dc:	9a03      	ldr	r2, [sp, #12]
 800b7de:	3801      	subs	r0, #1
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	b021      	add	sp, #132	; 0x84
 800b7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7e6:	2340      	movs	r3, #64	; 0x40
 800b7e8:	617b      	str	r3, [r7, #20]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	ac08      	add	r4, sp, #32
 800b7ee:	6163      	str	r3, [r4, #20]
 800b7f0:	3320      	adds	r3, #32
 800b7f2:	7663      	strb	r3, [r4, #25]
 800b7f4:	3310      	adds	r3, #16
 800b7f6:	76a3      	strb	r3, [r4, #26]
 800b7f8:	9507      	str	r5, [sp, #28]
 800b7fa:	0035      	movs	r5, r6
 800b7fc:	782b      	ldrb	r3, [r5, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <_svfiprintf_r+0x52>
 800b802:	2b25      	cmp	r3, #37	; 0x25
 800b804:	d147      	bne.n	800b896 <_svfiprintf_r+0xe2>
 800b806:	1bab      	subs	r3, r5, r6
 800b808:	9305      	str	r3, [sp, #20]
 800b80a:	42b5      	cmp	r5, r6
 800b80c:	d00c      	beq.n	800b828 <_svfiprintf_r+0x74>
 800b80e:	0032      	movs	r2, r6
 800b810:	0039      	movs	r1, r7
 800b812:	9803      	ldr	r0, [sp, #12]
 800b814:	f7ff ff6c 	bl	800b6f0 <__ssputs_r>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	d100      	bne.n	800b81e <_svfiprintf_r+0x6a>
 800b81c:	e0ae      	b.n	800b97c <_svfiprintf_r+0x1c8>
 800b81e:	6962      	ldr	r2, [r4, #20]
 800b820:	9b05      	ldr	r3, [sp, #20]
 800b822:	4694      	mov	ip, r2
 800b824:	4463      	add	r3, ip
 800b826:	6163      	str	r3, [r4, #20]
 800b828:	782b      	ldrb	r3, [r5, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d100      	bne.n	800b830 <_svfiprintf_r+0x7c>
 800b82e:	e0a5      	b.n	800b97c <_svfiprintf_r+0x1c8>
 800b830:	2201      	movs	r2, #1
 800b832:	2300      	movs	r3, #0
 800b834:	4252      	negs	r2, r2
 800b836:	6062      	str	r2, [r4, #4]
 800b838:	a904      	add	r1, sp, #16
 800b83a:	3254      	adds	r2, #84	; 0x54
 800b83c:	1852      	adds	r2, r2, r1
 800b83e:	1c6e      	adds	r6, r5, #1
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	60e3      	str	r3, [r4, #12]
 800b844:	60a3      	str	r3, [r4, #8]
 800b846:	7013      	strb	r3, [r2, #0]
 800b848:	65a3      	str	r3, [r4, #88]	; 0x58
 800b84a:	2205      	movs	r2, #5
 800b84c:	7831      	ldrb	r1, [r6, #0]
 800b84e:	4854      	ldr	r0, [pc, #336]	; (800b9a0 <_svfiprintf_r+0x1ec>)
 800b850:	f7ff fae6 	bl	800ae20 <memchr>
 800b854:	1c75      	adds	r5, r6, #1
 800b856:	2800      	cmp	r0, #0
 800b858:	d11f      	bne.n	800b89a <_svfiprintf_r+0xe6>
 800b85a:	6822      	ldr	r2, [r4, #0]
 800b85c:	06d3      	lsls	r3, r2, #27
 800b85e:	d504      	bpl.n	800b86a <_svfiprintf_r+0xb6>
 800b860:	2353      	movs	r3, #83	; 0x53
 800b862:	a904      	add	r1, sp, #16
 800b864:	185b      	adds	r3, r3, r1
 800b866:	2120      	movs	r1, #32
 800b868:	7019      	strb	r1, [r3, #0]
 800b86a:	0713      	lsls	r3, r2, #28
 800b86c:	d504      	bpl.n	800b878 <_svfiprintf_r+0xc4>
 800b86e:	2353      	movs	r3, #83	; 0x53
 800b870:	a904      	add	r1, sp, #16
 800b872:	185b      	adds	r3, r3, r1
 800b874:	212b      	movs	r1, #43	; 0x2b
 800b876:	7019      	strb	r1, [r3, #0]
 800b878:	7833      	ldrb	r3, [r6, #0]
 800b87a:	2b2a      	cmp	r3, #42	; 0x2a
 800b87c:	d016      	beq.n	800b8ac <_svfiprintf_r+0xf8>
 800b87e:	0035      	movs	r5, r6
 800b880:	2100      	movs	r1, #0
 800b882:	200a      	movs	r0, #10
 800b884:	68e3      	ldr	r3, [r4, #12]
 800b886:	782a      	ldrb	r2, [r5, #0]
 800b888:	1c6e      	adds	r6, r5, #1
 800b88a:	3a30      	subs	r2, #48	; 0x30
 800b88c:	2a09      	cmp	r2, #9
 800b88e:	d94e      	bls.n	800b92e <_svfiprintf_r+0x17a>
 800b890:	2900      	cmp	r1, #0
 800b892:	d111      	bne.n	800b8b8 <_svfiprintf_r+0x104>
 800b894:	e017      	b.n	800b8c6 <_svfiprintf_r+0x112>
 800b896:	3501      	adds	r5, #1
 800b898:	e7b0      	b.n	800b7fc <_svfiprintf_r+0x48>
 800b89a:	4b41      	ldr	r3, [pc, #260]	; (800b9a0 <_svfiprintf_r+0x1ec>)
 800b89c:	6822      	ldr	r2, [r4, #0]
 800b89e:	1ac0      	subs	r0, r0, r3
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	4083      	lsls	r3, r0
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	002e      	movs	r6, r5
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	e7ce      	b.n	800b84a <_svfiprintf_r+0x96>
 800b8ac:	9b07      	ldr	r3, [sp, #28]
 800b8ae:	1d19      	adds	r1, r3, #4
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	9107      	str	r1, [sp, #28]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	db01      	blt.n	800b8bc <_svfiprintf_r+0x108>
 800b8b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8ba:	e004      	b.n	800b8c6 <_svfiprintf_r+0x112>
 800b8bc:	425b      	negs	r3, r3
 800b8be:	60e3      	str	r3, [r4, #12]
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	782b      	ldrb	r3, [r5, #0]
 800b8c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b8ca:	d10a      	bne.n	800b8e2 <_svfiprintf_r+0x12e>
 800b8cc:	786b      	ldrb	r3, [r5, #1]
 800b8ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b8d0:	d135      	bne.n	800b93e <_svfiprintf_r+0x18a>
 800b8d2:	9b07      	ldr	r3, [sp, #28]
 800b8d4:	3502      	adds	r5, #2
 800b8d6:	1d1a      	adds	r2, r3, #4
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	9207      	str	r2, [sp, #28]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	db2b      	blt.n	800b938 <_svfiprintf_r+0x184>
 800b8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e2:	4e30      	ldr	r6, [pc, #192]	; (800b9a4 <_svfiprintf_r+0x1f0>)
 800b8e4:	2203      	movs	r2, #3
 800b8e6:	0030      	movs	r0, r6
 800b8e8:	7829      	ldrb	r1, [r5, #0]
 800b8ea:	f7ff fa99 	bl	800ae20 <memchr>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d006      	beq.n	800b900 <_svfiprintf_r+0x14c>
 800b8f2:	2340      	movs	r3, #64	; 0x40
 800b8f4:	1b80      	subs	r0, r0, r6
 800b8f6:	4083      	lsls	r3, r0
 800b8f8:	6822      	ldr	r2, [r4, #0]
 800b8fa:	3501      	adds	r5, #1
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	6023      	str	r3, [r4, #0]
 800b900:	7829      	ldrb	r1, [r5, #0]
 800b902:	2206      	movs	r2, #6
 800b904:	4828      	ldr	r0, [pc, #160]	; (800b9a8 <_svfiprintf_r+0x1f4>)
 800b906:	1c6e      	adds	r6, r5, #1
 800b908:	7621      	strb	r1, [r4, #24]
 800b90a:	f7ff fa89 	bl	800ae20 <memchr>
 800b90e:	2800      	cmp	r0, #0
 800b910:	d03c      	beq.n	800b98c <_svfiprintf_r+0x1d8>
 800b912:	4b26      	ldr	r3, [pc, #152]	; (800b9ac <_svfiprintf_r+0x1f8>)
 800b914:	2b00      	cmp	r3, #0
 800b916:	d125      	bne.n	800b964 <_svfiprintf_r+0x1b0>
 800b918:	2207      	movs	r2, #7
 800b91a:	9b07      	ldr	r3, [sp, #28]
 800b91c:	3307      	adds	r3, #7
 800b91e:	4393      	bics	r3, r2
 800b920:	3308      	adds	r3, #8
 800b922:	9307      	str	r3, [sp, #28]
 800b924:	6963      	ldr	r3, [r4, #20]
 800b926:	9a04      	ldr	r2, [sp, #16]
 800b928:	189b      	adds	r3, r3, r2
 800b92a:	6163      	str	r3, [r4, #20]
 800b92c:	e765      	b.n	800b7fa <_svfiprintf_r+0x46>
 800b92e:	4343      	muls	r3, r0
 800b930:	0035      	movs	r5, r6
 800b932:	2101      	movs	r1, #1
 800b934:	189b      	adds	r3, r3, r2
 800b936:	e7a6      	b.n	800b886 <_svfiprintf_r+0xd2>
 800b938:	2301      	movs	r3, #1
 800b93a:	425b      	negs	r3, r3
 800b93c:	e7d0      	b.n	800b8e0 <_svfiprintf_r+0x12c>
 800b93e:	2300      	movs	r3, #0
 800b940:	200a      	movs	r0, #10
 800b942:	001a      	movs	r2, r3
 800b944:	3501      	adds	r5, #1
 800b946:	6063      	str	r3, [r4, #4]
 800b948:	7829      	ldrb	r1, [r5, #0]
 800b94a:	1c6e      	adds	r6, r5, #1
 800b94c:	3930      	subs	r1, #48	; 0x30
 800b94e:	2909      	cmp	r1, #9
 800b950:	d903      	bls.n	800b95a <_svfiprintf_r+0x1a6>
 800b952:	2b00      	cmp	r3, #0
 800b954:	d0c5      	beq.n	800b8e2 <_svfiprintf_r+0x12e>
 800b956:	9209      	str	r2, [sp, #36]	; 0x24
 800b958:	e7c3      	b.n	800b8e2 <_svfiprintf_r+0x12e>
 800b95a:	4342      	muls	r2, r0
 800b95c:	0035      	movs	r5, r6
 800b95e:	2301      	movs	r3, #1
 800b960:	1852      	adds	r2, r2, r1
 800b962:	e7f1      	b.n	800b948 <_svfiprintf_r+0x194>
 800b964:	ab07      	add	r3, sp, #28
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	003a      	movs	r2, r7
 800b96a:	0021      	movs	r1, r4
 800b96c:	4b10      	ldr	r3, [pc, #64]	; (800b9b0 <_svfiprintf_r+0x1fc>)
 800b96e:	9803      	ldr	r0, [sp, #12]
 800b970:	f7fd ffae 	bl	80098d0 <_printf_float>
 800b974:	9004      	str	r0, [sp, #16]
 800b976:	9b04      	ldr	r3, [sp, #16]
 800b978:	3301      	adds	r3, #1
 800b97a:	d1d3      	bne.n	800b924 <_svfiprintf_r+0x170>
 800b97c:	89bb      	ldrh	r3, [r7, #12]
 800b97e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b980:	065b      	lsls	r3, r3, #25
 800b982:	d400      	bmi.n	800b986 <_svfiprintf_r+0x1d2>
 800b984:	e72d      	b.n	800b7e2 <_svfiprintf_r+0x2e>
 800b986:	2001      	movs	r0, #1
 800b988:	4240      	negs	r0, r0
 800b98a:	e72a      	b.n	800b7e2 <_svfiprintf_r+0x2e>
 800b98c:	ab07      	add	r3, sp, #28
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	003a      	movs	r2, r7
 800b992:	0021      	movs	r1, r4
 800b994:	4b06      	ldr	r3, [pc, #24]	; (800b9b0 <_svfiprintf_r+0x1fc>)
 800b996:	9803      	ldr	r0, [sp, #12]
 800b998:	f7fe fa58 	bl	8009e4c <_printf_i>
 800b99c:	e7ea      	b.n	800b974 <_svfiprintf_r+0x1c0>
 800b99e:	46c0      	nop			; (mov r8, r8)
 800b9a0:	0800e0e4 	.word	0x0800e0e4
 800b9a4:	0800e0ea 	.word	0x0800e0ea
 800b9a8:	0800e0ee 	.word	0x0800e0ee
 800b9ac:	080098d1 	.word	0x080098d1
 800b9b0:	0800b6f1 	.word	0x0800b6f1

0800b9b4 <_sbrk_r>:
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	b570      	push	{r4, r5, r6, lr}
 800b9b8:	4d06      	ldr	r5, [pc, #24]	; (800b9d4 <_sbrk_r+0x20>)
 800b9ba:	0004      	movs	r4, r0
 800b9bc:	0008      	movs	r0, r1
 800b9be:	602b      	str	r3, [r5, #0]
 800b9c0:	f7f9 faa4 	bl	8004f0c <_sbrk>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d103      	bne.n	800b9d0 <_sbrk_r+0x1c>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d000      	beq.n	800b9d0 <_sbrk_r+0x1c>
 800b9ce:	6023      	str	r3, [r4, #0]
 800b9d0:	bd70      	pop	{r4, r5, r6, pc}
 800b9d2:	46c0      	nop			; (mov r8, r8)
 800b9d4:	2000111c 	.word	0x2000111c

0800b9d8 <__assert_func>:
 800b9d8:	b530      	push	{r4, r5, lr}
 800b9da:	0014      	movs	r4, r2
 800b9dc:	001a      	movs	r2, r3
 800b9de:	4b09      	ldr	r3, [pc, #36]	; (800ba04 <__assert_func+0x2c>)
 800b9e0:	0005      	movs	r5, r0
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	b085      	sub	sp, #20
 800b9e6:	68d8      	ldr	r0, [r3, #12]
 800b9e8:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <__assert_func+0x30>)
 800b9ea:	2c00      	cmp	r4, #0
 800b9ec:	d101      	bne.n	800b9f2 <__assert_func+0x1a>
 800b9ee:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <__assert_func+0x34>)
 800b9f0:	001c      	movs	r4, r3
 800b9f2:	9301      	str	r3, [sp, #4]
 800b9f4:	9100      	str	r1, [sp, #0]
 800b9f6:	002b      	movs	r3, r5
 800b9f8:	4905      	ldr	r1, [pc, #20]	; (800ba10 <__assert_func+0x38>)
 800b9fa:	9402      	str	r4, [sp, #8]
 800b9fc:	f000 f80a 	bl	800ba14 <fiprintf>
 800ba00:	f000 fab2 	bl	800bf68 <abort>
 800ba04:	20000084 	.word	0x20000084
 800ba08:	0800e0f5 	.word	0x0800e0f5
 800ba0c:	0800e130 	.word	0x0800e130
 800ba10:	0800e102 	.word	0x0800e102

0800ba14 <fiprintf>:
 800ba14:	b40e      	push	{r1, r2, r3}
 800ba16:	b503      	push	{r0, r1, lr}
 800ba18:	0001      	movs	r1, r0
 800ba1a:	ab03      	add	r3, sp, #12
 800ba1c:	4804      	ldr	r0, [pc, #16]	; (800ba30 <fiprintf+0x1c>)
 800ba1e:	cb04      	ldmia	r3!, {r2}
 800ba20:	6800      	ldr	r0, [r0, #0]
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	f000 f88a 	bl	800bb3c <_vfiprintf_r>
 800ba28:	b002      	add	sp, #8
 800ba2a:	bc08      	pop	{r3}
 800ba2c:	b003      	add	sp, #12
 800ba2e:	4718      	bx	r3
 800ba30:	20000084 	.word	0x20000084

0800ba34 <__ascii_mbtowc>:
 800ba34:	b082      	sub	sp, #8
 800ba36:	2900      	cmp	r1, #0
 800ba38:	d100      	bne.n	800ba3c <__ascii_mbtowc+0x8>
 800ba3a:	a901      	add	r1, sp, #4
 800ba3c:	1e10      	subs	r0, r2, #0
 800ba3e:	d006      	beq.n	800ba4e <__ascii_mbtowc+0x1a>
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d006      	beq.n	800ba52 <__ascii_mbtowc+0x1e>
 800ba44:	7813      	ldrb	r3, [r2, #0]
 800ba46:	600b      	str	r3, [r1, #0]
 800ba48:	7810      	ldrb	r0, [r2, #0]
 800ba4a:	1e43      	subs	r3, r0, #1
 800ba4c:	4198      	sbcs	r0, r3
 800ba4e:	b002      	add	sp, #8
 800ba50:	4770      	bx	lr
 800ba52:	2002      	movs	r0, #2
 800ba54:	4240      	negs	r0, r0
 800ba56:	e7fa      	b.n	800ba4e <__ascii_mbtowc+0x1a>

0800ba58 <memmove>:
 800ba58:	b510      	push	{r4, lr}
 800ba5a:	4288      	cmp	r0, r1
 800ba5c:	d902      	bls.n	800ba64 <memmove+0xc>
 800ba5e:	188b      	adds	r3, r1, r2
 800ba60:	4298      	cmp	r0, r3
 800ba62:	d303      	bcc.n	800ba6c <memmove+0x14>
 800ba64:	2300      	movs	r3, #0
 800ba66:	e007      	b.n	800ba78 <memmove+0x20>
 800ba68:	5c8b      	ldrb	r3, [r1, r2]
 800ba6a:	5483      	strb	r3, [r0, r2]
 800ba6c:	3a01      	subs	r2, #1
 800ba6e:	d2fb      	bcs.n	800ba68 <memmove+0x10>
 800ba70:	bd10      	pop	{r4, pc}
 800ba72:	5ccc      	ldrb	r4, [r1, r3]
 800ba74:	54c4      	strb	r4, [r0, r3]
 800ba76:	3301      	adds	r3, #1
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d1fa      	bne.n	800ba72 <memmove+0x1a>
 800ba7c:	e7f8      	b.n	800ba70 <memmove+0x18>
	...

0800ba80 <__malloc_lock>:
 800ba80:	b510      	push	{r4, lr}
 800ba82:	4802      	ldr	r0, [pc, #8]	; (800ba8c <__malloc_lock+0xc>)
 800ba84:	f000 fc47 	bl	800c316 <__retarget_lock_acquire_recursive>
 800ba88:	bd10      	pop	{r4, pc}
 800ba8a:	46c0      	nop			; (mov r8, r8)
 800ba8c:	20001124 	.word	0x20001124

0800ba90 <__malloc_unlock>:
 800ba90:	b510      	push	{r4, lr}
 800ba92:	4802      	ldr	r0, [pc, #8]	; (800ba9c <__malloc_unlock+0xc>)
 800ba94:	f000 fc40 	bl	800c318 <__retarget_lock_release_recursive>
 800ba98:	bd10      	pop	{r4, pc}
 800ba9a:	46c0      	nop			; (mov r8, r8)
 800ba9c:	20001124 	.word	0x20001124

0800baa0 <_realloc_r>:
 800baa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa2:	0007      	movs	r7, r0
 800baa4:	000d      	movs	r5, r1
 800baa6:	0016      	movs	r6, r2
 800baa8:	2900      	cmp	r1, #0
 800baaa:	d105      	bne.n	800bab8 <_realloc_r+0x18>
 800baac:	0011      	movs	r1, r2
 800baae:	f7ff fdc1 	bl	800b634 <_malloc_r>
 800bab2:	0004      	movs	r4, r0
 800bab4:	0020      	movs	r0, r4
 800bab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bab8:	2a00      	cmp	r2, #0
 800baba:	d103      	bne.n	800bac4 <_realloc_r+0x24>
 800babc:	f7ff fd70 	bl	800b5a0 <_free_r>
 800bac0:	0034      	movs	r4, r6
 800bac2:	e7f7      	b.n	800bab4 <_realloc_r+0x14>
 800bac4:	f000 fc96 	bl	800c3f4 <_malloc_usable_size_r>
 800bac8:	002c      	movs	r4, r5
 800baca:	42b0      	cmp	r0, r6
 800bacc:	d2f2      	bcs.n	800bab4 <_realloc_r+0x14>
 800bace:	0031      	movs	r1, r6
 800bad0:	0038      	movs	r0, r7
 800bad2:	f7ff fdaf 	bl	800b634 <_malloc_r>
 800bad6:	1e04      	subs	r4, r0, #0
 800bad8:	d0ec      	beq.n	800bab4 <_realloc_r+0x14>
 800bada:	0029      	movs	r1, r5
 800badc:	0032      	movs	r2, r6
 800bade:	f7ff f9aa 	bl	800ae36 <memcpy>
 800bae2:	0029      	movs	r1, r5
 800bae4:	0038      	movs	r0, r7
 800bae6:	f7ff fd5b 	bl	800b5a0 <_free_r>
 800baea:	e7e3      	b.n	800bab4 <_realloc_r+0x14>

0800baec <__sfputc_r>:
 800baec:	6893      	ldr	r3, [r2, #8]
 800baee:	b510      	push	{r4, lr}
 800baf0:	3b01      	subs	r3, #1
 800baf2:	6093      	str	r3, [r2, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	da04      	bge.n	800bb02 <__sfputc_r+0x16>
 800baf8:	6994      	ldr	r4, [r2, #24]
 800bafa:	42a3      	cmp	r3, r4
 800bafc:	db07      	blt.n	800bb0e <__sfputc_r+0x22>
 800bafe:	290a      	cmp	r1, #10
 800bb00:	d005      	beq.n	800bb0e <__sfputc_r+0x22>
 800bb02:	6813      	ldr	r3, [r2, #0]
 800bb04:	1c58      	adds	r0, r3, #1
 800bb06:	6010      	str	r0, [r2, #0]
 800bb08:	7019      	strb	r1, [r3, #0]
 800bb0a:	0008      	movs	r0, r1
 800bb0c:	bd10      	pop	{r4, pc}
 800bb0e:	f000 f94f 	bl	800bdb0 <__swbuf_r>
 800bb12:	0001      	movs	r1, r0
 800bb14:	e7f9      	b.n	800bb0a <__sfputc_r+0x1e>

0800bb16 <__sfputs_r>:
 800bb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb18:	0006      	movs	r6, r0
 800bb1a:	000f      	movs	r7, r1
 800bb1c:	0014      	movs	r4, r2
 800bb1e:	18d5      	adds	r5, r2, r3
 800bb20:	42ac      	cmp	r4, r5
 800bb22:	d101      	bne.n	800bb28 <__sfputs_r+0x12>
 800bb24:	2000      	movs	r0, #0
 800bb26:	e007      	b.n	800bb38 <__sfputs_r+0x22>
 800bb28:	7821      	ldrb	r1, [r4, #0]
 800bb2a:	003a      	movs	r2, r7
 800bb2c:	0030      	movs	r0, r6
 800bb2e:	f7ff ffdd 	bl	800baec <__sfputc_r>
 800bb32:	3401      	adds	r4, #1
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d1f3      	bne.n	800bb20 <__sfputs_r+0xa>
 800bb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb3c <_vfiprintf_r>:
 800bb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3e:	b0a1      	sub	sp, #132	; 0x84
 800bb40:	0006      	movs	r6, r0
 800bb42:	000c      	movs	r4, r1
 800bb44:	001f      	movs	r7, r3
 800bb46:	9203      	str	r2, [sp, #12]
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d004      	beq.n	800bb56 <_vfiprintf_r+0x1a>
 800bb4c:	6983      	ldr	r3, [r0, #24]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <_vfiprintf_r+0x1a>
 800bb52:	f000 fb3f 	bl	800c1d4 <__sinit>
 800bb56:	4b8e      	ldr	r3, [pc, #568]	; (800bd90 <_vfiprintf_r+0x254>)
 800bb58:	429c      	cmp	r4, r3
 800bb5a:	d11c      	bne.n	800bb96 <_vfiprintf_r+0x5a>
 800bb5c:	6874      	ldr	r4, [r6, #4]
 800bb5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb60:	07db      	lsls	r3, r3, #31
 800bb62:	d405      	bmi.n	800bb70 <_vfiprintf_r+0x34>
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	059b      	lsls	r3, r3, #22
 800bb68:	d402      	bmi.n	800bb70 <_vfiprintf_r+0x34>
 800bb6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb6c:	f000 fbd3 	bl	800c316 <__retarget_lock_acquire_recursive>
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	071b      	lsls	r3, r3, #28
 800bb74:	d502      	bpl.n	800bb7c <_vfiprintf_r+0x40>
 800bb76:	6923      	ldr	r3, [r4, #16]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d11d      	bne.n	800bbb8 <_vfiprintf_r+0x7c>
 800bb7c:	0021      	movs	r1, r4
 800bb7e:	0030      	movs	r0, r6
 800bb80:	f000 f97a 	bl	800be78 <__swsetup_r>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d017      	beq.n	800bbb8 <_vfiprintf_r+0x7c>
 800bb88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb8a:	07db      	lsls	r3, r3, #31
 800bb8c:	d50d      	bpl.n	800bbaa <_vfiprintf_r+0x6e>
 800bb8e:	2001      	movs	r0, #1
 800bb90:	4240      	negs	r0, r0
 800bb92:	b021      	add	sp, #132	; 0x84
 800bb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb96:	4b7f      	ldr	r3, [pc, #508]	; (800bd94 <_vfiprintf_r+0x258>)
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	d101      	bne.n	800bba0 <_vfiprintf_r+0x64>
 800bb9c:	68b4      	ldr	r4, [r6, #8]
 800bb9e:	e7de      	b.n	800bb5e <_vfiprintf_r+0x22>
 800bba0:	4b7d      	ldr	r3, [pc, #500]	; (800bd98 <_vfiprintf_r+0x25c>)
 800bba2:	429c      	cmp	r4, r3
 800bba4:	d1db      	bne.n	800bb5e <_vfiprintf_r+0x22>
 800bba6:	68f4      	ldr	r4, [r6, #12]
 800bba8:	e7d9      	b.n	800bb5e <_vfiprintf_r+0x22>
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	059b      	lsls	r3, r3, #22
 800bbae:	d4ee      	bmi.n	800bb8e <_vfiprintf_r+0x52>
 800bbb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbb2:	f000 fbb1 	bl	800c318 <__retarget_lock_release_recursive>
 800bbb6:	e7ea      	b.n	800bb8e <_vfiprintf_r+0x52>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	ad08      	add	r5, sp, #32
 800bbbc:	616b      	str	r3, [r5, #20]
 800bbbe:	3320      	adds	r3, #32
 800bbc0:	766b      	strb	r3, [r5, #25]
 800bbc2:	3310      	adds	r3, #16
 800bbc4:	76ab      	strb	r3, [r5, #26]
 800bbc6:	9707      	str	r7, [sp, #28]
 800bbc8:	9f03      	ldr	r7, [sp, #12]
 800bbca:	783b      	ldrb	r3, [r7, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d001      	beq.n	800bbd4 <_vfiprintf_r+0x98>
 800bbd0:	2b25      	cmp	r3, #37	; 0x25
 800bbd2:	d14e      	bne.n	800bc72 <_vfiprintf_r+0x136>
 800bbd4:	9b03      	ldr	r3, [sp, #12]
 800bbd6:	1afb      	subs	r3, r7, r3
 800bbd8:	9305      	str	r3, [sp, #20]
 800bbda:	9b03      	ldr	r3, [sp, #12]
 800bbdc:	429f      	cmp	r7, r3
 800bbde:	d00d      	beq.n	800bbfc <_vfiprintf_r+0xc0>
 800bbe0:	9b05      	ldr	r3, [sp, #20]
 800bbe2:	0021      	movs	r1, r4
 800bbe4:	0030      	movs	r0, r6
 800bbe6:	9a03      	ldr	r2, [sp, #12]
 800bbe8:	f7ff ff95 	bl	800bb16 <__sfputs_r>
 800bbec:	1c43      	adds	r3, r0, #1
 800bbee:	d100      	bne.n	800bbf2 <_vfiprintf_r+0xb6>
 800bbf0:	e0b5      	b.n	800bd5e <_vfiprintf_r+0x222>
 800bbf2:	696a      	ldr	r2, [r5, #20]
 800bbf4:	9b05      	ldr	r3, [sp, #20]
 800bbf6:	4694      	mov	ip, r2
 800bbf8:	4463      	add	r3, ip
 800bbfa:	616b      	str	r3, [r5, #20]
 800bbfc:	783b      	ldrb	r3, [r7, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d100      	bne.n	800bc04 <_vfiprintf_r+0xc8>
 800bc02:	e0ac      	b.n	800bd5e <_vfiprintf_r+0x222>
 800bc04:	2201      	movs	r2, #1
 800bc06:	1c7b      	adds	r3, r7, #1
 800bc08:	9303      	str	r3, [sp, #12]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	4252      	negs	r2, r2
 800bc0e:	606a      	str	r2, [r5, #4]
 800bc10:	a904      	add	r1, sp, #16
 800bc12:	3254      	adds	r2, #84	; 0x54
 800bc14:	1852      	adds	r2, r2, r1
 800bc16:	602b      	str	r3, [r5, #0]
 800bc18:	60eb      	str	r3, [r5, #12]
 800bc1a:	60ab      	str	r3, [r5, #8]
 800bc1c:	7013      	strb	r3, [r2, #0]
 800bc1e:	65ab      	str	r3, [r5, #88]	; 0x58
 800bc20:	9b03      	ldr	r3, [sp, #12]
 800bc22:	2205      	movs	r2, #5
 800bc24:	7819      	ldrb	r1, [r3, #0]
 800bc26:	485d      	ldr	r0, [pc, #372]	; (800bd9c <_vfiprintf_r+0x260>)
 800bc28:	f7ff f8fa 	bl	800ae20 <memchr>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	1c5f      	adds	r7, r3, #1
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d120      	bne.n	800bc76 <_vfiprintf_r+0x13a>
 800bc34:	682a      	ldr	r2, [r5, #0]
 800bc36:	06d3      	lsls	r3, r2, #27
 800bc38:	d504      	bpl.n	800bc44 <_vfiprintf_r+0x108>
 800bc3a:	2353      	movs	r3, #83	; 0x53
 800bc3c:	a904      	add	r1, sp, #16
 800bc3e:	185b      	adds	r3, r3, r1
 800bc40:	2120      	movs	r1, #32
 800bc42:	7019      	strb	r1, [r3, #0]
 800bc44:	0713      	lsls	r3, r2, #28
 800bc46:	d504      	bpl.n	800bc52 <_vfiprintf_r+0x116>
 800bc48:	2353      	movs	r3, #83	; 0x53
 800bc4a:	a904      	add	r1, sp, #16
 800bc4c:	185b      	adds	r3, r3, r1
 800bc4e:	212b      	movs	r1, #43	; 0x2b
 800bc50:	7019      	strb	r1, [r3, #0]
 800bc52:	9b03      	ldr	r3, [sp, #12]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2b2a      	cmp	r3, #42	; 0x2a
 800bc58:	d016      	beq.n	800bc88 <_vfiprintf_r+0x14c>
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	68eb      	ldr	r3, [r5, #12]
 800bc5e:	9f03      	ldr	r7, [sp, #12]
 800bc60:	783a      	ldrb	r2, [r7, #0]
 800bc62:	1c78      	adds	r0, r7, #1
 800bc64:	3a30      	subs	r2, #48	; 0x30
 800bc66:	4684      	mov	ip, r0
 800bc68:	2a09      	cmp	r2, #9
 800bc6a:	d94f      	bls.n	800bd0c <_vfiprintf_r+0x1d0>
 800bc6c:	2900      	cmp	r1, #0
 800bc6e:	d111      	bne.n	800bc94 <_vfiprintf_r+0x158>
 800bc70:	e017      	b.n	800bca2 <_vfiprintf_r+0x166>
 800bc72:	3701      	adds	r7, #1
 800bc74:	e7a9      	b.n	800bbca <_vfiprintf_r+0x8e>
 800bc76:	4b49      	ldr	r3, [pc, #292]	; (800bd9c <_vfiprintf_r+0x260>)
 800bc78:	682a      	ldr	r2, [r5, #0]
 800bc7a:	1ac0      	subs	r0, r0, r3
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	4083      	lsls	r3, r0
 800bc80:	4313      	orrs	r3, r2
 800bc82:	602b      	str	r3, [r5, #0]
 800bc84:	9703      	str	r7, [sp, #12]
 800bc86:	e7cb      	b.n	800bc20 <_vfiprintf_r+0xe4>
 800bc88:	9b07      	ldr	r3, [sp, #28]
 800bc8a:	1d19      	adds	r1, r3, #4
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	9107      	str	r1, [sp, #28]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	db01      	blt.n	800bc98 <_vfiprintf_r+0x15c>
 800bc94:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc96:	e004      	b.n	800bca2 <_vfiprintf_r+0x166>
 800bc98:	425b      	negs	r3, r3
 800bc9a:	60eb      	str	r3, [r5, #12]
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	602b      	str	r3, [r5, #0]
 800bca2:	783b      	ldrb	r3, [r7, #0]
 800bca4:	2b2e      	cmp	r3, #46	; 0x2e
 800bca6:	d10a      	bne.n	800bcbe <_vfiprintf_r+0x182>
 800bca8:	787b      	ldrb	r3, [r7, #1]
 800bcaa:	2b2a      	cmp	r3, #42	; 0x2a
 800bcac:	d137      	bne.n	800bd1e <_vfiprintf_r+0x1e2>
 800bcae:	9b07      	ldr	r3, [sp, #28]
 800bcb0:	3702      	adds	r7, #2
 800bcb2:	1d1a      	adds	r2, r3, #4
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	9207      	str	r2, [sp, #28]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	db2d      	blt.n	800bd18 <_vfiprintf_r+0x1dc>
 800bcbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcbe:	2203      	movs	r2, #3
 800bcc0:	7839      	ldrb	r1, [r7, #0]
 800bcc2:	4837      	ldr	r0, [pc, #220]	; (800bda0 <_vfiprintf_r+0x264>)
 800bcc4:	f7ff f8ac 	bl	800ae20 <memchr>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d007      	beq.n	800bcdc <_vfiprintf_r+0x1a0>
 800bccc:	4b34      	ldr	r3, [pc, #208]	; (800bda0 <_vfiprintf_r+0x264>)
 800bcce:	682a      	ldr	r2, [r5, #0]
 800bcd0:	1ac0      	subs	r0, r0, r3
 800bcd2:	2340      	movs	r3, #64	; 0x40
 800bcd4:	4083      	lsls	r3, r0
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	3701      	adds	r7, #1
 800bcda:	602b      	str	r3, [r5, #0]
 800bcdc:	7839      	ldrb	r1, [r7, #0]
 800bcde:	1c7b      	adds	r3, r7, #1
 800bce0:	2206      	movs	r2, #6
 800bce2:	4830      	ldr	r0, [pc, #192]	; (800bda4 <_vfiprintf_r+0x268>)
 800bce4:	9303      	str	r3, [sp, #12]
 800bce6:	7629      	strb	r1, [r5, #24]
 800bce8:	f7ff f89a 	bl	800ae20 <memchr>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d045      	beq.n	800bd7c <_vfiprintf_r+0x240>
 800bcf0:	4b2d      	ldr	r3, [pc, #180]	; (800bda8 <_vfiprintf_r+0x26c>)
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d127      	bne.n	800bd46 <_vfiprintf_r+0x20a>
 800bcf6:	2207      	movs	r2, #7
 800bcf8:	9b07      	ldr	r3, [sp, #28]
 800bcfa:	3307      	adds	r3, #7
 800bcfc:	4393      	bics	r3, r2
 800bcfe:	3308      	adds	r3, #8
 800bd00:	9307      	str	r3, [sp, #28]
 800bd02:	696b      	ldr	r3, [r5, #20]
 800bd04:	9a04      	ldr	r2, [sp, #16]
 800bd06:	189b      	adds	r3, r3, r2
 800bd08:	616b      	str	r3, [r5, #20]
 800bd0a:	e75d      	b.n	800bbc8 <_vfiprintf_r+0x8c>
 800bd0c:	210a      	movs	r1, #10
 800bd0e:	434b      	muls	r3, r1
 800bd10:	4667      	mov	r7, ip
 800bd12:	189b      	adds	r3, r3, r2
 800bd14:	3909      	subs	r1, #9
 800bd16:	e7a3      	b.n	800bc60 <_vfiprintf_r+0x124>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	425b      	negs	r3, r3
 800bd1c:	e7ce      	b.n	800bcbc <_vfiprintf_r+0x180>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	001a      	movs	r2, r3
 800bd22:	3701      	adds	r7, #1
 800bd24:	606b      	str	r3, [r5, #4]
 800bd26:	7839      	ldrb	r1, [r7, #0]
 800bd28:	1c78      	adds	r0, r7, #1
 800bd2a:	3930      	subs	r1, #48	; 0x30
 800bd2c:	4684      	mov	ip, r0
 800bd2e:	2909      	cmp	r1, #9
 800bd30:	d903      	bls.n	800bd3a <_vfiprintf_r+0x1fe>
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0c3      	beq.n	800bcbe <_vfiprintf_r+0x182>
 800bd36:	9209      	str	r2, [sp, #36]	; 0x24
 800bd38:	e7c1      	b.n	800bcbe <_vfiprintf_r+0x182>
 800bd3a:	230a      	movs	r3, #10
 800bd3c:	435a      	muls	r2, r3
 800bd3e:	4667      	mov	r7, ip
 800bd40:	1852      	adds	r2, r2, r1
 800bd42:	3b09      	subs	r3, #9
 800bd44:	e7ef      	b.n	800bd26 <_vfiprintf_r+0x1ea>
 800bd46:	ab07      	add	r3, sp, #28
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	0022      	movs	r2, r4
 800bd4c:	0029      	movs	r1, r5
 800bd4e:	0030      	movs	r0, r6
 800bd50:	4b16      	ldr	r3, [pc, #88]	; (800bdac <_vfiprintf_r+0x270>)
 800bd52:	f7fd fdbd 	bl	80098d0 <_printf_float>
 800bd56:	9004      	str	r0, [sp, #16]
 800bd58:	9b04      	ldr	r3, [sp, #16]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	d1d1      	bne.n	800bd02 <_vfiprintf_r+0x1c6>
 800bd5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd60:	07db      	lsls	r3, r3, #31
 800bd62:	d405      	bmi.n	800bd70 <_vfiprintf_r+0x234>
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	059b      	lsls	r3, r3, #22
 800bd68:	d402      	bmi.n	800bd70 <_vfiprintf_r+0x234>
 800bd6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd6c:	f000 fad4 	bl	800c318 <__retarget_lock_release_recursive>
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	065b      	lsls	r3, r3, #25
 800bd74:	d500      	bpl.n	800bd78 <_vfiprintf_r+0x23c>
 800bd76:	e70a      	b.n	800bb8e <_vfiprintf_r+0x52>
 800bd78:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bd7a:	e70a      	b.n	800bb92 <_vfiprintf_r+0x56>
 800bd7c:	ab07      	add	r3, sp, #28
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	0022      	movs	r2, r4
 800bd82:	0029      	movs	r1, r5
 800bd84:	0030      	movs	r0, r6
 800bd86:	4b09      	ldr	r3, [pc, #36]	; (800bdac <_vfiprintf_r+0x270>)
 800bd88:	f7fe f860 	bl	8009e4c <_printf_i>
 800bd8c:	e7e3      	b.n	800bd56 <_vfiprintf_r+0x21a>
 800bd8e:	46c0      	nop			; (mov r8, r8)
 800bd90:	0800e25c 	.word	0x0800e25c
 800bd94:	0800e27c 	.word	0x0800e27c
 800bd98:	0800e23c 	.word	0x0800e23c
 800bd9c:	0800e0e4 	.word	0x0800e0e4
 800bda0:	0800e0ea 	.word	0x0800e0ea
 800bda4:	0800e0ee 	.word	0x0800e0ee
 800bda8:	080098d1 	.word	0x080098d1
 800bdac:	0800bb17 	.word	0x0800bb17

0800bdb0 <__swbuf_r>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	0005      	movs	r5, r0
 800bdb4:	000e      	movs	r6, r1
 800bdb6:	0014      	movs	r4, r2
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d004      	beq.n	800bdc6 <__swbuf_r+0x16>
 800bdbc:	6983      	ldr	r3, [r0, #24]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <__swbuf_r+0x16>
 800bdc2:	f000 fa07 	bl	800c1d4 <__sinit>
 800bdc6:	4b22      	ldr	r3, [pc, #136]	; (800be50 <__swbuf_r+0xa0>)
 800bdc8:	429c      	cmp	r4, r3
 800bdca:	d12e      	bne.n	800be2a <__swbuf_r+0x7a>
 800bdcc:	686c      	ldr	r4, [r5, #4]
 800bdce:	69a3      	ldr	r3, [r4, #24]
 800bdd0:	60a3      	str	r3, [r4, #8]
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	071b      	lsls	r3, r3, #28
 800bdd6:	d532      	bpl.n	800be3e <__swbuf_r+0x8e>
 800bdd8:	6923      	ldr	r3, [r4, #16]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d02f      	beq.n	800be3e <__swbuf_r+0x8e>
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	6922      	ldr	r2, [r4, #16]
 800bde2:	b2f7      	uxtb	r7, r6
 800bde4:	1a98      	subs	r0, r3, r2
 800bde6:	6963      	ldr	r3, [r4, #20]
 800bde8:	b2f6      	uxtb	r6, r6
 800bdea:	4283      	cmp	r3, r0
 800bdec:	dc05      	bgt.n	800bdfa <__swbuf_r+0x4a>
 800bdee:	0021      	movs	r1, r4
 800bdf0:	0028      	movs	r0, r5
 800bdf2:	f000 f94d 	bl	800c090 <_fflush_r>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d127      	bne.n	800be4a <__swbuf_r+0x9a>
 800bdfa:	68a3      	ldr	r3, [r4, #8]
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	3b01      	subs	r3, #1
 800be00:	60a3      	str	r3, [r4, #8]
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	1c5a      	adds	r2, r3, #1
 800be06:	6022      	str	r2, [r4, #0]
 800be08:	701f      	strb	r7, [r3, #0]
 800be0a:	6963      	ldr	r3, [r4, #20]
 800be0c:	4283      	cmp	r3, r0
 800be0e:	d004      	beq.n	800be1a <__swbuf_r+0x6a>
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	07db      	lsls	r3, r3, #31
 800be14:	d507      	bpl.n	800be26 <__swbuf_r+0x76>
 800be16:	2e0a      	cmp	r6, #10
 800be18:	d105      	bne.n	800be26 <__swbuf_r+0x76>
 800be1a:	0021      	movs	r1, r4
 800be1c:	0028      	movs	r0, r5
 800be1e:	f000 f937 	bl	800c090 <_fflush_r>
 800be22:	2800      	cmp	r0, #0
 800be24:	d111      	bne.n	800be4a <__swbuf_r+0x9a>
 800be26:	0030      	movs	r0, r6
 800be28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be2a:	4b0a      	ldr	r3, [pc, #40]	; (800be54 <__swbuf_r+0xa4>)
 800be2c:	429c      	cmp	r4, r3
 800be2e:	d101      	bne.n	800be34 <__swbuf_r+0x84>
 800be30:	68ac      	ldr	r4, [r5, #8]
 800be32:	e7cc      	b.n	800bdce <__swbuf_r+0x1e>
 800be34:	4b08      	ldr	r3, [pc, #32]	; (800be58 <__swbuf_r+0xa8>)
 800be36:	429c      	cmp	r4, r3
 800be38:	d1c9      	bne.n	800bdce <__swbuf_r+0x1e>
 800be3a:	68ec      	ldr	r4, [r5, #12]
 800be3c:	e7c7      	b.n	800bdce <__swbuf_r+0x1e>
 800be3e:	0021      	movs	r1, r4
 800be40:	0028      	movs	r0, r5
 800be42:	f000 f819 	bl	800be78 <__swsetup_r>
 800be46:	2800      	cmp	r0, #0
 800be48:	d0c9      	beq.n	800bdde <__swbuf_r+0x2e>
 800be4a:	2601      	movs	r6, #1
 800be4c:	4276      	negs	r6, r6
 800be4e:	e7ea      	b.n	800be26 <__swbuf_r+0x76>
 800be50:	0800e25c 	.word	0x0800e25c
 800be54:	0800e27c 	.word	0x0800e27c
 800be58:	0800e23c 	.word	0x0800e23c

0800be5c <__ascii_wctomb>:
 800be5c:	0003      	movs	r3, r0
 800be5e:	1e08      	subs	r0, r1, #0
 800be60:	d005      	beq.n	800be6e <__ascii_wctomb+0x12>
 800be62:	2aff      	cmp	r2, #255	; 0xff
 800be64:	d904      	bls.n	800be70 <__ascii_wctomb+0x14>
 800be66:	228a      	movs	r2, #138	; 0x8a
 800be68:	2001      	movs	r0, #1
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	4240      	negs	r0, r0
 800be6e:	4770      	bx	lr
 800be70:	2001      	movs	r0, #1
 800be72:	700a      	strb	r2, [r1, #0]
 800be74:	e7fb      	b.n	800be6e <__ascii_wctomb+0x12>
	...

0800be78 <__swsetup_r>:
 800be78:	4b37      	ldr	r3, [pc, #220]	; (800bf58 <__swsetup_r+0xe0>)
 800be7a:	b570      	push	{r4, r5, r6, lr}
 800be7c:	681d      	ldr	r5, [r3, #0]
 800be7e:	0006      	movs	r6, r0
 800be80:	000c      	movs	r4, r1
 800be82:	2d00      	cmp	r5, #0
 800be84:	d005      	beq.n	800be92 <__swsetup_r+0x1a>
 800be86:	69ab      	ldr	r3, [r5, #24]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d102      	bne.n	800be92 <__swsetup_r+0x1a>
 800be8c:	0028      	movs	r0, r5
 800be8e:	f000 f9a1 	bl	800c1d4 <__sinit>
 800be92:	4b32      	ldr	r3, [pc, #200]	; (800bf5c <__swsetup_r+0xe4>)
 800be94:	429c      	cmp	r4, r3
 800be96:	d10f      	bne.n	800beb8 <__swsetup_r+0x40>
 800be98:	686c      	ldr	r4, [r5, #4]
 800be9a:	230c      	movs	r3, #12
 800be9c:	5ee2      	ldrsh	r2, [r4, r3]
 800be9e:	b293      	uxth	r3, r2
 800bea0:	0711      	lsls	r1, r2, #28
 800bea2:	d42d      	bmi.n	800bf00 <__swsetup_r+0x88>
 800bea4:	06d9      	lsls	r1, r3, #27
 800bea6:	d411      	bmi.n	800becc <__swsetup_r+0x54>
 800bea8:	2309      	movs	r3, #9
 800beaa:	2001      	movs	r0, #1
 800beac:	6033      	str	r3, [r6, #0]
 800beae:	3337      	adds	r3, #55	; 0x37
 800beb0:	4313      	orrs	r3, r2
 800beb2:	81a3      	strh	r3, [r4, #12]
 800beb4:	4240      	negs	r0, r0
 800beb6:	bd70      	pop	{r4, r5, r6, pc}
 800beb8:	4b29      	ldr	r3, [pc, #164]	; (800bf60 <__swsetup_r+0xe8>)
 800beba:	429c      	cmp	r4, r3
 800bebc:	d101      	bne.n	800bec2 <__swsetup_r+0x4a>
 800bebe:	68ac      	ldr	r4, [r5, #8]
 800bec0:	e7eb      	b.n	800be9a <__swsetup_r+0x22>
 800bec2:	4b28      	ldr	r3, [pc, #160]	; (800bf64 <__swsetup_r+0xec>)
 800bec4:	429c      	cmp	r4, r3
 800bec6:	d1e8      	bne.n	800be9a <__swsetup_r+0x22>
 800bec8:	68ec      	ldr	r4, [r5, #12]
 800beca:	e7e6      	b.n	800be9a <__swsetup_r+0x22>
 800becc:	075b      	lsls	r3, r3, #29
 800bece:	d513      	bpl.n	800bef8 <__swsetup_r+0x80>
 800bed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bed2:	2900      	cmp	r1, #0
 800bed4:	d008      	beq.n	800bee8 <__swsetup_r+0x70>
 800bed6:	0023      	movs	r3, r4
 800bed8:	3344      	adds	r3, #68	; 0x44
 800beda:	4299      	cmp	r1, r3
 800bedc:	d002      	beq.n	800bee4 <__swsetup_r+0x6c>
 800bede:	0030      	movs	r0, r6
 800bee0:	f7ff fb5e 	bl	800b5a0 <_free_r>
 800bee4:	2300      	movs	r3, #0
 800bee6:	6363      	str	r3, [r4, #52]	; 0x34
 800bee8:	2224      	movs	r2, #36	; 0x24
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	4393      	bics	r3, r2
 800beee:	81a3      	strh	r3, [r4, #12]
 800bef0:	2300      	movs	r3, #0
 800bef2:	6063      	str	r3, [r4, #4]
 800bef4:	6923      	ldr	r3, [r4, #16]
 800bef6:	6023      	str	r3, [r4, #0]
 800bef8:	2308      	movs	r3, #8
 800befa:	89a2      	ldrh	r2, [r4, #12]
 800befc:	4313      	orrs	r3, r2
 800befe:	81a3      	strh	r3, [r4, #12]
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10b      	bne.n	800bf1e <__swsetup_r+0xa6>
 800bf06:	21a0      	movs	r1, #160	; 0xa0
 800bf08:	2280      	movs	r2, #128	; 0x80
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	0089      	lsls	r1, r1, #2
 800bf0e:	0092      	lsls	r2, r2, #2
 800bf10:	400b      	ands	r3, r1
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d003      	beq.n	800bf1e <__swsetup_r+0xa6>
 800bf16:	0021      	movs	r1, r4
 800bf18:	0030      	movs	r0, r6
 800bf1a:	f000 fa27 	bl	800c36c <__smakebuf_r>
 800bf1e:	220c      	movs	r2, #12
 800bf20:	5ea3      	ldrsh	r3, [r4, r2]
 800bf22:	2001      	movs	r0, #1
 800bf24:	001a      	movs	r2, r3
 800bf26:	b299      	uxth	r1, r3
 800bf28:	4002      	ands	r2, r0
 800bf2a:	4203      	tst	r3, r0
 800bf2c:	d00f      	beq.n	800bf4e <__swsetup_r+0xd6>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	60a2      	str	r2, [r4, #8]
 800bf32:	6962      	ldr	r2, [r4, #20]
 800bf34:	4252      	negs	r2, r2
 800bf36:	61a2      	str	r2, [r4, #24]
 800bf38:	2000      	movs	r0, #0
 800bf3a:	6922      	ldr	r2, [r4, #16]
 800bf3c:	4282      	cmp	r2, r0
 800bf3e:	d1ba      	bne.n	800beb6 <__swsetup_r+0x3e>
 800bf40:	060a      	lsls	r2, r1, #24
 800bf42:	d5b8      	bpl.n	800beb6 <__swsetup_r+0x3e>
 800bf44:	2240      	movs	r2, #64	; 0x40
 800bf46:	4313      	orrs	r3, r2
 800bf48:	81a3      	strh	r3, [r4, #12]
 800bf4a:	3801      	subs	r0, #1
 800bf4c:	e7b3      	b.n	800beb6 <__swsetup_r+0x3e>
 800bf4e:	0788      	lsls	r0, r1, #30
 800bf50:	d400      	bmi.n	800bf54 <__swsetup_r+0xdc>
 800bf52:	6962      	ldr	r2, [r4, #20]
 800bf54:	60a2      	str	r2, [r4, #8]
 800bf56:	e7ef      	b.n	800bf38 <__swsetup_r+0xc0>
 800bf58:	20000084 	.word	0x20000084
 800bf5c:	0800e25c 	.word	0x0800e25c
 800bf60:	0800e27c 	.word	0x0800e27c
 800bf64:	0800e23c 	.word	0x0800e23c

0800bf68 <abort>:
 800bf68:	2006      	movs	r0, #6
 800bf6a:	b510      	push	{r4, lr}
 800bf6c:	f000 fa74 	bl	800c458 <raise>
 800bf70:	2001      	movs	r0, #1
 800bf72:	f7f8 ff9f 	bl	8004eb4 <_exit>
	...

0800bf78 <__sflush_r>:
 800bf78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf7a:	898b      	ldrh	r3, [r1, #12]
 800bf7c:	0005      	movs	r5, r0
 800bf7e:	000c      	movs	r4, r1
 800bf80:	071a      	lsls	r2, r3, #28
 800bf82:	d45f      	bmi.n	800c044 <__sflush_r+0xcc>
 800bf84:	684a      	ldr	r2, [r1, #4]
 800bf86:	2a00      	cmp	r2, #0
 800bf88:	dc04      	bgt.n	800bf94 <__sflush_r+0x1c>
 800bf8a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800bf8c:	2a00      	cmp	r2, #0
 800bf8e:	dc01      	bgt.n	800bf94 <__sflush_r+0x1c>
 800bf90:	2000      	movs	r0, #0
 800bf92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bf96:	2f00      	cmp	r7, #0
 800bf98:	d0fa      	beq.n	800bf90 <__sflush_r+0x18>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2180      	movs	r1, #128	; 0x80
 800bf9e:	682e      	ldr	r6, [r5, #0]
 800bfa0:	602a      	str	r2, [r5, #0]
 800bfa2:	001a      	movs	r2, r3
 800bfa4:	0149      	lsls	r1, r1, #5
 800bfa6:	400a      	ands	r2, r1
 800bfa8:	420b      	tst	r3, r1
 800bfaa:	d034      	beq.n	800c016 <__sflush_r+0x9e>
 800bfac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	075b      	lsls	r3, r3, #29
 800bfb2:	d506      	bpl.n	800bfc2 <__sflush_r+0x4a>
 800bfb4:	6863      	ldr	r3, [r4, #4]
 800bfb6:	1ac0      	subs	r0, r0, r3
 800bfb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d001      	beq.n	800bfc2 <__sflush_r+0x4a>
 800bfbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfc0:	1ac0      	subs	r0, r0, r3
 800bfc2:	0002      	movs	r2, r0
 800bfc4:	6a21      	ldr	r1, [r4, #32]
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	0028      	movs	r0, r5
 800bfca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bfcc:	47b8      	blx	r7
 800bfce:	89a1      	ldrh	r1, [r4, #12]
 800bfd0:	1c43      	adds	r3, r0, #1
 800bfd2:	d106      	bne.n	800bfe2 <__sflush_r+0x6a>
 800bfd4:	682b      	ldr	r3, [r5, #0]
 800bfd6:	2b1d      	cmp	r3, #29
 800bfd8:	d831      	bhi.n	800c03e <__sflush_r+0xc6>
 800bfda:	4a2c      	ldr	r2, [pc, #176]	; (800c08c <__sflush_r+0x114>)
 800bfdc:	40da      	lsrs	r2, r3
 800bfde:	07d3      	lsls	r3, r2, #31
 800bfe0:	d52d      	bpl.n	800c03e <__sflush_r+0xc6>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	6063      	str	r3, [r4, #4]
 800bfe6:	6923      	ldr	r3, [r4, #16]
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	04cb      	lsls	r3, r1, #19
 800bfec:	d505      	bpl.n	800bffa <__sflush_r+0x82>
 800bfee:	1c43      	adds	r3, r0, #1
 800bff0:	d102      	bne.n	800bff8 <__sflush_r+0x80>
 800bff2:	682b      	ldr	r3, [r5, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d100      	bne.n	800bffa <__sflush_r+0x82>
 800bff8:	6560      	str	r0, [r4, #84]	; 0x54
 800bffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bffc:	602e      	str	r6, [r5, #0]
 800bffe:	2900      	cmp	r1, #0
 800c000:	d0c6      	beq.n	800bf90 <__sflush_r+0x18>
 800c002:	0023      	movs	r3, r4
 800c004:	3344      	adds	r3, #68	; 0x44
 800c006:	4299      	cmp	r1, r3
 800c008:	d002      	beq.n	800c010 <__sflush_r+0x98>
 800c00a:	0028      	movs	r0, r5
 800c00c:	f7ff fac8 	bl	800b5a0 <_free_r>
 800c010:	2000      	movs	r0, #0
 800c012:	6360      	str	r0, [r4, #52]	; 0x34
 800c014:	e7bd      	b.n	800bf92 <__sflush_r+0x1a>
 800c016:	2301      	movs	r3, #1
 800c018:	0028      	movs	r0, r5
 800c01a:	6a21      	ldr	r1, [r4, #32]
 800c01c:	47b8      	blx	r7
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	d1c5      	bne.n	800bfae <__sflush_r+0x36>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d0c2      	beq.n	800bfae <__sflush_r+0x36>
 800c028:	2b1d      	cmp	r3, #29
 800c02a:	d001      	beq.n	800c030 <__sflush_r+0xb8>
 800c02c:	2b16      	cmp	r3, #22
 800c02e:	d101      	bne.n	800c034 <__sflush_r+0xbc>
 800c030:	602e      	str	r6, [r5, #0]
 800c032:	e7ad      	b.n	800bf90 <__sflush_r+0x18>
 800c034:	2340      	movs	r3, #64	; 0x40
 800c036:	89a2      	ldrh	r2, [r4, #12]
 800c038:	4313      	orrs	r3, r2
 800c03a:	81a3      	strh	r3, [r4, #12]
 800c03c:	e7a9      	b.n	800bf92 <__sflush_r+0x1a>
 800c03e:	2340      	movs	r3, #64	; 0x40
 800c040:	430b      	orrs	r3, r1
 800c042:	e7fa      	b.n	800c03a <__sflush_r+0xc2>
 800c044:	690f      	ldr	r7, [r1, #16]
 800c046:	2f00      	cmp	r7, #0
 800c048:	d0a2      	beq.n	800bf90 <__sflush_r+0x18>
 800c04a:	680a      	ldr	r2, [r1, #0]
 800c04c:	600f      	str	r7, [r1, #0]
 800c04e:	1bd2      	subs	r2, r2, r7
 800c050:	9201      	str	r2, [sp, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	079b      	lsls	r3, r3, #30
 800c056:	d100      	bne.n	800c05a <__sflush_r+0xe2>
 800c058:	694a      	ldr	r2, [r1, #20]
 800c05a:	60a2      	str	r2, [r4, #8]
 800c05c:	9b01      	ldr	r3, [sp, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dc00      	bgt.n	800c064 <__sflush_r+0xec>
 800c062:	e795      	b.n	800bf90 <__sflush_r+0x18>
 800c064:	003a      	movs	r2, r7
 800c066:	0028      	movs	r0, r5
 800c068:	9b01      	ldr	r3, [sp, #4]
 800c06a:	6a21      	ldr	r1, [r4, #32]
 800c06c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c06e:	47b0      	blx	r6
 800c070:	2800      	cmp	r0, #0
 800c072:	dc06      	bgt.n	800c082 <__sflush_r+0x10a>
 800c074:	2340      	movs	r3, #64	; 0x40
 800c076:	2001      	movs	r0, #1
 800c078:	89a2      	ldrh	r2, [r4, #12]
 800c07a:	4240      	negs	r0, r0
 800c07c:	4313      	orrs	r3, r2
 800c07e:	81a3      	strh	r3, [r4, #12]
 800c080:	e787      	b.n	800bf92 <__sflush_r+0x1a>
 800c082:	9b01      	ldr	r3, [sp, #4]
 800c084:	183f      	adds	r7, r7, r0
 800c086:	1a1b      	subs	r3, r3, r0
 800c088:	9301      	str	r3, [sp, #4]
 800c08a:	e7e7      	b.n	800c05c <__sflush_r+0xe4>
 800c08c:	20400001 	.word	0x20400001

0800c090 <_fflush_r>:
 800c090:	690b      	ldr	r3, [r1, #16]
 800c092:	b570      	push	{r4, r5, r6, lr}
 800c094:	0005      	movs	r5, r0
 800c096:	000c      	movs	r4, r1
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d102      	bne.n	800c0a2 <_fflush_r+0x12>
 800c09c:	2500      	movs	r5, #0
 800c09e:	0028      	movs	r0, r5
 800c0a0:	bd70      	pop	{r4, r5, r6, pc}
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d004      	beq.n	800c0b0 <_fflush_r+0x20>
 800c0a6:	6983      	ldr	r3, [r0, #24]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d101      	bne.n	800c0b0 <_fflush_r+0x20>
 800c0ac:	f000 f892 	bl	800c1d4 <__sinit>
 800c0b0:	4b14      	ldr	r3, [pc, #80]	; (800c104 <_fflush_r+0x74>)
 800c0b2:	429c      	cmp	r4, r3
 800c0b4:	d11b      	bne.n	800c0ee <_fflush_r+0x5e>
 800c0b6:	686c      	ldr	r4, [r5, #4]
 800c0b8:	220c      	movs	r2, #12
 800c0ba:	5ea3      	ldrsh	r3, [r4, r2]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d0ed      	beq.n	800c09c <_fflush_r+0xc>
 800c0c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0c2:	07d2      	lsls	r2, r2, #31
 800c0c4:	d404      	bmi.n	800c0d0 <_fflush_r+0x40>
 800c0c6:	059b      	lsls	r3, r3, #22
 800c0c8:	d402      	bmi.n	800c0d0 <_fflush_r+0x40>
 800c0ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0cc:	f000 f923 	bl	800c316 <__retarget_lock_acquire_recursive>
 800c0d0:	0028      	movs	r0, r5
 800c0d2:	0021      	movs	r1, r4
 800c0d4:	f7ff ff50 	bl	800bf78 <__sflush_r>
 800c0d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0da:	0005      	movs	r5, r0
 800c0dc:	07db      	lsls	r3, r3, #31
 800c0de:	d4de      	bmi.n	800c09e <_fflush_r+0xe>
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	059b      	lsls	r3, r3, #22
 800c0e4:	d4db      	bmi.n	800c09e <_fflush_r+0xe>
 800c0e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0e8:	f000 f916 	bl	800c318 <__retarget_lock_release_recursive>
 800c0ec:	e7d7      	b.n	800c09e <_fflush_r+0xe>
 800c0ee:	4b06      	ldr	r3, [pc, #24]	; (800c108 <_fflush_r+0x78>)
 800c0f0:	429c      	cmp	r4, r3
 800c0f2:	d101      	bne.n	800c0f8 <_fflush_r+0x68>
 800c0f4:	68ac      	ldr	r4, [r5, #8]
 800c0f6:	e7df      	b.n	800c0b8 <_fflush_r+0x28>
 800c0f8:	4b04      	ldr	r3, [pc, #16]	; (800c10c <_fflush_r+0x7c>)
 800c0fa:	429c      	cmp	r4, r3
 800c0fc:	d1dc      	bne.n	800c0b8 <_fflush_r+0x28>
 800c0fe:	68ec      	ldr	r4, [r5, #12]
 800c100:	e7da      	b.n	800c0b8 <_fflush_r+0x28>
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	0800e25c 	.word	0x0800e25c
 800c108:	0800e27c 	.word	0x0800e27c
 800c10c:	0800e23c 	.word	0x0800e23c

0800c110 <std>:
 800c110:	2300      	movs	r3, #0
 800c112:	b510      	push	{r4, lr}
 800c114:	0004      	movs	r4, r0
 800c116:	6003      	str	r3, [r0, #0]
 800c118:	6043      	str	r3, [r0, #4]
 800c11a:	6083      	str	r3, [r0, #8]
 800c11c:	8181      	strh	r1, [r0, #12]
 800c11e:	6643      	str	r3, [r0, #100]	; 0x64
 800c120:	0019      	movs	r1, r3
 800c122:	81c2      	strh	r2, [r0, #14]
 800c124:	6103      	str	r3, [r0, #16]
 800c126:	6143      	str	r3, [r0, #20]
 800c128:	6183      	str	r3, [r0, #24]
 800c12a:	2208      	movs	r2, #8
 800c12c:	305c      	adds	r0, #92	; 0x5c
 800c12e:	f7fd fb1d 	bl	800976c <memset>
 800c132:	4b05      	ldr	r3, [pc, #20]	; (800c148 <std+0x38>)
 800c134:	6263      	str	r3, [r4, #36]	; 0x24
 800c136:	4b05      	ldr	r3, [pc, #20]	; (800c14c <std+0x3c>)
 800c138:	6224      	str	r4, [r4, #32]
 800c13a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c13c:	4b04      	ldr	r3, [pc, #16]	; (800c150 <std+0x40>)
 800c13e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c140:	4b04      	ldr	r3, [pc, #16]	; (800c154 <std+0x44>)
 800c142:	6323      	str	r3, [r4, #48]	; 0x30
 800c144:	bd10      	pop	{r4, pc}
 800c146:	46c0      	nop			; (mov r8, r8)
 800c148:	0800c499 	.word	0x0800c499
 800c14c:	0800c4c1 	.word	0x0800c4c1
 800c150:	0800c4f9 	.word	0x0800c4f9
 800c154:	0800c525 	.word	0x0800c525

0800c158 <_cleanup_r>:
 800c158:	b510      	push	{r4, lr}
 800c15a:	4902      	ldr	r1, [pc, #8]	; (800c164 <_cleanup_r+0xc>)
 800c15c:	f000 f8ba 	bl	800c2d4 <_fwalk_reent>
 800c160:	bd10      	pop	{r4, pc}
 800c162:	46c0      	nop			; (mov r8, r8)
 800c164:	0800c091 	.word	0x0800c091

0800c168 <__sfmoreglue>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	2568      	movs	r5, #104	; 0x68
 800c16c:	1e4a      	subs	r2, r1, #1
 800c16e:	4355      	muls	r5, r2
 800c170:	000e      	movs	r6, r1
 800c172:	0029      	movs	r1, r5
 800c174:	3174      	adds	r1, #116	; 0x74
 800c176:	f7ff fa5d 	bl	800b634 <_malloc_r>
 800c17a:	1e04      	subs	r4, r0, #0
 800c17c:	d008      	beq.n	800c190 <__sfmoreglue+0x28>
 800c17e:	2100      	movs	r1, #0
 800c180:	002a      	movs	r2, r5
 800c182:	6001      	str	r1, [r0, #0]
 800c184:	6046      	str	r6, [r0, #4]
 800c186:	300c      	adds	r0, #12
 800c188:	60a0      	str	r0, [r4, #8]
 800c18a:	3268      	adds	r2, #104	; 0x68
 800c18c:	f7fd faee 	bl	800976c <memset>
 800c190:	0020      	movs	r0, r4
 800c192:	bd70      	pop	{r4, r5, r6, pc}

0800c194 <__sfp_lock_acquire>:
 800c194:	b510      	push	{r4, lr}
 800c196:	4802      	ldr	r0, [pc, #8]	; (800c1a0 <__sfp_lock_acquire+0xc>)
 800c198:	f000 f8bd 	bl	800c316 <__retarget_lock_acquire_recursive>
 800c19c:	bd10      	pop	{r4, pc}
 800c19e:	46c0      	nop			; (mov r8, r8)
 800c1a0:	20001128 	.word	0x20001128

0800c1a4 <__sfp_lock_release>:
 800c1a4:	b510      	push	{r4, lr}
 800c1a6:	4802      	ldr	r0, [pc, #8]	; (800c1b0 <__sfp_lock_release+0xc>)
 800c1a8:	f000 f8b6 	bl	800c318 <__retarget_lock_release_recursive>
 800c1ac:	bd10      	pop	{r4, pc}
 800c1ae:	46c0      	nop			; (mov r8, r8)
 800c1b0:	20001128 	.word	0x20001128

0800c1b4 <__sinit_lock_acquire>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	4802      	ldr	r0, [pc, #8]	; (800c1c0 <__sinit_lock_acquire+0xc>)
 800c1b8:	f000 f8ad 	bl	800c316 <__retarget_lock_acquire_recursive>
 800c1bc:	bd10      	pop	{r4, pc}
 800c1be:	46c0      	nop			; (mov r8, r8)
 800c1c0:	20001123 	.word	0x20001123

0800c1c4 <__sinit_lock_release>:
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	4802      	ldr	r0, [pc, #8]	; (800c1d0 <__sinit_lock_release+0xc>)
 800c1c8:	f000 f8a6 	bl	800c318 <__retarget_lock_release_recursive>
 800c1cc:	bd10      	pop	{r4, pc}
 800c1ce:	46c0      	nop			; (mov r8, r8)
 800c1d0:	20001123 	.word	0x20001123

0800c1d4 <__sinit>:
 800c1d4:	b513      	push	{r0, r1, r4, lr}
 800c1d6:	0004      	movs	r4, r0
 800c1d8:	f7ff ffec 	bl	800c1b4 <__sinit_lock_acquire>
 800c1dc:	69a3      	ldr	r3, [r4, #24]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <__sinit+0x14>
 800c1e2:	f7ff ffef 	bl	800c1c4 <__sinit_lock_release>
 800c1e6:	bd13      	pop	{r0, r1, r4, pc}
 800c1e8:	64a3      	str	r3, [r4, #72]	; 0x48
 800c1ea:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c1ec:	6523      	str	r3, [r4, #80]	; 0x50
 800c1ee:	4b13      	ldr	r3, [pc, #76]	; (800c23c <__sinit+0x68>)
 800c1f0:	4a13      	ldr	r2, [pc, #76]	; (800c240 <__sinit+0x6c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1f6:	9301      	str	r3, [sp, #4]
 800c1f8:	42a3      	cmp	r3, r4
 800c1fa:	d101      	bne.n	800c200 <__sinit+0x2c>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	61a3      	str	r3, [r4, #24]
 800c200:	0020      	movs	r0, r4
 800c202:	f000 f81f 	bl	800c244 <__sfp>
 800c206:	6060      	str	r0, [r4, #4]
 800c208:	0020      	movs	r0, r4
 800c20a:	f000 f81b 	bl	800c244 <__sfp>
 800c20e:	60a0      	str	r0, [r4, #8]
 800c210:	0020      	movs	r0, r4
 800c212:	f000 f817 	bl	800c244 <__sfp>
 800c216:	2200      	movs	r2, #0
 800c218:	2104      	movs	r1, #4
 800c21a:	60e0      	str	r0, [r4, #12]
 800c21c:	6860      	ldr	r0, [r4, #4]
 800c21e:	f7ff ff77 	bl	800c110 <std>
 800c222:	2201      	movs	r2, #1
 800c224:	2109      	movs	r1, #9
 800c226:	68a0      	ldr	r0, [r4, #8]
 800c228:	f7ff ff72 	bl	800c110 <std>
 800c22c:	2202      	movs	r2, #2
 800c22e:	2112      	movs	r1, #18
 800c230:	68e0      	ldr	r0, [r4, #12]
 800c232:	f7ff ff6d 	bl	800c110 <std>
 800c236:	2301      	movs	r3, #1
 800c238:	61a3      	str	r3, [r4, #24]
 800c23a:	e7d2      	b.n	800c1e2 <__sinit+0xe>
 800c23c:	0800deb8 	.word	0x0800deb8
 800c240:	0800c159 	.word	0x0800c159

0800c244 <__sfp>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	0007      	movs	r7, r0
 800c248:	f7ff ffa4 	bl	800c194 <__sfp_lock_acquire>
 800c24c:	4b1f      	ldr	r3, [pc, #124]	; (800c2cc <__sfp+0x88>)
 800c24e:	681e      	ldr	r6, [r3, #0]
 800c250:	69b3      	ldr	r3, [r6, #24]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d102      	bne.n	800c25c <__sfp+0x18>
 800c256:	0030      	movs	r0, r6
 800c258:	f7ff ffbc 	bl	800c1d4 <__sinit>
 800c25c:	3648      	adds	r6, #72	; 0x48
 800c25e:	68b4      	ldr	r4, [r6, #8]
 800c260:	6873      	ldr	r3, [r6, #4]
 800c262:	3b01      	subs	r3, #1
 800c264:	d504      	bpl.n	800c270 <__sfp+0x2c>
 800c266:	6833      	ldr	r3, [r6, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d022      	beq.n	800c2b2 <__sfp+0x6e>
 800c26c:	6836      	ldr	r6, [r6, #0]
 800c26e:	e7f6      	b.n	800c25e <__sfp+0x1a>
 800c270:	220c      	movs	r2, #12
 800c272:	5ea5      	ldrsh	r5, [r4, r2]
 800c274:	2d00      	cmp	r5, #0
 800c276:	d11a      	bne.n	800c2ae <__sfp+0x6a>
 800c278:	0020      	movs	r0, r4
 800c27a:	4b15      	ldr	r3, [pc, #84]	; (800c2d0 <__sfp+0x8c>)
 800c27c:	3058      	adds	r0, #88	; 0x58
 800c27e:	60e3      	str	r3, [r4, #12]
 800c280:	6665      	str	r5, [r4, #100]	; 0x64
 800c282:	f000 f847 	bl	800c314 <__retarget_lock_init_recursive>
 800c286:	f7ff ff8d 	bl	800c1a4 <__sfp_lock_release>
 800c28a:	0020      	movs	r0, r4
 800c28c:	2208      	movs	r2, #8
 800c28e:	0029      	movs	r1, r5
 800c290:	6025      	str	r5, [r4, #0]
 800c292:	60a5      	str	r5, [r4, #8]
 800c294:	6065      	str	r5, [r4, #4]
 800c296:	6125      	str	r5, [r4, #16]
 800c298:	6165      	str	r5, [r4, #20]
 800c29a:	61a5      	str	r5, [r4, #24]
 800c29c:	305c      	adds	r0, #92	; 0x5c
 800c29e:	f7fd fa65 	bl	800976c <memset>
 800c2a2:	6365      	str	r5, [r4, #52]	; 0x34
 800c2a4:	63a5      	str	r5, [r4, #56]	; 0x38
 800c2a6:	64a5      	str	r5, [r4, #72]	; 0x48
 800c2a8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c2aa:	0020      	movs	r0, r4
 800c2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2ae:	3468      	adds	r4, #104	; 0x68
 800c2b0:	e7d7      	b.n	800c262 <__sfp+0x1e>
 800c2b2:	2104      	movs	r1, #4
 800c2b4:	0038      	movs	r0, r7
 800c2b6:	f7ff ff57 	bl	800c168 <__sfmoreglue>
 800c2ba:	1e04      	subs	r4, r0, #0
 800c2bc:	6030      	str	r0, [r6, #0]
 800c2be:	d1d5      	bne.n	800c26c <__sfp+0x28>
 800c2c0:	f7ff ff70 	bl	800c1a4 <__sfp_lock_release>
 800c2c4:	230c      	movs	r3, #12
 800c2c6:	603b      	str	r3, [r7, #0]
 800c2c8:	e7ef      	b.n	800c2aa <__sfp+0x66>
 800c2ca:	46c0      	nop			; (mov r8, r8)
 800c2cc:	0800deb8 	.word	0x0800deb8
 800c2d0:	ffff0001 	.word	0xffff0001

0800c2d4 <_fwalk_reent>:
 800c2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2d6:	0004      	movs	r4, r0
 800c2d8:	0006      	movs	r6, r0
 800c2da:	2700      	movs	r7, #0
 800c2dc:	9101      	str	r1, [sp, #4]
 800c2de:	3448      	adds	r4, #72	; 0x48
 800c2e0:	6863      	ldr	r3, [r4, #4]
 800c2e2:	68a5      	ldr	r5, [r4, #8]
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	9b00      	ldr	r3, [sp, #0]
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	d504      	bpl.n	800c2f8 <_fwalk_reent+0x24>
 800c2ee:	6824      	ldr	r4, [r4, #0]
 800c2f0:	2c00      	cmp	r4, #0
 800c2f2:	d1f5      	bne.n	800c2e0 <_fwalk_reent+0xc>
 800c2f4:	0038      	movs	r0, r7
 800c2f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c2f8:	89ab      	ldrh	r3, [r5, #12]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d908      	bls.n	800c310 <_fwalk_reent+0x3c>
 800c2fe:	220e      	movs	r2, #14
 800c300:	5eab      	ldrsh	r3, [r5, r2]
 800c302:	3301      	adds	r3, #1
 800c304:	d004      	beq.n	800c310 <_fwalk_reent+0x3c>
 800c306:	0029      	movs	r1, r5
 800c308:	0030      	movs	r0, r6
 800c30a:	9b01      	ldr	r3, [sp, #4]
 800c30c:	4798      	blx	r3
 800c30e:	4307      	orrs	r7, r0
 800c310:	3568      	adds	r5, #104	; 0x68
 800c312:	e7e8      	b.n	800c2e6 <_fwalk_reent+0x12>

0800c314 <__retarget_lock_init_recursive>:
 800c314:	4770      	bx	lr

0800c316 <__retarget_lock_acquire_recursive>:
 800c316:	4770      	bx	lr

0800c318 <__retarget_lock_release_recursive>:
 800c318:	4770      	bx	lr
	...

0800c31c <__swhatbuf_r>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	000e      	movs	r6, r1
 800c320:	001d      	movs	r5, r3
 800c322:	230e      	movs	r3, #14
 800c324:	5ec9      	ldrsh	r1, [r1, r3]
 800c326:	0014      	movs	r4, r2
 800c328:	b096      	sub	sp, #88	; 0x58
 800c32a:	2900      	cmp	r1, #0
 800c32c:	da07      	bge.n	800c33e <__swhatbuf_r+0x22>
 800c32e:	2300      	movs	r3, #0
 800c330:	602b      	str	r3, [r5, #0]
 800c332:	89b3      	ldrh	r3, [r6, #12]
 800c334:	061b      	lsls	r3, r3, #24
 800c336:	d411      	bmi.n	800c35c <__swhatbuf_r+0x40>
 800c338:	2380      	movs	r3, #128	; 0x80
 800c33a:	00db      	lsls	r3, r3, #3
 800c33c:	e00f      	b.n	800c35e <__swhatbuf_r+0x42>
 800c33e:	466a      	mov	r2, sp
 800c340:	f000 f91c 	bl	800c57c <_fstat_r>
 800c344:	2800      	cmp	r0, #0
 800c346:	dbf2      	blt.n	800c32e <__swhatbuf_r+0x12>
 800c348:	23f0      	movs	r3, #240	; 0xf0
 800c34a:	9901      	ldr	r1, [sp, #4]
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	4019      	ands	r1, r3
 800c350:	4b05      	ldr	r3, [pc, #20]	; (800c368 <__swhatbuf_r+0x4c>)
 800c352:	18c9      	adds	r1, r1, r3
 800c354:	424b      	negs	r3, r1
 800c356:	4159      	adcs	r1, r3
 800c358:	6029      	str	r1, [r5, #0]
 800c35a:	e7ed      	b.n	800c338 <__swhatbuf_r+0x1c>
 800c35c:	2340      	movs	r3, #64	; 0x40
 800c35e:	2000      	movs	r0, #0
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	b016      	add	sp, #88	; 0x58
 800c364:	bd70      	pop	{r4, r5, r6, pc}
 800c366:	46c0      	nop			; (mov r8, r8)
 800c368:	ffffe000 	.word	0xffffe000

0800c36c <__smakebuf_r>:
 800c36c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c36e:	2602      	movs	r6, #2
 800c370:	898b      	ldrh	r3, [r1, #12]
 800c372:	0005      	movs	r5, r0
 800c374:	000c      	movs	r4, r1
 800c376:	4233      	tst	r3, r6
 800c378:	d006      	beq.n	800c388 <__smakebuf_r+0x1c>
 800c37a:	0023      	movs	r3, r4
 800c37c:	3347      	adds	r3, #71	; 0x47
 800c37e:	6023      	str	r3, [r4, #0]
 800c380:	6123      	str	r3, [r4, #16]
 800c382:	2301      	movs	r3, #1
 800c384:	6163      	str	r3, [r4, #20]
 800c386:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c388:	466a      	mov	r2, sp
 800c38a:	ab01      	add	r3, sp, #4
 800c38c:	f7ff ffc6 	bl	800c31c <__swhatbuf_r>
 800c390:	9900      	ldr	r1, [sp, #0]
 800c392:	0007      	movs	r7, r0
 800c394:	0028      	movs	r0, r5
 800c396:	f7ff f94d 	bl	800b634 <_malloc_r>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d108      	bne.n	800c3b0 <__smakebuf_r+0x44>
 800c39e:	220c      	movs	r2, #12
 800c3a0:	5ea3      	ldrsh	r3, [r4, r2]
 800c3a2:	059a      	lsls	r2, r3, #22
 800c3a4:	d4ef      	bmi.n	800c386 <__smakebuf_r+0x1a>
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	4393      	bics	r3, r2
 800c3aa:	431e      	orrs	r6, r3
 800c3ac:	81a6      	strh	r6, [r4, #12]
 800c3ae:	e7e4      	b.n	800c37a <__smakebuf_r+0xe>
 800c3b0:	4b0f      	ldr	r3, [pc, #60]	; (800c3f0 <__smakebuf_r+0x84>)
 800c3b2:	62ab      	str	r3, [r5, #40]	; 0x28
 800c3b4:	2380      	movs	r3, #128	; 0x80
 800c3b6:	89a2      	ldrh	r2, [r4, #12]
 800c3b8:	6020      	str	r0, [r4, #0]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	81a3      	strh	r3, [r4, #12]
 800c3be:	9b00      	ldr	r3, [sp, #0]
 800c3c0:	6120      	str	r0, [r4, #16]
 800c3c2:	6163      	str	r3, [r4, #20]
 800c3c4:	9b01      	ldr	r3, [sp, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00d      	beq.n	800c3e6 <__smakebuf_r+0x7a>
 800c3ca:	0028      	movs	r0, r5
 800c3cc:	230e      	movs	r3, #14
 800c3ce:	5ee1      	ldrsh	r1, [r4, r3]
 800c3d0:	f000 f8e6 	bl	800c5a0 <_isatty_r>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d006      	beq.n	800c3e6 <__smakebuf_r+0x7a>
 800c3d8:	2203      	movs	r2, #3
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	4393      	bics	r3, r2
 800c3de:	001a      	movs	r2, r3
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	81a3      	strh	r3, [r4, #12]
 800c3e6:	89a0      	ldrh	r0, [r4, #12]
 800c3e8:	4307      	orrs	r7, r0
 800c3ea:	81a7      	strh	r7, [r4, #12]
 800c3ec:	e7cb      	b.n	800c386 <__smakebuf_r+0x1a>
 800c3ee:	46c0      	nop			; (mov r8, r8)
 800c3f0:	0800c159 	.word	0x0800c159

0800c3f4 <_malloc_usable_size_r>:
 800c3f4:	1f0b      	subs	r3, r1, #4
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	1f18      	subs	r0, r3, #4
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	da01      	bge.n	800c402 <_malloc_usable_size_r+0xe>
 800c3fe:	580b      	ldr	r3, [r1, r0]
 800c400:	18c0      	adds	r0, r0, r3
 800c402:	4770      	bx	lr

0800c404 <_raise_r>:
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	0004      	movs	r4, r0
 800c408:	000d      	movs	r5, r1
 800c40a:	291f      	cmp	r1, #31
 800c40c:	d904      	bls.n	800c418 <_raise_r+0x14>
 800c40e:	2316      	movs	r3, #22
 800c410:	6003      	str	r3, [r0, #0]
 800c412:	2001      	movs	r0, #1
 800c414:	4240      	negs	r0, r0
 800c416:	bd70      	pop	{r4, r5, r6, pc}
 800c418:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d004      	beq.n	800c428 <_raise_r+0x24>
 800c41e:	008a      	lsls	r2, r1, #2
 800c420:	189b      	adds	r3, r3, r2
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	2a00      	cmp	r2, #0
 800c426:	d108      	bne.n	800c43a <_raise_r+0x36>
 800c428:	0020      	movs	r0, r4
 800c42a:	f000 f831 	bl	800c490 <_getpid_r>
 800c42e:	002a      	movs	r2, r5
 800c430:	0001      	movs	r1, r0
 800c432:	0020      	movs	r0, r4
 800c434:	f000 f81a 	bl	800c46c <_kill_r>
 800c438:	e7ed      	b.n	800c416 <_raise_r+0x12>
 800c43a:	2000      	movs	r0, #0
 800c43c:	2a01      	cmp	r2, #1
 800c43e:	d0ea      	beq.n	800c416 <_raise_r+0x12>
 800c440:	1c51      	adds	r1, r2, #1
 800c442:	d103      	bne.n	800c44c <_raise_r+0x48>
 800c444:	2316      	movs	r3, #22
 800c446:	3001      	adds	r0, #1
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	e7e4      	b.n	800c416 <_raise_r+0x12>
 800c44c:	2400      	movs	r4, #0
 800c44e:	0028      	movs	r0, r5
 800c450:	601c      	str	r4, [r3, #0]
 800c452:	4790      	blx	r2
 800c454:	0020      	movs	r0, r4
 800c456:	e7de      	b.n	800c416 <_raise_r+0x12>

0800c458 <raise>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	4b03      	ldr	r3, [pc, #12]	; (800c468 <raise+0x10>)
 800c45c:	0001      	movs	r1, r0
 800c45e:	6818      	ldr	r0, [r3, #0]
 800c460:	f7ff ffd0 	bl	800c404 <_raise_r>
 800c464:	bd10      	pop	{r4, pc}
 800c466:	46c0      	nop			; (mov r8, r8)
 800c468:	20000084 	.word	0x20000084

0800c46c <_kill_r>:
 800c46c:	2300      	movs	r3, #0
 800c46e:	b570      	push	{r4, r5, r6, lr}
 800c470:	4d06      	ldr	r5, [pc, #24]	; (800c48c <_kill_r+0x20>)
 800c472:	0004      	movs	r4, r0
 800c474:	0008      	movs	r0, r1
 800c476:	0011      	movs	r1, r2
 800c478:	602b      	str	r3, [r5, #0]
 800c47a:	f7f8 fd13 	bl	8004ea4 <_kill>
 800c47e:	1c43      	adds	r3, r0, #1
 800c480:	d103      	bne.n	800c48a <_kill_r+0x1e>
 800c482:	682b      	ldr	r3, [r5, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d000      	beq.n	800c48a <_kill_r+0x1e>
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	bd70      	pop	{r4, r5, r6, pc}
 800c48c:	2000111c 	.word	0x2000111c

0800c490 <_getpid_r>:
 800c490:	b510      	push	{r4, lr}
 800c492:	f7f8 fd05 	bl	8004ea0 <_getpid>
 800c496:	bd10      	pop	{r4, pc}

0800c498 <__sread>:
 800c498:	b570      	push	{r4, r5, r6, lr}
 800c49a:	000c      	movs	r4, r1
 800c49c:	250e      	movs	r5, #14
 800c49e:	5f49      	ldrsh	r1, [r1, r5]
 800c4a0:	f000 f8a4 	bl	800c5ec <_read_r>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	db03      	blt.n	800c4b0 <__sread+0x18>
 800c4a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c4aa:	181b      	adds	r3, r3, r0
 800c4ac:	6563      	str	r3, [r4, #84]	; 0x54
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}
 800c4b0:	89a3      	ldrh	r3, [r4, #12]
 800c4b2:	4a02      	ldr	r2, [pc, #8]	; (800c4bc <__sread+0x24>)
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	81a3      	strh	r3, [r4, #12]
 800c4b8:	e7f9      	b.n	800c4ae <__sread+0x16>
 800c4ba:	46c0      	nop			; (mov r8, r8)
 800c4bc:	ffffefff 	.word	0xffffefff

0800c4c0 <__swrite>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	001f      	movs	r7, r3
 800c4c4:	898b      	ldrh	r3, [r1, #12]
 800c4c6:	0005      	movs	r5, r0
 800c4c8:	000c      	movs	r4, r1
 800c4ca:	0016      	movs	r6, r2
 800c4cc:	05db      	lsls	r3, r3, #23
 800c4ce:	d505      	bpl.n	800c4dc <__swrite+0x1c>
 800c4d0:	230e      	movs	r3, #14
 800c4d2:	5ec9      	ldrsh	r1, [r1, r3]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	f000 f874 	bl	800c5c4 <_lseek_r>
 800c4dc:	89a3      	ldrh	r3, [r4, #12]
 800c4de:	4a05      	ldr	r2, [pc, #20]	; (800c4f4 <__swrite+0x34>)
 800c4e0:	0028      	movs	r0, r5
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	81a3      	strh	r3, [r4, #12]
 800c4e6:	0032      	movs	r2, r6
 800c4e8:	230e      	movs	r3, #14
 800c4ea:	5ee1      	ldrsh	r1, [r4, r3]
 800c4ec:	003b      	movs	r3, r7
 800c4ee:	f000 f81f 	bl	800c530 <_write_r>
 800c4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4f4:	ffffefff 	.word	0xffffefff

0800c4f8 <__sseek>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	000c      	movs	r4, r1
 800c4fc:	250e      	movs	r5, #14
 800c4fe:	5f49      	ldrsh	r1, [r1, r5]
 800c500:	f000 f860 	bl	800c5c4 <_lseek_r>
 800c504:	89a3      	ldrh	r3, [r4, #12]
 800c506:	1c42      	adds	r2, r0, #1
 800c508:	d103      	bne.n	800c512 <__sseek+0x1a>
 800c50a:	4a05      	ldr	r2, [pc, #20]	; (800c520 <__sseek+0x28>)
 800c50c:	4013      	ands	r3, r2
 800c50e:	81a3      	strh	r3, [r4, #12]
 800c510:	bd70      	pop	{r4, r5, r6, pc}
 800c512:	2280      	movs	r2, #128	; 0x80
 800c514:	0152      	lsls	r2, r2, #5
 800c516:	4313      	orrs	r3, r2
 800c518:	81a3      	strh	r3, [r4, #12]
 800c51a:	6560      	str	r0, [r4, #84]	; 0x54
 800c51c:	e7f8      	b.n	800c510 <__sseek+0x18>
 800c51e:	46c0      	nop			; (mov r8, r8)
 800c520:	ffffefff 	.word	0xffffefff

0800c524 <__sclose>:
 800c524:	b510      	push	{r4, lr}
 800c526:	230e      	movs	r3, #14
 800c528:	5ec9      	ldrsh	r1, [r1, r3]
 800c52a:	f000 f815 	bl	800c558 <_close_r>
 800c52e:	bd10      	pop	{r4, pc}

0800c530 <_write_r>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	0004      	movs	r4, r0
 800c534:	0008      	movs	r0, r1
 800c536:	0011      	movs	r1, r2
 800c538:	001a      	movs	r2, r3
 800c53a:	2300      	movs	r3, #0
 800c53c:	4d05      	ldr	r5, [pc, #20]	; (800c554 <_write_r+0x24>)
 800c53e:	602b      	str	r3, [r5, #0]
 800c540:	f7f8 fccb 	bl	8004eda <_write>
 800c544:	1c43      	adds	r3, r0, #1
 800c546:	d103      	bne.n	800c550 <_write_r+0x20>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d000      	beq.n	800c550 <_write_r+0x20>
 800c54e:	6023      	str	r3, [r4, #0]
 800c550:	bd70      	pop	{r4, r5, r6, pc}
 800c552:	46c0      	nop			; (mov r8, r8)
 800c554:	2000111c 	.word	0x2000111c

0800c558 <_close_r>:
 800c558:	2300      	movs	r3, #0
 800c55a:	b570      	push	{r4, r5, r6, lr}
 800c55c:	4d06      	ldr	r5, [pc, #24]	; (800c578 <_close_r+0x20>)
 800c55e:	0004      	movs	r4, r0
 800c560:	0008      	movs	r0, r1
 800c562:	602b      	str	r3, [r5, #0]
 800c564:	f7f8 fcc6 	bl	8004ef4 <_close>
 800c568:	1c43      	adds	r3, r0, #1
 800c56a:	d103      	bne.n	800c574 <_close_r+0x1c>
 800c56c:	682b      	ldr	r3, [r5, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d000      	beq.n	800c574 <_close_r+0x1c>
 800c572:	6023      	str	r3, [r4, #0]
 800c574:	bd70      	pop	{r4, r5, r6, pc}
 800c576:	46c0      	nop			; (mov r8, r8)
 800c578:	2000111c 	.word	0x2000111c

0800c57c <_fstat_r>:
 800c57c:	2300      	movs	r3, #0
 800c57e:	b570      	push	{r4, r5, r6, lr}
 800c580:	4d06      	ldr	r5, [pc, #24]	; (800c59c <_fstat_r+0x20>)
 800c582:	0004      	movs	r4, r0
 800c584:	0008      	movs	r0, r1
 800c586:	0011      	movs	r1, r2
 800c588:	602b      	str	r3, [r5, #0]
 800c58a:	f7f8 fcb6 	bl	8004efa <_fstat>
 800c58e:	1c43      	adds	r3, r0, #1
 800c590:	d103      	bne.n	800c59a <_fstat_r+0x1e>
 800c592:	682b      	ldr	r3, [r5, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d000      	beq.n	800c59a <_fstat_r+0x1e>
 800c598:	6023      	str	r3, [r4, #0]
 800c59a:	bd70      	pop	{r4, r5, r6, pc}
 800c59c:	2000111c 	.word	0x2000111c

0800c5a0 <_isatty_r>:
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	b570      	push	{r4, r5, r6, lr}
 800c5a4:	4d06      	ldr	r5, [pc, #24]	; (800c5c0 <_isatty_r+0x20>)
 800c5a6:	0004      	movs	r4, r0
 800c5a8:	0008      	movs	r0, r1
 800c5aa:	602b      	str	r3, [r5, #0]
 800c5ac:	f7f8 fcaa 	bl	8004f04 <_isatty>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d103      	bne.n	800c5bc <_isatty_r+0x1c>
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d000      	beq.n	800c5bc <_isatty_r+0x1c>
 800c5ba:	6023      	str	r3, [r4, #0]
 800c5bc:	bd70      	pop	{r4, r5, r6, pc}
 800c5be:	46c0      	nop			; (mov r8, r8)
 800c5c0:	2000111c 	.word	0x2000111c

0800c5c4 <_lseek_r>:
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	0004      	movs	r4, r0
 800c5c8:	0008      	movs	r0, r1
 800c5ca:	0011      	movs	r1, r2
 800c5cc:	001a      	movs	r2, r3
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	4d05      	ldr	r5, [pc, #20]	; (800c5e8 <_lseek_r+0x24>)
 800c5d2:	602b      	str	r3, [r5, #0]
 800c5d4:	f7f8 fc98 	bl	8004f08 <_lseek>
 800c5d8:	1c43      	adds	r3, r0, #1
 800c5da:	d103      	bne.n	800c5e4 <_lseek_r+0x20>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d000      	beq.n	800c5e4 <_lseek_r+0x20>
 800c5e2:	6023      	str	r3, [r4, #0]
 800c5e4:	bd70      	pop	{r4, r5, r6, pc}
 800c5e6:	46c0      	nop			; (mov r8, r8)
 800c5e8:	2000111c 	.word	0x2000111c

0800c5ec <_read_r>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	0004      	movs	r4, r0
 800c5f0:	0008      	movs	r0, r1
 800c5f2:	0011      	movs	r1, r2
 800c5f4:	001a      	movs	r2, r3
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	4d05      	ldr	r5, [pc, #20]	; (800c610 <_read_r+0x24>)
 800c5fa:	602b      	str	r3, [r5, #0]
 800c5fc:	f7f8 fc60 	bl	8004ec0 <_read>
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d103      	bne.n	800c60c <_read_r+0x20>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d000      	beq.n	800c60c <_read_r+0x20>
 800c60a:	6023      	str	r3, [r4, #0]
 800c60c:	bd70      	pop	{r4, r5, r6, pc}
 800c60e:	46c0      	nop			; (mov r8, r8)
 800c610:	2000111c 	.word	0x2000111c

0800c614 <sinf>:
 800c614:	b507      	push	{r0, r1, r2, lr}
 800c616:	4a1a      	ldr	r2, [pc, #104]	; (800c680 <sinf+0x6c>)
 800c618:	0043      	lsls	r3, r0, #1
 800c61a:	085b      	lsrs	r3, r3, #1
 800c61c:	4293      	cmp	r3, r2
 800c61e:	dc04      	bgt.n	800c62a <sinf+0x16>
 800c620:	2200      	movs	r2, #0
 800c622:	2100      	movs	r1, #0
 800c624:	f000 fd3e 	bl	800d0a4 <__kernel_sinf>
 800c628:	e006      	b.n	800c638 <sinf+0x24>
 800c62a:	22ff      	movs	r2, #255	; 0xff
 800c62c:	05d2      	lsls	r2, r2, #23
 800c62e:	4293      	cmp	r3, r2
 800c630:	db03      	blt.n	800c63a <sinf+0x26>
 800c632:	1c01      	adds	r1, r0, #0
 800c634:	f7f4 fcfa 	bl	800102c <__aeabi_fsub>
 800c638:	bd0e      	pop	{r1, r2, r3, pc}
 800c63a:	4669      	mov	r1, sp
 800c63c:	f000 f846 	bl	800c6cc <__ieee754_rem_pio2f>
 800c640:	2303      	movs	r3, #3
 800c642:	4018      	ands	r0, r3
 800c644:	2801      	cmp	r0, #1
 800c646:	d007      	beq.n	800c658 <sinf+0x44>
 800c648:	2802      	cmp	r0, #2
 800c64a:	d00a      	beq.n	800c662 <sinf+0x4e>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d111      	bne.n	800c674 <sinf+0x60>
 800c650:	2201      	movs	r2, #1
 800c652:	9901      	ldr	r1, [sp, #4]
 800c654:	9800      	ldr	r0, [sp, #0]
 800c656:	e7e5      	b.n	800c624 <sinf+0x10>
 800c658:	9901      	ldr	r1, [sp, #4]
 800c65a:	9800      	ldr	r0, [sp, #0]
 800c65c:	f000 f9ea 	bl	800ca34 <__kernel_cosf>
 800c660:	e7ea      	b.n	800c638 <sinf+0x24>
 800c662:	2201      	movs	r2, #1
 800c664:	9901      	ldr	r1, [sp, #4]
 800c666:	9800      	ldr	r0, [sp, #0]
 800c668:	f000 fd1c 	bl	800d0a4 <__kernel_sinf>
 800c66c:	2380      	movs	r3, #128	; 0x80
 800c66e:	061b      	lsls	r3, r3, #24
 800c670:	18c0      	adds	r0, r0, r3
 800c672:	e7e1      	b.n	800c638 <sinf+0x24>
 800c674:	9901      	ldr	r1, [sp, #4]
 800c676:	9800      	ldr	r0, [sp, #0]
 800c678:	f000 f9dc 	bl	800ca34 <__kernel_cosf>
 800c67c:	e7f6      	b.n	800c66c <sinf+0x58>
 800c67e:	46c0      	nop			; (mov r8, r8)
 800c680:	3f490fd8 	.word	0x3f490fd8

0800c684 <sqrtf>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	1c05      	adds	r5, r0, #0
 800c688:	f000 f97c 	bl	800c984 <__ieee754_sqrtf>
 800c68c:	4b0e      	ldr	r3, [pc, #56]	; (800c6c8 <sqrtf+0x44>)
 800c68e:	1c04      	adds	r4, r0, #0
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	b25b      	sxtb	r3, r3
 800c694:	3301      	adds	r3, #1
 800c696:	d014      	beq.n	800c6c2 <sqrtf+0x3e>
 800c698:	1c29      	adds	r1, r5, #0
 800c69a:	1c28      	adds	r0, r5, #0
 800c69c:	f7f4 fe8e 	bl	80013bc <__aeabi_fcmpun>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d10e      	bne.n	800c6c2 <sqrtf+0x3e>
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	1c28      	adds	r0, r5, #0
 800c6a8:	f7f3 ff0e 	bl	80004c8 <__aeabi_fcmplt>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d008      	beq.n	800c6c2 <sqrtf+0x3e>
 800c6b0:	f7fd f832 	bl	8009718 <__errno>
 800c6b4:	2321      	movs	r3, #33	; 0x21
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	6003      	str	r3, [r0, #0]
 800c6ba:	1c08      	adds	r0, r1, #0
 800c6bc:	f7f4 f9d2 	bl	8000a64 <__aeabi_fdiv>
 800c6c0:	1c04      	adds	r4, r0, #0
 800c6c2:	1c20      	adds	r0, r4, #0
 800c6c4:	bd70      	pop	{r4, r5, r6, pc}
 800c6c6:	46c0      	nop			; (mov r8, r8)
 800c6c8:	20000254 	.word	0x20000254

0800c6cc <__ieee754_rem_pio2f>:
 800c6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ce:	4ba0      	ldr	r3, [pc, #640]	; (800c950 <__ieee754_rem_pio2f+0x284>)
 800c6d0:	b08b      	sub	sp, #44	; 0x2c
 800c6d2:	0045      	lsls	r5, r0, #1
 800c6d4:	000c      	movs	r4, r1
 800c6d6:	9005      	str	r0, [sp, #20]
 800c6d8:	086d      	lsrs	r5, r5, #1
 800c6da:	429d      	cmp	r5, r3
 800c6dc:	dc04      	bgt.n	800c6e8 <__ieee754_rem_pio2f+0x1c>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	6008      	str	r0, [r1, #0]
 800c6e2:	604b      	str	r3, [r1, #4]
 800c6e4:	2700      	movs	r7, #0
 800c6e6:	e01a      	b.n	800c71e <__ieee754_rem_pio2f+0x52>
 800c6e8:	4b9a      	ldr	r3, [pc, #616]	; (800c954 <__ieee754_rem_pio2f+0x288>)
 800c6ea:	429d      	cmp	r5, r3
 800c6ec:	dc4a      	bgt.n	800c784 <__ieee754_rem_pio2f+0xb8>
 800c6ee:	230f      	movs	r3, #15
 800c6f0:	4e99      	ldr	r6, [pc, #612]	; (800c958 <__ieee754_rem_pio2f+0x28c>)
 800c6f2:	499a      	ldr	r1, [pc, #616]	; (800c95c <__ieee754_rem_pio2f+0x290>)
 800c6f4:	439d      	bics	r5, r3
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	dd22      	ble.n	800c740 <__ieee754_rem_pio2f+0x74>
 800c6fa:	f7f4 fc97 	bl	800102c <__aeabi_fsub>
 800c6fe:	1c07      	adds	r7, r0, #0
 800c700:	42b5      	cmp	r5, r6
 800c702:	d00f      	beq.n	800c724 <__ieee754_rem_pio2f+0x58>
 800c704:	4996      	ldr	r1, [pc, #600]	; (800c960 <__ieee754_rem_pio2f+0x294>)
 800c706:	f7f4 fc91 	bl	800102c <__aeabi_fsub>
 800c70a:	1c01      	adds	r1, r0, #0
 800c70c:	6020      	str	r0, [r4, #0]
 800c70e:	1c38      	adds	r0, r7, #0
 800c710:	f7f4 fc8c 	bl	800102c <__aeabi_fsub>
 800c714:	4992      	ldr	r1, [pc, #584]	; (800c960 <__ieee754_rem_pio2f+0x294>)
 800c716:	f7f4 fc89 	bl	800102c <__aeabi_fsub>
 800c71a:	2701      	movs	r7, #1
 800c71c:	6060      	str	r0, [r4, #4]
 800c71e:	0038      	movs	r0, r7
 800c720:	b00b      	add	sp, #44	; 0x2c
 800c722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c724:	498f      	ldr	r1, [pc, #572]	; (800c964 <__ieee754_rem_pio2f+0x298>)
 800c726:	f7f4 fc81 	bl	800102c <__aeabi_fsub>
 800c72a:	498f      	ldr	r1, [pc, #572]	; (800c968 <__ieee754_rem_pio2f+0x29c>)
 800c72c:	1c05      	adds	r5, r0, #0
 800c72e:	f7f4 fc7d 	bl	800102c <__aeabi_fsub>
 800c732:	1c01      	adds	r1, r0, #0
 800c734:	6020      	str	r0, [r4, #0]
 800c736:	1c28      	adds	r0, r5, #0
 800c738:	f7f4 fc78 	bl	800102c <__aeabi_fsub>
 800c73c:	498a      	ldr	r1, [pc, #552]	; (800c968 <__ieee754_rem_pio2f+0x29c>)
 800c73e:	e7ea      	b.n	800c716 <__ieee754_rem_pio2f+0x4a>
 800c740:	f7f3 fff4 	bl	800072c <__aeabi_fadd>
 800c744:	1c07      	adds	r7, r0, #0
 800c746:	42b5      	cmp	r5, r6
 800c748:	d00e      	beq.n	800c768 <__ieee754_rem_pio2f+0x9c>
 800c74a:	4985      	ldr	r1, [pc, #532]	; (800c960 <__ieee754_rem_pio2f+0x294>)
 800c74c:	f7f3 ffee 	bl	800072c <__aeabi_fadd>
 800c750:	1c01      	adds	r1, r0, #0
 800c752:	6020      	str	r0, [r4, #0]
 800c754:	1c38      	adds	r0, r7, #0
 800c756:	f7f4 fc69 	bl	800102c <__aeabi_fsub>
 800c75a:	4981      	ldr	r1, [pc, #516]	; (800c960 <__ieee754_rem_pio2f+0x294>)
 800c75c:	f7f3 ffe6 	bl	800072c <__aeabi_fadd>
 800c760:	2701      	movs	r7, #1
 800c762:	6060      	str	r0, [r4, #4]
 800c764:	427f      	negs	r7, r7
 800c766:	e7da      	b.n	800c71e <__ieee754_rem_pio2f+0x52>
 800c768:	497e      	ldr	r1, [pc, #504]	; (800c964 <__ieee754_rem_pio2f+0x298>)
 800c76a:	f7f3 ffdf 	bl	800072c <__aeabi_fadd>
 800c76e:	497e      	ldr	r1, [pc, #504]	; (800c968 <__ieee754_rem_pio2f+0x29c>)
 800c770:	1c05      	adds	r5, r0, #0
 800c772:	f7f3 ffdb 	bl	800072c <__aeabi_fadd>
 800c776:	1c01      	adds	r1, r0, #0
 800c778:	6020      	str	r0, [r4, #0]
 800c77a:	1c28      	adds	r0, r5, #0
 800c77c:	f7f4 fc56 	bl	800102c <__aeabi_fsub>
 800c780:	4979      	ldr	r1, [pc, #484]	; (800c968 <__ieee754_rem_pio2f+0x29c>)
 800c782:	e7eb      	b.n	800c75c <__ieee754_rem_pio2f+0x90>
 800c784:	4b79      	ldr	r3, [pc, #484]	; (800c96c <__ieee754_rem_pio2f+0x2a0>)
 800c786:	429d      	cmp	r5, r3
 800c788:	dd00      	ble.n	800c78c <__ieee754_rem_pio2f+0xc0>
 800c78a:	e091      	b.n	800c8b0 <__ieee754_rem_pio2f+0x1e4>
 800c78c:	f000 fcfe 	bl	800d18c <fabsf>
 800c790:	4977      	ldr	r1, [pc, #476]	; (800c970 <__ieee754_rem_pio2f+0x2a4>)
 800c792:	1c06      	adds	r6, r0, #0
 800c794:	f7f4 fb30 	bl	8000df8 <__aeabi_fmul>
 800c798:	21fc      	movs	r1, #252	; 0xfc
 800c79a:	0589      	lsls	r1, r1, #22
 800c79c:	f7f3 ffc6 	bl	800072c <__aeabi_fadd>
 800c7a0:	f7f4 fe22 	bl	80013e8 <__aeabi_f2iz>
 800c7a4:	0007      	movs	r7, r0
 800c7a6:	f7f4 fe3f 	bl	8001428 <__aeabi_i2f>
 800c7aa:	496c      	ldr	r1, [pc, #432]	; (800c95c <__ieee754_rem_pio2f+0x290>)
 800c7ac:	9003      	str	r0, [sp, #12]
 800c7ae:	f7f4 fb23 	bl	8000df8 <__aeabi_fmul>
 800c7b2:	1c01      	adds	r1, r0, #0
 800c7b4:	1c30      	adds	r0, r6, #0
 800c7b6:	f7f4 fc39 	bl	800102c <__aeabi_fsub>
 800c7ba:	4969      	ldr	r1, [pc, #420]	; (800c960 <__ieee754_rem_pio2f+0x294>)
 800c7bc:	9002      	str	r0, [sp, #8]
 800c7be:	9803      	ldr	r0, [sp, #12]
 800c7c0:	f7f4 fb1a 	bl	8000df8 <__aeabi_fmul>
 800c7c4:	1c06      	adds	r6, r0, #0
 800c7c6:	2f1f      	cmp	r7, #31
 800c7c8:	dc0d      	bgt.n	800c7e6 <__ieee754_rem_pio2f+0x11a>
 800c7ca:	23ff      	movs	r3, #255	; 0xff
 800c7cc:	002a      	movs	r2, r5
 800c7ce:	4969      	ldr	r1, [pc, #420]	; (800c974 <__ieee754_rem_pio2f+0x2a8>)
 800c7d0:	439a      	bics	r2, r3
 800c7d2:	1e7b      	subs	r3, r7, #1
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	585b      	ldr	r3, [r3, r1]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d004      	beq.n	800c7e6 <__ieee754_rem_pio2f+0x11a>
 800c7dc:	9802      	ldr	r0, [sp, #8]
 800c7de:	1c31      	adds	r1, r6, #0
 800c7e0:	f7f4 fc24 	bl	800102c <__aeabi_fsub>
 800c7e4:	e00c      	b.n	800c800 <__ieee754_rem_pio2f+0x134>
 800c7e6:	9802      	ldr	r0, [sp, #8]
 800c7e8:	1c31      	adds	r1, r6, #0
 800c7ea:	f7f4 fc1f 	bl	800102c <__aeabi_fsub>
 800c7ee:	22ff      	movs	r2, #255	; 0xff
 800c7f0:	15eb      	asrs	r3, r5, #23
 800c7f2:	9304      	str	r3, [sp, #16]
 800c7f4:	0dc3      	lsrs	r3, r0, #23
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	9a04      	ldr	r2, [sp, #16]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	2b08      	cmp	r3, #8
 800c7fe:	dc01      	bgt.n	800c804 <__ieee754_rem_pio2f+0x138>
 800c800:	6020      	str	r0, [r4, #0]
 800c802:	e026      	b.n	800c852 <__ieee754_rem_pio2f+0x186>
 800c804:	4957      	ldr	r1, [pc, #348]	; (800c964 <__ieee754_rem_pio2f+0x298>)
 800c806:	9803      	ldr	r0, [sp, #12]
 800c808:	f7f4 faf6 	bl	8000df8 <__aeabi_fmul>
 800c80c:	1c06      	adds	r6, r0, #0
 800c80e:	1c01      	adds	r1, r0, #0
 800c810:	9802      	ldr	r0, [sp, #8]
 800c812:	f7f4 fc0b 	bl	800102c <__aeabi_fsub>
 800c816:	1c01      	adds	r1, r0, #0
 800c818:	1c05      	adds	r5, r0, #0
 800c81a:	9802      	ldr	r0, [sp, #8]
 800c81c:	f7f4 fc06 	bl	800102c <__aeabi_fsub>
 800c820:	1c31      	adds	r1, r6, #0
 800c822:	f7f4 fc03 	bl	800102c <__aeabi_fsub>
 800c826:	4950      	ldr	r1, [pc, #320]	; (800c968 <__ieee754_rem_pio2f+0x29c>)
 800c828:	1c06      	adds	r6, r0, #0
 800c82a:	9803      	ldr	r0, [sp, #12]
 800c82c:	f7f4 fae4 	bl	8000df8 <__aeabi_fmul>
 800c830:	1c31      	adds	r1, r6, #0
 800c832:	f7f4 fbfb 	bl	800102c <__aeabi_fsub>
 800c836:	1c01      	adds	r1, r0, #0
 800c838:	1c06      	adds	r6, r0, #0
 800c83a:	1c28      	adds	r0, r5, #0
 800c83c:	f7f4 fbf6 	bl	800102c <__aeabi_fsub>
 800c840:	22ff      	movs	r2, #255	; 0xff
 800c842:	0dc3      	lsrs	r3, r0, #23
 800c844:	4013      	ands	r3, r2
 800c846:	9a04      	ldr	r2, [sp, #16]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	2b19      	cmp	r3, #25
 800c84c:	dc15      	bgt.n	800c87a <__ieee754_rem_pio2f+0x1ae>
 800c84e:	6020      	str	r0, [r4, #0]
 800c850:	9502      	str	r5, [sp, #8]
 800c852:	6825      	ldr	r5, [r4, #0]
 800c854:	9802      	ldr	r0, [sp, #8]
 800c856:	1c29      	adds	r1, r5, #0
 800c858:	f7f4 fbe8 	bl	800102c <__aeabi_fsub>
 800c85c:	1c31      	adds	r1, r6, #0
 800c85e:	f7f4 fbe5 	bl	800102c <__aeabi_fsub>
 800c862:	9b05      	ldr	r3, [sp, #20]
 800c864:	6060      	str	r0, [r4, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	db00      	blt.n	800c86c <__ieee754_rem_pio2f+0x1a0>
 800c86a:	e758      	b.n	800c71e <__ieee754_rem_pio2f+0x52>
 800c86c:	2380      	movs	r3, #128	; 0x80
 800c86e:	061b      	lsls	r3, r3, #24
 800c870:	18ed      	adds	r5, r5, r3
 800c872:	18c0      	adds	r0, r0, r3
 800c874:	6025      	str	r5, [r4, #0]
 800c876:	6060      	str	r0, [r4, #4]
 800c878:	e774      	b.n	800c764 <__ieee754_rem_pio2f+0x98>
 800c87a:	493f      	ldr	r1, [pc, #252]	; (800c978 <__ieee754_rem_pio2f+0x2ac>)
 800c87c:	9803      	ldr	r0, [sp, #12]
 800c87e:	f7f4 fabb 	bl	8000df8 <__aeabi_fmul>
 800c882:	1c06      	adds	r6, r0, #0
 800c884:	1c01      	adds	r1, r0, #0
 800c886:	1c28      	adds	r0, r5, #0
 800c888:	f7f4 fbd0 	bl	800102c <__aeabi_fsub>
 800c88c:	1c01      	adds	r1, r0, #0
 800c88e:	9002      	str	r0, [sp, #8]
 800c890:	1c28      	adds	r0, r5, #0
 800c892:	f7f4 fbcb 	bl	800102c <__aeabi_fsub>
 800c896:	1c31      	adds	r1, r6, #0
 800c898:	f7f4 fbc8 	bl	800102c <__aeabi_fsub>
 800c89c:	4937      	ldr	r1, [pc, #220]	; (800c97c <__ieee754_rem_pio2f+0x2b0>)
 800c89e:	1c05      	adds	r5, r0, #0
 800c8a0:	9803      	ldr	r0, [sp, #12]
 800c8a2:	f7f4 faa9 	bl	8000df8 <__aeabi_fmul>
 800c8a6:	1c29      	adds	r1, r5, #0
 800c8a8:	f7f4 fbc0 	bl	800102c <__aeabi_fsub>
 800c8ac:	1c06      	adds	r6, r0, #0
 800c8ae:	e795      	b.n	800c7dc <__ieee754_rem_pio2f+0x110>
 800c8b0:	23ff      	movs	r3, #255	; 0xff
 800c8b2:	05db      	lsls	r3, r3, #23
 800c8b4:	429d      	cmp	r5, r3
 800c8b6:	db05      	blt.n	800c8c4 <__ieee754_rem_pio2f+0x1f8>
 800c8b8:	1c01      	adds	r1, r0, #0
 800c8ba:	f7f4 fbb7 	bl	800102c <__aeabi_fsub>
 800c8be:	6060      	str	r0, [r4, #4]
 800c8c0:	6020      	str	r0, [r4, #0]
 800c8c2:	e70f      	b.n	800c6e4 <__ieee754_rem_pio2f+0x18>
 800c8c4:	15ee      	asrs	r6, r5, #23
 800c8c6:	3e86      	subs	r6, #134	; 0x86
 800c8c8:	05f3      	lsls	r3, r6, #23
 800c8ca:	1aed      	subs	r5, r5, r3
 800c8cc:	1c28      	adds	r0, r5, #0
 800c8ce:	f7f4 fd8b 	bl	80013e8 <__aeabi_f2iz>
 800c8d2:	f7f4 fda9 	bl	8001428 <__aeabi_i2f>
 800c8d6:	1c01      	adds	r1, r0, #0
 800c8d8:	9007      	str	r0, [sp, #28]
 800c8da:	1c28      	adds	r0, r5, #0
 800c8dc:	f7f4 fba6 	bl	800102c <__aeabi_fsub>
 800c8e0:	2187      	movs	r1, #135	; 0x87
 800c8e2:	05c9      	lsls	r1, r1, #23
 800c8e4:	f7f4 fa88 	bl	8000df8 <__aeabi_fmul>
 800c8e8:	1c07      	adds	r7, r0, #0
 800c8ea:	f7f4 fd7d 	bl	80013e8 <__aeabi_f2iz>
 800c8ee:	f7f4 fd9b 	bl	8001428 <__aeabi_i2f>
 800c8f2:	1c01      	adds	r1, r0, #0
 800c8f4:	9008      	str	r0, [sp, #32]
 800c8f6:	1c05      	adds	r5, r0, #0
 800c8f8:	1c38      	adds	r0, r7, #0
 800c8fa:	f7f4 fb97 	bl	800102c <__aeabi_fsub>
 800c8fe:	2187      	movs	r1, #135	; 0x87
 800c900:	05c9      	lsls	r1, r1, #23
 800c902:	f7f4 fa79 	bl	8000df8 <__aeabi_fmul>
 800c906:	2100      	movs	r1, #0
 800c908:	9009      	str	r0, [sp, #36]	; 0x24
 800c90a:	f7f3 fdd7 	bl	80004bc <__aeabi_fcmpeq>
 800c90e:	2303      	movs	r3, #3
 800c910:	2800      	cmp	r0, #0
 800c912:	d006      	beq.n	800c922 <__ieee754_rem_pio2f+0x256>
 800c914:	2100      	movs	r1, #0
 800c916:	1c28      	adds	r0, r5, #0
 800c918:	f7f3 fdd0 	bl	80004bc <__aeabi_fcmpeq>
 800c91c:	4243      	negs	r3, r0
 800c91e:	4143      	adcs	r3, r0
 800c920:	3301      	adds	r3, #1
 800c922:	4a17      	ldr	r2, [pc, #92]	; (800c980 <__ieee754_rem_pio2f+0x2b4>)
 800c924:	0021      	movs	r1, r4
 800c926:	9201      	str	r2, [sp, #4]
 800c928:	2202      	movs	r2, #2
 800c92a:	a807      	add	r0, sp, #28
 800c92c:	9200      	str	r2, [sp, #0]
 800c92e:	0032      	movs	r2, r6
 800c930:	f000 f900 	bl	800cb34 <__kernel_rem_pio2f>
 800c934:	9b05      	ldr	r3, [sp, #20]
 800c936:	0007      	movs	r7, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	db00      	blt.n	800c93e <__ieee754_rem_pio2f+0x272>
 800c93c:	e6ef      	b.n	800c71e <__ieee754_rem_pio2f+0x52>
 800c93e:	2280      	movs	r2, #128	; 0x80
 800c940:	6823      	ldr	r3, [r4, #0]
 800c942:	0612      	lsls	r2, r2, #24
 800c944:	189b      	adds	r3, r3, r2
 800c946:	6023      	str	r3, [r4, #0]
 800c948:	6863      	ldr	r3, [r4, #4]
 800c94a:	189b      	adds	r3, r3, r2
 800c94c:	6063      	str	r3, [r4, #4]
 800c94e:	e709      	b.n	800c764 <__ieee754_rem_pio2f+0x98>
 800c950:	3f490fd8 	.word	0x3f490fd8
 800c954:	4016cbe3 	.word	0x4016cbe3
 800c958:	3fc90fd0 	.word	0x3fc90fd0
 800c95c:	3fc90f80 	.word	0x3fc90f80
 800c960:	37354443 	.word	0x37354443
 800c964:	37354400 	.word	0x37354400
 800c968:	2e85a308 	.word	0x2e85a308
 800c96c:	43490f80 	.word	0x43490f80
 800c970:	3f22f984 	.word	0x3f22f984
 800c974:	0800e29c 	.word	0x0800e29c
 800c978:	2e85a300 	.word	0x2e85a300
 800c97c:	248d3132 	.word	0x248d3132
 800c980:	0800e31c 	.word	0x0800e31c

0800c984 <__ieee754_sqrtf>:
 800c984:	0042      	lsls	r2, r0, #1
 800c986:	0003      	movs	r3, r0
 800c988:	b570      	push	{r4, r5, r6, lr}
 800c98a:	1c04      	adds	r4, r0, #0
 800c98c:	20ff      	movs	r0, #255	; 0xff
 800c98e:	0852      	lsrs	r2, r2, #1
 800c990:	05c0      	lsls	r0, r0, #23
 800c992:	4282      	cmp	r2, r0
 800c994:	d30a      	bcc.n	800c9ac <__ieee754_sqrtf+0x28>
 800c996:	1c21      	adds	r1, r4, #0
 800c998:	1c20      	adds	r0, r4, #0
 800c99a:	f7f4 fa2d 	bl	8000df8 <__aeabi_fmul>
 800c99e:	1c01      	adds	r1, r0, #0
 800c9a0:	1c20      	adds	r0, r4, #0
 800c9a2:	f7f3 fec3 	bl	800072c <__aeabi_fadd>
 800c9a6:	1c04      	adds	r4, r0, #0
 800c9a8:	1c20      	adds	r0, r4, #0
 800c9aa:	bd70      	pop	{r4, r5, r6, pc}
 800c9ac:	2a00      	cmp	r2, #0
 800c9ae:	d0fb      	beq.n	800c9a8 <__ieee754_sqrtf+0x24>
 800c9b0:	2c00      	cmp	r4, #0
 800c9b2:	da07      	bge.n	800c9c4 <__ieee754_sqrtf+0x40>
 800c9b4:	1c21      	adds	r1, r4, #0
 800c9b6:	1c20      	adds	r0, r4, #0
 800c9b8:	f7f4 fb38 	bl	800102c <__aeabi_fsub>
 800c9bc:	1c01      	adds	r1, r0, #0
 800c9be:	f7f4 f851 	bl	8000a64 <__aeabi_fdiv>
 800c9c2:	e7f0      	b.n	800c9a6 <__ieee754_sqrtf+0x22>
 800c9c4:	0022      	movs	r2, r4
 800c9c6:	15e1      	asrs	r1, r4, #23
 800c9c8:	4002      	ands	r2, r0
 800c9ca:	4204      	tst	r4, r0
 800c9cc:	d02e      	beq.n	800ca2c <__ieee754_sqrtf+0xa8>
 800c9ce:	2280      	movs	r2, #128	; 0x80
 800c9d0:	000c      	movs	r4, r1
 800c9d2:	025b      	lsls	r3, r3, #9
 800c9d4:	0a5b      	lsrs	r3, r3, #9
 800c9d6:	0412      	lsls	r2, r2, #16
 800c9d8:	3c7f      	subs	r4, #127	; 0x7f
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	07ca      	lsls	r2, r1, #31
 800c9de:	d400      	bmi.n	800c9e2 <__ieee754_sqrtf+0x5e>
 800c9e0:	005b      	lsls	r3, r3, #1
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	2180      	movs	r1, #128	; 0x80
 800c9e6:	2019      	movs	r0, #25
 800c9e8:	0016      	movs	r6, r2
 800c9ea:	1064      	asrs	r4, r4, #1
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	0449      	lsls	r1, r1, #17
 800c9f0:	1875      	adds	r5, r6, r1
 800c9f2:	429d      	cmp	r5, r3
 800c9f4:	dc02      	bgt.n	800c9fc <__ieee754_sqrtf+0x78>
 800c9f6:	186e      	adds	r6, r5, r1
 800c9f8:	1b5b      	subs	r3, r3, r5
 800c9fa:	1852      	adds	r2, r2, r1
 800c9fc:	3801      	subs	r0, #1
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	0849      	lsrs	r1, r1, #1
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d1f4      	bne.n	800c9f0 <__ieee754_sqrtf+0x6c>
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d002      	beq.n	800ca10 <__ieee754_sqrtf+0x8c>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	3201      	adds	r2, #1
 800ca0e:	439a      	bics	r2, r3
 800ca10:	23fc      	movs	r3, #252	; 0xfc
 800ca12:	1052      	asrs	r2, r2, #1
 800ca14:	059b      	lsls	r3, r3, #22
 800ca16:	18d2      	adds	r2, r2, r3
 800ca18:	05e4      	lsls	r4, r4, #23
 800ca1a:	18a4      	adds	r4, r4, r2
 800ca1c:	e7c4      	b.n	800c9a8 <__ieee754_sqrtf+0x24>
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	3201      	adds	r2, #1
 800ca22:	4203      	tst	r3, r0
 800ca24:	d0fb      	beq.n	800ca1e <__ieee754_sqrtf+0x9a>
 800ca26:	3a01      	subs	r2, #1
 800ca28:	1a89      	subs	r1, r1, r2
 800ca2a:	e7d0      	b.n	800c9ce <__ieee754_sqrtf+0x4a>
 800ca2c:	2080      	movs	r0, #128	; 0x80
 800ca2e:	0400      	lsls	r0, r0, #16
 800ca30:	e7f7      	b.n	800ca22 <__ieee754_sqrtf+0x9e>
	...

0800ca34 <__kernel_cosf>:
 800ca34:	23c8      	movs	r3, #200	; 0xc8
 800ca36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca38:	0044      	lsls	r4, r0, #1
 800ca3a:	1c06      	adds	r6, r0, #0
 800ca3c:	9101      	str	r1, [sp, #4]
 800ca3e:	0864      	lsrs	r4, r4, #1
 800ca40:	059b      	lsls	r3, r3, #22
 800ca42:	429c      	cmp	r4, r3
 800ca44:	da03      	bge.n	800ca4e <__kernel_cosf+0x1a>
 800ca46:	f7f4 fccf 	bl	80013e8 <__aeabi_f2iz>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d05d      	beq.n	800cb0a <__kernel_cosf+0xd6>
 800ca4e:	1c31      	adds	r1, r6, #0
 800ca50:	1c30      	adds	r0, r6, #0
 800ca52:	f7f4 f9d1 	bl	8000df8 <__aeabi_fmul>
 800ca56:	21fc      	movs	r1, #252	; 0xfc
 800ca58:	0589      	lsls	r1, r1, #22
 800ca5a:	1c05      	adds	r5, r0, #0
 800ca5c:	f7f4 f9cc 	bl	8000df8 <__aeabi_fmul>
 800ca60:	492b      	ldr	r1, [pc, #172]	; (800cb10 <__kernel_cosf+0xdc>)
 800ca62:	1c07      	adds	r7, r0, #0
 800ca64:	1c28      	adds	r0, r5, #0
 800ca66:	f7f4 f9c7 	bl	8000df8 <__aeabi_fmul>
 800ca6a:	492a      	ldr	r1, [pc, #168]	; (800cb14 <__kernel_cosf+0xe0>)
 800ca6c:	f7f3 fe5e 	bl	800072c <__aeabi_fadd>
 800ca70:	1c29      	adds	r1, r5, #0
 800ca72:	f7f4 f9c1 	bl	8000df8 <__aeabi_fmul>
 800ca76:	4928      	ldr	r1, [pc, #160]	; (800cb18 <__kernel_cosf+0xe4>)
 800ca78:	f7f4 fad8 	bl	800102c <__aeabi_fsub>
 800ca7c:	1c29      	adds	r1, r5, #0
 800ca7e:	f7f4 f9bb 	bl	8000df8 <__aeabi_fmul>
 800ca82:	4926      	ldr	r1, [pc, #152]	; (800cb1c <__kernel_cosf+0xe8>)
 800ca84:	f7f3 fe52 	bl	800072c <__aeabi_fadd>
 800ca88:	1c29      	adds	r1, r5, #0
 800ca8a:	f7f4 f9b5 	bl	8000df8 <__aeabi_fmul>
 800ca8e:	4924      	ldr	r1, [pc, #144]	; (800cb20 <__kernel_cosf+0xec>)
 800ca90:	f7f4 facc 	bl	800102c <__aeabi_fsub>
 800ca94:	1c29      	adds	r1, r5, #0
 800ca96:	f7f4 f9af 	bl	8000df8 <__aeabi_fmul>
 800ca9a:	4922      	ldr	r1, [pc, #136]	; (800cb24 <__kernel_cosf+0xf0>)
 800ca9c:	f7f3 fe46 	bl	800072c <__aeabi_fadd>
 800caa0:	1c29      	adds	r1, r5, #0
 800caa2:	f7f4 f9a9 	bl	8000df8 <__aeabi_fmul>
 800caa6:	1c29      	adds	r1, r5, #0
 800caa8:	f7f4 f9a6 	bl	8000df8 <__aeabi_fmul>
 800caac:	9901      	ldr	r1, [sp, #4]
 800caae:	1c05      	adds	r5, r0, #0
 800cab0:	1c30      	adds	r0, r6, #0
 800cab2:	f7f4 f9a1 	bl	8000df8 <__aeabi_fmul>
 800cab6:	1c01      	adds	r1, r0, #0
 800cab8:	1c28      	adds	r0, r5, #0
 800caba:	f7f4 fab7 	bl	800102c <__aeabi_fsub>
 800cabe:	4b1a      	ldr	r3, [pc, #104]	; (800cb28 <__kernel_cosf+0xf4>)
 800cac0:	1c05      	adds	r5, r0, #0
 800cac2:	429c      	cmp	r4, r3
 800cac4:	dc09      	bgt.n	800cada <__kernel_cosf+0xa6>
 800cac6:	1c01      	adds	r1, r0, #0
 800cac8:	1c38      	adds	r0, r7, #0
 800caca:	f7f4 faaf 	bl	800102c <__aeabi_fsub>
 800cace:	1c01      	adds	r1, r0, #0
 800cad0:	20fe      	movs	r0, #254	; 0xfe
 800cad2:	0580      	lsls	r0, r0, #22
 800cad4:	f7f4 faaa 	bl	800102c <__aeabi_fsub>
 800cad8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cada:	4b14      	ldr	r3, [pc, #80]	; (800cb2c <__kernel_cosf+0xf8>)
 800cadc:	429c      	cmp	r4, r3
 800cade:	dc12      	bgt.n	800cb06 <__kernel_cosf+0xd2>
 800cae0:	23ff      	movs	r3, #255	; 0xff
 800cae2:	061b      	lsls	r3, r3, #24
 800cae4:	18e4      	adds	r4, r4, r3
 800cae6:	20fe      	movs	r0, #254	; 0xfe
 800cae8:	1c21      	adds	r1, r4, #0
 800caea:	0580      	lsls	r0, r0, #22
 800caec:	f7f4 fa9e 	bl	800102c <__aeabi_fsub>
 800caf0:	1c21      	adds	r1, r4, #0
 800caf2:	1c06      	adds	r6, r0, #0
 800caf4:	1c38      	adds	r0, r7, #0
 800caf6:	f7f4 fa99 	bl	800102c <__aeabi_fsub>
 800cafa:	1c29      	adds	r1, r5, #0
 800cafc:	f7f4 fa96 	bl	800102c <__aeabi_fsub>
 800cb00:	1c01      	adds	r1, r0, #0
 800cb02:	1c30      	adds	r0, r6, #0
 800cb04:	e7e6      	b.n	800cad4 <__kernel_cosf+0xa0>
 800cb06:	4c0a      	ldr	r4, [pc, #40]	; (800cb30 <__kernel_cosf+0xfc>)
 800cb08:	e7ed      	b.n	800cae6 <__kernel_cosf+0xb2>
 800cb0a:	20fe      	movs	r0, #254	; 0xfe
 800cb0c:	0580      	lsls	r0, r0, #22
 800cb0e:	e7e3      	b.n	800cad8 <__kernel_cosf+0xa4>
 800cb10:	ad47d74e 	.word	0xad47d74e
 800cb14:	310f74f6 	.word	0x310f74f6
 800cb18:	3493f27c 	.word	0x3493f27c
 800cb1c:	37d00d01 	.word	0x37d00d01
 800cb20:	3ab60b61 	.word	0x3ab60b61
 800cb24:	3d2aaaab 	.word	0x3d2aaaab
 800cb28:	3e999999 	.word	0x3e999999
 800cb2c:	3f480000 	.word	0x3f480000
 800cb30:	3e900000 	.word	0x3e900000

0800cb34 <__kernel_rem_pio2f>:
 800cb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb36:	b0df      	sub	sp, #380	; 0x17c
 800cb38:	930a      	str	r3, [sp, #40]	; 0x28
 800cb3a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800cb3c:	9207      	str	r2, [sp, #28]
 800cb3e:	009a      	lsls	r2, r3, #2
 800cb40:	4bcb      	ldr	r3, [pc, #812]	; (800ce70 <__kernel_rem_pio2f+0x33c>)
 800cb42:	9009      	str	r0, [sp, #36]	; 0x24
 800cb44:	58d3      	ldr	r3, [r2, r3]
 800cb46:	9103      	str	r1, [sp, #12]
 800cb48:	9304      	str	r3, [sp, #16]
 800cb4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	9306      	str	r3, [sp, #24]
 800cb50:	2300      	movs	r3, #0
 800cb52:	9302      	str	r3, [sp, #8]
 800cb54:	9b07      	ldr	r3, [sp, #28]
 800cb56:	3304      	adds	r3, #4
 800cb58:	db07      	blt.n	800cb6a <__kernel_rem_pio2f+0x36>
 800cb5a:	2107      	movs	r1, #7
 800cb5c:	9b07      	ldr	r3, [sp, #28]
 800cb5e:	1eda      	subs	r2, r3, #3
 800cb60:	17d3      	asrs	r3, r2, #31
 800cb62:	400b      	ands	r3, r1
 800cb64:	189b      	adds	r3, r3, r2
 800cb66:	10db      	asrs	r3, r3, #3
 800cb68:	9302      	str	r3, [sp, #8]
 800cb6a:	9b02      	ldr	r3, [sp, #8]
 800cb6c:	ae22      	add	r6, sp, #136	; 0x88
 800cb6e:	1c59      	adds	r1, r3, #1
 800cb70:	00cb      	lsls	r3, r1, #3
 800cb72:	9308      	str	r3, [sp, #32]
 800cb74:	9a08      	ldr	r2, [sp, #32]
 800cb76:	9b07      	ldr	r3, [sp, #28]
 800cb78:	1a9b      	subs	r3, r3, r2
 800cb7a:	9301      	str	r3, [sp, #4]
 800cb7c:	9a06      	ldr	r2, [sp, #24]
 800cb7e:	9b02      	ldr	r3, [sp, #8]
 800cb80:	1a9d      	subs	r5, r3, r2
 800cb82:	002c      	movs	r4, r5
 800cb84:	9b04      	ldr	r3, [sp, #16]
 800cb86:	189f      	adds	r7, r3, r2
 800cb88:	1b63      	subs	r3, r4, r5
 800cb8a:	429f      	cmp	r7, r3
 800cb8c:	da0e      	bge.n	800cbac <__kernel_rem_pio2f+0x78>
 800cb8e:	2700      	movs	r7, #0
 800cb90:	9b06      	ldr	r3, [sp, #24]
 800cb92:	9305      	str	r3, [sp, #20]
 800cb94:	ab23      	add	r3, sp, #140	; 0x8c
 800cb96:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb98:	9b04      	ldr	r3, [sp, #16]
 800cb9a:	429f      	cmp	r7, r3
 800cb9c:	dc2b      	bgt.n	800cbf6 <__kernel_rem_pio2f+0xc2>
 800cb9e:	9b05      	ldr	r3, [sp, #20]
 800cba0:	2400      	movs	r4, #0
 800cba2:	009d      	lsls	r5, r3, #2
 800cba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cba6:	2600      	movs	r6, #0
 800cba8:	195d      	adds	r5, r3, r5
 800cbaa:	e016      	b.n	800cbda <__kernel_rem_pio2f+0xa6>
 800cbac:	2000      	movs	r0, #0
 800cbae:	2c00      	cmp	r4, #0
 800cbb0:	db04      	blt.n	800cbbc <__kernel_rem_pio2f+0x88>
 800cbb2:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800cbb4:	00a3      	lsls	r3, r4, #2
 800cbb6:	58d0      	ldr	r0, [r2, r3]
 800cbb8:	f7f4 fc36 	bl	8001428 <__aeabi_i2f>
 800cbbc:	c601      	stmia	r6!, {r0}
 800cbbe:	3401      	adds	r4, #1
 800cbc0:	e7e2      	b.n	800cb88 <__kernel_rem_pio2f+0x54>
 800cbc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbc4:	00b3      	lsls	r3, r6, #2
 800cbc6:	6829      	ldr	r1, [r5, #0]
 800cbc8:	58d0      	ldr	r0, [r2, r3]
 800cbca:	f7f4 f915 	bl	8000df8 <__aeabi_fmul>
 800cbce:	1c01      	adds	r1, r0, #0
 800cbd0:	1c20      	adds	r0, r4, #0
 800cbd2:	f7f3 fdab 	bl	800072c <__aeabi_fadd>
 800cbd6:	3601      	adds	r6, #1
 800cbd8:	1c04      	adds	r4, r0, #0
 800cbda:	9b06      	ldr	r3, [sp, #24]
 800cbdc:	3d04      	subs	r5, #4
 800cbde:	429e      	cmp	r6, r3
 800cbe0:	ddef      	ble.n	800cbc2 <__kernel_rem_pio2f+0x8e>
 800cbe2:	21f0      	movs	r1, #240	; 0xf0
 800cbe4:	aa0e      	add	r2, sp, #56	; 0x38
 800cbe6:	00bb      	lsls	r3, r7, #2
 800cbe8:	1852      	adds	r2, r2, r1
 800cbea:	50d4      	str	r4, [r2, r3]
 800cbec:	9b05      	ldr	r3, [sp, #20]
 800cbee:	3701      	adds	r7, #1
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	9305      	str	r3, [sp, #20]
 800cbf4:	e7d0      	b.n	800cb98 <__kernel_rem_pio2f+0x64>
 800cbf6:	9b04      	ldr	r3, [sp, #16]
 800cbf8:	aa0e      	add	r2, sp, #56	; 0x38
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	189b      	adds	r3, r3, r2
 800cbfe:	930c      	str	r3, [sp, #48]	; 0x30
 800cc00:	9b02      	ldr	r3, [sp, #8]
 800cc02:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	18d3      	adds	r3, r2, r3
 800cc08:	9e04      	ldr	r6, [sp, #16]
 800cc0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc0c:	0035      	movs	r5, r6
 800cc0e:	aa4a      	add	r2, sp, #296	; 0x128
 800cc10:	00b3      	lsls	r3, r6, #2
 800cc12:	af0e      	add	r7, sp, #56	; 0x38
 800cc14:	589c      	ldr	r4, [r3, r2]
 800cc16:	9702      	str	r7, [sp, #8]
 800cc18:	920d      	str	r2, [sp, #52]	; 0x34
 800cc1a:	2d00      	cmp	r5, #0
 800cc1c:	dc64      	bgt.n	800cce8 <__kernel_rem_pio2f+0x1b4>
 800cc1e:	9901      	ldr	r1, [sp, #4]
 800cc20:	1c20      	adds	r0, r4, #0
 800cc22:	f000 faf5 	bl	800d210 <scalbnf>
 800cc26:	21f8      	movs	r1, #248	; 0xf8
 800cc28:	0589      	lsls	r1, r1, #22
 800cc2a:	1c04      	adds	r4, r0, #0
 800cc2c:	f7f4 f8e4 	bl	8000df8 <__aeabi_fmul>
 800cc30:	f000 fab0 	bl	800d194 <floorf>
 800cc34:	2182      	movs	r1, #130	; 0x82
 800cc36:	05c9      	lsls	r1, r1, #23
 800cc38:	f7f4 f8de 	bl	8000df8 <__aeabi_fmul>
 800cc3c:	1c01      	adds	r1, r0, #0
 800cc3e:	1c20      	adds	r0, r4, #0
 800cc40:	f7f4 f9f4 	bl	800102c <__aeabi_fsub>
 800cc44:	1c04      	adds	r4, r0, #0
 800cc46:	f7f4 fbcf 	bl	80013e8 <__aeabi_f2iz>
 800cc4a:	9005      	str	r0, [sp, #20]
 800cc4c:	f7f4 fbec 	bl	8001428 <__aeabi_i2f>
 800cc50:	1c01      	adds	r1, r0, #0
 800cc52:	1c20      	adds	r0, r4, #0
 800cc54:	f7f4 f9ea 	bl	800102c <__aeabi_fsub>
 800cc58:	9b01      	ldr	r3, [sp, #4]
 800cc5a:	1c04      	adds	r4, r0, #0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	dd63      	ble.n	800cd28 <__kernel_rem_pio2f+0x1f4>
 800cc60:	2108      	movs	r1, #8
 800cc62:	1e73      	subs	r3, r6, #1
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	aa0e      	add	r2, sp, #56	; 0x38
 800cc68:	589a      	ldr	r2, [r3, r2]
 800cc6a:	9801      	ldr	r0, [sp, #4]
 800cc6c:	9d05      	ldr	r5, [sp, #20]
 800cc6e:	1a09      	subs	r1, r1, r0
 800cc70:	0010      	movs	r0, r2
 800cc72:	4108      	asrs	r0, r1
 800cc74:	182d      	adds	r5, r5, r0
 800cc76:	4088      	lsls	r0, r1
 800cc78:	a90e      	add	r1, sp, #56	; 0x38
 800cc7a:	1a12      	subs	r2, r2, r0
 800cc7c:	505a      	str	r2, [r3, r1]
 800cc7e:	2307      	movs	r3, #7
 800cc80:	9901      	ldr	r1, [sp, #4]
 800cc82:	9505      	str	r5, [sp, #20]
 800cc84:	1a5b      	subs	r3, r3, r1
 800cc86:	411a      	asrs	r2, r3
 800cc88:	9202      	str	r2, [sp, #8]
 800cc8a:	9b02      	ldr	r3, [sp, #8]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	dd5c      	ble.n	800cd4a <__kernel_rem_pio2f+0x216>
 800cc90:	9b05      	ldr	r3, [sp, #20]
 800cc92:	2200      	movs	r2, #0
 800cc94:	3301      	adds	r3, #1
 800cc96:	9305      	str	r3, [sp, #20]
 800cc98:	2301      	movs	r3, #1
 800cc9a:	2080      	movs	r0, #128	; 0x80
 800cc9c:	0015      	movs	r5, r2
 800cc9e:	21ff      	movs	r1, #255	; 0xff
 800cca0:	469c      	mov	ip, r3
 800cca2:	0040      	lsls	r0, r0, #1
 800cca4:	4296      	cmp	r6, r2
 800cca6:	dd00      	ble.n	800ccaa <__kernel_rem_pio2f+0x176>
 800cca8:	e08f      	b.n	800cdca <__kernel_rem_pio2f+0x296>
 800ccaa:	9b01      	ldr	r3, [sp, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dd05      	ble.n	800ccbc <__kernel_rem_pio2f+0x188>
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d100      	bne.n	800ccb6 <__kernel_rem_pio2f+0x182>
 800ccb4:	e099      	b.n	800cdea <__kernel_rem_pio2f+0x2b6>
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d100      	bne.n	800ccbc <__kernel_rem_pio2f+0x188>
 800ccba:	e0a1      	b.n	800ce00 <__kernel_rem_pio2f+0x2cc>
 800ccbc:	9b02      	ldr	r3, [sp, #8]
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d143      	bne.n	800cd4a <__kernel_rem_pio2f+0x216>
 800ccc2:	20fe      	movs	r0, #254	; 0xfe
 800ccc4:	1c21      	adds	r1, r4, #0
 800ccc6:	0580      	lsls	r0, r0, #22
 800ccc8:	f7f4 f9b0 	bl	800102c <__aeabi_fsub>
 800cccc:	1c04      	adds	r4, r0, #0
 800ccce:	2d00      	cmp	r5, #0
 800ccd0:	d03b      	beq.n	800cd4a <__kernel_rem_pio2f+0x216>
 800ccd2:	20fe      	movs	r0, #254	; 0xfe
 800ccd4:	9901      	ldr	r1, [sp, #4]
 800ccd6:	0580      	lsls	r0, r0, #22
 800ccd8:	f000 fa9a 	bl	800d210 <scalbnf>
 800ccdc:	1c01      	adds	r1, r0, #0
 800ccde:	1c20      	adds	r0, r4, #0
 800cce0:	f7f4 f9a4 	bl	800102c <__aeabi_fsub>
 800cce4:	1c04      	adds	r4, r0, #0
 800cce6:	e030      	b.n	800cd4a <__kernel_rem_pio2f+0x216>
 800cce8:	21ee      	movs	r1, #238	; 0xee
 800ccea:	1c20      	adds	r0, r4, #0
 800ccec:	0589      	lsls	r1, r1, #22
 800ccee:	f7f4 f883 	bl	8000df8 <__aeabi_fmul>
 800ccf2:	f7f4 fb79 	bl	80013e8 <__aeabi_f2iz>
 800ccf6:	f7f4 fb97 	bl	8001428 <__aeabi_i2f>
 800ccfa:	2187      	movs	r1, #135	; 0x87
 800ccfc:	05c9      	lsls	r1, r1, #23
 800ccfe:	9005      	str	r0, [sp, #20]
 800cd00:	f7f4 f87a 	bl	8000df8 <__aeabi_fmul>
 800cd04:	1c01      	adds	r1, r0, #0
 800cd06:	1c20      	adds	r0, r4, #0
 800cd08:	f7f4 f990 	bl	800102c <__aeabi_fsub>
 800cd0c:	f7f4 fb6c 	bl	80013e8 <__aeabi_f2iz>
 800cd10:	9b02      	ldr	r3, [sp, #8]
 800cd12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd14:	c301      	stmia	r3!, {r0}
 800cd16:	3d01      	subs	r5, #1
 800cd18:	9302      	str	r3, [sp, #8]
 800cd1a:	00ab      	lsls	r3, r5, #2
 800cd1c:	5899      	ldr	r1, [r3, r2]
 800cd1e:	9805      	ldr	r0, [sp, #20]
 800cd20:	f7f3 fd04 	bl	800072c <__aeabi_fadd>
 800cd24:	1c04      	adds	r4, r0, #0
 800cd26:	e778      	b.n	800cc1a <__kernel_rem_pio2f+0xe6>
 800cd28:	9b01      	ldr	r3, [sp, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d106      	bne.n	800cd3c <__kernel_rem_pio2f+0x208>
 800cd2e:	1e73      	subs	r3, r6, #1
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	aa0e      	add	r2, sp, #56	; 0x38
 800cd34:	5898      	ldr	r0, [r3, r2]
 800cd36:	1203      	asrs	r3, r0, #8
 800cd38:	9302      	str	r3, [sp, #8]
 800cd3a:	e7a6      	b.n	800cc8a <__kernel_rem_pio2f+0x156>
 800cd3c:	21fc      	movs	r1, #252	; 0xfc
 800cd3e:	0589      	lsls	r1, r1, #22
 800cd40:	f7f3 fbe0 	bl	8000504 <__aeabi_fcmpge>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	d13d      	bne.n	800cdc4 <__kernel_rem_pio2f+0x290>
 800cd48:	9002      	str	r0, [sp, #8]
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	1c20      	adds	r0, r4, #0
 800cd4e:	f7f3 fbb5 	bl	80004bc <__aeabi_fcmpeq>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d100      	bne.n	800cd58 <__kernel_rem_pio2f+0x224>
 800cd56:	e09d      	b.n	800ce94 <__kernel_rem_pio2f+0x360>
 800cd58:	1e77      	subs	r7, r6, #1
 800cd5a:	003b      	movs	r3, r7
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	9904      	ldr	r1, [sp, #16]
 800cd60:	428b      	cmp	r3, r1
 800cd62:	da54      	bge.n	800ce0e <__kernel_rem_pio2f+0x2da>
 800cd64:	2a00      	cmp	r2, #0
 800cd66:	d100      	bne.n	800cd6a <__kernel_rem_pio2f+0x236>
 800cd68:	e06b      	b.n	800ce42 <__kernel_rem_pio2f+0x30e>
 800cd6a:	9b01      	ldr	r3, [sp, #4]
 800cd6c:	aa0e      	add	r2, sp, #56	; 0x38
 800cd6e:	3b08      	subs	r3, #8
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	00bb      	lsls	r3, r7, #2
 800cd74:	589b      	ldr	r3, [r3, r2]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d100      	bne.n	800cd7c <__kernel_rem_pio2f+0x248>
 800cd7a:	e089      	b.n	800ce90 <__kernel_rem_pio2f+0x35c>
 800cd7c:	20fe      	movs	r0, #254	; 0xfe
 800cd7e:	9901      	ldr	r1, [sp, #4]
 800cd80:	0580      	lsls	r0, r0, #22
 800cd82:	f000 fa45 	bl	800d210 <scalbnf>
 800cd86:	003d      	movs	r5, r7
 800cd88:	1c04      	adds	r4, r0, #0
 800cd8a:	2d00      	cmp	r5, #0
 800cd8c:	db00      	blt.n	800cd90 <__kernel_rem_pio2f+0x25c>
 800cd8e:	e0b8      	b.n	800cf02 <__kernel_rem_pio2f+0x3ce>
 800cd90:	00ba      	lsls	r2, r7, #2
 800cd92:	4694      	mov	ip, r2
 800cd94:	2400      	movs	r4, #0
 800cd96:	00bb      	lsls	r3, r7, #2
 800cd98:	9306      	str	r3, [sp, #24]
 800cd9a:	ab4a      	add	r3, sp, #296	; 0x128
 800cd9c:	4463      	add	r3, ip
 800cd9e:	9301      	str	r3, [sp, #4]
 800cda0:	1b3b      	subs	r3, r7, r4
 800cda2:	d400      	bmi.n	800cda6 <__kernel_rem_pio2f+0x272>
 800cda4:	e0dd      	b.n	800cf62 <__kernel_rem_pio2f+0x42e>
 800cda6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	dd00      	ble.n	800cdae <__kernel_rem_pio2f+0x27a>
 800cdac:	e0dc      	b.n	800cf68 <__kernel_rem_pio2f+0x434>
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	dd00      	ble.n	800cdb4 <__kernel_rem_pio2f+0x280>
 800cdb2:	e130      	b.n	800d016 <__kernel_rem_pio2f+0x4e2>
 800cdb4:	d100      	bne.n	800cdb8 <__kernel_rem_pio2f+0x284>
 800cdb6:	e10a      	b.n	800cfce <__kernel_rem_pio2f+0x49a>
 800cdb8:	2007      	movs	r0, #7
 800cdba:	9b05      	ldr	r3, [sp, #20]
 800cdbc:	4003      	ands	r3, r0
 800cdbe:	0018      	movs	r0, r3
 800cdc0:	b05f      	add	sp, #380	; 0x17c
 800cdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	9302      	str	r3, [sp, #8]
 800cdc8:	e762      	b.n	800cc90 <__kernel_rem_pio2f+0x15c>
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	2d00      	cmp	r5, #0
 800cdce:	d108      	bne.n	800cde2 <__kernel_rem_pio2f+0x2ae>
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d002      	beq.n	800cdda <__kernel_rem_pio2f+0x2a6>
 800cdd4:	1ac3      	subs	r3, r0, r3
 800cdd6:	603b      	str	r3, [r7, #0]
 800cdd8:	4663      	mov	r3, ip
 800cdda:	001d      	movs	r5, r3
 800cddc:	3201      	adds	r2, #1
 800cdde:	3704      	adds	r7, #4
 800cde0:	e760      	b.n	800cca4 <__kernel_rem_pio2f+0x170>
 800cde2:	1acb      	subs	r3, r1, r3
 800cde4:	603b      	str	r3, [r7, #0]
 800cde6:	002b      	movs	r3, r5
 800cde8:	e7f7      	b.n	800cdda <__kernel_rem_pio2f+0x2a6>
 800cdea:	1e73      	subs	r3, r6, #1
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	aa0e      	add	r2, sp, #56	; 0x38
 800cdf0:	589a      	ldr	r2, [r3, r2]
 800cdf2:	920d      	str	r2, [sp, #52]	; 0x34
 800cdf4:	227f      	movs	r2, #127	; 0x7f
 800cdf6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cdf8:	400a      	ands	r2, r1
 800cdfa:	a90e      	add	r1, sp, #56	; 0x38
 800cdfc:	505a      	str	r2, [r3, r1]
 800cdfe:	e75d      	b.n	800ccbc <__kernel_rem_pio2f+0x188>
 800ce00:	1e73      	subs	r3, r6, #1
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	aa0e      	add	r2, sp, #56	; 0x38
 800ce06:	589a      	ldr	r2, [r3, r2]
 800ce08:	920d      	str	r2, [sp, #52]	; 0x34
 800ce0a:	223f      	movs	r2, #63	; 0x3f
 800ce0c:	e7f3      	b.n	800cdf6 <__kernel_rem_pio2f+0x2c2>
 800ce0e:	0099      	lsls	r1, r3, #2
 800ce10:	a80e      	add	r0, sp, #56	; 0x38
 800ce12:	5809      	ldr	r1, [r1, r0]
 800ce14:	3b01      	subs	r3, #1
 800ce16:	430a      	orrs	r2, r1
 800ce18:	e7a1      	b.n	800cd5e <__kernel_rem_pio2f+0x22a>
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce1e:	009a      	lsls	r2, r3, #2
 800ce20:	4252      	negs	r2, r2
 800ce22:	588a      	ldr	r2, [r1, r2]
 800ce24:	2a00      	cmp	r2, #0
 800ce26:	d0f8      	beq.n	800ce1a <__kernel_rem_pio2f+0x2e6>
 800ce28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce2a:	18f3      	adds	r3, r6, r3
 800ce2c:	18b4      	adds	r4, r6, r2
 800ce2e:	00a4      	lsls	r4, r4, #2
 800ce30:	aa22      	add	r2, sp, #136	; 0x88
 800ce32:	1c75      	adds	r5, r6, #1
 800ce34:	1914      	adds	r4, r2, r4
 800ce36:	9302      	str	r3, [sp, #8]
 800ce38:	9b02      	ldr	r3, [sp, #8]
 800ce3a:	42ab      	cmp	r3, r5
 800ce3c:	da03      	bge.n	800ce46 <__kernel_rem_pio2f+0x312>
 800ce3e:	001e      	movs	r6, r3
 800ce40:	e6e4      	b.n	800cc0c <__kernel_rem_pio2f+0xd8>
 800ce42:	2301      	movs	r3, #1
 800ce44:	e7ea      	b.n	800ce1c <__kernel_rem_pio2f+0x2e8>
 800ce46:	00ab      	lsls	r3, r5, #2
 800ce48:	9305      	str	r3, [sp, #20]
 800ce4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce4c:	00aa      	lsls	r2, r5, #2
 800ce4e:	5898      	ldr	r0, [r3, r2]
 800ce50:	f7f4 faea 	bl	8001428 <__aeabi_i2f>
 800ce54:	2700      	movs	r7, #0
 800ce56:	2600      	movs	r6, #0
 800ce58:	6020      	str	r0, [r4, #0]
 800ce5a:	9b06      	ldr	r3, [sp, #24]
 800ce5c:	429f      	cmp	r7, r3
 800ce5e:	dd09      	ble.n	800ce74 <__kernel_rem_pio2f+0x340>
 800ce60:	21f0      	movs	r1, #240	; 0xf0
 800ce62:	9a05      	ldr	r2, [sp, #20]
 800ce64:	ab0e      	add	r3, sp, #56	; 0x38
 800ce66:	185b      	adds	r3, r3, r1
 800ce68:	509e      	str	r6, [r3, r2]
 800ce6a:	3501      	adds	r5, #1
 800ce6c:	3404      	adds	r4, #4
 800ce6e:	e7e3      	b.n	800ce38 <__kernel_rem_pio2f+0x304>
 800ce70:	0800e660 	.word	0x0800e660
 800ce74:	00bb      	lsls	r3, r7, #2
 800ce76:	425a      	negs	r2, r3
 800ce78:	58a1      	ldr	r1, [r4, r2]
 800ce7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce7c:	3701      	adds	r7, #1
 800ce7e:	58d0      	ldr	r0, [r2, r3]
 800ce80:	f7f3 ffba 	bl	8000df8 <__aeabi_fmul>
 800ce84:	1c01      	adds	r1, r0, #0
 800ce86:	1c30      	adds	r0, r6, #0
 800ce88:	f7f3 fc50 	bl	800072c <__aeabi_fadd>
 800ce8c:	1c06      	adds	r6, r0, #0
 800ce8e:	e7e4      	b.n	800ce5a <__kernel_rem_pio2f+0x326>
 800ce90:	3f01      	subs	r7, #1
 800ce92:	e76a      	b.n	800cd6a <__kernel_rem_pio2f+0x236>
 800ce94:	9b08      	ldr	r3, [sp, #32]
 800ce96:	9a07      	ldr	r2, [sp, #28]
 800ce98:	1c20      	adds	r0, r4, #0
 800ce9a:	1a99      	subs	r1, r3, r2
 800ce9c:	f000 f9b8 	bl	800d210 <scalbnf>
 800cea0:	2187      	movs	r1, #135	; 0x87
 800cea2:	05c9      	lsls	r1, r1, #23
 800cea4:	1c04      	adds	r4, r0, #0
 800cea6:	f7f3 fb2d 	bl	8000504 <__aeabi_fcmpge>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d021      	beq.n	800cef2 <__kernel_rem_pio2f+0x3be>
 800ceae:	21ee      	movs	r1, #238	; 0xee
 800ceb0:	1c20      	adds	r0, r4, #0
 800ceb2:	0589      	lsls	r1, r1, #22
 800ceb4:	f7f3 ffa0 	bl	8000df8 <__aeabi_fmul>
 800ceb8:	f7f4 fa96 	bl	80013e8 <__aeabi_f2iz>
 800cebc:	f7f4 fab4 	bl	8001428 <__aeabi_i2f>
 800cec0:	2187      	movs	r1, #135	; 0x87
 800cec2:	05c9      	lsls	r1, r1, #23
 800cec4:	1c05      	adds	r5, r0, #0
 800cec6:	f7f3 ff97 	bl	8000df8 <__aeabi_fmul>
 800ceca:	1c01      	adds	r1, r0, #0
 800cecc:	1c20      	adds	r0, r4, #0
 800cece:	f7f4 f8ad 	bl	800102c <__aeabi_fsub>
 800ced2:	f7f4 fa89 	bl	80013e8 <__aeabi_f2iz>
 800ced6:	00b7      	lsls	r7, r6, #2
 800ced8:	ab0e      	add	r3, sp, #56	; 0x38
 800ceda:	51d8      	str	r0, [r3, r7]
 800cedc:	9b01      	ldr	r3, [sp, #4]
 800cede:	1c28      	adds	r0, r5, #0
 800cee0:	3308      	adds	r3, #8
 800cee2:	9301      	str	r3, [sp, #4]
 800cee4:	f7f4 fa80 	bl	80013e8 <__aeabi_f2iz>
 800cee8:	1c77      	adds	r7, r6, #1
 800ceea:	00bc      	lsls	r4, r7, #2
 800ceec:	ab0e      	add	r3, sp, #56	; 0x38
 800ceee:	5118      	str	r0, [r3, r4]
 800cef0:	e744      	b.n	800cd7c <__kernel_rem_pio2f+0x248>
 800cef2:	1c20      	adds	r0, r4, #0
 800cef4:	f7f4 fa78 	bl	80013e8 <__aeabi_f2iz>
 800cef8:	00b5      	lsls	r5, r6, #2
 800cefa:	ab0e      	add	r3, sp, #56	; 0x38
 800cefc:	0037      	movs	r7, r6
 800cefe:	5158      	str	r0, [r3, r5]
 800cf00:	e73c      	b.n	800cd7c <__kernel_rem_pio2f+0x248>
 800cf02:	ab0e      	add	r3, sp, #56	; 0x38
 800cf04:	00ae      	lsls	r6, r5, #2
 800cf06:	58f0      	ldr	r0, [r6, r3]
 800cf08:	f7f4 fa8e 	bl	8001428 <__aeabi_i2f>
 800cf0c:	1c21      	adds	r1, r4, #0
 800cf0e:	f7f3 ff73 	bl	8000df8 <__aeabi_fmul>
 800cf12:	22f0      	movs	r2, #240	; 0xf0
 800cf14:	21ee      	movs	r1, #238	; 0xee
 800cf16:	ab0e      	add	r3, sp, #56	; 0x38
 800cf18:	189b      	adds	r3, r3, r2
 800cf1a:	5198      	str	r0, [r3, r6]
 800cf1c:	0589      	lsls	r1, r1, #22
 800cf1e:	1c20      	adds	r0, r4, #0
 800cf20:	f7f3 ff6a 	bl	8000df8 <__aeabi_fmul>
 800cf24:	3d01      	subs	r5, #1
 800cf26:	1c04      	adds	r4, r0, #0
 800cf28:	e72f      	b.n	800cd8a <__kernel_rem_pio2f+0x256>
 800cf2a:	9a01      	ldr	r2, [sp, #4]
 800cf2c:	00b3      	lsls	r3, r6, #2
 800cf2e:	58d1      	ldr	r1, [r2, r3]
 800cf30:	4a5b      	ldr	r2, [pc, #364]	; (800d0a0 <__kernel_rem_pio2f+0x56c>)
 800cf32:	3601      	adds	r6, #1
 800cf34:	5898      	ldr	r0, [r3, r2]
 800cf36:	f7f3 ff5f 	bl	8000df8 <__aeabi_fmul>
 800cf3a:	1c01      	adds	r1, r0, #0
 800cf3c:	1c28      	adds	r0, r5, #0
 800cf3e:	f7f3 fbf5 	bl	800072c <__aeabi_fadd>
 800cf42:	1c05      	adds	r5, r0, #0
 800cf44:	9b04      	ldr	r3, [sp, #16]
 800cf46:	429e      	cmp	r6, r3
 800cf48:	dc01      	bgt.n	800cf4e <__kernel_rem_pio2f+0x41a>
 800cf4a:	42b4      	cmp	r4, r6
 800cf4c:	daed      	bge.n	800cf2a <__kernel_rem_pio2f+0x3f6>
 800cf4e:	21a0      	movs	r1, #160	; 0xa0
 800cf50:	aa0e      	add	r2, sp, #56	; 0x38
 800cf52:	00a3      	lsls	r3, r4, #2
 800cf54:	1852      	adds	r2, r2, r1
 800cf56:	50d5      	str	r5, [r2, r3]
 800cf58:	9b01      	ldr	r3, [sp, #4]
 800cf5a:	3401      	adds	r4, #1
 800cf5c:	3b04      	subs	r3, #4
 800cf5e:	9301      	str	r3, [sp, #4]
 800cf60:	e71e      	b.n	800cda0 <__kernel_rem_pio2f+0x26c>
 800cf62:	2500      	movs	r5, #0
 800cf64:	2600      	movs	r6, #0
 800cf66:	e7ed      	b.n	800cf44 <__kernel_rem_pio2f+0x410>
 800cf68:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800cf6a:	2b03      	cmp	r3, #3
 800cf6c:	d000      	beq.n	800cf70 <__kernel_rem_pio2f+0x43c>
 800cf6e:	e723      	b.n	800cdb8 <__kernel_rem_pio2f+0x284>
 800cf70:	aa36      	add	r2, sp, #216	; 0xd8
 800cf72:	4694      	mov	ip, r2
 800cf74:	9b06      	ldr	r3, [sp, #24]
 800cf76:	9701      	str	r7, [sp, #4]
 800cf78:	4463      	add	r3, ip
 800cf7a:	001d      	movs	r5, r3
 800cf7c:	001c      	movs	r4, r3
 800cf7e:	9b01      	ldr	r3, [sp, #4]
 800cf80:	3c04      	subs	r4, #4
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	dc51      	bgt.n	800d02a <__kernel_rem_pio2f+0x4f6>
 800cf86:	9701      	str	r7, [sp, #4]
 800cf88:	9b01      	ldr	r3, [sp, #4]
 800cf8a:	3d04      	subs	r5, #4
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	dc62      	bgt.n	800d056 <__kernel_rem_pio2f+0x522>
 800cf90:	2000      	movs	r0, #0
 800cf92:	ac36      	add	r4, sp, #216	; 0xd8
 800cf94:	2f01      	cmp	r7, #1
 800cf96:	dc73      	bgt.n	800d080 <__kernel_rem_pio2f+0x54c>
 800cf98:	9902      	ldr	r1, [sp, #8]
 800cf9a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800cf9c:	6863      	ldr	r3, [r4, #4]
 800cf9e:	2900      	cmp	r1, #0
 800cfa0:	d174      	bne.n	800d08c <__kernel_rem_pio2f+0x558>
 800cfa2:	9903      	ldr	r1, [sp, #12]
 800cfa4:	604b      	str	r3, [r1, #4]
 800cfa6:	000b      	movs	r3, r1
 800cfa8:	600a      	str	r2, [r1, #0]
 800cfaa:	6098      	str	r0, [r3, #8]
 800cfac:	e704      	b.n	800cdb8 <__kernel_rem_pio2f+0x284>
 800cfae:	00bb      	lsls	r3, r7, #2
 800cfb0:	5919      	ldr	r1, [r3, r4]
 800cfb2:	f7f3 fbbb 	bl	800072c <__aeabi_fadd>
 800cfb6:	3f01      	subs	r7, #1
 800cfb8:	2f00      	cmp	r7, #0
 800cfba:	daf8      	bge.n	800cfae <__kernel_rem_pio2f+0x47a>
 800cfbc:	9b02      	ldr	r3, [sp, #8]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d002      	beq.n	800cfc8 <__kernel_rem_pio2f+0x494>
 800cfc2:	2380      	movs	r3, #128	; 0x80
 800cfc4:	061b      	lsls	r3, r3, #24
 800cfc6:	18c0      	adds	r0, r0, r3
 800cfc8:	9b03      	ldr	r3, [sp, #12]
 800cfca:	6018      	str	r0, [r3, #0]
 800cfcc:	e6f4      	b.n	800cdb8 <__kernel_rem_pio2f+0x284>
 800cfce:	2000      	movs	r0, #0
 800cfd0:	ac36      	add	r4, sp, #216	; 0xd8
 800cfd2:	e7f1      	b.n	800cfb8 <__kernel_rem_pio2f+0x484>
 800cfd4:	00a3      	lsls	r3, r4, #2
 800cfd6:	5959      	ldr	r1, [r3, r5]
 800cfd8:	f7f3 fba8 	bl	800072c <__aeabi_fadd>
 800cfdc:	3c01      	subs	r4, #1
 800cfde:	2c00      	cmp	r4, #0
 800cfe0:	daf8      	bge.n	800cfd4 <__kernel_rem_pio2f+0x4a0>
 800cfe2:	9a02      	ldr	r2, [sp, #8]
 800cfe4:	1c03      	adds	r3, r0, #0
 800cfe6:	2a00      	cmp	r2, #0
 800cfe8:	d002      	beq.n	800cff0 <__kernel_rem_pio2f+0x4bc>
 800cfea:	2380      	movs	r3, #128	; 0x80
 800cfec:	061b      	lsls	r3, r3, #24
 800cfee:	18c3      	adds	r3, r0, r3
 800cff0:	9a03      	ldr	r2, [sp, #12]
 800cff2:	1c01      	adds	r1, r0, #0
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800cff8:	f7f4 f818 	bl	800102c <__aeabi_fsub>
 800cffc:	2401      	movs	r4, #1
 800cffe:	ad36      	add	r5, sp, #216	; 0xd8
 800d000:	42a7      	cmp	r7, r4
 800d002:	da0c      	bge.n	800d01e <__kernel_rem_pio2f+0x4ea>
 800d004:	9b02      	ldr	r3, [sp, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d002      	beq.n	800d010 <__kernel_rem_pio2f+0x4dc>
 800d00a:	2380      	movs	r3, #128	; 0x80
 800d00c:	061b      	lsls	r3, r3, #24
 800d00e:	18c0      	adds	r0, r0, r3
 800d010:	9b03      	ldr	r3, [sp, #12]
 800d012:	6058      	str	r0, [r3, #4]
 800d014:	e6d0      	b.n	800cdb8 <__kernel_rem_pio2f+0x284>
 800d016:	003c      	movs	r4, r7
 800d018:	2000      	movs	r0, #0
 800d01a:	ad36      	add	r5, sp, #216	; 0xd8
 800d01c:	e7df      	b.n	800cfde <__kernel_rem_pio2f+0x4aa>
 800d01e:	00a3      	lsls	r3, r4, #2
 800d020:	5959      	ldr	r1, [r3, r5]
 800d022:	f7f3 fb83 	bl	800072c <__aeabi_fadd>
 800d026:	3401      	adds	r4, #1
 800d028:	e7ea      	b.n	800d000 <__kernel_rem_pio2f+0x4cc>
 800d02a:	9b01      	ldr	r3, [sp, #4]
 800d02c:	6826      	ldr	r6, [r4, #0]
 800d02e:	3b01      	subs	r3, #1
 800d030:	9301      	str	r3, [sp, #4]
 800d032:	6863      	ldr	r3, [r4, #4]
 800d034:	1c30      	adds	r0, r6, #0
 800d036:	1c19      	adds	r1, r3, #0
 800d038:	9304      	str	r3, [sp, #16]
 800d03a:	f7f3 fb77 	bl	800072c <__aeabi_fadd>
 800d03e:	1c01      	adds	r1, r0, #0
 800d040:	9006      	str	r0, [sp, #24]
 800d042:	1c30      	adds	r0, r6, #0
 800d044:	f7f3 fff2 	bl	800102c <__aeabi_fsub>
 800d048:	9904      	ldr	r1, [sp, #16]
 800d04a:	f7f3 fb6f 	bl	800072c <__aeabi_fadd>
 800d04e:	9b06      	ldr	r3, [sp, #24]
 800d050:	6060      	str	r0, [r4, #4]
 800d052:	6023      	str	r3, [r4, #0]
 800d054:	e793      	b.n	800cf7e <__kernel_rem_pio2f+0x44a>
 800d056:	682c      	ldr	r4, [r5, #0]
 800d058:	686e      	ldr	r6, [r5, #4]
 800d05a:	9b01      	ldr	r3, [sp, #4]
 800d05c:	1c31      	adds	r1, r6, #0
 800d05e:	3b01      	subs	r3, #1
 800d060:	1c20      	adds	r0, r4, #0
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	f7f3 fb62 	bl	800072c <__aeabi_fadd>
 800d068:	1c01      	adds	r1, r0, #0
 800d06a:	9004      	str	r0, [sp, #16]
 800d06c:	1c20      	adds	r0, r4, #0
 800d06e:	f7f3 ffdd 	bl	800102c <__aeabi_fsub>
 800d072:	1c31      	adds	r1, r6, #0
 800d074:	f7f3 fb5a 	bl	800072c <__aeabi_fadd>
 800d078:	9b04      	ldr	r3, [sp, #16]
 800d07a:	6068      	str	r0, [r5, #4]
 800d07c:	602b      	str	r3, [r5, #0]
 800d07e:	e783      	b.n	800cf88 <__kernel_rem_pio2f+0x454>
 800d080:	00bb      	lsls	r3, r7, #2
 800d082:	58e1      	ldr	r1, [r4, r3]
 800d084:	f7f3 fb52 	bl	800072c <__aeabi_fadd>
 800d088:	3f01      	subs	r7, #1
 800d08a:	e783      	b.n	800cf94 <__kernel_rem_pio2f+0x460>
 800d08c:	2180      	movs	r1, #128	; 0x80
 800d08e:	9c03      	ldr	r4, [sp, #12]
 800d090:	0609      	lsls	r1, r1, #24
 800d092:	185b      	adds	r3, r3, r1
 800d094:	1852      	adds	r2, r2, r1
 800d096:	6063      	str	r3, [r4, #4]
 800d098:	6022      	str	r2, [r4, #0]
 800d09a:	0023      	movs	r3, r4
 800d09c:	1840      	adds	r0, r0, r1
 800d09e:	e784      	b.n	800cfaa <__kernel_rem_pio2f+0x476>
 800d0a0:	0800e634 	.word	0x0800e634

0800d0a4 <__kernel_sinf>:
 800d0a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0a6:	9201      	str	r2, [sp, #4]
 800d0a8:	22c8      	movs	r2, #200	; 0xc8
 800d0aa:	0043      	lsls	r3, r0, #1
 800d0ac:	1c04      	adds	r4, r0, #0
 800d0ae:	9100      	str	r1, [sp, #0]
 800d0b0:	085b      	lsrs	r3, r3, #1
 800d0b2:	0592      	lsls	r2, r2, #22
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	da03      	bge.n	800d0c0 <__kernel_sinf+0x1c>
 800d0b8:	f7f4 f996 	bl	80013e8 <__aeabi_f2iz>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	d035      	beq.n	800d12c <__kernel_sinf+0x88>
 800d0c0:	1c21      	adds	r1, r4, #0
 800d0c2:	1c20      	adds	r0, r4, #0
 800d0c4:	f7f3 fe98 	bl	8000df8 <__aeabi_fmul>
 800d0c8:	1c05      	adds	r5, r0, #0
 800d0ca:	1c01      	adds	r1, r0, #0
 800d0cc:	1c20      	adds	r0, r4, #0
 800d0ce:	f7f3 fe93 	bl	8000df8 <__aeabi_fmul>
 800d0d2:	4928      	ldr	r1, [pc, #160]	; (800d174 <__kernel_sinf+0xd0>)
 800d0d4:	1c06      	adds	r6, r0, #0
 800d0d6:	1c28      	adds	r0, r5, #0
 800d0d8:	f7f3 fe8e 	bl	8000df8 <__aeabi_fmul>
 800d0dc:	4926      	ldr	r1, [pc, #152]	; (800d178 <__kernel_sinf+0xd4>)
 800d0de:	f7f3 ffa5 	bl	800102c <__aeabi_fsub>
 800d0e2:	1c29      	adds	r1, r5, #0
 800d0e4:	f7f3 fe88 	bl	8000df8 <__aeabi_fmul>
 800d0e8:	4924      	ldr	r1, [pc, #144]	; (800d17c <__kernel_sinf+0xd8>)
 800d0ea:	f7f3 fb1f 	bl	800072c <__aeabi_fadd>
 800d0ee:	1c29      	adds	r1, r5, #0
 800d0f0:	f7f3 fe82 	bl	8000df8 <__aeabi_fmul>
 800d0f4:	4922      	ldr	r1, [pc, #136]	; (800d180 <__kernel_sinf+0xdc>)
 800d0f6:	f7f3 ff99 	bl	800102c <__aeabi_fsub>
 800d0fa:	1c29      	adds	r1, r5, #0
 800d0fc:	f7f3 fe7c 	bl	8000df8 <__aeabi_fmul>
 800d100:	4920      	ldr	r1, [pc, #128]	; (800d184 <__kernel_sinf+0xe0>)
 800d102:	f7f3 fb13 	bl	800072c <__aeabi_fadd>
 800d106:	9b01      	ldr	r3, [sp, #4]
 800d108:	1c07      	adds	r7, r0, #0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d110      	bne.n	800d130 <__kernel_sinf+0x8c>
 800d10e:	1c01      	adds	r1, r0, #0
 800d110:	1c28      	adds	r0, r5, #0
 800d112:	f7f3 fe71 	bl	8000df8 <__aeabi_fmul>
 800d116:	491c      	ldr	r1, [pc, #112]	; (800d188 <__kernel_sinf+0xe4>)
 800d118:	f7f3 ff88 	bl	800102c <__aeabi_fsub>
 800d11c:	1c31      	adds	r1, r6, #0
 800d11e:	f7f3 fe6b 	bl	8000df8 <__aeabi_fmul>
 800d122:	1c01      	adds	r1, r0, #0
 800d124:	1c20      	adds	r0, r4, #0
 800d126:	f7f3 fb01 	bl	800072c <__aeabi_fadd>
 800d12a:	1c04      	adds	r4, r0, #0
 800d12c:	1c20      	adds	r0, r4, #0
 800d12e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d130:	21fc      	movs	r1, #252	; 0xfc
 800d132:	9800      	ldr	r0, [sp, #0]
 800d134:	0589      	lsls	r1, r1, #22
 800d136:	f7f3 fe5f 	bl	8000df8 <__aeabi_fmul>
 800d13a:	1c39      	adds	r1, r7, #0
 800d13c:	9001      	str	r0, [sp, #4]
 800d13e:	1c30      	adds	r0, r6, #0
 800d140:	f7f3 fe5a 	bl	8000df8 <__aeabi_fmul>
 800d144:	1c01      	adds	r1, r0, #0
 800d146:	9801      	ldr	r0, [sp, #4]
 800d148:	f7f3 ff70 	bl	800102c <__aeabi_fsub>
 800d14c:	1c29      	adds	r1, r5, #0
 800d14e:	f7f3 fe53 	bl	8000df8 <__aeabi_fmul>
 800d152:	9900      	ldr	r1, [sp, #0]
 800d154:	f7f3 ff6a 	bl	800102c <__aeabi_fsub>
 800d158:	490b      	ldr	r1, [pc, #44]	; (800d188 <__kernel_sinf+0xe4>)
 800d15a:	1c05      	adds	r5, r0, #0
 800d15c:	1c30      	adds	r0, r6, #0
 800d15e:	f7f3 fe4b 	bl	8000df8 <__aeabi_fmul>
 800d162:	1c01      	adds	r1, r0, #0
 800d164:	1c28      	adds	r0, r5, #0
 800d166:	f7f3 fae1 	bl	800072c <__aeabi_fadd>
 800d16a:	1c01      	adds	r1, r0, #0
 800d16c:	1c20      	adds	r0, r4, #0
 800d16e:	f7f3 ff5d 	bl	800102c <__aeabi_fsub>
 800d172:	e7da      	b.n	800d12a <__kernel_sinf+0x86>
 800d174:	2f2ec9d3 	.word	0x2f2ec9d3
 800d178:	32d72f34 	.word	0x32d72f34
 800d17c:	3638ef1b 	.word	0x3638ef1b
 800d180:	39500d01 	.word	0x39500d01
 800d184:	3c088889 	.word	0x3c088889
 800d188:	3e2aaaab 	.word	0x3e2aaaab

0800d18c <fabsf>:
 800d18c:	0040      	lsls	r0, r0, #1
 800d18e:	0840      	lsrs	r0, r0, #1
 800d190:	4770      	bx	lr
	...

0800d194 <floorf>:
 800d194:	b570      	push	{r4, r5, r6, lr}
 800d196:	0045      	lsls	r5, r0, #1
 800d198:	086e      	lsrs	r6, r5, #1
 800d19a:	0e2d      	lsrs	r5, r5, #24
 800d19c:	3d7f      	subs	r5, #127	; 0x7f
 800d19e:	0004      	movs	r4, r0
 800d1a0:	2d16      	cmp	r5, #22
 800d1a2:	dc24      	bgt.n	800d1ee <floorf+0x5a>
 800d1a4:	2d00      	cmp	r5, #0
 800d1a6:	da0e      	bge.n	800d1c6 <floorf+0x32>
 800d1a8:	4916      	ldr	r1, [pc, #88]	; (800d204 <floorf+0x70>)
 800d1aa:	f7f3 fabf 	bl	800072c <__aeabi_fadd>
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	f7f3 f99e 	bl	80004f0 <__aeabi_fcmpgt>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d004      	beq.n	800d1c2 <floorf+0x2e>
 800d1b8:	2c00      	cmp	r4, #0
 800d1ba:	da20      	bge.n	800d1fe <floorf+0x6a>
 800d1bc:	2e00      	cmp	r6, #0
 800d1be:	d000      	beq.n	800d1c2 <floorf+0x2e>
 800d1c0:	4c11      	ldr	r4, [pc, #68]	; (800d208 <floorf+0x74>)
 800d1c2:	1c20      	adds	r0, r4, #0
 800d1c4:	e01a      	b.n	800d1fc <floorf+0x68>
 800d1c6:	4e11      	ldr	r6, [pc, #68]	; (800d20c <floorf+0x78>)
 800d1c8:	412e      	asrs	r6, r5
 800d1ca:	4206      	tst	r6, r0
 800d1cc:	d016      	beq.n	800d1fc <floorf+0x68>
 800d1ce:	490d      	ldr	r1, [pc, #52]	; (800d204 <floorf+0x70>)
 800d1d0:	f7f3 faac 	bl	800072c <__aeabi_fadd>
 800d1d4:	2100      	movs	r1, #0
 800d1d6:	f7f3 f98b 	bl	80004f0 <__aeabi_fcmpgt>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d0f1      	beq.n	800d1c2 <floorf+0x2e>
 800d1de:	2c00      	cmp	r4, #0
 800d1e0:	da03      	bge.n	800d1ea <floorf+0x56>
 800d1e2:	2380      	movs	r3, #128	; 0x80
 800d1e4:	041b      	lsls	r3, r3, #16
 800d1e6:	412b      	asrs	r3, r5
 800d1e8:	18e4      	adds	r4, r4, r3
 800d1ea:	43b4      	bics	r4, r6
 800d1ec:	e7e9      	b.n	800d1c2 <floorf+0x2e>
 800d1ee:	23ff      	movs	r3, #255	; 0xff
 800d1f0:	05db      	lsls	r3, r3, #23
 800d1f2:	429e      	cmp	r6, r3
 800d1f4:	d302      	bcc.n	800d1fc <floorf+0x68>
 800d1f6:	1c01      	adds	r1, r0, #0
 800d1f8:	f7f3 fa98 	bl	800072c <__aeabi_fadd>
 800d1fc:	bd70      	pop	{r4, r5, r6, pc}
 800d1fe:	2400      	movs	r4, #0
 800d200:	e7df      	b.n	800d1c2 <floorf+0x2e>
 800d202:	46c0      	nop			; (mov r8, r8)
 800d204:	7149f2ca 	.word	0x7149f2ca
 800d208:	bf800000 	.word	0xbf800000
 800d20c:	007fffff 	.word	0x007fffff

0800d210 <scalbnf>:
 800d210:	0043      	lsls	r3, r0, #1
 800d212:	b570      	push	{r4, r5, r6, lr}
 800d214:	0002      	movs	r2, r0
 800d216:	000c      	movs	r4, r1
 800d218:	085d      	lsrs	r5, r3, #1
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d006      	beq.n	800d22c <scalbnf+0x1c>
 800d21e:	21ff      	movs	r1, #255	; 0xff
 800d220:	05c9      	lsls	r1, r1, #23
 800d222:	428d      	cmp	r5, r1
 800d224:	d303      	bcc.n	800d22e <scalbnf+0x1e>
 800d226:	1c01      	adds	r1, r0, #0
 800d228:	f7f3 fa80 	bl	800072c <__aeabi_fadd>
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	4208      	tst	r0, r1
 800d230:	d116      	bne.n	800d260 <scalbnf+0x50>
 800d232:	2198      	movs	r1, #152	; 0x98
 800d234:	05c9      	lsls	r1, r1, #23
 800d236:	f7f3 fddf 	bl	8000df8 <__aeabi_fmul>
 800d23a:	4b1b      	ldr	r3, [pc, #108]	; (800d2a8 <scalbnf+0x98>)
 800d23c:	429c      	cmp	r4, r3
 800d23e:	db0b      	blt.n	800d258 <scalbnf+0x48>
 800d240:	0002      	movs	r2, r0
 800d242:	15c3      	asrs	r3, r0, #23
 800d244:	b2db      	uxtb	r3, r3
 800d246:	3b19      	subs	r3, #25
 800d248:	191b      	adds	r3, r3, r4
 800d24a:	2bfe      	cmp	r3, #254	; 0xfe
 800d24c:	dd0a      	ble.n	800d264 <scalbnf+0x54>
 800d24e:	4b17      	ldr	r3, [pc, #92]	; (800d2ac <scalbnf+0x9c>)
 800d250:	2800      	cmp	r0, #0
 800d252:	da18      	bge.n	800d286 <scalbnf+0x76>
 800d254:	4b16      	ldr	r3, [pc, #88]	; (800d2b0 <scalbnf+0xa0>)
 800d256:	e016      	b.n	800d286 <scalbnf+0x76>
 800d258:	4916      	ldr	r1, [pc, #88]	; (800d2b4 <scalbnf+0xa4>)
 800d25a:	f7f3 fdcd 	bl	8000df8 <__aeabi_fmul>
 800d25e:	e7e5      	b.n	800d22c <scalbnf+0x1c>
 800d260:	0e1b      	lsrs	r3, r3, #24
 800d262:	e7f1      	b.n	800d248 <scalbnf+0x38>
 800d264:	2b00      	cmp	r3, #0
 800d266:	dd04      	ble.n	800d272 <scalbnf+0x62>
 800d268:	4813      	ldr	r0, [pc, #76]	; (800d2b8 <scalbnf+0xa8>)
 800d26a:	05db      	lsls	r3, r3, #23
 800d26c:	4010      	ands	r0, r2
 800d26e:	4318      	orrs	r0, r3
 800d270:	e7dc      	b.n	800d22c <scalbnf+0x1c>
 800d272:	0019      	movs	r1, r3
 800d274:	3116      	adds	r1, #22
 800d276:	da0f      	bge.n	800d298 <scalbnf+0x88>
 800d278:	4b10      	ldr	r3, [pc, #64]	; (800d2bc <scalbnf+0xac>)
 800d27a:	0fc0      	lsrs	r0, r0, #31
 800d27c:	429c      	cmp	r4, r3
 800d27e:	dd05      	ble.n	800d28c <scalbnf+0x7c>
 800d280:	4b0a      	ldr	r3, [pc, #40]	; (800d2ac <scalbnf+0x9c>)
 800d282:	2800      	cmp	r0, #0
 800d284:	d1e6      	bne.n	800d254 <scalbnf+0x44>
 800d286:	4909      	ldr	r1, [pc, #36]	; (800d2ac <scalbnf+0x9c>)
 800d288:	1c18      	adds	r0, r3, #0
 800d28a:	e7e6      	b.n	800d25a <scalbnf+0x4a>
 800d28c:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <scalbnf+0xa4>)
 800d28e:	2800      	cmp	r0, #0
 800d290:	d000      	beq.n	800d294 <scalbnf+0x84>
 800d292:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <scalbnf+0xb0>)
 800d294:	4907      	ldr	r1, [pc, #28]	; (800d2b4 <scalbnf+0xa4>)
 800d296:	e7f7      	b.n	800d288 <scalbnf+0x78>
 800d298:	21cc      	movs	r1, #204	; 0xcc
 800d29a:	4807      	ldr	r0, [pc, #28]	; (800d2b8 <scalbnf+0xa8>)
 800d29c:	3319      	adds	r3, #25
 800d29e:	05db      	lsls	r3, r3, #23
 800d2a0:	4010      	ands	r0, r2
 800d2a2:	4318      	orrs	r0, r3
 800d2a4:	0589      	lsls	r1, r1, #22
 800d2a6:	e7d8      	b.n	800d25a <scalbnf+0x4a>
 800d2a8:	ffff3cb0 	.word	0xffff3cb0
 800d2ac:	7149f2ca 	.word	0x7149f2ca
 800d2b0:	f149f2ca 	.word	0xf149f2ca
 800d2b4:	0da24260 	.word	0x0da24260
 800d2b8:	807fffff 	.word	0x807fffff
 800d2bc:	0000c350 	.word	0x0000c350
 800d2c0:	8da24260 	.word	0x8da24260

0800d2c4 <_init>:
 800d2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c6:	46c0      	nop			; (mov r8, r8)
 800d2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ca:	bc08      	pop	{r3}
 800d2cc:	469e      	mov	lr, r3
 800d2ce:	4770      	bx	lr

0800d2d0 <_fini>:
 800d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d2:	46c0      	nop			; (mov r8, r8)
 800d2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2d6:	bc08      	pop	{r3}
 800d2d8:	469e      	mov	lr, r3
 800d2da:	4770      	bx	lr
