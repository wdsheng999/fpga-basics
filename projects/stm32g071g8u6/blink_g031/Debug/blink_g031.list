
blink_g031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be80  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001058  0800bf3c  0800bf3c  0001bf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf94  0800cf94  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  0800cf94  0800cf94  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cf94  0800cf94  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf94  0800cf94  0001cf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf98  0800cf98  0001cf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800cf9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b24  2000016c  0800d108  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c90  0800d108  00020c90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003143d  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005eb5  00000000  00000000  000515d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00057488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  00058a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b223  00000000  00000000  00059ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a25  00000000  00000000  000750cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c47c  00000000  00000000  00096af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  00132f6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004df0  00000000  00000000  00133034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003f23  00000000  00000000  00137e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000016c 	.word	0x2000016c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800bf24 	.word	0x0800bf24

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000170 	.word	0x20000170
 8000100:	0800bf24 	.word	0x0800bf24

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cfrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	4661      	mov	r1, ip
 8000406:	e7ff      	b.n	8000408 <__aeabi_cfcmpeq>

08000408 <__aeabi_cfcmpeq>:
 8000408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040a:	f000 fb67 	bl	8000adc <__lesf2>
 800040e:	2800      	cmp	r0, #0
 8000410:	d401      	bmi.n	8000416 <__aeabi_cfcmpeq+0xe>
 8000412:	2100      	movs	r1, #0
 8000414:	42c8      	cmn	r0, r1
 8000416:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000418 <__aeabi_fcmpeq>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 faeb 	bl	80009f4 <__eqsf2>
 800041e:	4240      	negs	r0, r0
 8000420:	3001      	adds	r0, #1
 8000422:	bd10      	pop	{r4, pc}

08000424 <__aeabi_fcmplt>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb59 	bl	8000adc <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	db01      	blt.n	8000432 <__aeabi_fcmplt+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmple>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb4f 	bl	8000adc <__lesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dd01      	ble.n	8000446 <__aeabi_fcmple+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpgt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 faf9 	bl	8000a44 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	dc01      	bgt.n	800045a <__aeabi_fcmpgt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_fcmpge>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 faef 	bl	8000a44 <__gesf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	da01      	bge.n	800046e <__aeabi_fcmpge+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_f2uiz>:
 8000474:	219e      	movs	r1, #158	; 0x9e
 8000476:	b510      	push	{r4, lr}
 8000478:	05c9      	lsls	r1, r1, #23
 800047a:	1c04      	adds	r4, r0, #0
 800047c:	f7ff fff0 	bl	8000460 <__aeabi_fcmpge>
 8000480:	2800      	cmp	r0, #0
 8000482:	d103      	bne.n	800048c <__aeabi_f2uiz+0x18>
 8000484:	1c20      	adds	r0, r4, #0
 8000486:	f000 fe6b 	bl	8001160 <__aeabi_f2iz>
 800048a:	bd10      	pop	{r4, pc}
 800048c:	219e      	movs	r1, #158	; 0x9e
 800048e:	1c20      	adds	r0, r4, #0
 8000490:	05c9      	lsls	r1, r1, #23
 8000492:	f000 fc87 	bl	8000da4 <__aeabi_fsub>
 8000496:	f000 fe63 	bl	8001160 <__aeabi_f2iz>
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	061b      	lsls	r3, r3, #24
 800049e:	469c      	mov	ip, r3
 80004a0:	4460      	add	r0, ip
 80004a2:	e7f2      	b.n	800048a <__aeabi_f2uiz+0x16>

080004a4 <__aeabi_fadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4646      	mov	r6, r8
 80004a8:	46d6      	mov	lr, sl
 80004aa:	464f      	mov	r7, r9
 80004ac:	024d      	lsls	r5, r1, #9
 80004ae:	0242      	lsls	r2, r0, #9
 80004b0:	b5c0      	push	{r6, r7, lr}
 80004b2:	0a52      	lsrs	r2, r2, #9
 80004b4:	0a6e      	lsrs	r6, r5, #9
 80004b6:	0047      	lsls	r7, r0, #1
 80004b8:	46b0      	mov	r8, r6
 80004ba:	0e3f      	lsrs	r7, r7, #24
 80004bc:	004e      	lsls	r6, r1, #1
 80004be:	0fc4      	lsrs	r4, r0, #31
 80004c0:	00d0      	lsls	r0, r2, #3
 80004c2:	4694      	mov	ip, r2
 80004c4:	003b      	movs	r3, r7
 80004c6:	4682      	mov	sl, r0
 80004c8:	0e36      	lsrs	r6, r6, #24
 80004ca:	0fc9      	lsrs	r1, r1, #31
 80004cc:	09ad      	lsrs	r5, r5, #6
 80004ce:	428c      	cmp	r4, r1
 80004d0:	d06d      	beq.n	80005ae <__aeabi_fadd+0x10a>
 80004d2:	1bb8      	subs	r0, r7, r6
 80004d4:	4681      	mov	r9, r0
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd4d      	ble.n	8000576 <__aeabi_fadd+0xd2>
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d100      	bne.n	80004e0 <__aeabi_fadd+0x3c>
 80004de:	e088      	b.n	80005f2 <__aeabi_fadd+0x14e>
 80004e0:	2fff      	cmp	r7, #255	; 0xff
 80004e2:	d05a      	beq.n	800059a <__aeabi_fadd+0xf6>
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	04db      	lsls	r3, r3, #19
 80004e8:	431d      	orrs	r5, r3
 80004ea:	464b      	mov	r3, r9
 80004ec:	2201      	movs	r2, #1
 80004ee:	2b1b      	cmp	r3, #27
 80004f0:	dc0a      	bgt.n	8000508 <__aeabi_fadd+0x64>
 80004f2:	002b      	movs	r3, r5
 80004f4:	464a      	mov	r2, r9
 80004f6:	4649      	mov	r1, r9
 80004f8:	40d3      	lsrs	r3, r2
 80004fa:	2220      	movs	r2, #32
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	4095      	lsls	r5, r2
 8000500:	002a      	movs	r2, r5
 8000502:	1e55      	subs	r5, r2, #1
 8000504:	41aa      	sbcs	r2, r5
 8000506:	431a      	orrs	r2, r3
 8000508:	4653      	mov	r3, sl
 800050a:	1a9a      	subs	r2, r3, r2
 800050c:	0153      	lsls	r3, r2, #5
 800050e:	d400      	bmi.n	8000512 <__aeabi_fadd+0x6e>
 8000510:	e0b9      	b.n	8000686 <__aeabi_fadd+0x1e2>
 8000512:	0192      	lsls	r2, r2, #6
 8000514:	0996      	lsrs	r6, r2, #6
 8000516:	0030      	movs	r0, r6
 8000518:	f000 fec4 	bl	80012a4 <__clzsi2>
 800051c:	3805      	subs	r0, #5
 800051e:	4086      	lsls	r6, r0
 8000520:	4287      	cmp	r7, r0
 8000522:	dd00      	ble.n	8000526 <__aeabi_fadd+0x82>
 8000524:	e0d4      	b.n	80006d0 <__aeabi_fadd+0x22c>
 8000526:	0033      	movs	r3, r6
 8000528:	1bc7      	subs	r7, r0, r7
 800052a:	2020      	movs	r0, #32
 800052c:	3701      	adds	r7, #1
 800052e:	40fb      	lsrs	r3, r7
 8000530:	1bc7      	subs	r7, r0, r7
 8000532:	40be      	lsls	r6, r7
 8000534:	0032      	movs	r2, r6
 8000536:	1e56      	subs	r6, r2, #1
 8000538:	41b2      	sbcs	r2, r6
 800053a:	2700      	movs	r7, #0
 800053c:	431a      	orrs	r2, r3
 800053e:	0753      	lsls	r3, r2, #29
 8000540:	d004      	beq.n	800054c <__aeabi_fadd+0xa8>
 8000542:	230f      	movs	r3, #15
 8000544:	4013      	ands	r3, r2
 8000546:	2b04      	cmp	r3, #4
 8000548:	d000      	beq.n	800054c <__aeabi_fadd+0xa8>
 800054a:	3204      	adds	r2, #4
 800054c:	0153      	lsls	r3, r2, #5
 800054e:	d400      	bmi.n	8000552 <__aeabi_fadd+0xae>
 8000550:	e09c      	b.n	800068c <__aeabi_fadd+0x1e8>
 8000552:	1c7b      	adds	r3, r7, #1
 8000554:	2ffe      	cmp	r7, #254	; 0xfe
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0xb6>
 8000558:	e09a      	b.n	8000690 <__aeabi_fadd+0x1ec>
 800055a:	0192      	lsls	r2, r2, #6
 800055c:	0a52      	lsrs	r2, r2, #9
 800055e:	4694      	mov	ip, r2
 8000560:	b2db      	uxtb	r3, r3
 8000562:	05d8      	lsls	r0, r3, #23
 8000564:	4663      	mov	r3, ip
 8000566:	07e4      	lsls	r4, r4, #31
 8000568:	4318      	orrs	r0, r3
 800056a:	4320      	orrs	r0, r4
 800056c:	bce0      	pop	{r5, r6, r7}
 800056e:	46ba      	mov	sl, r7
 8000570:	46b1      	mov	r9, r6
 8000572:	46a8      	mov	r8, r5
 8000574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000576:	2800      	cmp	r0, #0
 8000578:	d049      	beq.n	800060e <__aeabi_fadd+0x16a>
 800057a:	1bf3      	subs	r3, r6, r7
 800057c:	2f00      	cmp	r7, #0
 800057e:	d000      	beq.n	8000582 <__aeabi_fadd+0xde>
 8000580:	e0b6      	b.n	80006f0 <__aeabi_fadd+0x24c>
 8000582:	4652      	mov	r2, sl
 8000584:	2a00      	cmp	r2, #0
 8000586:	d060      	beq.n	800064a <__aeabi_fadd+0x1a6>
 8000588:	3b01      	subs	r3, #1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0xec>
 800058e:	e0fc      	b.n	800078a <__aeabi_fadd+0x2e6>
 8000590:	2eff      	cmp	r6, #255	; 0xff
 8000592:	d000      	beq.n	8000596 <__aeabi_fadd+0xf2>
 8000594:	e0b4      	b.n	8000700 <__aeabi_fadd+0x25c>
 8000596:	000c      	movs	r4, r1
 8000598:	4642      	mov	r2, r8
 800059a:	2a00      	cmp	r2, #0
 800059c:	d078      	beq.n	8000690 <__aeabi_fadd+0x1ec>
 800059e:	2080      	movs	r0, #128	; 0x80
 80005a0:	03c0      	lsls	r0, r0, #15
 80005a2:	4310      	orrs	r0, r2
 80005a4:	0242      	lsls	r2, r0, #9
 80005a6:	0a53      	lsrs	r3, r2, #9
 80005a8:	469c      	mov	ip, r3
 80005aa:	23ff      	movs	r3, #255	; 0xff
 80005ac:	e7d9      	b.n	8000562 <__aeabi_fadd+0xbe>
 80005ae:	1bb9      	subs	r1, r7, r6
 80005b0:	2900      	cmp	r1, #0
 80005b2:	dd71      	ble.n	8000698 <__aeabi_fadd+0x1f4>
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d03f      	beq.n	8000638 <__aeabi_fadd+0x194>
 80005b8:	2fff      	cmp	r7, #255	; 0xff
 80005ba:	d0ee      	beq.n	800059a <__aeabi_fadd+0xf6>
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	04db      	lsls	r3, r3, #19
 80005c0:	431d      	orrs	r5, r3
 80005c2:	2201      	movs	r2, #1
 80005c4:	291b      	cmp	r1, #27
 80005c6:	dc07      	bgt.n	80005d8 <__aeabi_fadd+0x134>
 80005c8:	002a      	movs	r2, r5
 80005ca:	2320      	movs	r3, #32
 80005cc:	40ca      	lsrs	r2, r1
 80005ce:	1a59      	subs	r1, r3, r1
 80005d0:	408d      	lsls	r5, r1
 80005d2:	1e6b      	subs	r3, r5, #1
 80005d4:	419d      	sbcs	r5, r3
 80005d6:	432a      	orrs	r2, r5
 80005d8:	4452      	add	r2, sl
 80005da:	0153      	lsls	r3, r2, #5
 80005dc:	d553      	bpl.n	8000686 <__aeabi_fadd+0x1e2>
 80005de:	3701      	adds	r7, #1
 80005e0:	2fff      	cmp	r7, #255	; 0xff
 80005e2:	d055      	beq.n	8000690 <__aeabi_fadd+0x1ec>
 80005e4:	2301      	movs	r3, #1
 80005e6:	497b      	ldr	r1, [pc, #492]	; (80007d4 <__aeabi_fadd+0x330>)
 80005e8:	4013      	ands	r3, r2
 80005ea:	0852      	lsrs	r2, r2, #1
 80005ec:	400a      	ands	r2, r1
 80005ee:	431a      	orrs	r2, r3
 80005f0:	e7a5      	b.n	800053e <__aeabi_fadd+0x9a>
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d02c      	beq.n	8000650 <__aeabi_fadd+0x1ac>
 80005f6:	2301      	movs	r3, #1
 80005f8:	425b      	negs	r3, r3
 80005fa:	469c      	mov	ip, r3
 80005fc:	44e1      	add	r9, ip
 80005fe:	464b      	mov	r3, r9
 8000600:	2b00      	cmp	r3, #0
 8000602:	d100      	bne.n	8000606 <__aeabi_fadd+0x162>
 8000604:	e0ad      	b.n	8000762 <__aeabi_fadd+0x2be>
 8000606:	2fff      	cmp	r7, #255	; 0xff
 8000608:	d000      	beq.n	800060c <__aeabi_fadd+0x168>
 800060a:	e76e      	b.n	80004ea <__aeabi_fadd+0x46>
 800060c:	e7c5      	b.n	800059a <__aeabi_fadd+0xf6>
 800060e:	20fe      	movs	r0, #254	; 0xfe
 8000610:	1c7e      	adds	r6, r7, #1
 8000612:	4230      	tst	r0, r6
 8000614:	d160      	bne.n	80006d8 <__aeabi_fadd+0x234>
 8000616:	2f00      	cmp	r7, #0
 8000618:	d000      	beq.n	800061c <__aeabi_fadd+0x178>
 800061a:	e093      	b.n	8000744 <__aeabi_fadd+0x2a0>
 800061c:	4652      	mov	r2, sl
 800061e:	2a00      	cmp	r2, #0
 8000620:	d100      	bne.n	8000624 <__aeabi_fadd+0x180>
 8000622:	e0b6      	b.n	8000792 <__aeabi_fadd+0x2ee>
 8000624:	2d00      	cmp	r5, #0
 8000626:	d09c      	beq.n	8000562 <__aeabi_fadd+0xbe>
 8000628:	1b52      	subs	r2, r2, r5
 800062a:	0150      	lsls	r0, r2, #5
 800062c:	d400      	bmi.n	8000630 <__aeabi_fadd+0x18c>
 800062e:	e0c3      	b.n	80007b8 <__aeabi_fadd+0x314>
 8000630:	4653      	mov	r3, sl
 8000632:	000c      	movs	r4, r1
 8000634:	1aea      	subs	r2, r5, r3
 8000636:	e782      	b.n	800053e <__aeabi_fadd+0x9a>
 8000638:	2d00      	cmp	r5, #0
 800063a:	d009      	beq.n	8000650 <__aeabi_fadd+0x1ac>
 800063c:	3901      	subs	r1, #1
 800063e:	2900      	cmp	r1, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x1a0>
 8000642:	e08b      	b.n	800075c <__aeabi_fadd+0x2b8>
 8000644:	2fff      	cmp	r7, #255	; 0xff
 8000646:	d1bc      	bne.n	80005c2 <__aeabi_fadd+0x11e>
 8000648:	e7a7      	b.n	800059a <__aeabi_fadd+0xf6>
 800064a:	000c      	movs	r4, r1
 800064c:	4642      	mov	r2, r8
 800064e:	0037      	movs	r7, r6
 8000650:	2fff      	cmp	r7, #255	; 0xff
 8000652:	d0a2      	beq.n	800059a <__aeabi_fadd+0xf6>
 8000654:	0252      	lsls	r2, r2, #9
 8000656:	0a53      	lsrs	r3, r2, #9
 8000658:	469c      	mov	ip, r3
 800065a:	b2fb      	uxtb	r3, r7
 800065c:	e781      	b.n	8000562 <__aeabi_fadd+0xbe>
 800065e:	21fe      	movs	r1, #254	; 0xfe
 8000660:	3701      	adds	r7, #1
 8000662:	4239      	tst	r1, r7
 8000664:	d165      	bne.n	8000732 <__aeabi_fadd+0x28e>
 8000666:	2b00      	cmp	r3, #0
 8000668:	d17e      	bne.n	8000768 <__aeabi_fadd+0x2c4>
 800066a:	2800      	cmp	r0, #0
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x1cc>
 800066e:	e0aa      	b.n	80007c6 <__aeabi_fadd+0x322>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x1d2>
 8000674:	e775      	b.n	8000562 <__aeabi_fadd+0xbe>
 8000676:	002a      	movs	r2, r5
 8000678:	4452      	add	r2, sl
 800067a:	2700      	movs	r7, #0
 800067c:	0153      	lsls	r3, r2, #5
 800067e:	d502      	bpl.n	8000686 <__aeabi_fadd+0x1e2>
 8000680:	4b55      	ldr	r3, [pc, #340]	; (80007d8 <__aeabi_fadd+0x334>)
 8000682:	3701      	adds	r7, #1
 8000684:	401a      	ands	r2, r3
 8000686:	0753      	lsls	r3, r2, #29
 8000688:	d000      	beq.n	800068c <__aeabi_fadd+0x1e8>
 800068a:	e75a      	b.n	8000542 <__aeabi_fadd+0x9e>
 800068c:	08d2      	lsrs	r2, r2, #3
 800068e:	e7df      	b.n	8000650 <__aeabi_fadd+0x1ac>
 8000690:	2200      	movs	r2, #0
 8000692:	23ff      	movs	r3, #255	; 0xff
 8000694:	4694      	mov	ip, r2
 8000696:	e764      	b.n	8000562 <__aeabi_fadd+0xbe>
 8000698:	2900      	cmp	r1, #0
 800069a:	d0e0      	beq.n	800065e <__aeabi_fadd+0x1ba>
 800069c:	1bf3      	subs	r3, r6, r7
 800069e:	2f00      	cmp	r7, #0
 80006a0:	d03e      	beq.n	8000720 <__aeabi_fadd+0x27c>
 80006a2:	2eff      	cmp	r6, #255	; 0xff
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x204>
 80006a6:	e777      	b.n	8000598 <__aeabi_fadd+0xf4>
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0001      	movs	r1, r0
 80006ac:	04d2      	lsls	r2, r2, #19
 80006ae:	4311      	orrs	r1, r2
 80006b0:	468a      	mov	sl, r1
 80006b2:	2201      	movs	r2, #1
 80006b4:	2b1b      	cmp	r3, #27
 80006b6:	dc08      	bgt.n	80006ca <__aeabi_fadd+0x226>
 80006b8:	4652      	mov	r2, sl
 80006ba:	2120      	movs	r1, #32
 80006bc:	4650      	mov	r0, sl
 80006be:	40da      	lsrs	r2, r3
 80006c0:	1acb      	subs	r3, r1, r3
 80006c2:	4098      	lsls	r0, r3
 80006c4:	1e43      	subs	r3, r0, #1
 80006c6:	4198      	sbcs	r0, r3
 80006c8:	4302      	orrs	r2, r0
 80006ca:	0037      	movs	r7, r6
 80006cc:	1952      	adds	r2, r2, r5
 80006ce:	e784      	b.n	80005da <__aeabi_fadd+0x136>
 80006d0:	4a41      	ldr	r2, [pc, #260]	; (80007d8 <__aeabi_fadd+0x334>)
 80006d2:	1a3f      	subs	r7, r7, r0
 80006d4:	4032      	ands	r2, r6
 80006d6:	e732      	b.n	800053e <__aeabi_fadd+0x9a>
 80006d8:	4653      	mov	r3, sl
 80006da:	1b5e      	subs	r6, r3, r5
 80006dc:	0173      	lsls	r3, r6, #5
 80006de:	d42d      	bmi.n	800073c <__aeabi_fadd+0x298>
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_fadd+0x242>
 80006e4:	e717      	b.n	8000516 <__aeabi_fadd+0x72>
 80006e6:	2200      	movs	r2, #0
 80006e8:	2400      	movs	r4, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	4694      	mov	ip, r2
 80006ee:	e738      	b.n	8000562 <__aeabi_fadd+0xbe>
 80006f0:	2eff      	cmp	r6, #255	; 0xff
 80006f2:	d100      	bne.n	80006f6 <__aeabi_fadd+0x252>
 80006f4:	e74f      	b.n	8000596 <__aeabi_fadd+0xf2>
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	4650      	mov	r0, sl
 80006fa:	04d2      	lsls	r2, r2, #19
 80006fc:	4310      	orrs	r0, r2
 80006fe:	4682      	mov	sl, r0
 8000700:	2201      	movs	r2, #1
 8000702:	2b1b      	cmp	r3, #27
 8000704:	dc08      	bgt.n	8000718 <__aeabi_fadd+0x274>
 8000706:	4652      	mov	r2, sl
 8000708:	2420      	movs	r4, #32
 800070a:	4650      	mov	r0, sl
 800070c:	40da      	lsrs	r2, r3
 800070e:	1ae3      	subs	r3, r4, r3
 8000710:	4098      	lsls	r0, r3
 8000712:	1e43      	subs	r3, r0, #1
 8000714:	4198      	sbcs	r0, r3
 8000716:	4302      	orrs	r2, r0
 8000718:	000c      	movs	r4, r1
 800071a:	0037      	movs	r7, r6
 800071c:	1aaa      	subs	r2, r5, r2
 800071e:	e6f5      	b.n	800050c <__aeabi_fadd+0x68>
 8000720:	2800      	cmp	r0, #0
 8000722:	d093      	beq.n	800064c <__aeabi_fadd+0x1a8>
 8000724:	3b01      	subs	r3, #1
 8000726:	2b00      	cmp	r3, #0
 8000728:	d04f      	beq.n	80007ca <__aeabi_fadd+0x326>
 800072a:	2eff      	cmp	r6, #255	; 0xff
 800072c:	d1c1      	bne.n	80006b2 <__aeabi_fadd+0x20e>
 800072e:	4642      	mov	r2, r8
 8000730:	e733      	b.n	800059a <__aeabi_fadd+0xf6>
 8000732:	2fff      	cmp	r7, #255	; 0xff
 8000734:	d0ac      	beq.n	8000690 <__aeabi_fadd+0x1ec>
 8000736:	4455      	add	r5, sl
 8000738:	086a      	lsrs	r2, r5, #1
 800073a:	e7a4      	b.n	8000686 <__aeabi_fadd+0x1e2>
 800073c:	4653      	mov	r3, sl
 800073e:	000c      	movs	r4, r1
 8000740:	1aee      	subs	r6, r5, r3
 8000742:	e6e8      	b.n	8000516 <__aeabi_fadd+0x72>
 8000744:	4653      	mov	r3, sl
 8000746:	2b00      	cmp	r3, #0
 8000748:	d128      	bne.n	800079c <__aeabi_fadd+0x2f8>
 800074a:	2d00      	cmp	r5, #0
 800074c:	d000      	beq.n	8000750 <__aeabi_fadd+0x2ac>
 800074e:	e722      	b.n	8000596 <__aeabi_fadd+0xf2>
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	03db      	lsls	r3, r3, #15
 8000754:	469c      	mov	ip, r3
 8000756:	2400      	movs	r4, #0
 8000758:	23ff      	movs	r3, #255	; 0xff
 800075a:	e702      	b.n	8000562 <__aeabi_fadd+0xbe>
 800075c:	002a      	movs	r2, r5
 800075e:	4452      	add	r2, sl
 8000760:	e73b      	b.n	80005da <__aeabi_fadd+0x136>
 8000762:	4653      	mov	r3, sl
 8000764:	1b5a      	subs	r2, r3, r5
 8000766:	e6d1      	b.n	800050c <__aeabi_fadd+0x68>
 8000768:	2800      	cmp	r0, #0
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x2ca>
 800076c:	e714      	b.n	8000598 <__aeabi_fadd+0xf4>
 800076e:	2d00      	cmp	r5, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x2d0>
 8000772:	e712      	b.n	800059a <__aeabi_fadd+0xf6>
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	03db      	lsls	r3, r3, #15
 8000778:	421a      	tst	r2, r3
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x2da>
 800077c:	e70d      	b.n	800059a <__aeabi_fadd+0xf6>
 800077e:	4641      	mov	r1, r8
 8000780:	4219      	tst	r1, r3
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x2e2>
 8000784:	e709      	b.n	800059a <__aeabi_fadd+0xf6>
 8000786:	4642      	mov	r2, r8
 8000788:	e707      	b.n	800059a <__aeabi_fadd+0xf6>
 800078a:	000c      	movs	r4, r1
 800078c:	0037      	movs	r7, r6
 800078e:	1aaa      	subs	r2, r5, r2
 8000790:	e6bc      	b.n	800050c <__aeabi_fadd+0x68>
 8000792:	2d00      	cmp	r5, #0
 8000794:	d013      	beq.n	80007be <__aeabi_fadd+0x31a>
 8000796:	000c      	movs	r4, r1
 8000798:	46c4      	mov	ip, r8
 800079a:	e6e2      	b.n	8000562 <__aeabi_fadd+0xbe>
 800079c:	2d00      	cmp	r5, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fadd+0x2fe>
 80007a0:	e6fb      	b.n	800059a <__aeabi_fadd+0xf6>
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	03db      	lsls	r3, r3, #15
 80007a6:	421a      	tst	r2, r3
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x308>
 80007aa:	e6f6      	b.n	800059a <__aeabi_fadd+0xf6>
 80007ac:	4640      	mov	r0, r8
 80007ae:	4218      	tst	r0, r3
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x310>
 80007b2:	e6f2      	b.n	800059a <__aeabi_fadd+0xf6>
 80007b4:	000c      	movs	r4, r1
 80007b6:	e6ef      	b.n	8000598 <__aeabi_fadd+0xf4>
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	d000      	beq.n	80007be <__aeabi_fadd+0x31a>
 80007bc:	e763      	b.n	8000686 <__aeabi_fadd+0x1e2>
 80007be:	2200      	movs	r2, #0
 80007c0:	2400      	movs	r4, #0
 80007c2:	4694      	mov	ip, r2
 80007c4:	e6cd      	b.n	8000562 <__aeabi_fadd+0xbe>
 80007c6:	46c4      	mov	ip, r8
 80007c8:	e6cb      	b.n	8000562 <__aeabi_fadd+0xbe>
 80007ca:	002a      	movs	r2, r5
 80007cc:	0037      	movs	r7, r6
 80007ce:	4452      	add	r2, sl
 80007d0:	e703      	b.n	80005da <__aeabi_fadd+0x136>
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	7dffffff 	.word	0x7dffffff
 80007d8:	fbffffff 	.word	0xfbffffff

080007dc <__aeabi_fdiv>:
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	464f      	mov	r7, r9
 80007e0:	4646      	mov	r6, r8
 80007e2:	46d6      	mov	lr, sl
 80007e4:	0245      	lsls	r5, r0, #9
 80007e6:	b5c0      	push	{r6, r7, lr}
 80007e8:	0047      	lsls	r7, r0, #1
 80007ea:	1c0c      	adds	r4, r1, #0
 80007ec:	0a6d      	lsrs	r5, r5, #9
 80007ee:	0e3f      	lsrs	r7, r7, #24
 80007f0:	0fc6      	lsrs	r6, r0, #31
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d066      	beq.n	80008c4 <__aeabi_fdiv+0xe8>
 80007f6:	2fff      	cmp	r7, #255	; 0xff
 80007f8:	d06c      	beq.n	80008d4 <__aeabi_fdiv+0xf8>
 80007fa:	2300      	movs	r3, #0
 80007fc:	00ea      	lsls	r2, r5, #3
 80007fe:	2580      	movs	r5, #128	; 0x80
 8000800:	4699      	mov	r9, r3
 8000802:	469a      	mov	sl, r3
 8000804:	04ed      	lsls	r5, r5, #19
 8000806:	4315      	orrs	r5, r2
 8000808:	3f7f      	subs	r7, #127	; 0x7f
 800080a:	0260      	lsls	r0, r4, #9
 800080c:	0061      	lsls	r1, r4, #1
 800080e:	0a43      	lsrs	r3, r0, #9
 8000810:	4698      	mov	r8, r3
 8000812:	0e09      	lsrs	r1, r1, #24
 8000814:	0fe4      	lsrs	r4, r4, #31
 8000816:	2900      	cmp	r1, #0
 8000818:	d048      	beq.n	80008ac <__aeabi_fdiv+0xd0>
 800081a:	29ff      	cmp	r1, #255	; 0xff
 800081c:	d010      	beq.n	8000840 <__aeabi_fdiv+0x64>
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	00d8      	lsls	r0, r3, #3
 8000822:	04d2      	lsls	r2, r2, #19
 8000824:	4302      	orrs	r2, r0
 8000826:	4690      	mov	r8, r2
 8000828:	2000      	movs	r0, #0
 800082a:	397f      	subs	r1, #127	; 0x7f
 800082c:	464a      	mov	r2, r9
 800082e:	0033      	movs	r3, r6
 8000830:	1a7f      	subs	r7, r7, r1
 8000832:	4302      	orrs	r2, r0
 8000834:	496c      	ldr	r1, [pc, #432]	; (80009e8 <__aeabi_fdiv+0x20c>)
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	588a      	ldr	r2, [r1, r2]
 800083a:	4063      	eors	r3, r4
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4697      	mov	pc, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d16d      	bne.n	8000920 <__aeabi_fdiv+0x144>
 8000844:	2002      	movs	r0, #2
 8000846:	3fff      	subs	r7, #255	; 0xff
 8000848:	e033      	b.n	80008b2 <__aeabi_fdiv+0xd6>
 800084a:	2300      	movs	r3, #0
 800084c:	4698      	mov	r8, r3
 800084e:	0026      	movs	r6, r4
 8000850:	4645      	mov	r5, r8
 8000852:	4682      	mov	sl, r0
 8000854:	4653      	mov	r3, sl
 8000856:	2b02      	cmp	r3, #2
 8000858:	d100      	bne.n	800085c <__aeabi_fdiv+0x80>
 800085a:	e07f      	b.n	800095c <__aeabi_fdiv+0x180>
 800085c:	2b03      	cmp	r3, #3
 800085e:	d100      	bne.n	8000862 <__aeabi_fdiv+0x86>
 8000860:	e094      	b.n	800098c <__aeabi_fdiv+0x1b0>
 8000862:	2b01      	cmp	r3, #1
 8000864:	d017      	beq.n	8000896 <__aeabi_fdiv+0xba>
 8000866:	0038      	movs	r0, r7
 8000868:	307f      	adds	r0, #127	; 0x7f
 800086a:	2800      	cmp	r0, #0
 800086c:	dd5f      	ble.n	800092e <__aeabi_fdiv+0x152>
 800086e:	076b      	lsls	r3, r5, #29
 8000870:	d004      	beq.n	800087c <__aeabi_fdiv+0xa0>
 8000872:	230f      	movs	r3, #15
 8000874:	402b      	ands	r3, r5
 8000876:	2b04      	cmp	r3, #4
 8000878:	d000      	beq.n	800087c <__aeabi_fdiv+0xa0>
 800087a:	3504      	adds	r5, #4
 800087c:	012b      	lsls	r3, r5, #4
 800087e:	d503      	bpl.n	8000888 <__aeabi_fdiv+0xac>
 8000880:	0038      	movs	r0, r7
 8000882:	4b5a      	ldr	r3, [pc, #360]	; (80009ec <__aeabi_fdiv+0x210>)
 8000884:	3080      	adds	r0, #128	; 0x80
 8000886:	401d      	ands	r5, r3
 8000888:	28fe      	cmp	r0, #254	; 0xfe
 800088a:	dc67      	bgt.n	800095c <__aeabi_fdiv+0x180>
 800088c:	01ad      	lsls	r5, r5, #6
 800088e:	0a6d      	lsrs	r5, r5, #9
 8000890:	b2c0      	uxtb	r0, r0
 8000892:	e002      	b.n	800089a <__aeabi_fdiv+0xbe>
 8000894:	001e      	movs	r6, r3
 8000896:	2000      	movs	r0, #0
 8000898:	2500      	movs	r5, #0
 800089a:	05c0      	lsls	r0, r0, #23
 800089c:	4328      	orrs	r0, r5
 800089e:	07f6      	lsls	r6, r6, #31
 80008a0:	4330      	orrs	r0, r6
 80008a2:	bce0      	pop	{r5, r6, r7}
 80008a4:	46ba      	mov	sl, r7
 80008a6:	46b1      	mov	r9, r6
 80008a8:	46a8      	mov	r8, r5
 80008aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d12b      	bne.n	8000908 <__aeabi_fdiv+0x12c>
 80008b0:	2001      	movs	r0, #1
 80008b2:	464a      	mov	r2, r9
 80008b4:	0033      	movs	r3, r6
 80008b6:	494e      	ldr	r1, [pc, #312]	; (80009f0 <__aeabi_fdiv+0x214>)
 80008b8:	4302      	orrs	r2, r0
 80008ba:	0092      	lsls	r2, r2, #2
 80008bc:	588a      	ldr	r2, [r1, r2]
 80008be:	4063      	eors	r3, r4
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4697      	mov	pc, r2
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d113      	bne.n	80008f0 <__aeabi_fdiv+0x114>
 80008c8:	2304      	movs	r3, #4
 80008ca:	4699      	mov	r9, r3
 80008cc:	3b03      	subs	r3, #3
 80008ce:	2700      	movs	r7, #0
 80008d0:	469a      	mov	sl, r3
 80008d2:	e79a      	b.n	800080a <__aeabi_fdiv+0x2e>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d105      	bne.n	80008e4 <__aeabi_fdiv+0x108>
 80008d8:	2308      	movs	r3, #8
 80008da:	4699      	mov	r9, r3
 80008dc:	3b06      	subs	r3, #6
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e792      	b.n	800080a <__aeabi_fdiv+0x2e>
 80008e4:	230c      	movs	r3, #12
 80008e6:	4699      	mov	r9, r3
 80008e8:	3b09      	subs	r3, #9
 80008ea:	27ff      	movs	r7, #255	; 0xff
 80008ec:	469a      	mov	sl, r3
 80008ee:	e78c      	b.n	800080a <__aeabi_fdiv+0x2e>
 80008f0:	0028      	movs	r0, r5
 80008f2:	f000 fcd7 	bl	80012a4 <__clzsi2>
 80008f6:	2776      	movs	r7, #118	; 0x76
 80008f8:	1f43      	subs	r3, r0, #5
 80008fa:	409d      	lsls	r5, r3
 80008fc:	2300      	movs	r3, #0
 80008fe:	427f      	negs	r7, r7
 8000900:	4699      	mov	r9, r3
 8000902:	469a      	mov	sl, r3
 8000904:	1a3f      	subs	r7, r7, r0
 8000906:	e780      	b.n	800080a <__aeabi_fdiv+0x2e>
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fccb 	bl	80012a4 <__clzsi2>
 800090e:	4642      	mov	r2, r8
 8000910:	1f43      	subs	r3, r0, #5
 8000912:	2176      	movs	r1, #118	; 0x76
 8000914:	409a      	lsls	r2, r3
 8000916:	4249      	negs	r1, r1
 8000918:	1a09      	subs	r1, r1, r0
 800091a:	4690      	mov	r8, r2
 800091c:	2000      	movs	r0, #0
 800091e:	e785      	b.n	800082c <__aeabi_fdiv+0x50>
 8000920:	21ff      	movs	r1, #255	; 0xff
 8000922:	2003      	movs	r0, #3
 8000924:	e782      	b.n	800082c <__aeabi_fdiv+0x50>
 8000926:	001e      	movs	r6, r3
 8000928:	20ff      	movs	r0, #255	; 0xff
 800092a:	2500      	movs	r5, #0
 800092c:	e7b5      	b.n	800089a <__aeabi_fdiv+0xbe>
 800092e:	2301      	movs	r3, #1
 8000930:	1a1b      	subs	r3, r3, r0
 8000932:	2b1b      	cmp	r3, #27
 8000934:	dcaf      	bgt.n	8000896 <__aeabi_fdiv+0xba>
 8000936:	379e      	adds	r7, #158	; 0x9e
 8000938:	0029      	movs	r1, r5
 800093a:	40bd      	lsls	r5, r7
 800093c:	40d9      	lsrs	r1, r3
 800093e:	1e6a      	subs	r2, r5, #1
 8000940:	4195      	sbcs	r5, r2
 8000942:	430d      	orrs	r5, r1
 8000944:	076b      	lsls	r3, r5, #29
 8000946:	d004      	beq.n	8000952 <__aeabi_fdiv+0x176>
 8000948:	230f      	movs	r3, #15
 800094a:	402b      	ands	r3, r5
 800094c:	2b04      	cmp	r3, #4
 800094e:	d000      	beq.n	8000952 <__aeabi_fdiv+0x176>
 8000950:	3504      	adds	r5, #4
 8000952:	016b      	lsls	r3, r5, #5
 8000954:	d544      	bpl.n	80009e0 <__aeabi_fdiv+0x204>
 8000956:	2001      	movs	r0, #1
 8000958:	2500      	movs	r5, #0
 800095a:	e79e      	b.n	800089a <__aeabi_fdiv+0xbe>
 800095c:	20ff      	movs	r0, #255	; 0xff
 800095e:	2500      	movs	r5, #0
 8000960:	e79b      	b.n	800089a <__aeabi_fdiv+0xbe>
 8000962:	2580      	movs	r5, #128	; 0x80
 8000964:	2600      	movs	r6, #0
 8000966:	20ff      	movs	r0, #255	; 0xff
 8000968:	03ed      	lsls	r5, r5, #15
 800096a:	e796      	b.n	800089a <__aeabi_fdiv+0xbe>
 800096c:	2300      	movs	r3, #0
 800096e:	4698      	mov	r8, r3
 8000970:	2080      	movs	r0, #128	; 0x80
 8000972:	03c0      	lsls	r0, r0, #15
 8000974:	4205      	tst	r5, r0
 8000976:	d009      	beq.n	800098c <__aeabi_fdiv+0x1b0>
 8000978:	4643      	mov	r3, r8
 800097a:	4203      	tst	r3, r0
 800097c:	d106      	bne.n	800098c <__aeabi_fdiv+0x1b0>
 800097e:	4645      	mov	r5, r8
 8000980:	4305      	orrs	r5, r0
 8000982:	026d      	lsls	r5, r5, #9
 8000984:	0026      	movs	r6, r4
 8000986:	20ff      	movs	r0, #255	; 0xff
 8000988:	0a6d      	lsrs	r5, r5, #9
 800098a:	e786      	b.n	800089a <__aeabi_fdiv+0xbe>
 800098c:	2080      	movs	r0, #128	; 0x80
 800098e:	03c0      	lsls	r0, r0, #15
 8000990:	4305      	orrs	r5, r0
 8000992:	026d      	lsls	r5, r5, #9
 8000994:	20ff      	movs	r0, #255	; 0xff
 8000996:	0a6d      	lsrs	r5, r5, #9
 8000998:	e77f      	b.n	800089a <__aeabi_fdiv+0xbe>
 800099a:	4641      	mov	r1, r8
 800099c:	016a      	lsls	r2, r5, #5
 800099e:	0148      	lsls	r0, r1, #5
 80009a0:	4282      	cmp	r2, r0
 80009a2:	d219      	bcs.n	80009d8 <__aeabi_fdiv+0x1fc>
 80009a4:	211b      	movs	r1, #27
 80009a6:	2500      	movs	r5, #0
 80009a8:	3f01      	subs	r7, #1
 80009aa:	2601      	movs	r6, #1
 80009ac:	0014      	movs	r4, r2
 80009ae:	006d      	lsls	r5, r5, #1
 80009b0:	0052      	lsls	r2, r2, #1
 80009b2:	2c00      	cmp	r4, #0
 80009b4:	db01      	blt.n	80009ba <__aeabi_fdiv+0x1de>
 80009b6:	4290      	cmp	r0, r2
 80009b8:	d801      	bhi.n	80009be <__aeabi_fdiv+0x1e2>
 80009ba:	1a12      	subs	r2, r2, r0
 80009bc:	4335      	orrs	r5, r6
 80009be:	3901      	subs	r1, #1
 80009c0:	2900      	cmp	r1, #0
 80009c2:	d1f3      	bne.n	80009ac <__aeabi_fdiv+0x1d0>
 80009c4:	1e50      	subs	r0, r2, #1
 80009c6:	4182      	sbcs	r2, r0
 80009c8:	0038      	movs	r0, r7
 80009ca:	307f      	adds	r0, #127	; 0x7f
 80009cc:	001e      	movs	r6, r3
 80009ce:	4315      	orrs	r5, r2
 80009d0:	2800      	cmp	r0, #0
 80009d2:	dd00      	ble.n	80009d6 <__aeabi_fdiv+0x1fa>
 80009d4:	e74b      	b.n	800086e <__aeabi_fdiv+0x92>
 80009d6:	e7aa      	b.n	800092e <__aeabi_fdiv+0x152>
 80009d8:	211a      	movs	r1, #26
 80009da:	2501      	movs	r5, #1
 80009dc:	1a12      	subs	r2, r2, r0
 80009de:	e7e4      	b.n	80009aa <__aeabi_fdiv+0x1ce>
 80009e0:	01ad      	lsls	r5, r5, #6
 80009e2:	2000      	movs	r0, #0
 80009e4:	0a6d      	lsrs	r5, r5, #9
 80009e6:	e758      	b.n	800089a <__aeabi_fdiv+0xbe>
 80009e8:	0800bf9c 	.word	0x0800bf9c
 80009ec:	f7ffffff 	.word	0xf7ffffff
 80009f0:	0800bfdc 	.word	0x0800bfdc

080009f4 <__eqsf2>:
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	0042      	lsls	r2, r0, #1
 80009f8:	024e      	lsls	r6, r1, #9
 80009fa:	004c      	lsls	r4, r1, #1
 80009fc:	0245      	lsls	r5, r0, #9
 80009fe:	0a6d      	lsrs	r5, r5, #9
 8000a00:	0e12      	lsrs	r2, r2, #24
 8000a02:	0fc3      	lsrs	r3, r0, #31
 8000a04:	0a76      	lsrs	r6, r6, #9
 8000a06:	0e24      	lsrs	r4, r4, #24
 8000a08:	0fc9      	lsrs	r1, r1, #31
 8000a0a:	2aff      	cmp	r2, #255	; 0xff
 8000a0c:	d00f      	beq.n	8000a2e <__eqsf2+0x3a>
 8000a0e:	2cff      	cmp	r4, #255	; 0xff
 8000a10:	d011      	beq.n	8000a36 <__eqsf2+0x42>
 8000a12:	2001      	movs	r0, #1
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	d000      	beq.n	8000a1a <__eqsf2+0x26>
 8000a18:	bd70      	pop	{r4, r5, r6, pc}
 8000a1a:	42b5      	cmp	r5, r6
 8000a1c:	d1fc      	bne.n	8000a18 <__eqsf2+0x24>
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d00d      	beq.n	8000a3e <__eqsf2+0x4a>
 8000a22:	2a00      	cmp	r2, #0
 8000a24:	d1f8      	bne.n	8000a18 <__eqsf2+0x24>
 8000a26:	0028      	movs	r0, r5
 8000a28:	1e45      	subs	r5, r0, #1
 8000a2a:	41a8      	sbcs	r0, r5
 8000a2c:	e7f4      	b.n	8000a18 <__eqsf2+0x24>
 8000a2e:	2001      	movs	r0, #1
 8000a30:	2d00      	cmp	r5, #0
 8000a32:	d1f1      	bne.n	8000a18 <__eqsf2+0x24>
 8000a34:	e7eb      	b.n	8000a0e <__eqsf2+0x1a>
 8000a36:	2001      	movs	r0, #1
 8000a38:	2e00      	cmp	r6, #0
 8000a3a:	d1ed      	bne.n	8000a18 <__eqsf2+0x24>
 8000a3c:	e7e9      	b.n	8000a12 <__eqsf2+0x1e>
 8000a3e:	2000      	movs	r0, #0
 8000a40:	e7ea      	b.n	8000a18 <__eqsf2+0x24>
 8000a42:	46c0      	nop			; (mov r8, r8)

08000a44 <__gesf2>:
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	0042      	lsls	r2, r0, #1
 8000a48:	0246      	lsls	r6, r0, #9
 8000a4a:	024d      	lsls	r5, r1, #9
 8000a4c:	004c      	lsls	r4, r1, #1
 8000a4e:	0fc3      	lsrs	r3, r0, #31
 8000a50:	0a76      	lsrs	r6, r6, #9
 8000a52:	0e12      	lsrs	r2, r2, #24
 8000a54:	0a6d      	lsrs	r5, r5, #9
 8000a56:	0e24      	lsrs	r4, r4, #24
 8000a58:	0fc8      	lsrs	r0, r1, #31
 8000a5a:	2aff      	cmp	r2, #255	; 0xff
 8000a5c:	d01f      	beq.n	8000a9e <__gesf2+0x5a>
 8000a5e:	2cff      	cmp	r4, #255	; 0xff
 8000a60:	d010      	beq.n	8000a84 <__gesf2+0x40>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d11f      	bne.n	8000aa6 <__gesf2+0x62>
 8000a66:	4271      	negs	r1, r6
 8000a68:	4171      	adcs	r1, r6
 8000a6a:	2c00      	cmp	r4, #0
 8000a6c:	d101      	bne.n	8000a72 <__gesf2+0x2e>
 8000a6e:	2d00      	cmp	r5, #0
 8000a70:	d01e      	beq.n	8000ab0 <__gesf2+0x6c>
 8000a72:	2900      	cmp	r1, #0
 8000a74:	d10e      	bne.n	8000a94 <__gesf2+0x50>
 8000a76:	4283      	cmp	r3, r0
 8000a78:	d01e      	beq.n	8000ab8 <__gesf2+0x74>
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	1e58      	subs	r0, r3, #1
 8000a7e:	4008      	ands	r0, r1
 8000a80:	3801      	subs	r0, #1
 8000a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d126      	bne.n	8000ad6 <__gesf2+0x92>
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	d1f4      	bne.n	8000a76 <__gesf2+0x32>
 8000a8c:	4271      	negs	r1, r6
 8000a8e:	4171      	adcs	r1, r6
 8000a90:	2900      	cmp	r1, #0
 8000a92:	d0f0      	beq.n	8000a76 <__gesf2+0x32>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d1f4      	bne.n	8000a82 <__gesf2+0x3e>
 8000a98:	2001      	movs	r0, #1
 8000a9a:	4240      	negs	r0, r0
 8000a9c:	e7f1      	b.n	8000a82 <__gesf2+0x3e>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d119      	bne.n	8000ad6 <__gesf2+0x92>
 8000aa2:	2cff      	cmp	r4, #255	; 0xff
 8000aa4:	d0ee      	beq.n	8000a84 <__gesf2+0x40>
 8000aa6:	2c00      	cmp	r4, #0
 8000aa8:	d1e5      	bne.n	8000a76 <__gesf2+0x32>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	d1e3      	bne.n	8000a76 <__gesf2+0x32>
 8000aae:	e7e4      	b.n	8000a7a <__gesf2+0x36>
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d0e5      	beq.n	8000a82 <__gesf2+0x3e>
 8000ab6:	e7e0      	b.n	8000a7a <__gesf2+0x36>
 8000ab8:	42a2      	cmp	r2, r4
 8000aba:	dc05      	bgt.n	8000ac8 <__gesf2+0x84>
 8000abc:	dbea      	blt.n	8000a94 <__gesf2+0x50>
 8000abe:	42ae      	cmp	r6, r5
 8000ac0:	d802      	bhi.n	8000ac8 <__gesf2+0x84>
 8000ac2:	d3e7      	bcc.n	8000a94 <__gesf2+0x50>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e7dc      	b.n	8000a82 <__gesf2+0x3e>
 8000ac8:	4241      	negs	r1, r0
 8000aca:	4141      	adcs	r1, r0
 8000acc:	4248      	negs	r0, r1
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4008      	ands	r0, r1
 8000ad2:	3801      	subs	r0, #1
 8000ad4:	e7d5      	b.n	8000a82 <__gesf2+0x3e>
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	4240      	negs	r0, r0
 8000ada:	e7d2      	b.n	8000a82 <__gesf2+0x3e>

08000adc <__lesf2>:
 8000adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0246      	lsls	r6, r0, #9
 8000ae2:	024d      	lsls	r5, r1, #9
 8000ae4:	004c      	lsls	r4, r1, #1
 8000ae6:	0fc3      	lsrs	r3, r0, #31
 8000ae8:	0a76      	lsrs	r6, r6, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a6d      	lsrs	r5, r5, #9
 8000aee:	0e24      	lsrs	r4, r4, #24
 8000af0:	0fc8      	lsrs	r0, r1, #31
 8000af2:	2aff      	cmp	r2, #255	; 0xff
 8000af4:	d00d      	beq.n	8000b12 <__lesf2+0x36>
 8000af6:	2cff      	cmp	r4, #255	; 0xff
 8000af8:	d00f      	beq.n	8000b1a <__lesf2+0x3e>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d123      	bne.n	8000b46 <__lesf2+0x6a>
 8000afe:	4271      	negs	r1, r6
 8000b00:	4171      	adcs	r1, r6
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d10f      	bne.n	8000b26 <__lesf2+0x4a>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d10d      	bne.n	8000b26 <__lesf2+0x4a>
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d014      	beq.n	8000b3a <__lesf2+0x5e>
 8000b10:	e00d      	b.n	8000b2e <__lesf2+0x52>
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d110      	bne.n	8000b38 <__lesf2+0x5c>
 8000b16:	2cff      	cmp	r4, #255	; 0xff
 8000b18:	d115      	bne.n	8000b46 <__lesf2+0x6a>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d10c      	bne.n	8000b38 <__lesf2+0x5c>
 8000b1e:	2a00      	cmp	r2, #0
 8000b20:	d103      	bne.n	8000b2a <__lesf2+0x4e>
 8000b22:	4271      	negs	r1, r6
 8000b24:	4171      	adcs	r1, r6
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d108      	bne.n	8000b3c <__lesf2+0x60>
 8000b2a:	4283      	cmp	r3, r0
 8000b2c:	d010      	beq.n	8000b50 <__lesf2+0x74>
 8000b2e:	2102      	movs	r1, #2
 8000b30:	1e58      	subs	r0, r3, #1
 8000b32:	4008      	ands	r0, r1
 8000b34:	3801      	subs	r0, #1
 8000b36:	e000      	b.n	8000b3a <__lesf2+0x5e>
 8000b38:	2002      	movs	r0, #2
 8000b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d1fc      	bne.n	8000b3a <__lesf2+0x5e>
 8000b40:	2001      	movs	r0, #1
 8000b42:	4240      	negs	r0, r0
 8000b44:	e7f9      	b.n	8000b3a <__lesf2+0x5e>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d1ef      	bne.n	8000b2a <__lesf2+0x4e>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d1ed      	bne.n	8000b2a <__lesf2+0x4e>
 8000b4e:	e7ee      	b.n	8000b2e <__lesf2+0x52>
 8000b50:	42a2      	cmp	r2, r4
 8000b52:	dc05      	bgt.n	8000b60 <__lesf2+0x84>
 8000b54:	dbf2      	blt.n	8000b3c <__lesf2+0x60>
 8000b56:	42ae      	cmp	r6, r5
 8000b58:	d802      	bhi.n	8000b60 <__lesf2+0x84>
 8000b5a:	d3ef      	bcc.n	8000b3c <__lesf2+0x60>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e7ec      	b.n	8000b3a <__lesf2+0x5e>
 8000b60:	4241      	negs	r1, r0
 8000b62:	4141      	adcs	r1, r0
 8000b64:	4248      	negs	r0, r1
 8000b66:	2102      	movs	r1, #2
 8000b68:	4008      	ands	r0, r1
 8000b6a:	3801      	subs	r0, #1
 8000b6c:	e7e5      	b.n	8000b3a <__lesf2+0x5e>
 8000b6e:	46c0      	nop			; (mov r8, r8)

08000b70 <__aeabi_fmul>:
 8000b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b72:	4657      	mov	r7, sl
 8000b74:	464e      	mov	r6, r9
 8000b76:	4645      	mov	r5, r8
 8000b78:	46de      	mov	lr, fp
 8000b7a:	0244      	lsls	r4, r0, #9
 8000b7c:	b5e0      	push	{r5, r6, r7, lr}
 8000b7e:	0045      	lsls	r5, r0, #1
 8000b80:	1c0f      	adds	r7, r1, #0
 8000b82:	0a64      	lsrs	r4, r4, #9
 8000b84:	0e2d      	lsrs	r5, r5, #24
 8000b86:	0fc6      	lsrs	r6, r0, #31
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d047      	beq.n	8000c1c <__aeabi_fmul+0xac>
 8000b8c:	2dff      	cmp	r5, #255	; 0xff
 8000b8e:	d04d      	beq.n	8000c2c <__aeabi_fmul+0xbc>
 8000b90:	2300      	movs	r3, #0
 8000b92:	2080      	movs	r0, #128	; 0x80
 8000b94:	469a      	mov	sl, r3
 8000b96:	469b      	mov	fp, r3
 8000b98:	00e4      	lsls	r4, r4, #3
 8000b9a:	04c0      	lsls	r0, r0, #19
 8000b9c:	4304      	orrs	r4, r0
 8000b9e:	3d7f      	subs	r5, #127	; 0x7f
 8000ba0:	0278      	lsls	r0, r7, #9
 8000ba2:	0a43      	lsrs	r3, r0, #9
 8000ba4:	4699      	mov	r9, r3
 8000ba6:	007a      	lsls	r2, r7, #1
 8000ba8:	0ffb      	lsrs	r3, r7, #31
 8000baa:	4698      	mov	r8, r3
 8000bac:	0e12      	lsrs	r2, r2, #24
 8000bae:	464b      	mov	r3, r9
 8000bb0:	d044      	beq.n	8000c3c <__aeabi_fmul+0xcc>
 8000bb2:	2aff      	cmp	r2, #255	; 0xff
 8000bb4:	d011      	beq.n	8000bda <__aeabi_fmul+0x6a>
 8000bb6:	00d8      	lsls	r0, r3, #3
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	04db      	lsls	r3, r3, #19
 8000bbc:	4303      	orrs	r3, r0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	3a7f      	subs	r2, #127	; 0x7f
 8000bc4:	18ad      	adds	r5, r5, r2
 8000bc6:	4647      	mov	r7, r8
 8000bc8:	4653      	mov	r3, sl
 8000bca:	4077      	eors	r7, r6
 8000bcc:	1c69      	adds	r1, r5, #1
 8000bce:	2b0f      	cmp	r3, #15
 8000bd0:	d83f      	bhi.n	8000c52 <__aeabi_fmul+0xe2>
 8000bd2:	4a72      	ldr	r2, [pc, #456]	; (8000d9c <__aeabi_fmul+0x22c>)
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	58d3      	ldr	r3, [r2, r3]
 8000bd8:	469f      	mov	pc, r3
 8000bda:	35ff      	adds	r5, #255	; 0xff
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_fmul+0x72>
 8000be0:	e079      	b.n	8000cd6 <__aeabi_fmul+0x166>
 8000be2:	4652      	mov	r2, sl
 8000be4:	2302      	movs	r3, #2
 8000be6:	431a      	orrs	r2, r3
 8000be8:	4692      	mov	sl, r2
 8000bea:	2002      	movs	r0, #2
 8000bec:	e7eb      	b.n	8000bc6 <__aeabi_fmul+0x56>
 8000bee:	4647      	mov	r7, r8
 8000bf0:	464c      	mov	r4, r9
 8000bf2:	4683      	mov	fp, r0
 8000bf4:	465b      	mov	r3, fp
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d028      	beq.n	8000c4c <__aeabi_fmul+0xdc>
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fmul+0x90>
 8000bfe:	e0c6      	b.n	8000d8e <__aeabi_fmul+0x21e>
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d14f      	bne.n	8000ca4 <__aeabi_fmul+0x134>
 8000c04:	2000      	movs	r0, #0
 8000c06:	2400      	movs	r4, #0
 8000c08:	05c0      	lsls	r0, r0, #23
 8000c0a:	07ff      	lsls	r7, r7, #31
 8000c0c:	4320      	orrs	r0, r4
 8000c0e:	4338      	orrs	r0, r7
 8000c10:	bcf0      	pop	{r4, r5, r6, r7}
 8000c12:	46bb      	mov	fp, r7
 8000c14:	46b2      	mov	sl, r6
 8000c16:	46a9      	mov	r9, r5
 8000c18:	46a0      	mov	r8, r4
 8000c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c1c:	2c00      	cmp	r4, #0
 8000c1e:	d171      	bne.n	8000d04 <__aeabi_fmul+0x194>
 8000c20:	2304      	movs	r3, #4
 8000c22:	469a      	mov	sl, r3
 8000c24:	3b03      	subs	r3, #3
 8000c26:	2500      	movs	r5, #0
 8000c28:	469b      	mov	fp, r3
 8000c2a:	e7b9      	b.n	8000ba0 <__aeabi_fmul+0x30>
 8000c2c:	2c00      	cmp	r4, #0
 8000c2e:	d163      	bne.n	8000cf8 <__aeabi_fmul+0x188>
 8000c30:	2308      	movs	r3, #8
 8000c32:	469a      	mov	sl, r3
 8000c34:	3b06      	subs	r3, #6
 8000c36:	25ff      	movs	r5, #255	; 0xff
 8000c38:	469b      	mov	fp, r3
 8000c3a:	e7b1      	b.n	8000ba0 <__aeabi_fmul+0x30>
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d150      	bne.n	8000ce2 <__aeabi_fmul+0x172>
 8000c40:	4652      	mov	r2, sl
 8000c42:	3301      	adds	r3, #1
 8000c44:	431a      	orrs	r2, r3
 8000c46:	4692      	mov	sl, r2
 8000c48:	2001      	movs	r0, #1
 8000c4a:	e7bc      	b.n	8000bc6 <__aeabi_fmul+0x56>
 8000c4c:	20ff      	movs	r0, #255	; 0xff
 8000c4e:	2400      	movs	r4, #0
 8000c50:	e7da      	b.n	8000c08 <__aeabi_fmul+0x98>
 8000c52:	4648      	mov	r0, r9
 8000c54:	0c26      	lsrs	r6, r4, #16
 8000c56:	0424      	lsls	r4, r4, #16
 8000c58:	0c22      	lsrs	r2, r4, #16
 8000c5a:	0404      	lsls	r4, r0, #16
 8000c5c:	0c24      	lsrs	r4, r4, #16
 8000c5e:	464b      	mov	r3, r9
 8000c60:	0020      	movs	r0, r4
 8000c62:	0c1b      	lsrs	r3, r3, #16
 8000c64:	4350      	muls	r0, r2
 8000c66:	4374      	muls	r4, r6
 8000c68:	435a      	muls	r2, r3
 8000c6a:	435e      	muls	r6, r3
 8000c6c:	1912      	adds	r2, r2, r4
 8000c6e:	0c03      	lsrs	r3, r0, #16
 8000c70:	189b      	adds	r3, r3, r2
 8000c72:	429c      	cmp	r4, r3
 8000c74:	d903      	bls.n	8000c7e <__aeabi_fmul+0x10e>
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	0252      	lsls	r2, r2, #9
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	4466      	add	r6, ip
 8000c7e:	0400      	lsls	r0, r0, #16
 8000c80:	041a      	lsls	r2, r3, #16
 8000c82:	0c00      	lsrs	r0, r0, #16
 8000c84:	1812      	adds	r2, r2, r0
 8000c86:	0194      	lsls	r4, r2, #6
 8000c88:	1e60      	subs	r0, r4, #1
 8000c8a:	4184      	sbcs	r4, r0
 8000c8c:	0c1b      	lsrs	r3, r3, #16
 8000c8e:	0e92      	lsrs	r2, r2, #26
 8000c90:	199b      	adds	r3, r3, r6
 8000c92:	4314      	orrs	r4, r2
 8000c94:	019b      	lsls	r3, r3, #6
 8000c96:	431c      	orrs	r4, r3
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	d572      	bpl.n	8000d82 <__aeabi_fmul+0x212>
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	0863      	lsrs	r3, r4, #1
 8000ca0:	4004      	ands	r4, r0
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	0008      	movs	r0, r1
 8000ca6:	307f      	adds	r0, #127	; 0x7f
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	dd3c      	ble.n	8000d26 <__aeabi_fmul+0x1b6>
 8000cac:	0763      	lsls	r3, r4, #29
 8000cae:	d004      	beq.n	8000cba <__aeabi_fmul+0x14a>
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	4023      	ands	r3, r4
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d000      	beq.n	8000cba <__aeabi_fmul+0x14a>
 8000cb8:	3404      	adds	r4, #4
 8000cba:	0123      	lsls	r3, r4, #4
 8000cbc:	d503      	bpl.n	8000cc6 <__aeabi_fmul+0x156>
 8000cbe:	3180      	adds	r1, #128	; 0x80
 8000cc0:	0008      	movs	r0, r1
 8000cc2:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <__aeabi_fmul+0x230>)
 8000cc4:	401c      	ands	r4, r3
 8000cc6:	28fe      	cmp	r0, #254	; 0xfe
 8000cc8:	dcc0      	bgt.n	8000c4c <__aeabi_fmul+0xdc>
 8000cca:	01a4      	lsls	r4, r4, #6
 8000ccc:	0a64      	lsrs	r4, r4, #9
 8000cce:	b2c0      	uxtb	r0, r0
 8000cd0:	e79a      	b.n	8000c08 <__aeabi_fmul+0x98>
 8000cd2:	0037      	movs	r7, r6
 8000cd4:	e78e      	b.n	8000bf4 <__aeabi_fmul+0x84>
 8000cd6:	4652      	mov	r2, sl
 8000cd8:	2303      	movs	r3, #3
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	4692      	mov	sl, r2
 8000cde:	2003      	movs	r0, #3
 8000ce0:	e771      	b.n	8000bc6 <__aeabi_fmul+0x56>
 8000ce2:	4648      	mov	r0, r9
 8000ce4:	f000 fade 	bl	80012a4 <__clzsi2>
 8000ce8:	464a      	mov	r2, r9
 8000cea:	1f43      	subs	r3, r0, #5
 8000cec:	409a      	lsls	r2, r3
 8000cee:	1a2d      	subs	r5, r5, r0
 8000cf0:	4691      	mov	r9, r2
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	3d76      	subs	r5, #118	; 0x76
 8000cf6:	e766      	b.n	8000bc6 <__aeabi_fmul+0x56>
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	469a      	mov	sl, r3
 8000cfc:	3b09      	subs	r3, #9
 8000cfe:	25ff      	movs	r5, #255	; 0xff
 8000d00:	469b      	mov	fp, r3
 8000d02:	e74d      	b.n	8000ba0 <__aeabi_fmul+0x30>
 8000d04:	0020      	movs	r0, r4
 8000d06:	f000 facd 	bl	80012a4 <__clzsi2>
 8000d0a:	2576      	movs	r5, #118	; 0x76
 8000d0c:	1f43      	subs	r3, r0, #5
 8000d0e:	409c      	lsls	r4, r3
 8000d10:	2300      	movs	r3, #0
 8000d12:	426d      	negs	r5, r5
 8000d14:	469a      	mov	sl, r3
 8000d16:	469b      	mov	fp, r3
 8000d18:	1a2d      	subs	r5, r5, r0
 8000d1a:	e741      	b.n	8000ba0 <__aeabi_fmul+0x30>
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	2700      	movs	r7, #0
 8000d20:	20ff      	movs	r0, #255	; 0xff
 8000d22:	03e4      	lsls	r4, r4, #15
 8000d24:	e770      	b.n	8000c08 <__aeabi_fmul+0x98>
 8000d26:	2301      	movs	r3, #1
 8000d28:	1a1b      	subs	r3, r3, r0
 8000d2a:	2b1b      	cmp	r3, #27
 8000d2c:	dd00      	ble.n	8000d30 <__aeabi_fmul+0x1c0>
 8000d2e:	e769      	b.n	8000c04 <__aeabi_fmul+0x94>
 8000d30:	319e      	adds	r1, #158	; 0x9e
 8000d32:	0020      	movs	r0, r4
 8000d34:	408c      	lsls	r4, r1
 8000d36:	40d8      	lsrs	r0, r3
 8000d38:	1e63      	subs	r3, r4, #1
 8000d3a:	419c      	sbcs	r4, r3
 8000d3c:	4304      	orrs	r4, r0
 8000d3e:	0763      	lsls	r3, r4, #29
 8000d40:	d004      	beq.n	8000d4c <__aeabi_fmul+0x1dc>
 8000d42:	230f      	movs	r3, #15
 8000d44:	4023      	ands	r3, r4
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d000      	beq.n	8000d4c <__aeabi_fmul+0x1dc>
 8000d4a:	3404      	adds	r4, #4
 8000d4c:	0163      	lsls	r3, r4, #5
 8000d4e:	d51a      	bpl.n	8000d86 <__aeabi_fmul+0x216>
 8000d50:	2001      	movs	r0, #1
 8000d52:	2400      	movs	r4, #0
 8000d54:	e758      	b.n	8000c08 <__aeabi_fmul+0x98>
 8000d56:	2080      	movs	r0, #128	; 0x80
 8000d58:	03c0      	lsls	r0, r0, #15
 8000d5a:	4204      	tst	r4, r0
 8000d5c:	d009      	beq.n	8000d72 <__aeabi_fmul+0x202>
 8000d5e:	464b      	mov	r3, r9
 8000d60:	4203      	tst	r3, r0
 8000d62:	d106      	bne.n	8000d72 <__aeabi_fmul+0x202>
 8000d64:	464c      	mov	r4, r9
 8000d66:	4304      	orrs	r4, r0
 8000d68:	0264      	lsls	r4, r4, #9
 8000d6a:	4647      	mov	r7, r8
 8000d6c:	20ff      	movs	r0, #255	; 0xff
 8000d6e:	0a64      	lsrs	r4, r4, #9
 8000d70:	e74a      	b.n	8000c08 <__aeabi_fmul+0x98>
 8000d72:	2080      	movs	r0, #128	; 0x80
 8000d74:	03c0      	lsls	r0, r0, #15
 8000d76:	4304      	orrs	r4, r0
 8000d78:	0264      	lsls	r4, r4, #9
 8000d7a:	0037      	movs	r7, r6
 8000d7c:	20ff      	movs	r0, #255	; 0xff
 8000d7e:	0a64      	lsrs	r4, r4, #9
 8000d80:	e742      	b.n	8000c08 <__aeabi_fmul+0x98>
 8000d82:	0029      	movs	r1, r5
 8000d84:	e78e      	b.n	8000ca4 <__aeabi_fmul+0x134>
 8000d86:	01a4      	lsls	r4, r4, #6
 8000d88:	2000      	movs	r0, #0
 8000d8a:	0a64      	lsrs	r4, r4, #9
 8000d8c:	e73c      	b.n	8000c08 <__aeabi_fmul+0x98>
 8000d8e:	2080      	movs	r0, #128	; 0x80
 8000d90:	03c0      	lsls	r0, r0, #15
 8000d92:	4304      	orrs	r4, r0
 8000d94:	0264      	lsls	r4, r4, #9
 8000d96:	20ff      	movs	r0, #255	; 0xff
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	e735      	b.n	8000c08 <__aeabi_fmul+0x98>
 8000d9c:	0800c01c 	.word	0x0800c01c
 8000da0:	f7ffffff 	.word	0xf7ffffff

08000da4 <__aeabi_fsub>:
 8000da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da6:	4646      	mov	r6, r8
 8000da8:	46d6      	mov	lr, sl
 8000daa:	464f      	mov	r7, r9
 8000dac:	0243      	lsls	r3, r0, #9
 8000dae:	0a5b      	lsrs	r3, r3, #9
 8000db0:	00da      	lsls	r2, r3, #3
 8000db2:	4694      	mov	ip, r2
 8000db4:	024a      	lsls	r2, r1, #9
 8000db6:	b5c0      	push	{r6, r7, lr}
 8000db8:	0044      	lsls	r4, r0, #1
 8000dba:	0a56      	lsrs	r6, r2, #9
 8000dbc:	1c05      	adds	r5, r0, #0
 8000dbe:	46b0      	mov	r8, r6
 8000dc0:	0e24      	lsrs	r4, r4, #24
 8000dc2:	004e      	lsls	r6, r1, #1
 8000dc4:	0992      	lsrs	r2, r2, #6
 8000dc6:	001f      	movs	r7, r3
 8000dc8:	0020      	movs	r0, r4
 8000dca:	4692      	mov	sl, r2
 8000dcc:	0fed      	lsrs	r5, r5, #31
 8000dce:	0e36      	lsrs	r6, r6, #24
 8000dd0:	0fc9      	lsrs	r1, r1, #31
 8000dd2:	2eff      	cmp	r6, #255	; 0xff
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_fsub+0x34>
 8000dd6:	e07f      	b.n	8000ed8 <__aeabi_fsub+0x134>
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4051      	eors	r1, r2
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d051      	beq.n	8000e84 <__aeabi_fsub+0xe0>
 8000de0:	1ba2      	subs	r2, r4, r6
 8000de2:	4691      	mov	r9, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	dc00      	bgt.n	8000dea <__aeabi_fsub+0x46>
 8000de8:	e07e      	b.n	8000ee8 <__aeabi_fsub+0x144>
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_fsub+0x4c>
 8000dee:	e099      	b.n	8000f24 <__aeabi_fsub+0x180>
 8000df0:	2cff      	cmp	r4, #255	; 0xff
 8000df2:	d100      	bne.n	8000df6 <__aeabi_fsub+0x52>
 8000df4:	e08c      	b.n	8000f10 <__aeabi_fsub+0x16c>
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	4652      	mov	r2, sl
 8000dfa:	04db      	lsls	r3, r3, #19
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	4692      	mov	sl, r2
 8000e00:	464a      	mov	r2, r9
 8000e02:	2301      	movs	r3, #1
 8000e04:	2a1b      	cmp	r2, #27
 8000e06:	dc08      	bgt.n	8000e1a <__aeabi_fsub+0x76>
 8000e08:	4653      	mov	r3, sl
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	40d3      	lsrs	r3, r2
 8000e0e:	1a89      	subs	r1, r1, r2
 8000e10:	4652      	mov	r2, sl
 8000e12:	408a      	lsls	r2, r1
 8000e14:	1e51      	subs	r1, r2, #1
 8000e16:	418a      	sbcs	r2, r1
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	4662      	mov	r2, ip
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	015a      	lsls	r2, r3, #5
 8000e20:	d400      	bmi.n	8000e24 <__aeabi_fsub+0x80>
 8000e22:	e0f3      	b.n	800100c <__aeabi_fsub+0x268>
 8000e24:	019b      	lsls	r3, r3, #6
 8000e26:	099e      	lsrs	r6, r3, #6
 8000e28:	0030      	movs	r0, r6
 8000e2a:	f000 fa3b 	bl	80012a4 <__clzsi2>
 8000e2e:	3805      	subs	r0, #5
 8000e30:	4086      	lsls	r6, r0
 8000e32:	4284      	cmp	r4, r0
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_fsub+0x94>
 8000e36:	e0f7      	b.n	8001028 <__aeabi_fsub+0x284>
 8000e38:	0032      	movs	r2, r6
 8000e3a:	1b04      	subs	r4, r0, r4
 8000e3c:	2020      	movs	r0, #32
 8000e3e:	3401      	adds	r4, #1
 8000e40:	40e2      	lsrs	r2, r4
 8000e42:	1b04      	subs	r4, r0, r4
 8000e44:	40a6      	lsls	r6, r4
 8000e46:	0033      	movs	r3, r6
 8000e48:	1e5e      	subs	r6, r3, #1
 8000e4a:	41b3      	sbcs	r3, r6
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	075a      	lsls	r2, r3, #29
 8000e52:	d004      	beq.n	8000e5e <__aeabi_fsub+0xba>
 8000e54:	220f      	movs	r2, #15
 8000e56:	401a      	ands	r2, r3
 8000e58:	2a04      	cmp	r2, #4
 8000e5a:	d000      	beq.n	8000e5e <__aeabi_fsub+0xba>
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	015a      	lsls	r2, r3, #5
 8000e60:	d400      	bmi.n	8000e64 <__aeabi_fsub+0xc0>
 8000e62:	e0d6      	b.n	8001012 <__aeabi_fsub+0x26e>
 8000e64:	1c62      	adds	r2, r4, #1
 8000e66:	2cfe      	cmp	r4, #254	; 0xfe
 8000e68:	d100      	bne.n	8000e6c <__aeabi_fsub+0xc8>
 8000e6a:	e0da      	b.n	8001022 <__aeabi_fsub+0x27e>
 8000e6c:	019b      	lsls	r3, r3, #6
 8000e6e:	0a5f      	lsrs	r7, r3, #9
 8000e70:	b2d0      	uxtb	r0, r2
 8000e72:	05c0      	lsls	r0, r0, #23
 8000e74:	4338      	orrs	r0, r7
 8000e76:	07ed      	lsls	r5, r5, #31
 8000e78:	4328      	orrs	r0, r5
 8000e7a:	bce0      	pop	{r5, r6, r7}
 8000e7c:	46ba      	mov	sl, r7
 8000e7e:	46b1      	mov	r9, r6
 8000e80:	46a8      	mov	r8, r5
 8000e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e84:	1ba2      	subs	r2, r4, r6
 8000e86:	4691      	mov	r9, r2
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	dd63      	ble.n	8000f54 <__aeabi_fsub+0x1b0>
 8000e8c:	2e00      	cmp	r6, #0
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_fsub+0xee>
 8000e90:	e099      	b.n	8000fc6 <__aeabi_fsub+0x222>
 8000e92:	2cff      	cmp	r4, #255	; 0xff
 8000e94:	d03c      	beq.n	8000f10 <__aeabi_fsub+0x16c>
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	4652      	mov	r2, sl
 8000e9a:	04db      	lsls	r3, r3, #19
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	4692      	mov	sl, r2
 8000ea0:	464a      	mov	r2, r9
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	2a1b      	cmp	r2, #27
 8000ea6:	dc08      	bgt.n	8000eba <__aeabi_fsub+0x116>
 8000ea8:	4653      	mov	r3, sl
 8000eaa:	2120      	movs	r1, #32
 8000eac:	40d3      	lsrs	r3, r2
 8000eae:	1a89      	subs	r1, r1, r2
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	408a      	lsls	r2, r1
 8000eb4:	1e51      	subs	r1, r2, #1
 8000eb6:	418a      	sbcs	r2, r1
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	4463      	add	r3, ip
 8000ebc:	015a      	lsls	r2, r3, #5
 8000ebe:	d400      	bmi.n	8000ec2 <__aeabi_fsub+0x11e>
 8000ec0:	e0a4      	b.n	800100c <__aeabi_fsub+0x268>
 8000ec2:	3401      	adds	r4, #1
 8000ec4:	2cff      	cmp	r4, #255	; 0xff
 8000ec6:	d100      	bne.n	8000eca <__aeabi_fsub+0x126>
 8000ec8:	e0ab      	b.n	8001022 <__aeabi_fsub+0x27e>
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4997      	ldr	r1, [pc, #604]	; (800112c <__aeabi_fsub+0x388>)
 8000ece:	401a      	ands	r2, r3
 8000ed0:	085b      	lsrs	r3, r3, #1
 8000ed2:	400b      	ands	r3, r1
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	e7bb      	b.n	8000e50 <__aeabi_fsub+0xac>
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d032      	beq.n	8000f42 <__aeabi_fsub+0x19e>
 8000edc:	428d      	cmp	r5, r1
 8000ede:	d035      	beq.n	8000f4c <__aeabi_fsub+0x1a8>
 8000ee0:	22ff      	movs	r2, #255	; 0xff
 8000ee2:	4252      	negs	r2, r2
 8000ee4:	4691      	mov	r9, r2
 8000ee6:	44a1      	add	r9, r4
 8000ee8:	464a      	mov	r2, r9
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d051      	beq.n	8000f92 <__aeabi_fsub+0x1ee>
 8000eee:	1b30      	subs	r0, r6, r4
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_fsub+0x152>
 8000ef4:	e09c      	b.n	8001030 <__aeabi_fsub+0x28c>
 8000ef6:	4663      	mov	r3, ip
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_fsub+0x15a>
 8000efc:	e0df      	b.n	80010be <__aeabi_fsub+0x31a>
 8000efe:	3801      	subs	r0, #1
 8000f00:	2800      	cmp	r0, #0
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0x162>
 8000f04:	e0f7      	b.n	80010f6 <__aeabi_fsub+0x352>
 8000f06:	2eff      	cmp	r6, #255	; 0xff
 8000f08:	d000      	beq.n	8000f0c <__aeabi_fsub+0x168>
 8000f0a:	e099      	b.n	8001040 <__aeabi_fsub+0x29c>
 8000f0c:	000d      	movs	r5, r1
 8000f0e:	4643      	mov	r3, r8
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d100      	bne.n	8000f16 <__aeabi_fsub+0x172>
 8000f14:	e085      	b.n	8001022 <__aeabi_fsub+0x27e>
 8000f16:	2780      	movs	r7, #128	; 0x80
 8000f18:	03ff      	lsls	r7, r7, #15
 8000f1a:	431f      	orrs	r7, r3
 8000f1c:	027f      	lsls	r7, r7, #9
 8000f1e:	20ff      	movs	r0, #255	; 0xff
 8000f20:	0a7f      	lsrs	r7, r7, #9
 8000f22:	e7a6      	b.n	8000e72 <__aeabi_fsub+0xce>
 8000f24:	4652      	mov	r2, sl
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	d074      	beq.n	8001014 <__aeabi_fsub+0x270>
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	4690      	mov	r8, r2
 8000f30:	44c1      	add	r9, r8
 8000f32:	464a      	mov	r2, r9
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x196>
 8000f38:	e0c8      	b.n	80010cc <__aeabi_fsub+0x328>
 8000f3a:	2cff      	cmp	r4, #255	; 0xff
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0x19c>
 8000f3e:	e75f      	b.n	8000e00 <__aeabi_fsub+0x5c>
 8000f40:	e7e6      	b.n	8000f10 <__aeabi_fsub+0x16c>
 8000f42:	2201      	movs	r2, #1
 8000f44:	4051      	eors	r1, r2
 8000f46:	42a9      	cmp	r1, r5
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fsub+0x1a8>
 8000f4a:	e749      	b.n	8000de0 <__aeabi_fsub+0x3c>
 8000f4c:	22ff      	movs	r2, #255	; 0xff
 8000f4e:	4252      	negs	r2, r2
 8000f50:	4691      	mov	r9, r2
 8000f52:	44a1      	add	r9, r4
 8000f54:	464a      	mov	r2, r9
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	d043      	beq.n	8000fe2 <__aeabi_fsub+0x23e>
 8000f5a:	1b31      	subs	r1, r6, r4
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_fsub+0x1be>
 8000f60:	e08c      	b.n	800107c <__aeabi_fsub+0x2d8>
 8000f62:	2eff      	cmp	r6, #255	; 0xff
 8000f64:	d100      	bne.n	8000f68 <__aeabi_fsub+0x1c4>
 8000f66:	e092      	b.n	800108e <__aeabi_fsub+0x2ea>
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	4662      	mov	r2, ip
 8000f6c:	04db      	lsls	r3, r3, #19
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	4694      	mov	ip, r2
 8000f72:	2301      	movs	r3, #1
 8000f74:	291b      	cmp	r1, #27
 8000f76:	dc09      	bgt.n	8000f8c <__aeabi_fsub+0x1e8>
 8000f78:	2020      	movs	r0, #32
 8000f7a:	4663      	mov	r3, ip
 8000f7c:	4662      	mov	r2, ip
 8000f7e:	40cb      	lsrs	r3, r1
 8000f80:	1a41      	subs	r1, r0, r1
 8000f82:	408a      	lsls	r2, r1
 8000f84:	0011      	movs	r1, r2
 8000f86:	1e48      	subs	r0, r1, #1
 8000f88:	4181      	sbcs	r1, r0
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	0034      	movs	r4, r6
 8000f8e:	4453      	add	r3, sl
 8000f90:	e794      	b.n	8000ebc <__aeabi_fsub+0x118>
 8000f92:	22fe      	movs	r2, #254	; 0xfe
 8000f94:	1c66      	adds	r6, r4, #1
 8000f96:	4232      	tst	r2, r6
 8000f98:	d164      	bne.n	8001064 <__aeabi_fsub+0x2c0>
 8000f9a:	2c00      	cmp	r4, #0
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_fsub+0x1fc>
 8000f9e:	e082      	b.n	80010a6 <__aeabi_fsub+0x302>
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0x204>
 8000fa6:	e0ab      	b.n	8001100 <__aeabi_fsub+0x35c>
 8000fa8:	4653      	mov	r3, sl
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fsub+0x20c>
 8000fae:	e760      	b.n	8000e72 <__aeabi_fsub+0xce>
 8000fb0:	4663      	mov	r3, ip
 8000fb2:	4652      	mov	r2, sl
 8000fb4:	1a9b      	subs	r3, r3, r2
 8000fb6:	015a      	lsls	r2, r3, #5
 8000fb8:	d400      	bmi.n	8000fbc <__aeabi_fsub+0x218>
 8000fba:	e0aa      	b.n	8001112 <__aeabi_fsub+0x36e>
 8000fbc:	4663      	mov	r3, ip
 8000fbe:	4652      	mov	r2, sl
 8000fc0:	000d      	movs	r5, r1
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	e744      	b.n	8000e50 <__aeabi_fsub+0xac>
 8000fc6:	4652      	mov	r2, sl
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	d023      	beq.n	8001014 <__aeabi_fsub+0x270>
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4252      	negs	r2, r2
 8000fd0:	4690      	mov	r8, r2
 8000fd2:	44c1      	add	r9, r8
 8000fd4:	464a      	mov	r2, r9
 8000fd6:	2a00      	cmp	r2, #0
 8000fd8:	d075      	beq.n	80010c6 <__aeabi_fsub+0x322>
 8000fda:	2cff      	cmp	r4, #255	; 0xff
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_fsub+0x23c>
 8000fde:	e75f      	b.n	8000ea0 <__aeabi_fsub+0xfc>
 8000fe0:	e796      	b.n	8000f10 <__aeabi_fsub+0x16c>
 8000fe2:	26fe      	movs	r6, #254	; 0xfe
 8000fe4:	3401      	adds	r4, #1
 8000fe6:	4226      	tst	r6, r4
 8000fe8:	d153      	bne.n	8001092 <__aeabi_fsub+0x2ee>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d172      	bne.n	80010d4 <__aeabi_fsub+0x330>
 8000fee:	4663      	mov	r3, ip
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fsub+0x252>
 8000ff4:	e093      	b.n	800111e <__aeabi_fsub+0x37a>
 8000ff6:	4653      	mov	r3, sl
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_fsub+0x25a>
 8000ffc:	e739      	b.n	8000e72 <__aeabi_fsub+0xce>
 8000ffe:	4463      	add	r3, ip
 8001000:	2400      	movs	r4, #0
 8001002:	015a      	lsls	r2, r3, #5
 8001004:	d502      	bpl.n	800100c <__aeabi_fsub+0x268>
 8001006:	4a4a      	ldr	r2, [pc, #296]	; (8001130 <__aeabi_fsub+0x38c>)
 8001008:	3401      	adds	r4, #1
 800100a:	4013      	ands	r3, r2
 800100c:	075a      	lsls	r2, r3, #29
 800100e:	d000      	beq.n	8001012 <__aeabi_fsub+0x26e>
 8001010:	e720      	b.n	8000e54 <__aeabi_fsub+0xb0>
 8001012:	08db      	lsrs	r3, r3, #3
 8001014:	2cff      	cmp	r4, #255	; 0xff
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x276>
 8001018:	e77a      	b.n	8000f10 <__aeabi_fsub+0x16c>
 800101a:	025b      	lsls	r3, r3, #9
 800101c:	0a5f      	lsrs	r7, r3, #9
 800101e:	b2e0      	uxtb	r0, r4
 8001020:	e727      	b.n	8000e72 <__aeabi_fsub+0xce>
 8001022:	20ff      	movs	r0, #255	; 0xff
 8001024:	2700      	movs	r7, #0
 8001026:	e724      	b.n	8000e72 <__aeabi_fsub+0xce>
 8001028:	4b41      	ldr	r3, [pc, #260]	; (8001130 <__aeabi_fsub+0x38c>)
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	4033      	ands	r3, r6
 800102e:	e70f      	b.n	8000e50 <__aeabi_fsub+0xac>
 8001030:	2eff      	cmp	r6, #255	; 0xff
 8001032:	d100      	bne.n	8001036 <__aeabi_fsub+0x292>
 8001034:	e76a      	b.n	8000f0c <__aeabi_fsub+0x168>
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	4662      	mov	r2, ip
 800103a:	04db      	lsls	r3, r3, #19
 800103c:	431a      	orrs	r2, r3
 800103e:	4694      	mov	ip, r2
 8001040:	2301      	movs	r3, #1
 8001042:	281b      	cmp	r0, #27
 8001044:	dc09      	bgt.n	800105a <__aeabi_fsub+0x2b6>
 8001046:	2420      	movs	r4, #32
 8001048:	4663      	mov	r3, ip
 800104a:	4662      	mov	r2, ip
 800104c:	40c3      	lsrs	r3, r0
 800104e:	1a20      	subs	r0, r4, r0
 8001050:	4082      	lsls	r2, r0
 8001052:	0010      	movs	r0, r2
 8001054:	1e44      	subs	r4, r0, #1
 8001056:	41a0      	sbcs	r0, r4
 8001058:	4303      	orrs	r3, r0
 800105a:	4652      	mov	r2, sl
 800105c:	000d      	movs	r5, r1
 800105e:	0034      	movs	r4, r6
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	e6dc      	b.n	8000e1e <__aeabi_fsub+0x7a>
 8001064:	4663      	mov	r3, ip
 8001066:	4652      	mov	r2, sl
 8001068:	1a9e      	subs	r6, r3, r2
 800106a:	0173      	lsls	r3, r6, #5
 800106c:	d417      	bmi.n	800109e <__aeabi_fsub+0x2fa>
 800106e:	2e00      	cmp	r6, #0
 8001070:	d000      	beq.n	8001074 <__aeabi_fsub+0x2d0>
 8001072:	e6d9      	b.n	8000e28 <__aeabi_fsub+0x84>
 8001074:	2500      	movs	r5, #0
 8001076:	2000      	movs	r0, #0
 8001078:	2700      	movs	r7, #0
 800107a:	e6fa      	b.n	8000e72 <__aeabi_fsub+0xce>
 800107c:	4663      	mov	r3, ip
 800107e:	2b00      	cmp	r3, #0
 8001080:	d044      	beq.n	800110c <__aeabi_fsub+0x368>
 8001082:	3901      	subs	r1, #1
 8001084:	2900      	cmp	r1, #0
 8001086:	d04c      	beq.n	8001122 <__aeabi_fsub+0x37e>
 8001088:	2eff      	cmp	r6, #255	; 0xff
 800108a:	d000      	beq.n	800108e <__aeabi_fsub+0x2ea>
 800108c:	e771      	b.n	8000f72 <__aeabi_fsub+0x1ce>
 800108e:	4643      	mov	r3, r8
 8001090:	e73e      	b.n	8000f10 <__aeabi_fsub+0x16c>
 8001092:	2cff      	cmp	r4, #255	; 0xff
 8001094:	d0c5      	beq.n	8001022 <__aeabi_fsub+0x27e>
 8001096:	4652      	mov	r2, sl
 8001098:	4462      	add	r2, ip
 800109a:	0853      	lsrs	r3, r2, #1
 800109c:	e7b6      	b.n	800100c <__aeabi_fsub+0x268>
 800109e:	4663      	mov	r3, ip
 80010a0:	000d      	movs	r5, r1
 80010a2:	1ad6      	subs	r6, r2, r3
 80010a4:	e6c0      	b.n	8000e28 <__aeabi_fsub+0x84>
 80010a6:	4662      	mov	r2, ip
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d116      	bne.n	80010da <__aeabi_fsub+0x336>
 80010ac:	4653      	mov	r3, sl
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d000      	beq.n	80010b4 <__aeabi_fsub+0x310>
 80010b2:	e72b      	b.n	8000f0c <__aeabi_fsub+0x168>
 80010b4:	2780      	movs	r7, #128	; 0x80
 80010b6:	2500      	movs	r5, #0
 80010b8:	20ff      	movs	r0, #255	; 0xff
 80010ba:	03ff      	lsls	r7, r7, #15
 80010bc:	e6d9      	b.n	8000e72 <__aeabi_fsub+0xce>
 80010be:	000d      	movs	r5, r1
 80010c0:	4643      	mov	r3, r8
 80010c2:	0034      	movs	r4, r6
 80010c4:	e7a6      	b.n	8001014 <__aeabi_fsub+0x270>
 80010c6:	4653      	mov	r3, sl
 80010c8:	4463      	add	r3, ip
 80010ca:	e6f7      	b.n	8000ebc <__aeabi_fsub+0x118>
 80010cc:	4663      	mov	r3, ip
 80010ce:	4652      	mov	r2, sl
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	e6a4      	b.n	8000e1e <__aeabi_fsub+0x7a>
 80010d4:	4662      	mov	r2, ip
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	d0d9      	beq.n	800108e <__aeabi_fsub+0x2ea>
 80010da:	4652      	mov	r2, sl
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x33e>
 80010e0:	e716      	b.n	8000f10 <__aeabi_fsub+0x16c>
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	03d2      	lsls	r2, r2, #15
 80010e6:	4213      	tst	r3, r2
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x348>
 80010ea:	e711      	b.n	8000f10 <__aeabi_fsub+0x16c>
 80010ec:	4640      	mov	r0, r8
 80010ee:	4210      	tst	r0, r2
 80010f0:	d000      	beq.n	80010f4 <__aeabi_fsub+0x350>
 80010f2:	e70d      	b.n	8000f10 <__aeabi_fsub+0x16c>
 80010f4:	e70a      	b.n	8000f0c <__aeabi_fsub+0x168>
 80010f6:	4652      	mov	r2, sl
 80010f8:	000d      	movs	r5, r1
 80010fa:	0034      	movs	r4, r6
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	e68e      	b.n	8000e1e <__aeabi_fsub+0x7a>
 8001100:	4653      	mov	r3, sl
 8001102:	2b00      	cmp	r3, #0
 8001104:	d008      	beq.n	8001118 <__aeabi_fsub+0x374>
 8001106:	000d      	movs	r5, r1
 8001108:	4647      	mov	r7, r8
 800110a:	e6b2      	b.n	8000e72 <__aeabi_fsub+0xce>
 800110c:	4643      	mov	r3, r8
 800110e:	0034      	movs	r4, r6
 8001110:	e780      	b.n	8001014 <__aeabi_fsub+0x270>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d000      	beq.n	8001118 <__aeabi_fsub+0x374>
 8001116:	e779      	b.n	800100c <__aeabi_fsub+0x268>
 8001118:	2500      	movs	r5, #0
 800111a:	2700      	movs	r7, #0
 800111c:	e6a9      	b.n	8000e72 <__aeabi_fsub+0xce>
 800111e:	4647      	mov	r7, r8
 8001120:	e6a7      	b.n	8000e72 <__aeabi_fsub+0xce>
 8001122:	4653      	mov	r3, sl
 8001124:	0034      	movs	r4, r6
 8001126:	4463      	add	r3, ip
 8001128:	e6c8      	b.n	8000ebc <__aeabi_fsub+0x118>
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	7dffffff 	.word	0x7dffffff
 8001130:	fbffffff 	.word	0xfbffffff

08001134 <__aeabi_fcmpun>:
 8001134:	0242      	lsls	r2, r0, #9
 8001136:	024b      	lsls	r3, r1, #9
 8001138:	0040      	lsls	r0, r0, #1
 800113a:	0049      	lsls	r1, r1, #1
 800113c:	0a52      	lsrs	r2, r2, #9
 800113e:	0a5b      	lsrs	r3, r3, #9
 8001140:	0e09      	lsrs	r1, r1, #24
 8001142:	0e00      	lsrs	r0, r0, #24
 8001144:	28ff      	cmp	r0, #255	; 0xff
 8001146:	d006      	beq.n	8001156 <__aeabi_fcmpun+0x22>
 8001148:	2000      	movs	r0, #0
 800114a:	29ff      	cmp	r1, #255	; 0xff
 800114c:	d102      	bne.n	8001154 <__aeabi_fcmpun+0x20>
 800114e:	0018      	movs	r0, r3
 8001150:	1e43      	subs	r3, r0, #1
 8001152:	4198      	sbcs	r0, r3
 8001154:	4770      	bx	lr
 8001156:	38fe      	subs	r0, #254	; 0xfe
 8001158:	2a00      	cmp	r2, #0
 800115a:	d1fb      	bne.n	8001154 <__aeabi_fcmpun+0x20>
 800115c:	e7f4      	b.n	8001148 <__aeabi_fcmpun+0x14>
 800115e:	46c0      	nop			; (mov r8, r8)

08001160 <__aeabi_f2iz>:
 8001160:	0241      	lsls	r1, r0, #9
 8001162:	0042      	lsls	r2, r0, #1
 8001164:	0fc3      	lsrs	r3, r0, #31
 8001166:	0a49      	lsrs	r1, r1, #9
 8001168:	2000      	movs	r0, #0
 800116a:	0e12      	lsrs	r2, r2, #24
 800116c:	2a7e      	cmp	r2, #126	; 0x7e
 800116e:	d903      	bls.n	8001178 <__aeabi_f2iz+0x18>
 8001170:	2a9d      	cmp	r2, #157	; 0x9d
 8001172:	d902      	bls.n	800117a <__aeabi_f2iz+0x1a>
 8001174:	4a09      	ldr	r2, [pc, #36]	; (800119c <__aeabi_f2iz+0x3c>)
 8001176:	1898      	adds	r0, r3, r2
 8001178:	4770      	bx	lr
 800117a:	2080      	movs	r0, #128	; 0x80
 800117c:	0400      	lsls	r0, r0, #16
 800117e:	4301      	orrs	r1, r0
 8001180:	2a95      	cmp	r2, #149	; 0x95
 8001182:	dc07      	bgt.n	8001194 <__aeabi_f2iz+0x34>
 8001184:	2096      	movs	r0, #150	; 0x96
 8001186:	1a82      	subs	r2, r0, r2
 8001188:	40d1      	lsrs	r1, r2
 800118a:	4248      	negs	r0, r1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f3      	bne.n	8001178 <__aeabi_f2iz+0x18>
 8001190:	0008      	movs	r0, r1
 8001192:	e7f1      	b.n	8001178 <__aeabi_f2iz+0x18>
 8001194:	3a96      	subs	r2, #150	; 0x96
 8001196:	4091      	lsls	r1, r2
 8001198:	e7f7      	b.n	800118a <__aeabi_f2iz+0x2a>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	7fffffff 	.word	0x7fffffff

080011a0 <__aeabi_i2f>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d013      	beq.n	80011ce <__aeabi_i2f+0x2e>
 80011a6:	17c3      	asrs	r3, r0, #31
 80011a8:	18c5      	adds	r5, r0, r3
 80011aa:	405d      	eors	r5, r3
 80011ac:	0fc4      	lsrs	r4, r0, #31
 80011ae:	0028      	movs	r0, r5
 80011b0:	f000 f878 	bl	80012a4 <__clzsi2>
 80011b4:	239e      	movs	r3, #158	; 0x9e
 80011b6:	0001      	movs	r1, r0
 80011b8:	1a1b      	subs	r3, r3, r0
 80011ba:	2b96      	cmp	r3, #150	; 0x96
 80011bc:	dc0f      	bgt.n	80011de <__aeabi_i2f+0x3e>
 80011be:	2808      	cmp	r0, #8
 80011c0:	dd01      	ble.n	80011c6 <__aeabi_i2f+0x26>
 80011c2:	3908      	subs	r1, #8
 80011c4:	408d      	lsls	r5, r1
 80011c6:	026d      	lsls	r5, r5, #9
 80011c8:	0a6d      	lsrs	r5, r5, #9
 80011ca:	b2d8      	uxtb	r0, r3
 80011cc:	e002      	b.n	80011d4 <__aeabi_i2f+0x34>
 80011ce:	2400      	movs	r4, #0
 80011d0:	2000      	movs	r0, #0
 80011d2:	2500      	movs	r5, #0
 80011d4:	05c0      	lsls	r0, r0, #23
 80011d6:	4328      	orrs	r0, r5
 80011d8:	07e4      	lsls	r4, r4, #31
 80011da:	4320      	orrs	r0, r4
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	2b99      	cmp	r3, #153	; 0x99
 80011e0:	dd0b      	ble.n	80011fa <__aeabi_i2f+0x5a>
 80011e2:	2205      	movs	r2, #5
 80011e4:	002e      	movs	r6, r5
 80011e6:	1a12      	subs	r2, r2, r0
 80011e8:	40d6      	lsrs	r6, r2
 80011ea:	0002      	movs	r2, r0
 80011ec:	321b      	adds	r2, #27
 80011ee:	4095      	lsls	r5, r2
 80011f0:	0028      	movs	r0, r5
 80011f2:	1e45      	subs	r5, r0, #1
 80011f4:	41a8      	sbcs	r0, r5
 80011f6:	0035      	movs	r5, r6
 80011f8:	4305      	orrs	r5, r0
 80011fa:	2905      	cmp	r1, #5
 80011fc:	dd01      	ble.n	8001202 <__aeabi_i2f+0x62>
 80011fe:	1f4a      	subs	r2, r1, #5
 8001200:	4095      	lsls	r5, r2
 8001202:	002a      	movs	r2, r5
 8001204:	4e08      	ldr	r6, [pc, #32]	; (8001228 <__aeabi_i2f+0x88>)
 8001206:	4032      	ands	r2, r6
 8001208:	0768      	lsls	r0, r5, #29
 800120a:	d009      	beq.n	8001220 <__aeabi_i2f+0x80>
 800120c:	200f      	movs	r0, #15
 800120e:	4028      	ands	r0, r5
 8001210:	2804      	cmp	r0, #4
 8001212:	d005      	beq.n	8001220 <__aeabi_i2f+0x80>
 8001214:	3204      	adds	r2, #4
 8001216:	0150      	lsls	r0, r2, #5
 8001218:	d502      	bpl.n	8001220 <__aeabi_i2f+0x80>
 800121a:	239f      	movs	r3, #159	; 0x9f
 800121c:	4032      	ands	r2, r6
 800121e:	1a5b      	subs	r3, r3, r1
 8001220:	0192      	lsls	r2, r2, #6
 8001222:	0a55      	lsrs	r5, r2, #9
 8001224:	b2d8      	uxtb	r0, r3
 8001226:	e7d5      	b.n	80011d4 <__aeabi_i2f+0x34>
 8001228:	fbffffff 	.word	0xfbffffff

0800122c <__aeabi_ui2f>:
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	1e05      	subs	r5, r0, #0
 8001230:	d00e      	beq.n	8001250 <__aeabi_ui2f+0x24>
 8001232:	f000 f837 	bl	80012a4 <__clzsi2>
 8001236:	239e      	movs	r3, #158	; 0x9e
 8001238:	0004      	movs	r4, r0
 800123a:	1a1b      	subs	r3, r3, r0
 800123c:	2b96      	cmp	r3, #150	; 0x96
 800123e:	dc0c      	bgt.n	800125a <__aeabi_ui2f+0x2e>
 8001240:	2808      	cmp	r0, #8
 8001242:	dd01      	ble.n	8001248 <__aeabi_ui2f+0x1c>
 8001244:	3c08      	subs	r4, #8
 8001246:	40a5      	lsls	r5, r4
 8001248:	026d      	lsls	r5, r5, #9
 800124a:	0a6d      	lsrs	r5, r5, #9
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	e001      	b.n	8001254 <__aeabi_ui2f+0x28>
 8001250:	2000      	movs	r0, #0
 8001252:	2500      	movs	r5, #0
 8001254:	05c0      	lsls	r0, r0, #23
 8001256:	4328      	orrs	r0, r5
 8001258:	bd70      	pop	{r4, r5, r6, pc}
 800125a:	2b99      	cmp	r3, #153	; 0x99
 800125c:	dd09      	ble.n	8001272 <__aeabi_ui2f+0x46>
 800125e:	0002      	movs	r2, r0
 8001260:	0029      	movs	r1, r5
 8001262:	321b      	adds	r2, #27
 8001264:	4091      	lsls	r1, r2
 8001266:	1e4a      	subs	r2, r1, #1
 8001268:	4191      	sbcs	r1, r2
 800126a:	2205      	movs	r2, #5
 800126c:	1a12      	subs	r2, r2, r0
 800126e:	40d5      	lsrs	r5, r2
 8001270:	430d      	orrs	r5, r1
 8001272:	2c05      	cmp	r4, #5
 8001274:	dd01      	ble.n	800127a <__aeabi_ui2f+0x4e>
 8001276:	1f62      	subs	r2, r4, #5
 8001278:	4095      	lsls	r5, r2
 800127a:	0029      	movs	r1, r5
 800127c:	4e08      	ldr	r6, [pc, #32]	; (80012a0 <__aeabi_ui2f+0x74>)
 800127e:	4031      	ands	r1, r6
 8001280:	076a      	lsls	r2, r5, #29
 8001282:	d009      	beq.n	8001298 <__aeabi_ui2f+0x6c>
 8001284:	200f      	movs	r0, #15
 8001286:	4028      	ands	r0, r5
 8001288:	2804      	cmp	r0, #4
 800128a:	d005      	beq.n	8001298 <__aeabi_ui2f+0x6c>
 800128c:	3104      	adds	r1, #4
 800128e:	014a      	lsls	r2, r1, #5
 8001290:	d502      	bpl.n	8001298 <__aeabi_ui2f+0x6c>
 8001292:	239f      	movs	r3, #159	; 0x9f
 8001294:	4031      	ands	r1, r6
 8001296:	1b1b      	subs	r3, r3, r4
 8001298:	0189      	lsls	r1, r1, #6
 800129a:	0a4d      	lsrs	r5, r1, #9
 800129c:	b2d8      	uxtb	r0, r3
 800129e:	e7d9      	b.n	8001254 <__aeabi_ui2f+0x28>
 80012a0:	fbffffff 	.word	0xfbffffff

080012a4 <__clzsi2>:
 80012a4:	211c      	movs	r1, #28
 80012a6:	2301      	movs	r3, #1
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d301      	bcc.n	80012b2 <__clzsi2+0xe>
 80012ae:	0c00      	lsrs	r0, r0, #16
 80012b0:	3910      	subs	r1, #16
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	4298      	cmp	r0, r3
 80012b6:	d301      	bcc.n	80012bc <__clzsi2+0x18>
 80012b8:	0a00      	lsrs	r0, r0, #8
 80012ba:	3908      	subs	r1, #8
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	4298      	cmp	r0, r3
 80012c0:	d301      	bcc.n	80012c6 <__clzsi2+0x22>
 80012c2:	0900      	lsrs	r0, r0, #4
 80012c4:	3904      	subs	r1, #4
 80012c6:	a202      	add	r2, pc, #8	; (adr r2, 80012d0 <__clzsi2+0x2c>)
 80012c8:	5c10      	ldrb	r0, [r2, r0]
 80012ca:	1840      	adds	r0, r0, r1
 80012cc:	4770      	bx	lr
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	02020304 	.word	0x02020304
 80012d4:	01010101 	.word	0x01010101
	...

080012e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	0018      	movs	r0, r3
 80012ea:	230c      	movs	r3, #12
 80012ec:	001a      	movs	r2, r3
 80012ee:	2100      	movs	r1, #0
 80012f0:	f00a fc9b 	bl	800bc2a <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012f4:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <MX_ADC1_Init+0xf4>)
 80012f6:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <MX_ADC1_Init+0xf8>)
 80012f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <MX_ADC1_Init+0xf4>)
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	05d2      	lsls	r2, r2, #23
 8001300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <MX_ADC1_Init+0xf4>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	0392      	lsls	r2, r2, #14
 8001314:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001318:	2204      	movs	r2, #4
 800131a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <MX_ADC1_Init+0xf4>)
 800131e:	2200      	movs	r2, #0
 8001320:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001324:	2200      	movs	r2, #0
 8001326:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <MX_ADC1_Init+0xf4>)
 800132a:	2200      	movs	r2, #0
 800132c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001330:	2202      	movs	r2, #2
 8001332:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001336:	2220      	movs	r2, #32
 8001338:	2100      	movs	r1, #0
 800133a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800133c:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_ADC1_Init+0xf4>)
 800133e:	2298      	movs	r2, #152	; 0x98
 8001340:	00d2      	lsls	r2, r2, #3
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	00d2      	lsls	r2, r2, #3
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <MX_ADC1_Init+0xf4>)
 800134e:	222c      	movs	r2, #44	; 0x2c
 8001350:	2100      	movs	r1, #0
 8001352:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001356:	2200      	movs	r2, #0
 8001358:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_ADC1_Init+0xf4>)
 800135c:	2200      	movs	r2, #0
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001362:	2200      	movs	r2, #0
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001368:	223c      	movs	r2, #60	; 0x3c
 800136a:	2100      	movs	r1, #0
 800136c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001370:	2200      	movs	r2, #0
 8001372:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_ADC1_Init+0xf4>)
 8001376:	0018      	movs	r0, r3
 8001378:	f001 f844 	bl	8002404 <HAL_ADC_Init>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001380:	f000 fa0d 	bl	800179e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4a15      	ldr	r2, [pc, #84]	; (80013dc <MX_ADC1_Init+0xfc>)
 8001388:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001396:	1d3a      	adds	r2, r7, #4
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_ADC1_Init+0xf4>)
 800139a:	0011      	movs	r1, r2
 800139c:	0018      	movs	r0, r3
 800139e:	f001 fc3f 	bl	8002c20 <HAL_ADC_ConfigChannel>
 80013a2:	1e03      	subs	r3, r0, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80013a6:	f000 f9fa 	bl	800179e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <MX_ADC1_Init+0x100>)
 80013ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2204      	movs	r2, #4
 80013b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b6:	1d3a      	adds	r2, r7, #4
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_ADC1_Init+0xf4>)
 80013ba:	0011      	movs	r1, r2
 80013bc:	0018      	movs	r0, r3
 80013be:	f001 fc2f 	bl	8002c20 <HAL_ADC_ConfigChannel>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d001      	beq.n	80013ca <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80013c6:	f000 f9ea 	bl	800179e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b004      	add	sp, #16
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	200001c8 	.word	0x200001c8
 80013d8:	40012400 	.word	0x40012400
 80013dc:	04000002 	.word	0x04000002
 80013e0:	1c000080 	.word	0x1c000080

080013e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b095      	sub	sp, #84	; 0x54
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	233c      	movs	r3, #60	; 0x3c
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	0018      	movs	r0, r3
 80013f2:	2314      	movs	r3, #20
 80013f4:	001a      	movs	r2, r3
 80013f6:	2100      	movs	r1, #0
 80013f8:	f00a fc17 	bl	800bc2a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	2414      	movs	r4, #20
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	0018      	movs	r0, r3
 8001402:	2328      	movs	r3, #40	; 0x28
 8001404:	001a      	movs	r2, r3
 8001406:	2100      	movs	r1, #0
 8001408:	f00a fc0f 	bl	800bc2a <memset>
  if(adcHandle->Instance==ADC1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a3a      	ldr	r2, [pc, #232]	; (80014fc <HAL_ADC_MspInit+0x118>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d16d      	bne.n	80014f2 <HAL_ADC_MspInit+0x10e>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001416:	193b      	adds	r3, r7, r4
 8001418:	2280      	movs	r2, #128	; 0x80
 800141a:	01d2      	lsls	r2, r2, #7
 800141c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800141e:	193b      	adds	r3, r7, r4
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	193b      	adds	r3, r7, r4
 8001426:	0018      	movs	r0, r3
 8001428:	f003 faac 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 800142c:	1e03      	subs	r3, r0, #0
 800142e:	d001      	beq.n	8001434 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001430:	f000 f9b5 	bl	800179e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <HAL_ADC_MspInit+0x11c>)
 8001436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <HAL_ADC_MspInit+0x11c>)
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	0349      	lsls	r1, r1, #13
 800143e:	430a      	orrs	r2, r1
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <HAL_ADC_MspInit+0x11c>)
 8001444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	035b      	lsls	r3, r3, #13
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_ADC_MspInit+0x11c>)
 8001452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001454:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <HAL_ADC_MspInit+0x11c>)
 8001456:	2101      	movs	r1, #1
 8001458:	430a      	orrs	r2, r1
 800145a:	635a      	str	r2, [r3, #52]	; 0x34
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_ADC_MspInit+0x11c>)
 800145e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001460:	2201      	movs	r2, #1
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001468:	213c      	movs	r1, #60	; 0x3c
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2282      	movs	r2, #130	; 0x82
 800146e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2203      	movs	r2, #3
 8001474:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	187a      	adds	r2, r7, r1
 800147e:	23a0      	movs	r3, #160	; 0xa0
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	0011      	movs	r1, r2
 8001484:	0018      	movs	r0, r3
 8001486:	f002 fbaf 	bl	8003be8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <HAL_ADC_MspInit+0x120>)
 800148c:	4a1e      	ldr	r2, [pc, #120]	; (8001508 <HAL_ADC_MspInit+0x124>)
 800148e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_ADC_MspInit+0x120>)
 8001492:	2205      	movs	r2, #5
 8001494:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_ADC_MspInit+0x120>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_ADC_MspInit+0x120>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_ADC_MspInit+0x120>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_ADC_MspInit+0x120>)
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	0052      	lsls	r2, r2, #1
 80014ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_ADC_MspInit+0x120>)
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	00d2      	lsls	r2, r2, #3
 80014b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_ADC_MspInit+0x120>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_ADC_MspInit+0x120>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	0192      	lsls	r2, r2, #6
 80014c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_ADC_MspInit+0x120>)
 80014c8:	0018      	movs	r0, r3
 80014ca:	f002 f8d9 	bl	8003680 <HAL_DMA_Init>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 80014d2:	f000 f964 	bl	800179e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_ADC_MspInit+0x120>)
 80014da:	651a      	str	r2, [r3, #80]	; 0x50
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_ADC_MspInit+0x120>)
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	200c      	movs	r0, #12
 80014e8:	f002 f898 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80014ec:	200c      	movs	r0, #12
 80014ee:	f002 f8aa 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b015      	add	sp, #84	; 0x54
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	40012400 	.word	0x40012400
 8001500:	40021000 	.word	0x40021000
 8001504:	2000022c 	.word	0x2000022c
 8001508:	40020008 	.word	0x40020008

0800150c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_DMA_Init+0x38>)
 8001514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_DMA_Init+0x38>)
 8001518:	2101      	movs	r1, #1
 800151a:	430a      	orrs	r2, r1
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_DMA_Init+0x38>)
 8001520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2009      	movs	r0, #9
 8001530:	f002 f874 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001534:	2009      	movs	r0, #9
 8001536:	f002 f886 	bl	8003646 <HAL_NVIC_EnableIRQ>

}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40021000 	.word	0x40021000

08001548 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	240c      	movs	r4, #12
 8001550:	193b      	adds	r3, r7, r4
 8001552:	0018      	movs	r0, r3
 8001554:	2314      	movs	r3, #20
 8001556:	001a      	movs	r2, r3
 8001558:	2100      	movs	r1, #0
 800155a:	f00a fb66 	bl	800bc2a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	4b4e      	ldr	r3, [pc, #312]	; (8001698 <MX_GPIO_Init+0x150>)
 8001560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001562:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <MX_GPIO_Init+0x150>)
 8001564:	2104      	movs	r1, #4
 8001566:	430a      	orrs	r2, r1
 8001568:	635a      	str	r2, [r3, #52]	; 0x34
 800156a:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <MX_GPIO_Init+0x150>)
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156e:	2204      	movs	r2, #4
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b48      	ldr	r3, [pc, #288]	; (8001698 <MX_GPIO_Init+0x150>)
 8001578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157a:	4b47      	ldr	r3, [pc, #284]	; (8001698 <MX_GPIO_Init+0x150>)
 800157c:	2101      	movs	r1, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
 8001582:	4b45      	ldr	r3, [pc, #276]	; (8001698 <MX_GPIO_Init+0x150>)
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	2201      	movs	r2, #1
 8001588:	4013      	ands	r3, r2
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b42      	ldr	r3, [pc, #264]	; (8001698 <MX_GPIO_Init+0x150>)
 8001590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <MX_GPIO_Init+0x150>)
 8001594:	2102      	movs	r1, #2
 8001596:	430a      	orrs	r2, r1
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <MX_GPIO_Init+0x150>)
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_RESET);
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	01db      	lsls	r3, r3, #7
 80015aa:	483c      	ldr	r0, [pc, #240]	; (800169c <MX_GPIO_Init+0x154>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	0019      	movs	r1, r3
 80015b0:	f002 fc9b 	bl	8003eea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_DC_Pin|OLED_RES_Pin, GPIO_PIN_RESET);
 80015b4:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <MX_GPIO_Init+0x158>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	2160      	movs	r1, #96	; 0x60
 80015ba:	0018      	movs	r0, r3
 80015bc:	f002 fc95 	bl	8003eea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	01d2      	lsls	r2, r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	2201      	movs	r2, #1
 80015cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	193b      	adds	r3, r7, r4
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	193b      	adds	r3, r7, r4
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	193b      	adds	r3, r7, r4
 80015dc:	4a2f      	ldr	r2, [pc, #188]	; (800169c <MX_GPIO_Init+0x154>)
 80015de:	0019      	movs	r1, r3
 80015e0:	0010      	movs	r0, r2
 80015e2:	f002 fb01 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_2_Pin|ENCODER_A_Pin;
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	4a2e      	ldr	r2, [pc, #184]	; (80016a4 <MX_GPIO_Init+0x15c>)
 80015ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015ec:	193b      	adds	r3, r7, r4
 80015ee:	22c4      	movs	r2, #196	; 0xc4
 80015f0:	0392      	lsls	r2, r2, #14
 80015f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	193b      	adds	r3, r7, r4
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	193a      	adds	r2, r7, r4
 80015fc:	23a0      	movs	r3, #160	; 0xa0
 80015fe:	05db      	lsls	r3, r3, #23
 8001600:	0011      	movs	r1, r2
 8001602:	0018      	movs	r0, r3
 8001604:	f002 faf0 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_C_Pin;
 8001608:	0021      	movs	r1, r4
 800160a:	187b      	adds	r3, r7, r1
 800160c:	2208      	movs	r2, #8
 800160e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001610:	187b      	adds	r3, r7, r1
 8001612:	22c4      	movs	r2, #196	; 0xc4
 8001614:	0392      	lsls	r2, r2, #14
 8001616:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	000c      	movs	r4, r1
 800161a:	193b      	adds	r3, r7, r4
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENCODER_C_GPIO_Port, &GPIO_InitStruct);
 8001620:	193b      	adds	r3, r7, r4
 8001622:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <MX_GPIO_Init+0x158>)
 8001624:	0019      	movs	r1, r3
 8001626:	0010      	movs	r0, r2
 8001628:	f002 fade 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin;
 800162c:	193b      	adds	r3, r7, r4
 800162e:	2210      	movs	r2, #16
 8001630:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001632:	193b      	adds	r3, r7, r4
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	193b      	adds	r3, r7, r4
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800163e:	193b      	adds	r3, r7, r4
 8001640:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <MX_GPIO_Init+0x158>)
 8001642:	0019      	movs	r1, r3
 8001644:	0010      	movs	r0, r2
 8001646:	f002 facf 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RES_Pin;
 800164a:	0021      	movs	r1, r4
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2260      	movs	r2, #96	; 0x60
 8001650:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2201      	movs	r2, #1
 8001656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	187b      	adds	r3, r7, r1
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2202      	movs	r2, #2
 8001662:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	187b      	adds	r3, r7, r1
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <MX_GPIO_Init+0x158>)
 8001668:	0019      	movs	r1, r3
 800166a:	0010      	movs	r0, r2
 800166c:	f002 fabc 	bl	8003be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2006      	movs	r0, #6
 8001676:	f001 ffd1 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800167a:	2006      	movs	r0, #6
 800167c:	f001 ffe3 	bl	8003646 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	2007      	movs	r0, #7
 8001686:	f001 ffc9 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800168a:	2007      	movs	r0, #7
 800168c:	f001 ffdb 	bl	8003646 <HAL_NVIC_EnableIRQ>

}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b009      	add	sp, #36	; 0x24
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	50000800 	.word	0x50000800
 80016a0:	50000400 	.word	0x50000400
 80016a4:	00008030 	.word	0x00008030

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ac:	f000 fca2 	bl	8001ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 f817 	bl	80016e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f7ff ff48 	bl	8001548 <MX_GPIO_Init>
  MX_DMA_Init();
 80016b8:	f7ff ff28 	bl	800150c <MX_DMA_Init>
  MX_ADC1_Init();
 80016bc:	f7ff fe10 	bl	80012e0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80016c0:	f000 fa18 	bl	8001af4 <MX_TIM3_Init>
  MX_TIM16_Init();
 80016c4:	f000 faba 	bl	8001c3c <MX_TIM16_Init>
  MX_SPI2_Init();
 80016c8:	f000 f86e 	bl	80017a8 <MX_SPI2_Init>
  MX_TIM14_Init();
 80016cc:	f000 fa68 	bl	8001ba0 <MX_TIM14_Init>
  MX_TIM17_Init();
 80016d0:	f000 fb3a 	bl	8001d48 <MX_TIM17_Init>
  MX_TIM1_Init();
 80016d4:	f000 f9b2 	bl	8001a3c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Start_Init();
 80016d8:	f008 fe42 	bl	800a360 <Start_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  Main_Loop();
 80016dc:	f008 fe7a 	bl	800a3d4 <Main_Loop>
 80016e0:	e7fc      	b.n	80016dc <main+0x34>

080016e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e2:	b590      	push	{r4, r7, lr}
 80016e4:	b093      	sub	sp, #76	; 0x4c
 80016e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e8:	2410      	movs	r4, #16
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	0018      	movs	r0, r3
 80016ee:	2338      	movs	r3, #56	; 0x38
 80016f0:	001a      	movs	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	f00a fa99 	bl	800bc2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	003b      	movs	r3, r7
 80016fa:	0018      	movs	r0, r3
 80016fc:	2310      	movs	r3, #16
 80016fe:	001a      	movs	r2, r3
 8001700:	2100      	movs	r1, #0
 8001702:	f00a fa92 	bl	800bc2a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	0018      	movs	r0, r3
 800170c:	f002 fc50 	bl	8003fb0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001710:	193b      	adds	r3, r7, r4
 8001712:	2202      	movs	r2, #2
 8001714:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001716:	193b      	adds	r3, r7, r4
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	0052      	lsls	r2, r2, #1
 800171c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800171e:	0021      	movs	r1, r4
 8001720:	187b      	adds	r3, r7, r1
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2240      	movs	r2, #64	; 0x40
 800172a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2202      	movs	r2, #2
 8001730:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2202      	movs	r2, #2
 8001736:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2208      	movs	r2, #8
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	0292      	lsls	r2, r2, #10
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	0492      	lsls	r2, r2, #18
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001754:	187b      	adds	r3, r7, r1
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	0592      	lsls	r2, r2, #22
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175c:	187b      	adds	r3, r7, r1
 800175e:	0018      	movs	r0, r3
 8001760:	f002 fc66 	bl	8004030 <HAL_RCC_OscConfig>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001768:	f000 f819 	bl	800179e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176c:	003b      	movs	r3, r7
 800176e:	2207      	movs	r2, #7
 8001770:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001772:	003b      	movs	r3, r7
 8001774:	2202      	movs	r2, #2
 8001776:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001778:	003b      	movs	r3, r7
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800177e:	003b      	movs	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	003b      	movs	r3, r7
 8001786:	2102      	movs	r1, #2
 8001788:	0018      	movs	r0, r3
 800178a:	f002 ff71 	bl	8004670 <HAL_RCC_ClockConfig>
 800178e:	1e03      	subs	r3, r0, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001792:	f000 f804 	bl	800179e <Error_Handler>
  }
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b013      	add	sp, #76	; 0x4c
 800179c:	bd90      	pop	{r4, r7, pc}

0800179e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a2:	b672      	cpsid	i
}
 80017a4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <Error_Handler+0x8>

080017a8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <MX_SPI2_Init+0x74>)
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <MX_SPI2_Init+0x78>)
 80017b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_SPI2_Init+0x74>)
 80017b4:	2282      	movs	r2, #130	; 0x82
 80017b6:	0052      	lsls	r2, r2, #1
 80017b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_SPI2_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_SPI2_Init+0x74>)
 80017c2:	22e0      	movs	r2, #224	; 0xe0
 80017c4:	00d2      	lsls	r2, r2, #3
 80017c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_SPI2_Init+0x74>)
 80017ca:	2202      	movs	r2, #2
 80017cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_SPI2_Init+0x74>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_SPI2_Init+0x74>)
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_SPI2_Init+0x74>)
 80017de:	2210      	movs	r2, #16
 80017e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_SPI2_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_SPI2_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_SPI2_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_SPI2_Init+0x74>)
 80017f6:	2207      	movs	r2, #7
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_SPI2_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_SPI2_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <MX_SPI2_Init+0x74>)
 8001808:	0018      	movs	r0, r3
 800180a:	f003 fa35 	bl	8004c78 <HAL_SPI_Init>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d001      	beq.n	8001816 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001812:	f7ff ffc4 	bl	800179e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000288 	.word	0x20000288
 8001820:	40003800 	.word	0x40003800

08001824 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b08b      	sub	sp, #44	; 0x2c
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	2414      	movs	r4, #20
 800182e:	193b      	adds	r3, r7, r4
 8001830:	0018      	movs	r0, r3
 8001832:	2314      	movs	r3, #20
 8001834:	001a      	movs	r2, r3
 8001836:	2100      	movs	r1, #0
 8001838:	f00a f9f7 	bl	800bc2a <memset>
  if(spiHandle->Instance==SPI2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_SPI_MspInit+0x8c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d130      	bne.n	80018a8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_SPI_MspInit+0x90>)
 8001848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_SPI_MspInit+0x90>)
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	01c9      	lsls	r1, r1, #7
 8001850:	430a      	orrs	r2, r1
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_SPI_MspInit+0x90>)
 8001856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	01db      	lsls	r3, r3, #7
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_SPI_MspInit+0x90>)
 8001864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_SPI_MspInit+0x90>)
 8001868:	2102      	movs	r1, #2
 800186a:	430a      	orrs	r2, r1
 800186c:	635a      	str	r2, [r3, #52]	; 0x34
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_SPI_MspInit+0x90>)
 8001870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001872:	2202      	movs	r2, #2
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = OLED_DIN_Pin|OLED_SCK_Pin;
 800187a:	193b      	adds	r3, r7, r4
 800187c:	22c0      	movs	r2, #192	; 0xc0
 800187e:	0052      	lsls	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	0021      	movs	r1, r4
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2202      	movs	r2, #2
 8001888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8001896:	187b      	adds	r3, r7, r1
 8001898:	2201      	movs	r2, #1
 800189a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	187b      	adds	r3, r7, r1
 800189e:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_SPI_MspInit+0x94>)
 80018a0:	0019      	movs	r1, r3
 80018a2:	0010      	movs	r0, r2
 80018a4:	f002 f9a0 	bl	8003be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b00b      	add	sp, #44	; 0x2c
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	40003800 	.word	0x40003800
 80018b4:	40021000 	.word	0x40021000
 80018b8:	50000400 	.word	0x50000400

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_MspInit+0x44>)
 80018c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_MspInit+0x44>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	430a      	orrs	r2, r1
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_MspInit+0x44>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2201      	movs	r2, #1
 80018d4:	4013      	ands	r3, r2
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_MspInit+0x44>)
 80018dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_MspInit+0x44>)
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	0549      	lsls	r1, r1, #21
 80018e4:	430a      	orrs	r2, r1
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_MspInit+0x44>)
 80018ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	055b      	lsls	r3, r3, #21
 80018f0:	4013      	ands	r3, r2
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	40021000 	.word	0x40021000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 fbce 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_C_Pin);
 8001936:	2008      	movs	r0, #8
 8001938:	f002 fb10 	bl	8003f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_1_Pin);
 8001946:	2010      	movs	r0, #16
 8001948:	f002 fb08 	bl	8003f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_2_Pin);
 800194c:	2020      	movs	r0, #32
 800194e:	f002 fb05 	bl	8003f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUZZER_Pin);
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	0018      	movs	r0, r3
 8001958:	f002 fb00 	bl	8003f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <DMA1_Channel1_IRQHandler+0x14>)
 800196a:	0018      	movs	r0, r3
 800196c:	f001 fffa 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	2000022c 	.word	0x2000022c

0800197c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <ADC1_IRQHandler+0x14>)
 8001982:	0018      	movs	r0, r3
 8001984:	f001 f81c 	bl	80029c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001988:	46c0      	nop			; (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	200001c8 	.word	0x200001c8

08001994 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800199a:	0018      	movs	r0, r3
 800199c:	f003 ff7c 	bl	8005898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	20000384 	.word	0x20000384

080019ac <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <TIM17_IRQHandler+0x14>)
 80019b2:	0018      	movs	r0, r3
 80019b4:	f003 ff70 	bl	8005898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	200002ec 	.word	0x200002ec

080019c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019cc:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <_sbrk+0x5c>)
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <_sbrk+0x60>)
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <_sbrk+0x64>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <_sbrk+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	18d3      	adds	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d207      	bcs.n	8001a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f4:	f00a f8d2 	bl	800bb9c <__errno>
 80019f8:	0003      	movs	r3, r0
 80019fa:	220c      	movs	r2, #12
 80019fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	425b      	negs	r3, r3
 8001a02:	e009      	b.n	8001a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	18d2      	adds	r2, r2, r3
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <_sbrk+0x64>)
 8001a14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b006      	add	sp, #24
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20002000 	.word	0x20002000
 8001a24:	00000400 	.word	0x00000400
 8001a28:	20000188 	.word	0x20000188
 8001a2c:	20000c90 	.word	0x20000c90

08001a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	2310      	movs	r3, #16
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	0018      	movs	r0, r3
 8001a48:	2310      	movs	r3, #16
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	f00a f8ec 	bl	800bc2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	0018      	movs	r0, r3
 8001a56:	230c      	movs	r3, #12
 8001a58:	001a      	movs	r2, r3
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	f00a f8e5 	bl	800bc2a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <MX_TIM1_Init+0xac>)
 8001a62:	4a22      	ldr	r2, [pc, #136]	; (8001aec <MX_TIM1_Init+0xb0>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <MX_TIM1_Init+0xac>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <MX_TIM1_Init+0xac>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <MX_TIM1_Init+0xac>)
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <MX_TIM1_Init+0xb4>)
 8001a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <MX_TIM1_Init+0xac>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <MX_TIM1_Init+0xac>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <MX_TIM1_Init+0xac>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_TIM1_Init+0xac>)
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f003 fc79 	bl	8005384 <HAL_TIM_Base_Init>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001a96:	f7ff fe82 	bl	800179e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9a:	2110      	movs	r1, #16
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	0152      	lsls	r2, r2, #5
 8001aa2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aa4:	187a      	adds	r2, r7, r1
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <MX_TIM1_Init+0xac>)
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f004 f91c 	bl	8005ce8 <HAL_TIM_ConfigClockSource>
 8001ab0:	1e03      	subs	r3, r0, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ab4:	f7ff fe73 	bl	800179e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aca:	1d3a      	adds	r2, r7, #4
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_TIM1_Init+0xac>)
 8001ace:	0011      	movs	r1, r2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f004 fdc7 	bl	8006664 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001ada:	f7ff fe60 	bl	800179e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b008      	add	sp, #32
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	20000384 	.word	0x20000384
 8001aec:	40012c00 	.word	0x40012c00
 8001af0:	0000ffff 	.word	0x0000ffff

08001af4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	2310      	movs	r3, #16
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	0018      	movs	r0, r3
 8001b00:	2310      	movs	r3, #16
 8001b02:	001a      	movs	r2, r3
 8001b04:	2100      	movs	r1, #0
 8001b06:	f00a f890 	bl	800bc2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	230c      	movs	r3, #12
 8001b10:	001a      	movs	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	f00a f889 	bl	800bc2a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <MX_TIM3_Init+0xa0>)
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <MX_TIM3_Init+0xa4>)
 8001b1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <MX_TIM3_Init+0xa0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <MX_TIM3_Init+0xa0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <MX_TIM3_Init+0xa0>)
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <MX_TIM3_Init+0xa8>)
 8001b2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <MX_TIM3_Init+0xa0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_TIM3_Init+0xa0>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_TIM3_Init+0xa0>)
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f003 fc20 	bl	8005384 <HAL_TIM_Base_Init>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b48:	f7ff fe29 	bl	800179e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	0152      	lsls	r2, r2, #5
 8001b54:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b56:	187a      	adds	r2, r7, r1
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_TIM3_Init+0xa0>)
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f004 f8c3 	bl	8005ce8 <HAL_TIM_ConfigClockSource>
 8001b62:	1e03      	subs	r3, r0, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b66:	f7ff fe1a 	bl	800179e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b76:	1d3a      	adds	r2, r7, #4
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_TIM3_Init+0xa0>)
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f004 fd71 	bl	8006664 <HAL_TIMEx_MasterConfigSynchronization>
 8001b82:	1e03      	subs	r3, r0, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001b86:	f7ff fe0a 	bl	800179e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b008      	add	sp, #32
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	20000338 	.word	0x20000338
 8001b98:	40000400 	.word	0x40000400
 8001b9c:	000003e7 	.word	0x000003e7

08001ba0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	0018      	movs	r0, r3
 8001baa:	231c      	movs	r3, #28
 8001bac:	001a      	movs	r2, r3
 8001bae:	2100      	movs	r1, #0
 8001bb0:	f00a f83b 	bl	800bc2a <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <MX_TIM14_Init+0x94>)
 8001bb6:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <MX_TIM14_Init+0x98>)
 8001bb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_TIM14_Init+0x94>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <MX_TIM14_Init+0x94>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 98;
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_TIM14_Init+0x94>)
 8001bc8:	2262      	movs	r2, #98	; 0x62
 8001bca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_TIM14_Init+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_TIM14_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_TIM14_Init+0x94>)
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f003 fbd2 	bl	8005384 <HAL_TIM_Base_Init>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001be4:	f7ff fddb 	bl	800179e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_TIM14_Init+0x94>)
 8001bea:	0018      	movs	r0, r3
 8001bec:	f003 fd16 	bl	800561c <HAL_TIM_PWM_Init>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001bf4:	f7ff fdd3 	bl	800179e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2260      	movs	r2, #96	; 0x60
 8001bfc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 33;
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2221      	movs	r2, #33	; 0x21
 8001c02:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c10:	1d39      	adds	r1, r7, #4
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_TIM14_Init+0x94>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	0018      	movs	r0, r3
 8001c18:	f003 ff70 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001c20:	f7ff fdbd 	bl	800179e <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <MX_TIM14_Init+0x94>)
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 f952 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b008      	add	sp, #32
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200003d0 	.word	0x200003d0
 8001c38:	40002000 	.word	0x40002000

08001c3c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b094      	sub	sp, #80	; 0x50
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c42:	2334      	movs	r3, #52	; 0x34
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	0018      	movs	r0, r3
 8001c48:	231c      	movs	r3, #28
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f009 ffec 	bl	800bc2a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c52:	003b      	movs	r3, r7
 8001c54:	0018      	movs	r0, r3
 8001c56:	2334      	movs	r3, #52	; 0x34
 8001c58:	001a      	movs	r2, r3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f009 ffe5 	bl	800bc2a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c60:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001c62:	4a38      	ldr	r2, [pc, #224]	; (8001d44 <MX_TIM16_Init+0x108>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 98;
 8001c72:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001c74:	2262      	movs	r2, #98	; 0x62
 8001c76:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c78:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f003 fb79 	bl	8005384 <HAL_TIM_Base_Init>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001c96:	f7ff fd82 	bl	800179e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001c9a:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f003 fcbd 	bl	800561c <HAL_TIM_PWM_Init>
 8001ca2:	1e03      	subs	r3, r0, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001ca6:	f7ff fd7a 	bl	800179e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001caa:	2134      	movs	r1, #52	; 0x34
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	2260      	movs	r2, #96	; 0x60
 8001cb0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 33;
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	2221      	movs	r2, #33	; 0x21
 8001cb6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cbe:	187b      	adds	r3, r7, r1
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd6:	1879      	adds	r1, r7, r1
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f003 ff0d 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8001ce2:	1e03      	subs	r3, r0, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001ce6:	f7ff fd5a 	bl	800179e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cea:	003b      	movs	r3, r7
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cf0:	003b      	movs	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cf6:	003b      	movs	r3, r7
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cfc:	003b      	movs	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d02:	003b      	movs	r3, r7
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d08:	003b      	movs	r3, r7
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	0192      	lsls	r2, r2, #6
 8001d0e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d10:	003b      	movs	r3, r7
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d16:	003b      	movs	r3, r7
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001d1c:	003a      	movs	r2, r7
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001d20:	0011      	movs	r1, r2
 8001d22:	0018      	movs	r0, r3
 8001d24:	f004 fd06 	bl	8006734 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d28:	1e03      	subs	r3, r0, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8001d2c:	f7ff fd37 	bl	800179e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <MX_TIM16_Init+0x104>)
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 f8cc 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b014      	add	sp, #80	; 0x50
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000041c 	.word	0x2000041c
 8001d44:	40014400 	.word	0x40014400

08001d48 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_TIM17_Init+0x44>)
 8001d4e:	4a10      	ldr	r2, [pc, #64]	; (8001d90 <MX_TIM17_Init+0x48>)
 8001d50:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_TIM17_Init+0x44>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_TIM17_Init+0x44>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_TIM17_Init+0x44>)
 8001d60:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <MX_TIM17_Init+0x4c>)
 8001d62:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_TIM17_Init+0x44>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_TIM17_Init+0x44>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_TIM17_Init+0x44>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <MX_TIM17_Init+0x44>)
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f003 fb03 	bl	8005384 <HAL_TIM_Base_Init>
 8001d7e:	1e03      	subs	r3, r0, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001d82:	f7ff fd0c 	bl	800179e <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200002ec 	.word	0x200002ec
 8001d90:	40014800 	.word	0x40014800
 8001d94:	0000ffff 	.word	0x0000ffff

08001d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b093      	sub	sp, #76	; 0x4c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da0:	2420      	movs	r4, #32
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	0018      	movs	r0, r3
 8001da6:	2328      	movs	r3, #40	; 0x28
 8001da8:	001a      	movs	r2, r3
 8001daa:	2100      	movs	r1, #0
 8001dac:	f009 ff3d 	bl	800bc2a <memset>
  if(tim_baseHandle->Instance==TIM1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a40      	ldr	r2, [pc, #256]	; (8001eb8 <HAL_TIM_Base_MspInit+0x120>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d125      	bne.n	8001e06 <HAL_TIM_Base_MspInit+0x6e>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001dba:	193b      	adds	r3, r7, r4
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	0392      	lsls	r2, r2, #14
 8001dc0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001dc2:	193b      	adds	r3, r7, r4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc8:	193b      	adds	r3, r7, r4
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f002 fdda 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001dd4:	f7ff fce3 	bl	800179e <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd8:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ddc:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	0109      	lsls	r1, r1, #4
 8001de2:	430a      	orrs	r2, r1
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
 8001de6:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	4013      	ands	r3, r2
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	200d      	movs	r0, #13
 8001dfa:	f001 fc0f 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001dfe:	200d      	movs	r0, #13
 8001e00:	f001 fc21 	bl	8003646 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001e04:	e054      	b.n	8001eb0 <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM3)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <HAL_TIM_Base_MspInit+0x128>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d10c      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e16:	2102      	movs	r1, #2
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	69bb      	ldr	r3, [r7, #24]
}
 8001e28:	e042      	b.n	8001eb0 <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM14)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a25      	ldr	r2, [pc, #148]	; (8001ec4 <HAL_TIM_Base_MspInit+0x12c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d10e      	bne.n	8001e52 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e38:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	0209      	lsls	r1, r1, #8
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697b      	ldr	r3, [r7, #20]
}
 8001e50:	e02e      	b.n	8001eb0 <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM16)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_TIM_Base_MspInit+0x130>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d10e      	bne.n	8001e7a <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	0289      	lsls	r1, r1, #10
 8001e66:	430a      	orrs	r2, r1
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	029b      	lsls	r3, r3, #10
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
}
 8001e78:	e01a      	b.n	8001eb0 <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM17)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_TIM_Base_MspInit+0x134>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d115      	bne.n	8001eb0 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	02c9      	lsls	r1, r1, #11
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_TIM_Base_MspInit+0x124>)
 8001e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	02db      	lsls	r3, r3, #11
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2016      	movs	r0, #22
 8001ea6:	f001 fbb9 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001eaa:	2016      	movs	r0, #22
 8001eac:	f001 fbcb 	bl	8003646 <HAL_NVIC_EnableIRQ>
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b013      	add	sp, #76	; 0x4c
 8001eb6:	bd90      	pop	{r4, r7, pc}
 8001eb8:	40012c00 	.word	0x40012c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40002000 	.word	0x40002000
 8001ec8:	40014400 	.word	0x40014400
 8001ecc:	40014800 	.word	0x40014800

08001ed0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b08b      	sub	sp, #44	; 0x2c
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	2414      	movs	r4, #20
 8001eda:	193b      	adds	r3, r7, r4
 8001edc:	0018      	movs	r0, r3
 8001ede:	2314      	movs	r3, #20
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	f009 fea1 	bl	800bc2a <memset>
  if(timHandle->Instance==TIM14)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <HAL_TIM_MspPostInit+0xc0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d122      	bne.n	8001f38 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_TIM_MspPostInit+0xc4>)
 8001ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef6:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_TIM_MspPostInit+0xc4>)
 8001ef8:	2102      	movs	r1, #2
 8001efa:	430a      	orrs	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_TIM_MspPostInit+0xc4>)
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PB1     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = Bias2_Pin;
 8001f0a:	0021      	movs	r1, r4
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2202      	movs	r2, #2
 8001f10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	2202      	movs	r2, #2
 8001f16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	187b      	adds	r3, r7, r1
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8001f24:	187b      	adds	r3, r7, r1
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Bias2_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	187b      	adds	r3, r7, r1
 8001f2c:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_TIM_MspPostInit+0xc8>)
 8001f2e:	0019      	movs	r1, r3
 8001f30:	0010      	movs	r0, r2
 8001f32:	f001 fe59 	bl	8003be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001f36:	e027      	b.n	8001f88 <HAL_TIM_MspPostInit+0xb8>
  else if(timHandle->Instance==TIM16)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_TIM_MspPostInit+0xcc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d122      	bne.n	8001f88 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_TIM_MspPostInit+0xc4>)
 8001f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <HAL_TIM_MspPostInit+0xc4>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_TIM_MspPostInit+0xc4>)
 8001f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f52:	2201      	movs	r2, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Bias1_Pin;
 8001f5a:	2114      	movs	r1, #20
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	2202      	movs	r2, #2
 8001f66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	2205      	movs	r2, #5
 8001f78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Bias1_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	187a      	adds	r2, r7, r1
 8001f7c:	23a0      	movs	r3, #160	; 0xa0
 8001f7e:	05db      	lsls	r3, r3, #23
 8001f80:	0011      	movs	r1, r2
 8001f82:	0018      	movs	r0, r3
 8001f84:	f001 fe30 	bl	8003be8 <HAL_GPIO_Init>
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b00b      	add	sp, #44	; 0x2c
 8001f8e:	bd90      	pop	{r4, r7, pc}
 8001f90:	40002000 	.word	0x40002000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	50000400 	.word	0x50000400
 8001f9c:	40014400 	.word	0x40014400

08001fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fa0:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa4:	f7ff fd44 	bl	8001a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <LoopForever+0xe>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	; (8001fec <LoopForever+0x16>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fce:	f009 fdeb 	bl	800bba8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fd2:	f7ff fb69 	bl	80016a8 <main>

08001fd6 <LoopForever>:

LoopForever:
  b LoopForever
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
  ldr   r0, =_estack
 8001fd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001fe4:	0800cf9c 	.word	0x0800cf9c
  ldr r2, =_sbss
 8001fe8:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001fec:	20000c90 	.word	0x20000c90

08001ff0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08001ff4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_Init+0x3c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_Init+0x3c>)
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	0049      	lsls	r1, r1, #1
 800200a:	430a      	orrs	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800200e:	2003      	movs	r0, #3
 8002010:	f000 f810 	bl	8002034 <HAL_InitTick>
 8002014:	1e03      	subs	r3, r0, #0
 8002016:	d003      	beq.n	8002020 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e001      	b.n	8002024 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002020:	f7ff fc4c 	bl	80018bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	781b      	ldrb	r3, [r3, #0]
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40022000 	.word	0x40022000

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800203c:	230f      	movs	r3, #15
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_InitTick+0x88>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d02b      	beq.n	80020a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800204c:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <HAL_InitTick+0x8c>)
 800204e:	681c      	ldr	r4, [r3, #0]
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_InitTick+0x88>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	0019      	movs	r1, r3
 8002056:	23fa      	movs	r3, #250	; 0xfa
 8002058:	0098      	lsls	r0, r3, #2
 800205a:	f7fe f85b 	bl	8000114 <__udivsi3>
 800205e:	0003      	movs	r3, r0
 8002060:	0019      	movs	r1, r3
 8002062:	0020      	movs	r0, r4
 8002064:	f7fe f856 	bl	8000114 <__udivsi3>
 8002068:	0003      	movs	r3, r0
 800206a:	0018      	movs	r0, r3
 800206c:	f001 fafb 	bl	8003666 <HAL_SYSTICK_Config>
 8002070:	1e03      	subs	r3, r0, #0
 8002072:	d112      	bne.n	800209a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d80a      	bhi.n	8002090 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	2301      	movs	r3, #1
 800207e:	425b      	negs	r3, r3
 8002080:	2200      	movs	r2, #0
 8002082:	0018      	movs	r0, r3
 8002084:	f001 faca 	bl	800361c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_InitTick+0x90>)
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e00d      	b.n	80020ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002090:	230f      	movs	r3, #15
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e008      	b.n	80020ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800209a:	230f      	movs	r3, #15
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e003      	b.n	80020ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020a4:	230f      	movs	r3, #15
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020ac:	230f      	movs	r3, #15
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	781b      	ldrb	r3, [r3, #0]
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b005      	add	sp, #20
 80020b8:	bd90      	pop	{r4, r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	20000008 	.word	0x20000008
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_IncTick+0x1c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	001a      	movs	r2, r3
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_IncTick+0x20>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	18d2      	adds	r2, r2, r3
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_IncTick+0x20>)
 80020da:	601a      	str	r2, [r3, #0]
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	20000008 	.word	0x20000008
 80020e8:	20000468 	.word	0x20000468

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b02      	ldr	r3, [pc, #8]	; (80020fc <HAL_GetTick+0x10>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	20000468 	.word	0x20000468

08002100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff fff0 	bl	80020ec <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3301      	adds	r3, #1
 8002118:	d005      	beq.n	8002126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_Delay+0x44>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	001a      	movs	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	189b      	adds	r3, r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	f7ff ffe0 	bl	80020ec <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	429a      	cmp	r2, r3
 8002136:	d8f7      	bhi.n	8002128 <HAL_Delay+0x28>
  {
  }
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	46bd      	mov	sp, r7
 800213e:	b004      	add	sp, #16
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	20000008 	.word	0x20000008

08002148 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002158:	401a      	ands	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	fe3fffff 	.word	0xfe3fffff

08002170 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	23e0      	movs	r3, #224	; 0xe0
 800217e:	045b      	lsls	r3, r3, #17
 8002180:	4013      	ands	r3, r2
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}

0800218a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	2104      	movs	r1, #4
 800219e:	400a      	ands	r2, r1
 80021a0:	2107      	movs	r1, #7
 80021a2:	4091      	lsls	r1, r2
 80021a4:	000a      	movs	r2, r1
 80021a6:	43d2      	mvns	r2, r2
 80021a8:	401a      	ands	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2104      	movs	r1, #4
 80021ae:	400b      	ands	r3, r1
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4099      	lsls	r1, r3
 80021b4:	000b      	movs	r3, r1
 80021b6:	431a      	orrs	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b004      	add	sp, #16
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	4013      	ands	r3, r2
 80021d6:	d101      	bne.n	80021dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021dc:	2300      	movs	r3, #0
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	211f      	movs	r1, #31
 80021fa:	400a      	ands	r2, r1
 80021fc:	210f      	movs	r1, #15
 80021fe:	4091      	lsls	r1, r2
 8002200:	000a      	movs	r2, r1
 8002202:	43d2      	mvns	r2, r2
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	210f      	movs	r1, #15
 800220c:	4019      	ands	r1, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	201f      	movs	r0, #31
 8002212:	4003      	ands	r3, r0
 8002214:	4099      	lsls	r1, r3
 8002216:	000b      	movs	r3, r1
 8002218:	431a      	orrs	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b004      	add	sp, #16
 8002224:	bd80      	pop	{r7, pc}

08002226 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	035b      	lsls	r3, r3, #13
 8002238:	0b5b      	lsrs	r3, r3, #13
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}

08002248 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	0352      	lsls	r2, r2, #13
 800225a:	0b52      	lsrs	r2, r2, #13
 800225c:	43d2      	mvns	r2, r2
 800225e:	401a      	ands	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}

0800226c <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2203      	movs	r2, #3
 800227a:	4013      	ands	r3, r2
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}

08002284 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	0212      	lsls	r2, r2, #8
 8002298:	43d2      	mvns	r2, r2
 800229a:	401a      	ands	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	400b      	ands	r3, r1
 80022a4:	4904      	ldr	r1, [pc, #16]	; (80022b8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80022a6:	400b      	ands	r3, r1
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b004      	add	sp, #16
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	07ffff00 	.word	0x07ffff00

080022bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	0552      	lsls	r2, r2, #21
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b002      	add	sp, #8
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	6fffffe8 	.word	0x6fffffe8

080022e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	055b      	lsls	r3, r3, #21
 80022f4:	401a      	ands	r2, r3
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	055b      	lsls	r3, r3, #21
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d101      	bne.n	8002302 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002302:	2300      	movs	r3, #0
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <LL_ADC_Enable+0x20>)
 800231a:	4013      	ands	r3, r2
 800231c:	2201      	movs	r2, #1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}
 800232c:	7fffffe8 	.word	0x7fffffe8

08002330 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <LL_ADC_Disable+0x20>)
 800233e:	4013      	ands	r3, r2
 8002340:	2202      	movs	r2, #2
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}
 8002350:	7fffffe8 	.word	0x7fffffe8

08002354 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <LL_ADC_IsEnabled+0x18>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <LL_ADC_IsEnabled+0x1a>
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}

08002376 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d101      	bne.n	800238e <LL_ADC_IsDisableOngoing+0x18>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_ADC_IsDisableOngoing+0x1a>
 800238e:	2300      	movs	r3, #0
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}

08002398 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <LL_ADC_REG_StartConversion+0x20>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	2204      	movs	r2, #4
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	7fffffe8 	.word	0x7fffffe8

080023bc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <LL_ADC_REG_StopConversion+0x20>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	2210      	movs	r2, #16
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	7fffffe8 	.word	0x7fffffe8

080023e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2204      	movs	r2, #4
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d101      	bne.n	80023f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240c:	231f      	movs	r3, #31
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e1b1      	b.n	800278e <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f7fe ffd5 	bl	80013e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2254      	movs	r2, #84	; 0x54
 8002444:	2100      	movs	r1, #0
 8002446:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0018      	movs	r0, r3
 800244e:	f7ff ff49 	bl	80022e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002452:	1e03      	subs	r3, r0, #0
 8002454:	d115      	bne.n	8002482 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff ff2e 	bl	80022bc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002460:	4bcd      	ldr	r3, [pc, #820]	; (8002798 <HAL_ADC_Init+0x394>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	49cd      	ldr	r1, [pc, #820]	; (800279c <HAL_ADC_Init+0x398>)
 8002466:	0018      	movs	r0, r3
 8002468:	f7fd fe54 	bl	8000114 <__udivsi3>
 800246c:	0003      	movs	r3, r0
 800246e:	3301      	adds	r3, #1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002474:	e002      	b.n	800247c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3b01      	subs	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	0018      	movs	r0, r3
 8002488:	f7ff ff2c 	bl	80022e4 <LL_ADC_IsInternalRegulatorEnabled>
 800248c:	1e03      	subs	r3, r0, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	2210      	movs	r2, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	2201      	movs	r2, #1
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff ff93 	bl	80023e0 <LL_ADC_REG_IsConversionOngoing>
 80024ba:	0003      	movs	r3, r0
 80024bc:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	2210      	movs	r2, #16
 80024c4:	4013      	ands	r3, r2
 80024c6:	d000      	beq.n	80024ca <HAL_ADC_Init+0xc6>
 80024c8:	e154      	b.n	8002774 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d000      	beq.n	80024d2 <HAL_ADC_Init+0xce>
 80024d0:	e150      	b.n	8002774 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	4ab2      	ldr	r2, [pc, #712]	; (80027a0 <HAL_ADC_Init+0x39c>)
 80024d8:	4013      	ands	r3, r2
 80024da:	2202      	movs	r2, #2
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7ff ff34 	bl	8002354 <LL_ADC_IsEnabled>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d156      	bne.n	800259e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2218      	movs	r2, #24
 80024f8:	4393      	bics	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	0f9b      	lsrs	r3, r3, #30
 800250e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002514:	4313      	orrs	r3, r2
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	223c      	movs	r2, #60	; 0x3c
 8002520:	5c9b      	ldrb	r3, [r3, r2]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d111      	bne.n	800254a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0f9b      	lsrs	r3, r3, #30
 800252c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002532:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002538:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800253e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	2201      	movs	r2, #1
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	4a94      	ldr	r2, [pc, #592]	; (80027a4 <HAL_ADC_Init+0x3a0>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	430a      	orrs	r2, r1
 800255e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	23c0      	movs	r3, #192	; 0xc0
 8002566:	061b      	lsls	r3, r3, #24
 8002568:	429a      	cmp	r2, r3
 800256a:	d018      	beq.n	800259e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	05db      	lsls	r3, r3, #23
 8002574:	429a      	cmp	r2, r3
 8002576:	d012      	beq.n	800259e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	429a      	cmp	r2, r3
 8002582:	d00c      	beq.n	800259e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002584:	4b88      	ldr	r3, [pc, #544]	; (80027a8 <HAL_ADC_Init+0x3a4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a88      	ldr	r2, [pc, #544]	; (80027ac <HAL_ADC_Init+0x3a8>)
 800258a:	4013      	ands	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	23f0      	movs	r3, #240	; 0xf0
 8002594:	039b      	lsls	r3, r3, #14
 8002596:	401a      	ands	r2, r3
 8002598:	4b83      	ldr	r3, [pc, #524]	; (80027a8 <HAL_ADC_Init+0x3a4>)
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7e1b      	ldrb	r3, [r3, #24]
 80025a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7e5b      	ldrb	r3, [r3, #25]
 80025a8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e9b      	ldrb	r3, [r3, #26]
 80025b0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_ADC_Init+0x1be>
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	015b      	lsls	r3, r3, #5
 80025c0:	e000      	b.n	80025c4 <HAL_ADC_Init+0x1c0>
 80025c2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025c4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025ca:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da04      	bge.n	80025de <HAL_ADC_Init+0x1da>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	e001      	b.n	80025e2 <HAL_ADC_Init+0x1de>
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80025e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	5c5b      	ldrb	r3, [r3, r1]
 80025ea:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80025ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d115      	bne.n	800262a <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7e9b      	ldrb	r3, [r3, #26]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	0252      	lsls	r2, r2, #9
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e00b      	b.n	800262a <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	2220      	movs	r2, #32
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	2201      	movs	r2, #1
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002636:	23e0      	movs	r3, #224	; 0xe0
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002640:	4313      	orrs	r3, r2
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_ADC_Init+0x3ac>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	430a      	orrs	r2, r1
 800265c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4a53      	ldr	r2, [pc, #332]	; (80027b4 <HAL_ADC_Init+0x3b0>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	430a      	orrs	r2, r1
 8002672:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	001a      	movs	r2, r3
 800267e:	2100      	movs	r1, #0
 8002680:	f7ff fd83 	bl	800218a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	494a      	ldr	r1, [pc, #296]	; (80027b8 <HAL_ADC_Init+0x3b4>)
 800268e:	001a      	movs	r2, r3
 8002690:	f7ff fd7b 	bl	800218a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2110      	movs	r1, #16
 80026a8:	4249      	negs	r1, r1
 80026aa:	430a      	orrs	r2, r1
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
 80026ae:	e03a      	b.n	8002726 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	039b      	lsls	r3, r3, #14
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d134      	bne.n	8002726 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e00c      	b.n	80026dc <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	40da      	lsrs	r2, r3
 80026cc:	0013      	movs	r3, r2
 80026ce:	220f      	movs	r2, #15
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b0f      	cmp	r3, #15
 80026d4:	d006      	beq.n	80026e4 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	3301      	adds	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	2b07      	cmp	r3, #7
 80026e0:	d9ef      	bls.n	80026c2 <HAL_ADC_Init+0x2be>
 80026e2:	e000      	b.n	80026e6 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80026e4:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d109      	bne.n	8002700 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2110      	movs	r1, #16
 80026f8:	4249      	negs	r1, r1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
 80026fe:	e012      	b.n	8002726 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	3b01      	subs	r3, #1
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	221c      	movs	r2, #28
 8002710:	4013      	ands	r3, r2
 8002712:	2210      	movs	r2, #16
 8002714:	4252      	negs	r2, r2
 8002716:	409a      	lsls	r2, r3
 8002718:	0011      	movs	r1, r2
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_ADC_Init+0x3b8>)
 800272e:	4013      	ands	r3, r2
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	429a      	cmp	r2, r3
 8002734:	d10b      	bne.n	800274e <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	2203      	movs	r2, #3
 8002742:	4393      	bics	r3, r2
 8002744:	2201      	movs	r2, #1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800274c:	e01c      	b.n	8002788 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	2212      	movs	r2, #18
 8002754:	4393      	bics	r3, r2
 8002756:	2210      	movs	r2, #16
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	2201      	movs	r2, #1
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800276a:	231f      	movs	r3, #31
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002772:	e009      	b.n	8002788 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	2210      	movs	r2, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002780:	231f      	movs	r3, #31
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002788:	231f      	movs	r3, #31
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	781b      	ldrb	r3, [r3, #0]
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b008      	add	sp, #32
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	20000000 	.word	0x20000000
 800279c:	00030d40 	.word	0x00030d40
 80027a0:	fffffefd 	.word	0xfffffefd
 80027a4:	1ffffc02 	.word	0x1ffffc02
 80027a8:	40012708 	.word	0x40012708
 80027ac:	ffc3ffff 	.word	0xffc3ffff
 80027b0:	fffe0219 	.word	0xfffe0219
 80027b4:	dffffc02 	.word	0xdffffc02
 80027b8:	07ffff04 	.word	0x07ffff04
 80027bc:	833fffe7 	.word	0x833fffe7

080027c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027c0:	b5b0      	push	{r4, r5, r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7ff fe05 	bl	80023e0 <LL_ADC_REG_IsConversionOngoing>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d16c      	bne.n	80028b4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2254      	movs	r2, #84	; 0x54
 80027de:	5c9b      	ldrb	r3, [r3, r2]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_Start_DMA+0x28>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e06c      	b.n	80028c2 <HAL_ADC_Start_DMA+0x102>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2254      	movs	r2, #84	; 0x54
 80027ec:	2101      	movs	r1, #1
 80027ee:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	4013      	ands	r3, r2
 80027fa:	d113      	bne.n	8002824 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0018      	movs	r0, r3
 8002802:	f7ff fda7 	bl	8002354 <LL_ADC_IsEnabled>
 8002806:	1e03      	subs	r3, r0, #0
 8002808:	d004      	beq.n	8002814 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	0018      	movs	r0, r3
 8002810:	f7ff fd8e 	bl	8002330 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2101      	movs	r1, #1
 8002820:	430a      	orrs	r2, r1
 8002822:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002824:	2517      	movs	r5, #23
 8002826:	197c      	adds	r4, r7, r5
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fc12 	bl	8003054 <ADC_Enable>
 8002830:	0003      	movs	r3, r0
 8002832:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002834:	002c      	movs	r4, r5
 8002836:	193b      	adds	r3, r7, r4
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d13e      	bne.n	80028bc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4a22      	ldr	r2, [pc, #136]	; (80028cc <HAL_ADC_Start_DMA+0x10c>)
 8002844:	4013      	ands	r3, r2
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	0052      	lsls	r2, r2, #1
 800284a:	431a      	orrs	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285a:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_ADC_Start_DMA+0x110>)
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002862:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <HAL_ADC_Start_DMA+0x114>)
 8002864:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286a:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <HAL_ADC_Start_DMA+0x118>)
 800286c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	221c      	movs	r2, #28
 8002874:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2254      	movs	r2, #84	; 0x54
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2110      	movs	r1, #16
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3340      	adds	r3, #64	; 0x40
 8002898:	0019      	movs	r1, r3
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	193c      	adds	r4, r7, r4
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f000 ff78 	bl	8003794 <HAL_DMA_Start_IT>
 80028a4:	0003      	movs	r3, r0
 80028a6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f7ff fd73 	bl	8002398 <LL_ADC_REG_StartConversion>
 80028b2:	e003      	b.n	80028bc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028b4:	2317      	movs	r3, #23
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	2202      	movs	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80028bc:	2317      	movs	r3, #23
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	781b      	ldrb	r3, [r3, #0]
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b006      	add	sp, #24
 80028c8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	fffff0fe 	.word	0xfffff0fe
 80028d0:	0800321d 	.word	0x0800321d
 80028d4:	080032e5 	.word	0x080032e5
 80028d8:	08003303 	.word	0x08003303

080028dc <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2254      	movs	r2, #84	; 0x54
 80028e8:	5c9b      	ldrb	r3, [r3, r2]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_Stop_DMA+0x16>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e05f      	b.n	80029b2 <HAL_ADC_Stop_DMA+0xd6>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2254      	movs	r2, #84	; 0x54
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80028fa:	250f      	movs	r5, #15
 80028fc:	197c      	adds	r4, r7, r5
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	0018      	movs	r0, r3
 8002902:	f000 fb65 	bl	8002fd0 <ADC_ConversionStop>
 8002906:	0003      	movs	r3, r0
 8002908:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800290a:	0029      	movs	r1, r5
 800290c:	187b      	adds	r3, r7, r1
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d147      	bne.n	80029a4 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	2225      	movs	r2, #37	; 0x25
 800291a:	5c9b      	ldrb	r3, [r3, r2]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d112      	bne.n	8002948 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002926:	000d      	movs	r5, r1
 8002928:	187c      	adds	r4, r7, r1
 800292a:	0018      	movs	r0, r3
 800292c:	f000 ffb8 	bl	80038a0 <HAL_DMA_Abort>
 8002930:	0003      	movs	r3, r0
 8002932:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002934:	197b      	adds	r3, r7, r5
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	2240      	movs	r2, #64	; 0x40
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2110      	movs	r1, #16
 8002954:	438a      	bics	r2, r1
 8002956:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002958:	220f      	movs	r2, #15
 800295a:	18bb      	adds	r3, r7, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002962:	18bc      	adds	r4, r7, r2
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f000 fbfa 	bl	8003160 <ADC_Disable>
 800296c:	0003      	movs	r3, r0
 800296e:	7023      	strb	r3, [r4, #0]
 8002970:	e003      	b.n	800297a <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fbf3 	bl	8003160 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800297a:	230f      	movs	r3, #15
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <HAL_ADC_Stop_DMA+0xe0>)
 800298a:	4013      	ands	r3, r2
 800298c:	2201      	movs	r2, #1
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2101      	movs	r1, #1
 80029a0:	438a      	bics	r2, r1
 80029a2:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2254      	movs	r2, #84	; 0x54
 80029a8:	2100      	movs	r1, #0
 80029aa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80029ac:	230f      	movs	r3, #15
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b004      	add	sp, #16
 80029b8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	fffffefe 	.word	0xfffffefe

080029c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2202      	movs	r2, #2
 80029e0:	4013      	ands	r3, r2
 80029e2:	d017      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x54>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2202      	movs	r2, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	d013      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	2210      	movs	r2, #16
 80029f2:	4013      	ands	r3, r2
 80029f4:	d106      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	0018      	movs	r0, r3
 8002a08:	f000 fd4c 	bl	80034a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2202      	movs	r2, #2
 8002a12:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2204      	movs	r2, #4
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <HAL_ADC_IRQHandler+0x64>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	4013      	ands	r3, r2
 8002a22:	d107      	bne.n	8002a34 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2208      	movs	r2, #8
 8002a28:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a2a:	d04d      	beq.n	8002ac8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2208      	movs	r2, #8
 8002a30:	4013      	ands	r3, r2
 8002a32:	d049      	beq.n	8002ac8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	2210      	movs	r2, #16
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d106      	bne.n	8002a4c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	2280      	movs	r2, #128	; 0x80
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7ff fbb7 	bl	80021c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a56:	1e03      	subs	r3, r0, #0
 8002a58:	d02e      	beq.n	8002ab8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7e9b      	ldrb	r3, [r3, #26]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d12a      	bne.n	8002ab8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d123      	bne.n	8002ab8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f7ff fcb3 	bl	80023e0 <LL_ADC_REG_IsConversionOngoing>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d110      	bne.n	8002aa0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	210c      	movs	r1, #12
 8002a8a:	438a      	bics	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	4a56      	ldr	r2, [pc, #344]	; (8002bec <HAL_ADC_IRQHandler+0x22c>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	2201      	movs	r2, #1
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a9e:	e00b      	b.n	8002ab8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f007 fcbe 	bl	800a43c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	220c      	movs	r2, #12
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	4013      	ands	r3, r2
 8002ace:	d012      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x136>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d00e      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	2280      	movs	r2, #128	; 0x80
 8002ade:	0252      	lsls	r2, r2, #9
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 f889 	bl	8002c00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2280      	movs	r2, #128	; 0x80
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4013      	ands	r3, r2
 8002afe:	d014      	beq.n	8002b2a <HAL_ADC_IRQHandler+0x16a>
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4013      	ands	r3, r2
 8002b08:	d00f      	beq.n	8002b2a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	2280      	movs	r2, #128	; 0x80
 8002b10:	0292      	lsls	r2, r2, #10
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 fcb2 	bl	8003484 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	0052      	lsls	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4013      	ands	r3, r2
 8002b32:	d014      	beq.n	8002b5e <HAL_ADC_IRQHandler+0x19e>
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d00f      	beq.n	8002b5e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	02d2      	lsls	r2, r2, #11
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 fca0 	bl	8003494 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2280      	movs	r2, #128	; 0x80
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2210      	movs	r2, #16
 8002b62:	4013      	ands	r3, r2
 8002b64:	d02b      	beq.n	8002bbe <HAL_ADC_IRQHandler+0x1fe>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d027      	beq.n	8002bbe <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002b76:	2301      	movs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e008      	b.n	8002b8e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff fb73 	bl	800226c <LL_ADC_REG_GetDMATransfer>
 8002b86:	1e03      	subs	r3, r0, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d110      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	00d2      	lsls	r2, r2, #3
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 f82d 	bl	8002c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2210      	movs	r2, #16
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	019b      	lsls	r3, r3, #6
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d00d      	beq.n	8002be4 <HAL_ADC_IRQHandler+0x224>
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d008      	beq.n	8002be4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f000 fc6d 	bl	80034b4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	0192      	lsls	r2, r2, #6
 8002be2:	601a      	str	r2, [r3, #0]
  }
}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b006      	add	sp, #24
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	fffffefe 	.word	0xfffffefe

08002bf0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2a:	2317      	movs	r3, #23
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2254      	movs	r2, #84	; 0x54
 8002c3a:	5c9b      	ldrb	r3, [r3, r2]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x24>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e1c0      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x3a6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2254      	movs	r2, #84	; 0x54
 8002c48:	2101      	movs	r1, #1
 8002c4a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7ff fbc5 	bl	80023e0 <LL_ADC_REG_IsConversionOngoing>
 8002c56:	1e03      	subs	r3, r0, #0
 8002c58:	d000      	beq.n	8002c5c <HAL_ADC_ConfigChannel+0x3c>
 8002c5a:	e1a3      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d100      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x46>
 8002c64:	e143      	b.n	8002eee <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	061b      	lsls	r3, r3, #24
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d004      	beq.n	8002c7c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c76:	4ac1      	ldr	r2, [pc, #772]	; (8002f7c <HAL_ADC_ConfigChannel+0x35c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d108      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	0019      	movs	r1, r3
 8002c86:	0010      	movs	r0, r2
 8002c88:	f7ff facd 	bl	8002226 <LL_ADC_REG_SetSequencerChAdd>
 8002c8c:	e0c9      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	211f      	movs	r1, #31
 8002c98:	400b      	ands	r3, r1
 8002c9a:	210f      	movs	r1, #15
 8002c9c:	4099      	lsls	r1, r3
 8002c9e:	000b      	movs	r3, r1
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	035b      	lsls	r3, r3, #13
 8002cac:	0b5b      	lsrs	r3, r3, #13
 8002cae:	d105      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x9c>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	221f      	movs	r2, #31
 8002cb8:	4013      	ands	r3, r2
 8002cba:	e098      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d000      	beq.n	8002cc8 <HAL_ADC_ConfigChannel+0xa8>
 8002cc6:	e091      	b.n	8002dec <HAL_ADC_ConfigChannel+0x1cc>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d000      	beq.n	8002cd4 <HAL_ADC_ConfigChannel+0xb4>
 8002cd2:	e089      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x1c8>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2204      	movs	r2, #4
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d000      	beq.n	8002ce0 <HAL_ADC_ConfigChannel+0xc0>
 8002cde:	e081      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x1c4>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d000      	beq.n	8002cec <HAL_ADC_ConfigChannel+0xcc>
 8002cea:	e079      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x1c0>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d000      	beq.n	8002cf8 <HAL_ADC_ConfigChannel+0xd8>
 8002cf6:	e071      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x1bc>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d000      	beq.n	8002d04 <HAL_ADC_ConfigChannel+0xe4>
 8002d02:	e069      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x1b8>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d000      	beq.n	8002d10 <HAL_ADC_ConfigChannel+0xf0>
 8002d0e:	e061      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x1b4>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2280      	movs	r2, #128	; 0x80
 8002d16:	4013      	ands	r3, r2
 8002d18:	d000      	beq.n	8002d1c <HAL_ADC_ConfigChannel+0xfc>
 8002d1a:	e059      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x1b0>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4013      	ands	r3, r2
 8002d26:	d151      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1ac>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4013      	ands	r3, r2
 8002d32:	d149      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x1a8>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d141      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1a4>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d139      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x1a0>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	015b      	lsls	r3, r3, #5
 8002d54:	4013      	ands	r3, r2
 8002d56:	d131      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x19c>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	019b      	lsls	r3, r3, #6
 8002d60:	4013      	ands	r3, r2
 8002d62:	d129      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x198>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	01db      	lsls	r3, r3, #7
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d121      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x194>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d119      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x190>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	025b      	lsls	r3, r3, #9
 8002d84:	4013      	ands	r3, r2
 8002d86:	d111      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x18c>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	029b      	lsls	r3, r3, #10
 8002d90:	4013      	ands	r3, r2
 8002d92:	d109      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x188>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	02db      	lsls	r3, r3, #11
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d001      	beq.n	8002da4 <HAL_ADC_ConfigChannel+0x184>
 8002da0:	2312      	movs	r3, #18
 8002da2:	e024      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002da4:	2300      	movs	r3, #0
 8002da6:	e022      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002da8:	2311      	movs	r3, #17
 8002daa:	e020      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002dac:	2310      	movs	r3, #16
 8002dae:	e01e      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002db0:	230f      	movs	r3, #15
 8002db2:	e01c      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002db4:	230e      	movs	r3, #14
 8002db6:	e01a      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002db8:	230d      	movs	r3, #13
 8002dba:	e018      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002dbc:	230c      	movs	r3, #12
 8002dbe:	e016      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002dc0:	230b      	movs	r3, #11
 8002dc2:	e014      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002dc4:	230a      	movs	r3, #10
 8002dc6:	e012      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002dc8:	2309      	movs	r3, #9
 8002dca:	e010      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002dcc:	2308      	movs	r3, #8
 8002dce:	e00e      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002dd0:	2307      	movs	r3, #7
 8002dd2:	e00c      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002dd4:	2306      	movs	r3, #6
 8002dd6:	e00a      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002dd8:	2305      	movs	r3, #5
 8002dda:	e008      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002ddc:	2304      	movs	r3, #4
 8002dde:	e006      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002de0:	2303      	movs	r3, #3
 8002de2:	e004      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e002      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1ce>
 8002dec:	2300      	movs	r3, #0
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	6852      	ldr	r2, [r2, #4]
 8002df2:	201f      	movs	r0, #31
 8002df4:	4002      	ands	r2, r0
 8002df6:	4093      	lsls	r3, r2
 8002df8:	000a      	movs	r2, r1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d808      	bhi.n	8002e22 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	001a      	movs	r2, r3
 8002e1e:	f7ff f9e2 	bl	80021e6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	001a      	movs	r2, r3
 8002e30:	f7ff fa28 	bl	8002284 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	db00      	blt.n	8002e3e <HAL_ADC_ConfigChannel+0x21e>
 8002e3c:	e0bc      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e3e:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_ADC_ConfigChannel+0x360>)
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7ff f995 	bl	8002170 <LL_ADC_GetCommonPathInternalCh>
 8002e46:	0003      	movs	r3, r0
 8002e48:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a4d      	ldr	r2, [pc, #308]	; (8002f84 <HAL_ADC_ConfigChannel+0x364>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d122      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	041b      	lsls	r3, r3, #16
 8002e5a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e5c:	d11d      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	0412      	lsls	r2, r2, #16
 8002e64:	4313      	orrs	r3, r2
 8002e66:	4a46      	ldr	r2, [pc, #280]	; (8002f80 <HAL_ADC_ConfigChannel+0x360>)
 8002e68:	0019      	movs	r1, r3
 8002e6a:	0010      	movs	r0, r2
 8002e6c:	f7ff f96c 	bl	8002148 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e70:	4b45      	ldr	r3, [pc, #276]	; (8002f88 <HAL_ADC_ConfigChannel+0x368>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4945      	ldr	r1, [pc, #276]	; (8002f8c <HAL_ADC_ConfigChannel+0x36c>)
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7fd f94c 	bl	8000114 <__udivsi3>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	0013      	movs	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e8a:	e002      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f9      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e98:	e08e      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a3c      	ldr	r2, [pc, #240]	; (8002f90 <HAL_ADC_ConfigChannel+0x370>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10e      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x2a2>
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	045b      	lsls	r3, r3, #17
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d109      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	0452      	lsls	r2, r2, #17
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	4a32      	ldr	r2, [pc, #200]	; (8002f80 <HAL_ADC_ConfigChannel+0x360>)
 8002eb8:	0019      	movs	r1, r3
 8002eba:	0010      	movs	r0, r2
 8002ebc:	f7ff f944 	bl	8002148 <LL_ADC_SetCommonPathInternalCh>
 8002ec0:	e07a      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a33      	ldr	r2, [pc, #204]	; (8002f94 <HAL_ADC_ConfigChannel+0x374>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d000      	beq.n	8002ece <HAL_ADC_ConfigChannel+0x2ae>
 8002ecc:	e074      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	03db      	lsls	r3, r3, #15
 8002ed4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ed6:	d000      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x2ba>
 8002ed8:	e06e      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	03d2      	lsls	r2, r2, #15
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	4a27      	ldr	r2, [pc, #156]	; (8002f80 <HAL_ADC_ConfigChannel+0x360>)
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	0010      	movs	r0, r2
 8002ee8:	f7ff f92e 	bl	8002148 <LL_ADC_SetCommonPathInternalCh>
 8002eec:	e064      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d004      	beq.n	8002f04 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002efe:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <HAL_ADC_ConfigChannel+0x35c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d107      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	0010      	movs	r0, r2
 8002f10:	f7ff f99a 	bl	8002248 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da4d      	bge.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_ADC_ConfigChannel+0x360>)
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7ff f926 	bl	8002170 <LL_ADC_GetCommonPathInternalCh>
 8002f24:	0003      	movs	r3, r0
 8002f26:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <HAL_ADC_ConfigChannel+0x364>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d108      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_ADC_ConfigChannel+0x378>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <HAL_ADC_ConfigChannel+0x360>)
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	0010      	movs	r0, r2
 8002f3e:	f7ff f903 	bl	8002148 <LL_ADC_SetCommonPathInternalCh>
 8002f42:	e039      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <HAL_ADC_ConfigChannel+0x370>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d108      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <HAL_ADC_ConfigChannel+0x37c>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <HAL_ADC_ConfigChannel+0x360>)
 8002f56:	0019      	movs	r1, r3
 8002f58:	0010      	movs	r0, r2
 8002f5a:	f7ff f8f5 	bl	8002148 <LL_ADC_SetCommonPathInternalCh>
 8002f5e:	e02b      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <HAL_ADC_ConfigChannel+0x374>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d126      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <HAL_ADC_ConfigChannel+0x380>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	4a03      	ldr	r2, [pc, #12]	; (8002f80 <HAL_ADC_ConfigChannel+0x360>)
 8002f72:	0019      	movs	r1, r3
 8002f74:	0010      	movs	r0, r2
 8002f76:	f7ff f8e7 	bl	8002148 <LL_ADC_SetCommonPathInternalCh>
 8002f7a:	e01d      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x398>
 8002f7c:	80000004 	.word	0x80000004
 8002f80:	40012708 	.word	0x40012708
 8002f84:	b0001000 	.word	0xb0001000
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	00030d40 	.word	0x00030d40
 8002f90:	b8004000 	.word	0xb8004000
 8002f94:	b4002000 	.word	0xb4002000
 8002f98:	ff7fffff 	.word	0xff7fffff
 8002f9c:	feffffff 	.word	0xfeffffff
 8002fa0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	2220      	movs	r2, #32
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fb0:	2317      	movs	r3, #23
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2254      	movs	r2, #84	; 0x54
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002fc0:	2317      	movs	r3, #23
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	781b      	ldrb	r3, [r3, #0]
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b006      	add	sp, #24
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)

08002fd0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7ff f9ff 	bl	80023e0 <LL_ADC_REG_IsConversionOngoing>
 8002fe2:	1e03      	subs	r3, r0, #0
 8002fe4:	d031      	beq.n	800304a <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7ff f9c3 	bl	8002376 <LL_ADC_IsDisableOngoing>
 8002ff0:	1e03      	subs	r3, r0, #0
 8002ff2:	d104      	bne.n	8002ffe <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff f9df 	bl	80023bc <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ffe:	f7ff f875 	bl	80020ec <HAL_GetTick>
 8003002:	0003      	movs	r3, r0
 8003004:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003006:	e01a      	b.n	800303e <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003008:	f7ff f870 	bl	80020ec <HAL_GetTick>
 800300c:	0002      	movs	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d913      	bls.n	800303e <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2204      	movs	r2, #4
 800301e:	4013      	ands	r3, r2
 8003020:	d00d      	beq.n	800303e <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	2210      	movs	r2, #16
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	2201      	movs	r2, #1
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e006      	b.n	800304c <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2204      	movs	r2, #4
 8003046:	4013      	ands	r3, r2
 8003048:	d1de      	bne.n	8003008 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}

08003054 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0018      	movs	r0, r3
 8003066:	f7ff f975 	bl	8002354 <LL_ADC_IsEnabled>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d000      	beq.n	8003070 <ADC_Enable+0x1c>
 800306e:	e069      	b.n	8003144 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4a36      	ldr	r2, [pc, #216]	; (8003150 <ADC_Enable+0xfc>)
 8003078:	4013      	ands	r3, r2
 800307a:	d00d      	beq.n	8003098 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	2210      	movs	r2, #16
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	2201      	movs	r2, #1
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e056      	b.n	8003146 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0018      	movs	r0, r3
 800309e:	f7ff f935 	bl	800230c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030a2:	4b2c      	ldr	r3, [pc, #176]	; (8003154 <ADC_Enable+0x100>)
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7ff f863 	bl	8002170 <LL_ADC_GetCommonPathInternalCh>
 80030aa:	0002      	movs	r2, r0
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	4013      	ands	r3, r2
 80030b2:	d00f      	beq.n	80030d4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030b4:	4b28      	ldr	r3, [pc, #160]	; (8003158 <ADC_Enable+0x104>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4928      	ldr	r1, [pc, #160]	; (800315c <ADC_Enable+0x108>)
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7fd f82a 	bl	8000114 <__udivsi3>
 80030c0:	0003      	movs	r3, r0
 80030c2:	3301      	adds	r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030c6:	e002      	b.n	80030ce <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f9      	bne.n	80030c8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7e5b      	ldrb	r3, [r3, #25]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d033      	beq.n	8003144 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80030dc:	f7ff f806 	bl	80020ec <HAL_GetTick>
 80030e0:	0003      	movs	r3, r0
 80030e2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e4:	e027      	b.n	8003136 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7ff f932 	bl	8002354 <LL_ADC_IsEnabled>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d104      	bne.n	80030fe <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff f907 	bl	800230c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030fe:	f7fe fff5 	bl	80020ec <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d914      	bls.n	8003136 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	4013      	ands	r3, r2
 8003116:	2b01      	cmp	r3, #1
 8003118:	d00d      	beq.n	8003136 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	2210      	movs	r2, #16
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	2201      	movs	r2, #1
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	2b01      	cmp	r3, #1
 8003142:	d1d0      	bne.n	80030e6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b004      	add	sp, #16
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	80000017 	.word	0x80000017
 8003154:	40012708 	.word	0x40012708
 8003158:	20000000 	.word	0x20000000
 800315c:	00030d40 	.word	0x00030d40

08003160 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	0018      	movs	r0, r3
 800316e:	f7ff f902 	bl	8002376 <LL_ADC_IsDisableOngoing>
 8003172:	0003      	movs	r3, r0
 8003174:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	0018      	movs	r0, r3
 800317c:	f7ff f8ea 	bl	8002354 <LL_ADC_IsEnabled>
 8003180:	1e03      	subs	r3, r0, #0
 8003182:	d046      	beq.n	8003212 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d143      	bne.n	8003212 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2205      	movs	r2, #5
 8003192:	4013      	ands	r3, r2
 8003194:	2b01      	cmp	r3, #1
 8003196:	d10d      	bne.n	80031b4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0018      	movs	r0, r3
 800319e:	f7ff f8c7 	bl	8002330 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2203      	movs	r2, #3
 80031a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031aa:	f7fe ff9f 	bl	80020ec <HAL_GetTick>
 80031ae:	0003      	movs	r3, r0
 80031b0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031b2:	e028      	b.n	8003206 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	2210      	movs	r2, #16
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	2201      	movs	r2, #1
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e021      	b.n	8003214 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031d0:	f7fe ff8c 	bl	80020ec <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d913      	bls.n	8003206 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4013      	ands	r3, r2
 80031e8:	d00d      	beq.n	8003206 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	2210      	movs	r2, #16
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	2201      	movs	r2, #1
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e006      	b.n	8003214 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2201      	movs	r2, #1
 800320e:	4013      	ands	r3, r2
 8003210:	d1de      	bne.n	80031d0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b004      	add	sp, #16
 800321a:	bd80      	pop	{r7, pc}

0800321c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	2250      	movs	r2, #80	; 0x50
 8003230:	4013      	ands	r3, r2
 8003232:	d141      	bne.n	80032b8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	0018      	movs	r0, r3
 8003248:	f7fe ffbc 	bl	80021c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800324c:	1e03      	subs	r3, r0, #0
 800324e:	d02e      	beq.n	80032ae <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	7e9b      	ldrb	r3, [r3, #26]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d12a      	bne.n	80032ae <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2208      	movs	r2, #8
 8003260:	4013      	ands	r3, r2
 8003262:	2b08      	cmp	r3, #8
 8003264:	d123      	bne.n	80032ae <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff f8b8 	bl	80023e0 <LL_ADC_REG_IsConversionOngoing>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d110      	bne.n	8003296 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	210c      	movs	r1, #12
 8003280:	438a      	bics	r2, r1
 8003282:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <ADC_DMAConvCplt+0xc4>)
 800328a:	4013      	ands	r3, r2
 800328c:	2201      	movs	r2, #1
 800328e:	431a      	orrs	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	659a      	str	r2, [r3, #88]	; 0x58
 8003294:	e00b      	b.n	80032ae <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	2220      	movs	r2, #32
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	2201      	movs	r2, #1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f007 f8c3 	bl	800a43c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032b6:	e00f      	b.n	80032d8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	2210      	movs	r2, #16
 80032be:	4013      	ands	r3, r2
 80032c0:	d004      	beq.n	80032cc <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff fca3 	bl	8002c10 <HAL_ADC_ErrorCallback>
}
 80032ca:	e005      	b.n	80032d8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	0010      	movs	r0, r2
 80032d6:	4798      	blx	r3
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b004      	add	sp, #16
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	fffffefe 	.word	0xfffffefe

080032e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff fc7b 	bl	8002bf0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b004      	add	sp, #16
 8003300:	bd80      	pop	{r7, pc}

08003302 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	2240      	movs	r2, #64	; 0x40
 8003316:	431a      	orrs	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	2204      	movs	r2, #4
 8003322:	431a      	orrs	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	0018      	movs	r0, r3
 800332c:	f7ff fc70 	bl	8002c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b004      	add	sp, #16
 8003336:	bd80      	pop	{r7, pc}

08003338 <LL_ADC_IsEnabled>:
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2201      	movs	r2, #1
 8003346:	4013      	ands	r3, r2
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <LL_ADC_IsEnabled+0x18>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <LL_ADC_IsEnabled+0x1a>
 8003350:	2300      	movs	r3, #0
}
 8003352:	0018      	movs	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	b002      	add	sp, #8
 8003358:	bd80      	pop	{r7, pc}

0800335a <LL_ADC_IsCalibrationOnGoing>:
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0fdb      	lsrs	r3, r3, #31
 8003368:	07da      	lsls	r2, r3, #31
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	429a      	cmp	r2, r3
 8003370:	d101      	bne.n	8003376 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003376:	2300      	movs	r3, #0
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b002      	add	sp, #8
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2254      	movs	r2, #84	; 0x54
 8003390:	5c9b      	ldrb	r3, [r3, r2]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_ADCEx_Calibration_Start+0x1a>
 8003396:	2302      	movs	r3, #2
 8003398:	e06c      	b.n	8003474 <HAL_ADCEx_Calibration_Start+0xf4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2254      	movs	r2, #84	; 0x54
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033a2:	2317      	movs	r3, #23
 80033a4:	18fc      	adds	r4, r7, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff fed9 	bl	8003160 <ADC_Disable>
 80033ae:	0003      	movs	r3, r0
 80033b0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7ff ffbe 	bl	8003338 <LL_ADC_IsEnabled>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d14c      	bne.n	800345a <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	4a2d      	ldr	r2, [pc, #180]	; (800347c <HAL_ADCEx_Calibration_Start+0xfc>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	2202      	movs	r2, #2
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2203      	movs	r2, #3
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2103      	movs	r1, #3
 80033e8:	438a      	bics	r2, r1
 80033ea:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2180      	movs	r1, #128	; 0x80
 80033f8:	0609      	lsls	r1, r1, #24
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033fe:	e014      	b.n	800342a <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <HAL_ADCEx_Calibration_Start+0x100>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d90d      	bls.n	800342a <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	2212      	movs	r2, #18
 8003414:	4393      	bics	r3, r2
 8003416:	2210      	movs	r2, #16
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2254      	movs	r2, #84	; 0x54
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e024      	b.n	8003474 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff ff93 	bl	800335a <LL_ADC_IsCalibrationOnGoing>
 8003434:	1e03      	subs	r3, r0, #0
 8003436:	d1e3      	bne.n	8003400 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68d9      	ldr	r1, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	430a      	orrs	r2, r1
 8003446:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	2203      	movs	r2, #3
 800344e:	4393      	bics	r3, r2
 8003450:	2201      	movs	r2, #1
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	659a      	str	r2, [r3, #88]	; 0x58
 8003458:	e005      	b.n	8003466 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	2210      	movs	r2, #16
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2254      	movs	r2, #84	; 0x54
 800346a:	2100      	movs	r1, #0
 800346c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800346e:	2317      	movs	r3, #23
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	781b      	ldrb	r3, [r3, #0]
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b007      	add	sp, #28
 800347a:	bd90      	pop	{r4, r7, pc}
 800347c:	fffffefd 	.word	0xfffffefd
 8003480:	0002f1ff 	.word	0x0002f1ff

08003484 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	0002      	movs	r2, r0
 80034cc:	1dfb      	adds	r3, r7, #7
 80034ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034d0:	1dfb      	adds	r3, r7, #7
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b7f      	cmp	r3, #127	; 0x7f
 80034d6:	d809      	bhi.n	80034ec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	001a      	movs	r2, r3
 80034de:	231f      	movs	r3, #31
 80034e0:	401a      	ands	r2, r3
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <__NVIC_EnableIRQ+0x30>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	4091      	lsls	r1, r2
 80034e8:	000a      	movs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	0002      	movs	r2, r0
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	1dfb      	adds	r3, r7, #7
 8003504:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b7f      	cmp	r3, #127	; 0x7f
 800350c:	d828      	bhi.n	8003560 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800350e:	4a2f      	ldr	r2, [pc, #188]	; (80035cc <__NVIC_SetPriority+0xd4>)
 8003510:	1dfb      	adds	r3, r7, #7
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	b25b      	sxtb	r3, r3
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	33c0      	adds	r3, #192	; 0xc0
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	589b      	ldr	r3, [r3, r2]
 800351e:	1dfa      	adds	r2, r7, #7
 8003520:	7812      	ldrb	r2, [r2, #0]
 8003522:	0011      	movs	r1, r2
 8003524:	2203      	movs	r2, #3
 8003526:	400a      	ands	r2, r1
 8003528:	00d2      	lsls	r2, r2, #3
 800352a:	21ff      	movs	r1, #255	; 0xff
 800352c:	4091      	lsls	r1, r2
 800352e:	000a      	movs	r2, r1
 8003530:	43d2      	mvns	r2, r2
 8003532:	401a      	ands	r2, r3
 8003534:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	019b      	lsls	r3, r3, #6
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	401a      	ands	r2, r3
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	0018      	movs	r0, r3
 8003544:	2303      	movs	r3, #3
 8003546:	4003      	ands	r3, r0
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800354c:	481f      	ldr	r0, [pc, #124]	; (80035cc <__NVIC_SetPriority+0xd4>)
 800354e:	1dfb      	adds	r3, r7, #7
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b25b      	sxtb	r3, r3
 8003554:	089b      	lsrs	r3, r3, #2
 8003556:	430a      	orrs	r2, r1
 8003558:	33c0      	adds	r3, #192	; 0xc0
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800355e:	e031      	b.n	80035c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003560:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <__NVIC_SetPriority+0xd8>)
 8003562:	1dfb      	adds	r3, r7, #7
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	0019      	movs	r1, r3
 8003568:	230f      	movs	r3, #15
 800356a:	400b      	ands	r3, r1
 800356c:	3b08      	subs	r3, #8
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	3306      	adds	r3, #6
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	18d3      	adds	r3, r2, r3
 8003576:	3304      	adds	r3, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	1dfa      	adds	r2, r7, #7
 800357c:	7812      	ldrb	r2, [r2, #0]
 800357e:	0011      	movs	r1, r2
 8003580:	2203      	movs	r2, #3
 8003582:	400a      	ands	r2, r1
 8003584:	00d2      	lsls	r2, r2, #3
 8003586:	21ff      	movs	r1, #255	; 0xff
 8003588:	4091      	lsls	r1, r2
 800358a:	000a      	movs	r2, r1
 800358c:	43d2      	mvns	r2, r2
 800358e:	401a      	ands	r2, r3
 8003590:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	22ff      	movs	r2, #255	; 0xff
 8003598:	401a      	ands	r2, r3
 800359a:	1dfb      	adds	r3, r7, #7
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	0018      	movs	r0, r3
 80035a0:	2303      	movs	r3, #3
 80035a2:	4003      	ands	r3, r0
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035a8:	4809      	ldr	r0, [pc, #36]	; (80035d0 <__NVIC_SetPriority+0xd8>)
 80035aa:	1dfb      	adds	r3, r7, #7
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	001c      	movs	r4, r3
 80035b0:	230f      	movs	r3, #15
 80035b2:	4023      	ands	r3, r4
 80035b4:	3b08      	subs	r3, #8
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	430a      	orrs	r2, r1
 80035ba:	3306      	adds	r3, #6
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	18c3      	adds	r3, r0, r3
 80035c0:	3304      	adds	r3, #4
 80035c2:	601a      	str	r2, [r3, #0]
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b003      	add	sp, #12
 80035ca:	bd90      	pop	{r4, r7, pc}
 80035cc:	e000e100 	.word	0xe000e100
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	045b      	lsls	r3, r3, #17
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d301      	bcc.n	80035ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e8:	2301      	movs	r3, #1
 80035ea:	e010      	b.n	800360e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <SysTick_Config+0x44>)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	3a01      	subs	r2, #1
 80035f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035f4:	2301      	movs	r3, #1
 80035f6:	425b      	negs	r3, r3
 80035f8:	2103      	movs	r1, #3
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7ff ff7c 	bl	80034f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <SysTick_Config+0x44>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <SysTick_Config+0x44>)
 8003608:	2207      	movs	r2, #7
 800360a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800360c:	2300      	movs	r3, #0
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	e000e010 	.word	0xe000e010

0800361c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	210f      	movs	r1, #15
 8003628:	187b      	adds	r3, r7, r1
 800362a:	1c02      	adds	r2, r0, #0
 800362c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	187b      	adds	r3, r7, r1
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b25b      	sxtb	r3, r3
 8003636:	0011      	movs	r1, r2
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff ff5d 	bl	80034f8 <__NVIC_SetPriority>
}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	b004      	add	sp, #16
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	0002      	movs	r2, r0
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003652:	1dfb      	adds	r3, r7, #7
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b25b      	sxtb	r3, r3
 8003658:	0018      	movs	r0, r3
 800365a:	f7ff ff33 	bl	80034c4 <__NVIC_EnableIRQ>
}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	b002      	add	sp, #8
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	0018      	movs	r0, r3
 8003672:	f7ff ffaf 	bl	80035d4 <SysTick_Config>
 8003676:	0003      	movs	r3, r0
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e077      	b.n	8003782 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3d      	ldr	r2, [pc, #244]	; (800378c <HAL_DMA_Init+0x10c>)
 8003698:	4694      	mov	ip, r2
 800369a:	4463      	add	r3, ip
 800369c:	2114      	movs	r1, #20
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fc fd38 	bl	8000114 <__udivsi3>
 80036a4:	0003      	movs	r3, r0
 80036a6:	009a      	lsls	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2225      	movs	r2, #37	; 0x25
 80036b0:	2102      	movs	r1, #2
 80036b2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4934      	ldr	r1, [pc, #208]	; (8003790 <HAL_DMA_Init+0x110>)
 80036c0:	400a      	ands	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 fa23 	bl	8003b48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	01db      	lsls	r3, r3, #7
 800370a:	429a      	cmp	r2, r3
 800370c:	d102      	bne.n	8003714 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	213f      	movs	r1, #63	; 0x3f
 800371e:	400a      	ands	r2, r1
 8003720:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800372a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d011      	beq.n	8003758 <HAL_DMA_Init+0xd8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d80d      	bhi.n	8003758 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 fa2e 	bl	8003ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e008      	b.n	800376a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2225      	movs	r2, #37	; 0x25
 8003774:	2101      	movs	r1, #1
 8003776:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	; 0x24
 800377c:	2100      	movs	r1, #0
 800377e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b002      	add	sp, #8
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	bffdfff8 	.word	0xbffdfff8
 8003790:	ffff800f 	.word	0xffff800f

08003794 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2317      	movs	r3, #23
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2224      	movs	r2, #36	; 0x24
 80037ae:	5c9b      	ldrb	r3, [r3, r2]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_DMA_Start_IT+0x24>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e06f      	b.n	8003898 <HAL_DMA_Start_IT+0x104>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	2101      	movs	r1, #1
 80037be:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2225      	movs	r2, #37	; 0x25
 80037c4:	5c9b      	ldrb	r3, [r3, r2]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d157      	bne.n	800387c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2225      	movs	r2, #37	; 0x25
 80037d0:	2102      	movs	r1, #2
 80037d2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	438a      	bics	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f969 	bl	8003ac8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	210e      	movs	r1, #14
 800380a:	430a      	orrs	r2, r1
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e00f      	b.n	8003830 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2104      	movs	r1, #4
 800381c:	438a      	bics	r2, r1
 800381e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	210a      	movs	r1, #10
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	025b      	lsls	r3, r3, #9
 800383a:	4013      	ands	r3, r2
 800383c:	d008      	beq.n	8003850 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	2180      	movs	r1, #128	; 0x80
 800384a:	0049      	lsls	r1, r1, #1
 800384c:	430a      	orrs	r2, r1
 800384e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	0049      	lsls	r1, r1, #1
 8003866:	430a      	orrs	r2, r1
 8003868:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2101      	movs	r1, #1
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e00a      	b.n	8003892 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2224      	movs	r2, #36	; 0x24
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800388a:	2317      	movs	r3, #23
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003892:	2317      	movs	r3, #23
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	781b      	ldrb	r3, [r3, #0]
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b006      	add	sp, #24
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e050      	b.n	8003954 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2225      	movs	r2, #37	; 0x25
 80038b6:	5c9b      	ldrb	r3, [r3, r2]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d008      	beq.n	80038d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2204      	movs	r2, #4
 80038c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	2100      	movs	r1, #0
 80038ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e041      	b.n	8003954 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	210e      	movs	r1, #14
 80038dc:	438a      	bics	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	491c      	ldr	r1, [pc, #112]	; (800395c <HAL_DMA_Abort+0xbc>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	438a      	bics	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003900:	4b17      	ldr	r3, [pc, #92]	; (8003960 <HAL_DMA_Abort+0xc0>)
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	221c      	movs	r2, #28
 800390a:	4013      	ands	r3, r2
 800390c:	2201      	movs	r2, #1
 800390e:	409a      	lsls	r2, r3
 8003910:	4b13      	ldr	r3, [pc, #76]	; (8003960 <HAL_DMA_Abort+0xc0>)
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800391e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00c      	beq.n	8003942 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003932:	490a      	ldr	r1, [pc, #40]	; (800395c <HAL_DMA_Abort+0xbc>)
 8003934:	400a      	ands	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003940:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2225      	movs	r2, #37	; 0x25
 8003946:	2101      	movs	r1, #1
 8003948:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2224      	movs	r2, #36	; 0x24
 800394e:	2100      	movs	r1, #0
 8003950:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	0018      	movs	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	b002      	add	sp, #8
 800395a:	bd80      	pop	{r7, pc}
 800395c:	fffffeff 	.word	0xfffffeff
 8003960:	40020000 	.word	0x40020000

08003964 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800396c:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <HAL_DMA_IRQHandler+0x160>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	221c      	movs	r2, #28
 8003980:	4013      	ands	r3, r2
 8003982:	2204      	movs	r2, #4
 8003984:	409a      	lsls	r2, r3
 8003986:	0013      	movs	r3, r2
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4013      	ands	r3, r2
 800398c:	d027      	beq.n	80039de <HAL_DMA_IRQHandler+0x7a>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2204      	movs	r2, #4
 8003992:	4013      	ands	r3, r2
 8003994:	d023      	beq.n	80039de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2220      	movs	r2, #32
 800399e:	4013      	ands	r3, r2
 80039a0:	d107      	bne.n	80039b2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2104      	movs	r1, #4
 80039ae:	438a      	bics	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80039b2:	4b44      	ldr	r3, [pc, #272]	; (8003ac4 <HAL_DMA_IRQHandler+0x160>)
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	221c      	movs	r2, #28
 80039bc:	4013      	ands	r3, r2
 80039be:	2204      	movs	r2, #4
 80039c0:	409a      	lsls	r2, r3
 80039c2:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <HAL_DMA_IRQHandler+0x160>)
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d100      	bne.n	80039d2 <HAL_DMA_IRQHandler+0x6e>
 80039d0:	e073      	b.n	8003aba <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	0010      	movs	r0, r2
 80039da:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80039dc:	e06d      	b.n	8003aba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	221c      	movs	r2, #28
 80039e4:	4013      	ands	r3, r2
 80039e6:	2202      	movs	r2, #2
 80039e8:	409a      	lsls	r2, r3
 80039ea:	0013      	movs	r3, r2
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4013      	ands	r3, r2
 80039f0:	d02e      	beq.n	8003a50 <HAL_DMA_IRQHandler+0xec>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2202      	movs	r2, #2
 80039f6:	4013      	ands	r3, r2
 80039f8:	d02a      	beq.n	8003a50 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2220      	movs	r2, #32
 8003a02:	4013      	ands	r3, r2
 8003a04:	d10b      	bne.n	8003a1e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	210a      	movs	r1, #10
 8003a12:	438a      	bics	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2225      	movs	r2, #37	; 0x25
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <HAL_DMA_IRQHandler+0x160>)
 8003a20:	6859      	ldr	r1, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	221c      	movs	r2, #28
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <HAL_DMA_IRQHandler+0x160>)
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	; 0x24
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d03a      	beq.n	8003aba <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	0010      	movs	r0, r2
 8003a4c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003a4e:	e034      	b.n	8003aba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	221c      	movs	r2, #28
 8003a56:	4013      	ands	r3, r2
 8003a58:	2208      	movs	r2, #8
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	0013      	movs	r3, r2
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4013      	ands	r3, r2
 8003a62:	d02b      	beq.n	8003abc <HAL_DMA_IRQHandler+0x158>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2208      	movs	r2, #8
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d027      	beq.n	8003abc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	210e      	movs	r1, #14
 8003a78:	438a      	bics	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_DMA_IRQHandler+0x160>)
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	221c      	movs	r2, #28
 8003a86:	4013      	ands	r3, r2
 8003a88:	2201      	movs	r2, #1
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <HAL_DMA_IRQHandler+0x160>)
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2225      	movs	r2, #37	; 0x25
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	; 0x24
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	0010      	movs	r0, r2
 8003ab8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46c0      	nop			; (mov r8, r8)
}
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40020000 	.word	0x40020000

08003ac8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ade:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003af0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <DMA_SetConfig+0x7c>)
 8003af4:	6859      	ldr	r1, [r3, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	221c      	movs	r2, #28
 8003afc:	4013      	ands	r3, r2
 8003afe:	2201      	movs	r2, #1
 8003b00:	409a      	lsls	r2, r3
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <DMA_SetConfig+0x7c>)
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d108      	bne.n	8003b2a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b28:	e007      	b.n	8003b3a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	60da      	str	r2, [r3, #12]
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	40020000 	.word	0x40020000

08003b48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	089b      	lsrs	r3, r3, #2
 8003b56:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003b58:	4694      	mov	ip, r2
 8003b5a:	4463      	add	r3, ip
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	001a      	movs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	001a      	movs	r2, r3
 8003b6a:	23ff      	movs	r3, #255	; 0xff
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	3b08      	subs	r3, #8
 8003b70:	2114      	movs	r1, #20
 8003b72:	0018      	movs	r0, r3
 8003b74:	f7fc face 	bl	8000114 <__udivsi3>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003b80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	221f      	movs	r2, #31
 8003b86:	4013      	ands	r3, r2
 8003b88:	2201      	movs	r2, #1
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b004      	add	sp, #16
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	10008200 	.word	0x10008200
 8003b9c:	40020880 	.word	0x40020880

08003ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	223f      	movs	r2, #63	; 0x3f
 8003bae:	4013      	ands	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bb6:	4694      	mov	ip, r2
 8003bb8:	4463      	add	r3, ip
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	001a      	movs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	2203      	movs	r2, #3
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	1000823f 	.word	0x1000823f
 8003be4:	40020940 	.word	0x40020940

08003be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf6:	e147      	b.n	8003e88 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4091      	lsls	r1, r2
 8003c02:	000a      	movs	r2, r1
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d100      	bne.n	8003c10 <HAL_GPIO_Init+0x28>
 8003c0e:	e138      	b.n	8003e82 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2203      	movs	r2, #3
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d005      	beq.n	8003c28 <HAL_GPIO_Init+0x40>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2203      	movs	r2, #3
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d130      	bne.n	8003c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	409a      	lsls	r2, r3
 8003c36:	0013      	movs	r3, r2
 8003c38:	43da      	mvns	r2, r3
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	409a      	lsls	r2, r3
 8003c4a:	0013      	movs	r3, r2
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c5e:	2201      	movs	r2, #1
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	409a      	lsls	r2, r3
 8003c64:	0013      	movs	r3, r2
 8003c66:	43da      	mvns	r2, r3
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	2201      	movs	r2, #1
 8003c76:	401a      	ands	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	0013      	movs	r3, r2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2203      	movs	r2, #3
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d017      	beq.n	8003cc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	0013      	movs	r3, r2
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4013      	ands	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	0013      	movs	r3, r2
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2203      	movs	r2, #3
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d123      	bne.n	8003d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	08da      	lsrs	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3208      	adds	r2, #8
 8003cda:	0092      	lsls	r2, r2, #2
 8003cdc:	58d3      	ldr	r3, [r2, r3]
 8003cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2207      	movs	r2, #7
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	220f      	movs	r2, #15
 8003cea:	409a      	lsls	r2, r3
 8003cec:	0013      	movs	r3, r2
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2107      	movs	r1, #7
 8003cfe:	400b      	ands	r3, r1
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	409a      	lsls	r2, r3
 8003d04:	0013      	movs	r3, r2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	08da      	lsrs	r2, r3, #3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3208      	adds	r2, #8
 8003d14:	0092      	lsls	r2, r2, #2
 8003d16:	6939      	ldr	r1, [r7, #16]
 8003d18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	2203      	movs	r2, #3
 8003d26:	409a      	lsls	r2, r3
 8003d28:	0013      	movs	r3, r2
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2203      	movs	r2, #3
 8003d38:	401a      	ands	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	0013      	movs	r3, r2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	23c0      	movs	r3, #192	; 0xc0
 8003d54:	029b      	lsls	r3, r3, #10
 8003d56:	4013      	ands	r3, r2
 8003d58:	d100      	bne.n	8003d5c <HAL_GPIO_Init+0x174>
 8003d5a:	e092      	b.n	8003e82 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d5c:	4a50      	ldr	r2, [pc, #320]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	3318      	adds	r3, #24
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	589b      	ldr	r3, [r3, r2]
 8003d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	4013      	ands	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	220f      	movs	r2, #15
 8003d74:	409a      	lsls	r2, r3
 8003d76:	0013      	movs	r3, r2
 8003d78:	43da      	mvns	r2, r3
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	23a0      	movs	r3, #160	; 0xa0
 8003d84:	05db      	lsls	r3, r3, #23
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0x1ca>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a45      	ldr	r2, [pc, #276]	; (8003ea4 <HAL_GPIO_Init+0x2bc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00d      	beq.n	8003dae <HAL_GPIO_Init+0x1c6>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a44      	ldr	r2, [pc, #272]	; (8003ea8 <HAL_GPIO_Init+0x2c0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <HAL_GPIO_Init+0x1c2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a43      	ldr	r2, [pc, #268]	; (8003eac <HAL_GPIO_Init+0x2c4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_GPIO_Init+0x1be>
 8003da2:	2303      	movs	r3, #3
 8003da4:	e006      	b.n	8003db4 <HAL_GPIO_Init+0x1cc>
 8003da6:	2305      	movs	r3, #5
 8003da8:	e004      	b.n	8003db4 <HAL_GPIO_Init+0x1cc>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e002      	b.n	8003db4 <HAL_GPIO_Init+0x1cc>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_GPIO_Init+0x1cc>
 8003db2:	2300      	movs	r3, #0
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	2103      	movs	r1, #3
 8003db8:	400a      	ands	r2, r1
 8003dba:	00d2      	lsls	r2, r2, #3
 8003dbc:	4093      	lsls	r3, r2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003dc4:	4936      	ldr	r1, [pc, #216]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	3318      	adds	r3, #24
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dd2:	4a33      	ldr	r2, [pc, #204]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	58d3      	ldr	r3, [r2, r3]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	025b      	lsls	r3, r3, #9
 8003dec:	4013      	ands	r3, r2
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003df8:	4929      	ldr	r1, [pc, #164]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003e00:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003e02:	2384      	movs	r3, #132	; 0x84
 8003e04:	58d3      	ldr	r3, [r2, r3]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e26:	491e      	ldr	r1, [pc, #120]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003e28:	2284      	movs	r2, #132	; 0x84
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	43da      	mvns	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	035b      	lsls	r3, r3, #13
 8003e46:	4013      	ands	r3, r2
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	43da      	mvns	r2, r3
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	039b      	lsls	r3, r3, #14
 8003e70:	4013      	ands	r3, r2
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3301      	adds	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	40da      	lsrs	r2, r3
 8003e90:	1e13      	subs	r3, r2, #0
 8003e92:	d000      	beq.n	8003e96 <HAL_GPIO_Init+0x2ae>
 8003e94:	e6b0      	b.n	8003bf8 <HAL_GPIO_Init+0x10>
  }
}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b006      	add	sp, #24
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021800 	.word	0x40021800
 8003ea4:	50000400 	.word	0x50000400
 8003ea8:	50000800 	.word	0x50000800
 8003eac:	50000c00 	.word	0x50000c00

08003eb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	000a      	movs	r2, r1
 8003eba:	1cbb      	adds	r3, r7, #2
 8003ebc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	1cba      	adds	r2, r7, #2
 8003ec4:	8812      	ldrh	r2, [r2, #0]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003eca:	230f      	movs	r3, #15
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	2201      	movs	r2, #1
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	e003      	b.n	8003edc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ed4:	230f      	movs	r3, #15
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003edc:	230f      	movs	r3, #15
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	781b      	ldrb	r3, [r3, #0]
}
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b004      	add	sp, #16
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	0008      	movs	r0, r1
 8003ef4:	0011      	movs	r1, r2
 8003ef6:	1cbb      	adds	r3, r7, #2
 8003ef8:	1c02      	adds	r2, r0, #0
 8003efa:	801a      	strh	r2, [r3, #0]
 8003efc:	1c7b      	adds	r3, r7, #1
 8003efe:	1c0a      	adds	r2, r1, #0
 8003f00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f02:	1c7b      	adds	r3, r7, #1
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f0a:	1cbb      	adds	r3, r7, #2
 8003f0c:	881a      	ldrh	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f12:	e003      	b.n	8003f1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f14:	1cbb      	adds	r3, r7, #2
 8003f16:	881a      	ldrh	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b002      	add	sp, #8
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	000a      	movs	r2, r1
 8003f2e:	1cbb      	adds	r3, r7, #2
 8003f30:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f38:	1cbb      	adds	r3, r7, #2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	041a      	lsls	r2, r3, #16
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	1cb9      	adds	r1, r7, #2
 8003f48:	8809      	ldrh	r1, [r1, #0]
 8003f4a:	400b      	ands	r3, r1
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	619a      	str	r2, [r3, #24]
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b004      	add	sp, #16
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	0002      	movs	r2, r0
 8003f64:	1dbb      	adds	r3, r7, #6
 8003f66:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003f68:	4b10      	ldr	r3, [pc, #64]	; (8003fac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	1dba      	adds	r2, r7, #6
 8003f6e:	8812      	ldrh	r2, [r2, #0]
 8003f70:	4013      	ands	r3, r2
 8003f72:	d008      	beq.n	8003f86 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f76:	1dba      	adds	r2, r7, #6
 8003f78:	8812      	ldrh	r2, [r2, #0]
 8003f7a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003f7c:	1dbb      	adds	r3, r7, #6
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f006 fa81 	bl	800a488 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	1dba      	adds	r2, r7, #6
 8003f8c:	8812      	ldrh	r2, [r2, #0]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d008      	beq.n	8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f94:	1dba      	adds	r2, r7, #6
 8003f96:	8812      	ldrh	r2, [r2, #0]
 8003f98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003f9a:	1dbb      	adds	r3, r7, #6
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f006 fa81 	bl	800a4a6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021800 	.word	0x40021800

08003fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a19      	ldr	r2, [pc, #100]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d11f      	bne.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	0013      	movs	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4912      	ldr	r1, [pc, #72]	; (800402c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f7fc f896 	bl	8000114 <__udivsi3>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fee:	e008      	b.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e001      	b.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e009      	b.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	401a      	ands	r2, r3
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	429a      	cmp	r2, r3
 8004012:	d0ed      	beq.n	8003ff0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	0018      	movs	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	b004      	add	sp, #16
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	40007000 	.word	0x40007000
 8004024:	fffff9ff 	.word	0xfffff9ff
 8004028:	20000000 	.word	0x20000000
 800402c:	000f4240 	.word	0x000f4240

08004030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e304      	b.n	800464c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	4013      	ands	r3, r2
 800404a:	d100      	bne.n	800404e <HAL_RCC_OscConfig+0x1e>
 800404c:	e07c      	b.n	8004148 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800404e:	4bc3      	ldr	r3, [pc, #780]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2238      	movs	r2, #56	; 0x38
 8004054:	4013      	ands	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004058:	4bc0      	ldr	r3, [pc, #768]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2203      	movs	r2, #3
 800405e:	4013      	ands	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b10      	cmp	r3, #16
 8004066:	d102      	bne.n	800406e <HAL_RCC_OscConfig+0x3e>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d002      	beq.n	8004074 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d10b      	bne.n	800408c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	4bb9      	ldr	r3, [pc, #740]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	029b      	lsls	r3, r3, #10
 800407c:	4013      	ands	r3, r2
 800407e:	d062      	beq.n	8004146 <HAL_RCC_OscConfig+0x116>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d15e      	bne.n	8004146 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e2df      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	025b      	lsls	r3, r3, #9
 8004094:	429a      	cmp	r2, r3
 8004096:	d107      	bne.n	80040a8 <HAL_RCC_OscConfig+0x78>
 8004098:	4bb0      	ldr	r3, [pc, #704]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4baf      	ldr	r3, [pc, #700]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 800409e:	2180      	movs	r1, #128	; 0x80
 80040a0:	0249      	lsls	r1, r1, #9
 80040a2:	430a      	orrs	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e020      	b.n	80040ea <HAL_RCC_OscConfig+0xba>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	23a0      	movs	r3, #160	; 0xa0
 80040ae:	02db      	lsls	r3, r3, #11
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d10e      	bne.n	80040d2 <HAL_RCC_OscConfig+0xa2>
 80040b4:	4ba9      	ldr	r3, [pc, #676]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4ba8      	ldr	r3, [pc, #672]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	02c9      	lsls	r1, r1, #11
 80040be:	430a      	orrs	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	4ba6      	ldr	r3, [pc, #664]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4ba5      	ldr	r3, [pc, #660]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	0249      	lsls	r1, r1, #9
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	e00b      	b.n	80040ea <HAL_RCC_OscConfig+0xba>
 80040d2:	4ba2      	ldr	r3, [pc, #648]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4ba1      	ldr	r3, [pc, #644]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80040d8:	49a1      	ldr	r1, [pc, #644]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80040da:	400a      	ands	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	4b9f      	ldr	r3, [pc, #636]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b9e      	ldr	r3, [pc, #632]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80040e4:	499f      	ldr	r1, [pc, #636]	; (8004364 <HAL_RCC_OscConfig+0x334>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d014      	beq.n	800411c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fd fffb 	bl	80020ec <HAL_GetTick>
 80040f6:	0003      	movs	r3, r0
 80040f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040fc:	f7fd fff6 	bl	80020ec <HAL_GetTick>
 8004100:	0002      	movs	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	; 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e29e      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410e:	4b93      	ldr	r3, [pc, #588]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	2380      	movs	r3, #128	; 0x80
 8004114:	029b      	lsls	r3, r3, #10
 8004116:	4013      	ands	r3, r2
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0xcc>
 800411a:	e015      	b.n	8004148 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd ffe6 	bl	80020ec <HAL_GetTick>
 8004120:	0003      	movs	r3, r0
 8004122:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004126:	f7fd ffe1 	bl	80020ec <HAL_GetTick>
 800412a:	0002      	movs	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b64      	cmp	r3, #100	; 0x64
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e289      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004138:	4b88      	ldr	r3, [pc, #544]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	029b      	lsls	r3, r3, #10
 8004140:	4013      	ands	r3, r2
 8004142:	d1f0      	bne.n	8004126 <HAL_RCC_OscConfig+0xf6>
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004146:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2202      	movs	r2, #2
 800414e:	4013      	ands	r3, r2
 8004150:	d100      	bne.n	8004154 <HAL_RCC_OscConfig+0x124>
 8004152:	e099      	b.n	8004288 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004154:	4b81      	ldr	r3, [pc, #516]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2238      	movs	r2, #56	; 0x38
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800415e:	4b7f      	ldr	r3, [pc, #508]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2203      	movs	r2, #3
 8004164:	4013      	ands	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b10      	cmp	r3, #16
 800416c:	d102      	bne.n	8004174 <HAL_RCC_OscConfig+0x144>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d002      	beq.n	800417a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d135      	bne.n	80041e6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800417a:	4b78      	ldr	r3, [pc, #480]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4013      	ands	r3, r2
 8004184:	d005      	beq.n	8004192 <HAL_RCC_OscConfig+0x162>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e25c      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004192:	4b72      	ldr	r3, [pc, #456]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4a74      	ldr	r2, [pc, #464]	; (8004368 <HAL_RCC_OscConfig+0x338>)
 8004198:	4013      	ands	r3, r2
 800419a:	0019      	movs	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	021a      	lsls	r2, r3, #8
 80041a2:	4b6e      	ldr	r3, [pc, #440]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d112      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041ae:	4b6b      	ldr	r3, [pc, #428]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a6e      	ldr	r2, [pc, #440]	; (800436c <HAL_RCC_OscConfig+0x33c>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	0019      	movs	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	4b67      	ldr	r3, [pc, #412]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80041c2:	4b66      	ldr	r3, [pc, #408]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0adb      	lsrs	r3, r3, #11
 80041c8:	2207      	movs	r2, #7
 80041ca:	4013      	ands	r3, r2
 80041cc:	4a68      	ldr	r2, [pc, #416]	; (8004370 <HAL_RCC_OscConfig+0x340>)
 80041ce:	40da      	lsrs	r2, r3
 80041d0:	4b68      	ldr	r3, [pc, #416]	; (8004374 <HAL_RCC_OscConfig+0x344>)
 80041d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041d4:	4b68      	ldr	r3, [pc, #416]	; (8004378 <HAL_RCC_OscConfig+0x348>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	0018      	movs	r0, r3
 80041da:	f7fd ff2b 	bl	8002034 <HAL_InitTick>
 80041de:	1e03      	subs	r3, r0, #0
 80041e0:	d051      	beq.n	8004286 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e232      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d030      	beq.n	8004250 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041ee:	4b5b      	ldr	r3, [pc, #364]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a5e      	ldr	r2, [pc, #376]	; (800436c <HAL_RCC_OscConfig+0x33c>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	4b57      	ldr	r3, [pc, #348]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80041fe:	430a      	orrs	r2, r1
 8004200:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004202:	4b56      	ldr	r3, [pc, #344]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b55      	ldr	r3, [pc, #340]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	0049      	lsls	r1, r1, #1
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd ff6c 	bl	80020ec <HAL_GetTick>
 8004214:	0003      	movs	r3, r0
 8004216:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421a:	f7fd ff67 	bl	80020ec <HAL_GetTick>
 800421e:	0002      	movs	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e20f      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800422c:	4b4b      	ldr	r3, [pc, #300]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4013      	ands	r3, r2
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004238:	4b48      	ldr	r3, [pc, #288]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a4a      	ldr	r2, [pc, #296]	; (8004368 <HAL_RCC_OscConfig+0x338>)
 800423e:	4013      	ands	r3, r2
 8004240:	0019      	movs	r1, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	021a      	lsls	r2, r3, #8
 8004248:	4b44      	ldr	r3, [pc, #272]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	e01b      	b.n	8004288 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004250:	4b42      	ldr	r3, [pc, #264]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b41      	ldr	r3, [pc, #260]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004256:	4949      	ldr	r1, [pc, #292]	; (800437c <HAL_RCC_OscConfig+0x34c>)
 8004258:	400a      	ands	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fd ff46 	bl	80020ec <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
 8004262:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004266:	f7fd ff41 	bl	80020ec <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e1e9      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004278:	4b38      	ldr	r3, [pc, #224]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4013      	ands	r3, r2
 8004282:	d1f0      	bne.n	8004266 <HAL_RCC_OscConfig+0x236>
 8004284:	e000      	b.n	8004288 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004286:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2208      	movs	r2, #8
 800428e:	4013      	ands	r3, r2
 8004290:	d047      	beq.n	8004322 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004292:	4b32      	ldr	r3, [pc, #200]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2238      	movs	r2, #56	; 0x38
 8004298:	4013      	ands	r3, r2
 800429a:	2b18      	cmp	r3, #24
 800429c:	d10a      	bne.n	80042b4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800429e:	4b2f      	ldr	r3, [pc, #188]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80042a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a2:	2202      	movs	r2, #2
 80042a4:	4013      	ands	r3, r2
 80042a6:	d03c      	beq.n	8004322 <HAL_RCC_OscConfig+0x2f2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d138      	bne.n	8004322 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e1cb      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d019      	beq.n	80042f0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80042be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c0:	4b26      	ldr	r3, [pc, #152]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80042c2:	2101      	movs	r1, #1
 80042c4:	430a      	orrs	r2, r1
 80042c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fd ff10 	bl	80020ec <HAL_GetTick>
 80042cc:	0003      	movs	r3, r0
 80042ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fd ff0b 	bl	80020ec <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e1b3      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042e4:	4b1d      	ldr	r3, [pc, #116]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80042e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e8:	2202      	movs	r2, #2
 80042ea:	4013      	ands	r3, r2
 80042ec:	d0f1      	beq.n	80042d2 <HAL_RCC_OscConfig+0x2a2>
 80042ee:	e018      	b.n	8004322 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80042f0:	4b1a      	ldr	r3, [pc, #104]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80042f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042f4:	4b19      	ldr	r3, [pc, #100]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 80042f6:	2101      	movs	r1, #1
 80042f8:	438a      	bics	r2, r1
 80042fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fd fef6 	bl	80020ec <HAL_GetTick>
 8004300:	0003      	movs	r3, r0
 8004302:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004306:	f7fd fef1 	bl	80020ec <HAL_GetTick>
 800430a:	0002      	movs	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e199      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004318:	4b10      	ldr	r3, [pc, #64]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 800431a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431c:	2202      	movs	r2, #2
 800431e:	4013      	ands	r3, r2
 8004320:	d1f1      	bne.n	8004306 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2204      	movs	r2, #4
 8004328:	4013      	ands	r3, r2
 800432a:	d100      	bne.n	800432e <HAL_RCC_OscConfig+0x2fe>
 800432c:	e0c6      	b.n	80044bc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432e:	231f      	movs	r3, #31
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2238      	movs	r2, #56	; 0x38
 800433c:	4013      	ands	r3, r2
 800433e:	2b20      	cmp	r3, #32
 8004340:	d11e      	bne.n	8004380 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_RCC_OscConfig+0x32c>)
 8004344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004346:	2202      	movs	r2, #2
 8004348:	4013      	ands	r3, r2
 800434a:	d100      	bne.n	800434e <HAL_RCC_OscConfig+0x31e>
 800434c:	e0b6      	b.n	80044bc <HAL_RCC_OscConfig+0x48c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d000      	beq.n	8004358 <HAL_RCC_OscConfig+0x328>
 8004356:	e0b1      	b.n	80044bc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e177      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
 800435c:	40021000 	.word	0x40021000
 8004360:	fffeffff 	.word	0xfffeffff
 8004364:	fffbffff 	.word	0xfffbffff
 8004368:	ffff80ff 	.word	0xffff80ff
 800436c:	ffffc7ff 	.word	0xffffc7ff
 8004370:	00f42400 	.word	0x00f42400
 8004374:	20000000 	.word	0x20000000
 8004378:	20000004 	.word	0x20000004
 800437c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004380:	4bb4      	ldr	r3, [pc, #720]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	055b      	lsls	r3, r3, #21
 8004388:	4013      	ands	r3, r2
 800438a:	d101      	bne.n	8004390 <HAL_RCC_OscConfig+0x360>
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x362>
 8004390:	2300      	movs	r3, #0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d011      	beq.n	80043ba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	4baf      	ldr	r3, [pc, #700]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800439a:	4bae      	ldr	r3, [pc, #696]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	0549      	lsls	r1, r1, #21
 80043a0:	430a      	orrs	r2, r1
 80043a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80043a4:	4bab      	ldr	r3, [pc, #684]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 80043a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	055b      	lsls	r3, r3, #21
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80043b2:	231f      	movs	r3, #31
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ba:	4ba7      	ldr	r3, [pc, #668]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4013      	ands	r3, r2
 80043c4:	d11a      	bne.n	80043fc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c6:	4ba4      	ldr	r3, [pc, #656]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4ba3      	ldr	r3, [pc, #652]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 80043cc:	2180      	movs	r1, #128	; 0x80
 80043ce:	0049      	lsls	r1, r1, #1
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80043d4:	f7fd fe8a 	bl	80020ec <HAL_GetTick>
 80043d8:	0003      	movs	r3, r0
 80043da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043de:	f7fd fe85 	bl	80020ec <HAL_GetTick>
 80043e2:	0002      	movs	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e12d      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f0:	4b99      	ldr	r3, [pc, #612]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4013      	ands	r3, r2
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d106      	bne.n	8004412 <HAL_RCC_OscConfig+0x3e2>
 8004404:	4b93      	ldr	r3, [pc, #588]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004406:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004408:	4b92      	ldr	r3, [pc, #584]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 800440a:	2101      	movs	r1, #1
 800440c:	430a      	orrs	r2, r1
 800440e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004410:	e01c      	b.n	800444c <HAL_RCC_OscConfig+0x41c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b05      	cmp	r3, #5
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0x404>
 800441a:	4b8e      	ldr	r3, [pc, #568]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 800441c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800441e:	4b8d      	ldr	r3, [pc, #564]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004420:	2104      	movs	r1, #4
 8004422:	430a      	orrs	r2, r1
 8004424:	65da      	str	r2, [r3, #92]	; 0x5c
 8004426:	4b8b      	ldr	r3, [pc, #556]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004428:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800442a:	4b8a      	ldr	r3, [pc, #552]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 800442c:	2101      	movs	r1, #1
 800442e:	430a      	orrs	r2, r1
 8004430:	65da      	str	r2, [r3, #92]	; 0x5c
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0x41c>
 8004434:	4b87      	ldr	r3, [pc, #540]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004436:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004438:	4b86      	ldr	r3, [pc, #536]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 800443a:	2101      	movs	r1, #1
 800443c:	438a      	bics	r2, r1
 800443e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004440:	4b84      	ldr	r3, [pc, #528]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004442:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004444:	4b83      	ldr	r3, [pc, #524]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004446:	2104      	movs	r1, #4
 8004448:	438a      	bics	r2, r1
 800444a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d014      	beq.n	800447e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fd fe4a 	bl	80020ec <HAL_GetTick>
 8004458:	0003      	movs	r3, r0
 800445a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445c:	e009      	b.n	8004472 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fd fe45 	bl	80020ec <HAL_GetTick>
 8004462:	0002      	movs	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	4a7c      	ldr	r2, [pc, #496]	; (800465c <HAL_RCC_OscConfig+0x62c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e0ec      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004472:	4b78      	ldr	r3, [pc, #480]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004476:	2202      	movs	r2, #2
 8004478:	4013      	ands	r3, r2
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x42e>
 800447c:	e013      	b.n	80044a6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fd fe35 	bl	80020ec <HAL_GetTick>
 8004482:	0003      	movs	r3, r0
 8004484:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004486:	e009      	b.n	800449c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004488:	f7fd fe30 	bl	80020ec <HAL_GetTick>
 800448c:	0002      	movs	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	4a72      	ldr	r2, [pc, #456]	; (800465c <HAL_RCC_OscConfig+0x62c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e0d7      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800449c:	4b6d      	ldr	r3, [pc, #436]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 800449e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a0:	2202      	movs	r2, #2
 80044a2:	4013      	ands	r3, r2
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80044a6:	231f      	movs	r3, #31
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80044b0:	4b68      	ldr	r3, [pc, #416]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 80044b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b4:	4b67      	ldr	r3, [pc, #412]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 80044b6:	496a      	ldr	r1, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x630>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d100      	bne.n	80044c6 <HAL_RCC_OscConfig+0x496>
 80044c4:	e0c1      	b.n	800464a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044c6:	4b63      	ldr	r3, [pc, #396]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2238      	movs	r2, #56	; 0x38
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d100      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4a4>
 80044d2:	e081      	b.n	80045d8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d156      	bne.n	800458a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044dc:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b5c      	ldr	r3, [pc, #368]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 80044e2:	4960      	ldr	r1, [pc, #384]	; (8004664 <HAL_RCC_OscConfig+0x634>)
 80044e4:	400a      	ands	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fd fe00 	bl	80020ec <HAL_GetTick>
 80044ec:	0003      	movs	r3, r0
 80044ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f2:	f7fd fdfb 	bl	80020ec <HAL_GetTick>
 80044f6:	0002      	movs	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0a3      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004504:	4b53      	ldr	r3, [pc, #332]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	049b      	lsls	r3, r3, #18
 800450c:	4013      	ands	r3, r2
 800450e:	d1f0      	bne.n	80044f2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004510:	4b50      	ldr	r3, [pc, #320]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4a54      	ldr	r2, [pc, #336]	; (8004668 <HAL_RCC_OscConfig+0x638>)
 8004516:	4013      	ands	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1a      	ldr	r2, [r3, #32]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453c:	431a      	orrs	r2, r3
 800453e:	4b45      	ldr	r3, [pc, #276]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004540:	430a      	orrs	r2, r1
 8004542:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004544:	4b43      	ldr	r3, [pc, #268]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b42      	ldr	r3, [pc, #264]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	0449      	lsls	r1, r1, #17
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004552:	4b40      	ldr	r3, [pc, #256]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	4b3f      	ldr	r3, [pc, #252]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004558:	2180      	movs	r1, #128	; 0x80
 800455a:	0549      	lsls	r1, r1, #21
 800455c:	430a      	orrs	r2, r1
 800455e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd fdc4 	bl	80020ec <HAL_GetTick>
 8004564:	0003      	movs	r3, r0
 8004566:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456a:	f7fd fdbf 	bl	80020ec <HAL_GetTick>
 800456e:	0002      	movs	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e067      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457c:	4b35      	ldr	r3, [pc, #212]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	049b      	lsls	r3, r3, #18
 8004584:	4013      	ands	r3, r2
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x53a>
 8004588:	e05f      	b.n	800464a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458a:	4b32      	ldr	r3, [pc, #200]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004590:	4934      	ldr	r1, [pc, #208]	; (8004664 <HAL_RCC_OscConfig+0x634>)
 8004592:	400a      	ands	r2, r1
 8004594:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004596:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 800459c:	2103      	movs	r1, #3
 800459e:	438a      	bics	r2, r1
 80045a0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80045a2:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	4b2b      	ldr	r3, [pc, #172]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 80045a8:	4930      	ldr	r1, [pc, #192]	; (800466c <HAL_RCC_OscConfig+0x63c>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ae:	f7fd fd9d 	bl	80020ec <HAL_GetTick>
 80045b2:	0003      	movs	r3, r0
 80045b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd fd98 	bl	80020ec <HAL_GetTick>
 80045bc:	0002      	movs	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e040      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ca:	4b22      	ldr	r3, [pc, #136]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	049b      	lsls	r3, r3, #18
 80045d2:	4013      	ands	r3, r2
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x588>
 80045d6:	e038      	b.n	800464a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e033      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80045e4:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x624>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2203      	movs	r2, #3
 80045ee:	401a      	ands	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d126      	bne.n	8004646 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2270      	movs	r2, #112	; 0x70
 80045fc:	401a      	ands	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004602:	429a      	cmp	r2, r3
 8004604:	d11f      	bne.n	8004646 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	23fe      	movs	r3, #254	; 0xfe
 800460a:	01db      	lsls	r3, r3, #7
 800460c:	401a      	ands	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d116      	bne.n	8004646 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	23f8      	movs	r3, #248	; 0xf8
 800461c:	039b      	lsls	r3, r3, #14
 800461e:	401a      	ands	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d10e      	bne.n	8004646 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	23e0      	movs	r3, #224	; 0xe0
 800462c:	051b      	lsls	r3, r3, #20
 800462e:	401a      	ands	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d106      	bne.n	8004646 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	0f5b      	lsrs	r3, r3, #29
 800463c:	075a      	lsls	r2, r3, #29
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d001      	beq.n	800464a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	0018      	movs	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	b008      	add	sp, #32
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	40007000 	.word	0x40007000
 800465c:	00001388 	.word	0x00001388
 8004660:	efffffff 	.word	0xefffffff
 8004664:	feffffff 	.word	0xfeffffff
 8004668:	11c1808c 	.word	0x11c1808c
 800466c:	eefeffff 	.word	0xeefeffff

08004670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0e9      	b.n	8004858 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004684:	4b76      	ldr	r3, [pc, #472]	; (8004860 <HAL_RCC_ClockConfig+0x1f0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2207      	movs	r2, #7
 800468a:	4013      	ands	r3, r2
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d91e      	bls.n	80046d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b73      	ldr	r3, [pc, #460]	; (8004860 <HAL_RCC_ClockConfig+0x1f0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2207      	movs	r2, #7
 8004698:	4393      	bics	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	4b70      	ldr	r3, [pc, #448]	; (8004860 <HAL_RCC_ClockConfig+0x1f0>)
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046a4:	f7fd fd22 	bl	80020ec <HAL_GetTick>
 80046a8:	0003      	movs	r3, r0
 80046aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046ac:	e009      	b.n	80046c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ae:	f7fd fd1d 	bl	80020ec <HAL_GetTick>
 80046b2:	0002      	movs	r2, r0
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	4a6a      	ldr	r2, [pc, #424]	; (8004864 <HAL_RCC_ClockConfig+0x1f4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0ca      	b.n	8004858 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046c2:	4b67      	ldr	r3, [pc, #412]	; (8004860 <HAL_RCC_ClockConfig+0x1f0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2207      	movs	r2, #7
 80046c8:	4013      	ands	r3, r2
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1ee      	bne.n	80046ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2202      	movs	r2, #2
 80046d6:	4013      	ands	r3, r2
 80046d8:	d015      	beq.n	8004706 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2204      	movs	r2, #4
 80046e0:	4013      	ands	r3, r2
 80046e2:	d006      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046e4:	4b60      	ldr	r3, [pc, #384]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	4b5f      	ldr	r3, [pc, #380]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 80046ea:	21e0      	movs	r1, #224	; 0xe0
 80046ec:	01c9      	lsls	r1, r1, #7
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f2:	4b5d      	ldr	r3, [pc, #372]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4a5d      	ldr	r2, [pc, #372]	; (800486c <HAL_RCC_ClockConfig+0x1fc>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	0019      	movs	r1, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	4b59      	ldr	r3, [pc, #356]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 8004702:	430a      	orrs	r2, r1
 8004704:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2201      	movs	r2, #1
 800470c:	4013      	ands	r3, r2
 800470e:	d057      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004718:	4b53      	ldr	r3, [pc, #332]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	029b      	lsls	r3, r3, #10
 8004720:	4013      	ands	r3, r2
 8004722:	d12b      	bne.n	800477c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e097      	b.n	8004858 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d107      	bne.n	8004740 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004730:	4b4d      	ldr	r3, [pc, #308]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	049b      	lsls	r3, r3, #18
 8004738:	4013      	ands	r3, r2
 800473a:	d11f      	bne.n	800477c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e08b      	b.n	8004858 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d107      	bne.n	8004758 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004748:	4b47      	ldr	r3, [pc, #284]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4013      	ands	r3, r2
 8004752:	d113      	bne.n	800477c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e07f      	b.n	8004858 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d106      	bne.n	800476e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004760:	4b41      	ldr	r3, [pc, #260]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 8004762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004764:	2202      	movs	r2, #2
 8004766:	4013      	ands	r3, r2
 8004768:	d108      	bne.n	800477c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e074      	b.n	8004858 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476e:	4b3e      	ldr	r3, [pc, #248]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 8004770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004772:	2202      	movs	r2, #2
 8004774:	4013      	ands	r3, r2
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e06d      	b.n	8004858 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800477c:	4b3a      	ldr	r3, [pc, #232]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2207      	movs	r2, #7
 8004782:	4393      	bics	r3, r2
 8004784:	0019      	movs	r1, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	4b37      	ldr	r3, [pc, #220]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 800478c:	430a      	orrs	r2, r1
 800478e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004790:	f7fd fcac 	bl	80020ec <HAL_GetTick>
 8004794:	0003      	movs	r3, r0
 8004796:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004798:	e009      	b.n	80047ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479a:	f7fd fca7 	bl	80020ec <HAL_GetTick>
 800479e:	0002      	movs	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	4a2f      	ldr	r2, [pc, #188]	; (8004864 <HAL_RCC_ClockConfig+0x1f4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e054      	b.n	8004858 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2238      	movs	r2, #56	; 0x38
 80047b4:	401a      	ands	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	429a      	cmp	r2, r3
 80047be:	d1ec      	bne.n	800479a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HAL_RCC_ClockConfig+0x1f0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2207      	movs	r2, #7
 80047c6:	4013      	ands	r3, r2
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d21e      	bcs.n	800480c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_ClockConfig+0x1f0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2207      	movs	r2, #7
 80047d4:	4393      	bics	r3, r2
 80047d6:	0019      	movs	r1, r3
 80047d8:	4b21      	ldr	r3, [pc, #132]	; (8004860 <HAL_RCC_ClockConfig+0x1f0>)
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047e0:	f7fd fc84 	bl	80020ec <HAL_GetTick>
 80047e4:	0003      	movs	r3, r0
 80047e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047e8:	e009      	b.n	80047fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ea:	f7fd fc7f 	bl	80020ec <HAL_GetTick>
 80047ee:	0002      	movs	r2, r0
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	4a1b      	ldr	r2, [pc, #108]	; (8004864 <HAL_RCC_ClockConfig+0x1f4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e02c      	b.n	8004858 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047fe:	4b18      	ldr	r3, [pc, #96]	; (8004860 <HAL_RCC_ClockConfig+0x1f0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2207      	movs	r2, #7
 8004804:	4013      	ands	r3, r2
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d1ee      	bne.n	80047ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2204      	movs	r2, #4
 8004812:	4013      	ands	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	4a15      	ldr	r2, [pc, #84]	; (8004870 <HAL_RCC_ClockConfig+0x200>)
 800481c:	4013      	ands	r3, r2
 800481e:	0019      	movs	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	4b10      	ldr	r3, [pc, #64]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 8004826:	430a      	orrs	r2, r1
 8004828:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800482a:	f000 f829 	bl	8004880 <HAL_RCC_GetSysClockFreq>
 800482e:	0001      	movs	r1, r0
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <HAL_RCC_ClockConfig+0x1f8>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	220f      	movs	r2, #15
 8004838:	401a      	ands	r2, r3
 800483a:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <HAL_RCC_ClockConfig+0x204>)
 800483c:	0092      	lsls	r2, r2, #2
 800483e:	58d3      	ldr	r3, [r2, r3]
 8004840:	221f      	movs	r2, #31
 8004842:	4013      	ands	r3, r2
 8004844:	000a      	movs	r2, r1
 8004846:	40da      	lsrs	r2, r3
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_ClockConfig+0x208>)
 800484a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_ClockConfig+0x20c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0018      	movs	r0, r3
 8004852:	f7fd fbef 	bl	8002034 <HAL_InitTick>
 8004856:	0003      	movs	r3, r0
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b004      	add	sp, #16
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40022000 	.word	0x40022000
 8004864:	00001388 	.word	0x00001388
 8004868:	40021000 	.word	0x40021000
 800486c:	fffff0ff 	.word	0xfffff0ff
 8004870:	ffff8fff 	.word	0xffff8fff
 8004874:	0800c05c 	.word	0x0800c05c
 8004878:	20000000 	.word	0x20000000
 800487c:	20000004 	.word	0x20000004

08004880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004886:	4b3c      	ldr	r3, [pc, #240]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2238      	movs	r2, #56	; 0x38
 800488c:	4013      	ands	r3, r2
 800488e:	d10f      	bne.n	80048b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004890:	4b39      	ldr	r3, [pc, #228]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	0adb      	lsrs	r3, r3, #11
 8004896:	2207      	movs	r2, #7
 8004898:	4013      	ands	r3, r2
 800489a:	2201      	movs	r2, #1
 800489c:	409a      	lsls	r2, r3
 800489e:	0013      	movs	r3, r2
 80048a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80048a2:	6839      	ldr	r1, [r7, #0]
 80048a4:	4835      	ldr	r0, [pc, #212]	; (800497c <HAL_RCC_GetSysClockFreq+0xfc>)
 80048a6:	f7fb fc35 	bl	8000114 <__udivsi3>
 80048aa:	0003      	movs	r3, r0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	e05d      	b.n	800496c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048b0:	4b31      	ldr	r3, [pc, #196]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2238      	movs	r2, #56	; 0x38
 80048b6:	4013      	ands	r3, r2
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d102      	bne.n	80048c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048bc:	4b30      	ldr	r3, [pc, #192]	; (8004980 <HAL_RCC_GetSysClockFreq+0x100>)
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	e054      	b.n	800496c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048c2:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2238      	movs	r2, #56	; 0x38
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d138      	bne.n	8004940 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80048ce:	4b2a      	ldr	r3, [pc, #168]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2203      	movs	r2, #3
 80048d4:	4013      	ands	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048d8:	4b27      	ldr	r3, [pc, #156]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	2207      	movs	r2, #7
 80048e0:	4013      	ands	r3, r2
 80048e2:	3301      	adds	r3, #1
 80048e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d10d      	bne.n	8004908 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	4824      	ldr	r0, [pc, #144]	; (8004980 <HAL_RCC_GetSysClockFreq+0x100>)
 80048f0:	f7fb fc10 	bl	8000114 <__udivsi3>
 80048f4:	0003      	movs	r3, r0
 80048f6:	0019      	movs	r1, r3
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	227f      	movs	r2, #127	; 0x7f
 8004900:	4013      	ands	r3, r2
 8004902:	434b      	muls	r3, r1
 8004904:	617b      	str	r3, [r7, #20]
        break;
 8004906:	e00d      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	481c      	ldr	r0, [pc, #112]	; (800497c <HAL_RCC_GetSysClockFreq+0xfc>)
 800490c:	f7fb fc02 	bl	8000114 <__udivsi3>
 8004910:	0003      	movs	r3, r0
 8004912:	0019      	movs	r1, r3
 8004914:	4b18      	ldr	r3, [pc, #96]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	227f      	movs	r2, #127	; 0x7f
 800491c:	4013      	ands	r3, r2
 800491e:	434b      	muls	r3, r1
 8004920:	617b      	str	r3, [r7, #20]
        break;
 8004922:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	0f5b      	lsrs	r3, r3, #29
 800492a:	2207      	movs	r2, #7
 800492c:	4013      	ands	r3, r2
 800492e:	3301      	adds	r3, #1
 8004930:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	6978      	ldr	r0, [r7, #20]
 8004936:	f7fb fbed 	bl	8000114 <__udivsi3>
 800493a:	0003      	movs	r3, r0
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	e015      	b.n	800496c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2238      	movs	r2, #56	; 0x38
 8004946:	4013      	ands	r3, r2
 8004948:	2b20      	cmp	r3, #32
 800494a:	d103      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	e00b      	b.n	800496c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004954:	4b08      	ldr	r3, [pc, #32]	; (8004978 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2238      	movs	r2, #56	; 0x38
 800495a:	4013      	ands	r3, r2
 800495c:	2b18      	cmp	r3, #24
 800495e:	d103      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004960:	23fa      	movs	r3, #250	; 0xfa
 8004962:	01db      	lsls	r3, r3, #7
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	e001      	b.n	800496c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800496c:	693b      	ldr	r3, [r7, #16]
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b006      	add	sp, #24
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	40021000 	.word	0x40021000
 800497c:	00f42400 	.word	0x00f42400
 8004980:	007a1200 	.word	0x007a1200

08004984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800498c:	2313      	movs	r3, #19
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004994:	2312      	movs	r3, #18
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	4013      	ands	r3, r2
 80049a6:	d100      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80049a8:	e0a3      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049aa:	2011      	movs	r0, #17
 80049ac:	183b      	adds	r3, r7, r0
 80049ae:	2200      	movs	r2, #0
 80049b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b2:	4ba5      	ldr	r3, [pc, #660]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b6:	2380      	movs	r3, #128	; 0x80
 80049b8:	055b      	lsls	r3, r3, #21
 80049ba:	4013      	ands	r3, r2
 80049bc:	d110      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049be:	4ba2      	ldr	r3, [pc, #648]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c2:	4ba1      	ldr	r3, [pc, #644]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	0549      	lsls	r1, r1, #21
 80049c8:	430a      	orrs	r2, r1
 80049ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80049cc:	4b9e      	ldr	r3, [pc, #632]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	055b      	lsls	r3, r3, #21
 80049d4:	4013      	ands	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049da:	183b      	adds	r3, r7, r0
 80049dc:	2201      	movs	r2, #1
 80049de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049e0:	4b9a      	ldr	r3, [pc, #616]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4b99      	ldr	r3, [pc, #612]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80049e6:	2180      	movs	r1, #128	; 0x80
 80049e8:	0049      	lsls	r1, r1, #1
 80049ea:	430a      	orrs	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049ee:	f7fd fb7d 	bl	80020ec <HAL_GetTick>
 80049f2:	0003      	movs	r3, r0
 80049f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049f6:	e00b      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f8:	f7fd fb78 	bl	80020ec <HAL_GetTick>
 80049fc:	0002      	movs	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d904      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004a06:	2313      	movs	r3, #19
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	701a      	strb	r2, [r3, #0]
        break;
 8004a0e:	e005      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a10:	4b8e      	ldr	r3, [pc, #568]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d0ed      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004a1c:	2313      	movs	r3, #19
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d154      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a26:	4b88      	ldr	r3, [pc, #544]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a2a:	23c0      	movs	r3, #192	; 0xc0
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d019      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d014      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a42:	4b81      	ldr	r3, [pc, #516]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	4a82      	ldr	r2, [pc, #520]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a4c:	4b7e      	ldr	r3, [pc, #504]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a50:	4b7d      	ldr	r3, [pc, #500]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	0249      	lsls	r1, r1, #9
 8004a56:	430a      	orrs	r2, r1
 8004a58:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a5a:	4b7b      	ldr	r3, [pc, #492]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a5e:	4b7a      	ldr	r3, [pc, #488]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a60:	497c      	ldr	r1, [pc, #496]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004a62:	400a      	ands	r2, r1
 8004a64:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a66:	4b78      	ldr	r3, [pc, #480]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4013      	ands	r3, r2
 8004a72:	d016      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd fb3a 	bl	80020ec <HAL_GetTick>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a7c:	e00c      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7e:	f7fd fb35 	bl	80020ec <HAL_GetTick>
 8004a82:	0002      	movs	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	4a73      	ldr	r2, [pc, #460]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d904      	bls.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004a8e:	2313      	movs	r3, #19
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	2203      	movs	r2, #3
 8004a94:	701a      	strb	r2, [r3, #0]
            break;
 8004a96:	e004      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a98:	4b6b      	ldr	r3, [pc, #428]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d0ed      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004aa2:	2313      	movs	r3, #19
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aac:	4b66      	ldr	r3, [pc, #408]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab0:	4a67      	ldr	r2, [pc, #412]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aba:	4b63      	ldr	r3, [pc, #396]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004abc:	430a      	orrs	r2, r1
 8004abe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ac0:	e00c      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ac2:	2312      	movs	r3, #18
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	2213      	movs	r2, #19
 8004ac8:	18ba      	adds	r2, r7, r2
 8004aca:	7812      	ldrb	r2, [r2, #0]
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e005      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	2312      	movs	r3, #18
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	2213      	movs	r2, #19
 8004ad6:	18ba      	adds	r2, r7, r2
 8004ad8:	7812      	ldrb	r2, [r2, #0]
 8004ada:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004adc:	2311      	movs	r3, #17
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d105      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae6:	4b58      	ldr	r3, [pc, #352]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aea:	4b57      	ldr	r3, [pc, #348]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004aec:	495b      	ldr	r1, [pc, #364]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004aee:	400a      	ands	r2, r1
 8004af0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2201      	movs	r2, #1
 8004af8:	4013      	ands	r3, r2
 8004afa:	d009      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004afc:	4b52      	ldr	r3, [pc, #328]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	2203      	movs	r2, #3
 8004b02:	4393      	bics	r3, r2
 8004b04:	0019      	movs	r1, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	4b4f      	ldr	r3, [pc, #316]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2210      	movs	r2, #16
 8004b16:	4013      	ands	r3, r2
 8004b18:	d009      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b1a:	4b4b      	ldr	r3, [pc, #300]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	4a50      	ldr	r2, [pc, #320]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	0019      	movs	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	4b47      	ldr	r3, [pc, #284]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4013      	ands	r3, r2
 8004b38:	d009      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b3a:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	4a49      	ldr	r2, [pc, #292]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	0019      	movs	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	4b3f      	ldr	r3, [pc, #252]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	2380      	movs	r3, #128	; 0x80
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4013      	ands	r3, r2
 8004b58:	d009      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b5a:	4b3b      	ldr	r3, [pc, #236]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	4a42      	ldr	r2, [pc, #264]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699a      	ldr	r2, [r3, #24]
 8004b68:	4b37      	ldr	r3, [pc, #220]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2220      	movs	r2, #32
 8004b74:	4013      	ands	r3, r2
 8004b76:	d009      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b78:	4b33      	ldr	r3, [pc, #204]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7c:	4a3b      	ldr	r2, [pc, #236]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	0019      	movs	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	4b30      	ldr	r3, [pc, #192]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	01db      	lsls	r3, r3, #7
 8004b94:	4013      	ands	r3, r2
 8004b96:	d015      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b98:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	0899      	lsrs	r1, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	4b28      	ldr	r3, [pc, #160]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69da      	ldr	r2, [r3, #28]
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	05db      	lsls	r3, r3, #23
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	0249      	lsls	r1, r1, #9
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	2380      	movs	r3, #128	; 0x80
 8004bca:	039b      	lsls	r3, r3, #14
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d016      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004bd0:	4b1d      	ldr	r3, [pc, #116]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	0019      	movs	r1, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1a      	ldr	r2, [r3, #32]
 8004bde:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004be0:	430a      	orrs	r2, r1
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1a      	ldr	r2, [r3, #32]
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	03db      	lsls	r3, r3, #15
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d106      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bf0:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	0449      	lsls	r1, r1, #17
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	4013      	ands	r3, r2
 8004c08:	d016      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0e:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	0019      	movs	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	01db      	lsls	r3, r3, #7
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d106      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c2a:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	0249      	lsls	r1, r1, #9
 8004c34:	430a      	orrs	r2, r1
 8004c36:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004c38:	2312      	movs	r3, #18
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	781b      	ldrb	r3, [r3, #0]
}
 8004c3e:	0018      	movs	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b006      	add	sp, #24
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40007000 	.word	0x40007000
 8004c50:	fffffcff 	.word	0xfffffcff
 8004c54:	fffeffff 	.word	0xfffeffff
 8004c58:	00001388 	.word	0x00001388
 8004c5c:	efffffff 	.word	0xefffffff
 8004c60:	fffff3ff 	.word	0xfffff3ff
 8004c64:	fff3ffff 	.word	0xfff3ffff
 8004c68:	ffcfffff 	.word	0xffcfffff
 8004c6c:	ffffcfff 	.word	0xffffcfff
 8004c70:	ffbfffff 	.word	0xffbfffff
 8004c74:	ffff3fff 	.word	0xffff3fff

08004c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e0a8      	b.n	8004ddc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	2382      	movs	r3, #130	; 0x82
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d009      	beq.n	8004cb2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	61da      	str	r2, [r3, #28]
 8004ca4:	e005      	b.n	8004cb2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	225d      	movs	r2, #93	; 0x5d
 8004cbc:	5c9b      	ldrb	r3, [r3, r2]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d107      	bne.n	8004cd4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	225c      	movs	r2, #92	; 0x5c
 8004cc8:	2100      	movs	r1, #0
 8004cca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f7fc fda8 	bl	8001824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	225d      	movs	r2, #93	; 0x5d
 8004cd8:	2102      	movs	r1, #2
 8004cda:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2140      	movs	r1, #64	; 0x40
 8004ce8:	438a      	bics	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	23e0      	movs	r3, #224	; 0xe0
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d902      	bls.n	8004cfe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e002      	b.n	8004d04 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	015b      	lsls	r3, r3, #5
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	23f0      	movs	r3, #240	; 0xf0
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d008      	beq.n	8004d22 <HAL_SPI_Init+0xaa>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	23e0      	movs	r3, #224	; 0xe0
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d002      	beq.n	8004d22 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	2382      	movs	r3, #130	; 0x82
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6899      	ldr	r1, [r3, #8]
 8004d30:	2384      	movs	r3, #132	; 0x84
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	400b      	ands	r3, r1
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	400b      	ands	r3, r1
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	2101      	movs	r1, #1
 8004d48:	400b      	ands	r3, r1
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6999      	ldr	r1, [r3, #24]
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	400b      	ands	r3, r1
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2138      	movs	r1, #56	; 0x38
 8004d5e:	400b      	ands	r3, r1
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	2180      	movs	r1, #128	; 0x80
 8004d68:	400b      	ands	r3, r1
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	0011      	movs	r1, r2
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	019b      	lsls	r3, r3, #6
 8004d76:	401a      	ands	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	0c1b      	lsrs	r3, r3, #16
 8004d86:	2204      	movs	r2, #4
 8004d88:	401a      	ands	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2110      	movs	r1, #16
 8004d90:	400b      	ands	r3, r1
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	2108      	movs	r1, #8
 8004d9a:	400b      	ands	r3, r1
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68d9      	ldr	r1, [r3, #12]
 8004da2:	23f0      	movs	r3, #240	; 0xf0
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	400b      	ands	r3, r1
 8004da8:	431a      	orrs	r2, r3
 8004daa:	0011      	movs	r1, r2
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	015b      	lsls	r3, r3, #5
 8004db2:	401a      	ands	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4907      	ldr	r1, [pc, #28]	; (8004de4 <HAL_SPI_Init+0x16c>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	225d      	movs	r2, #93	; 0x5d
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b004      	add	sp, #16
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	fffff7ff 	.word	0xfffff7ff

08004de8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	1dbb      	adds	r3, r7, #6
 8004df6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004df8:	231f      	movs	r3, #31
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	225c      	movs	r2, #92	; 0x5c
 8004e04:	5c9b      	ldrb	r3, [r3, r2]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_SPI_Transmit+0x26>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e140      	b.n	8005090 <HAL_SPI_Transmit+0x2a8>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	225c      	movs	r2, #92	; 0x5c
 8004e12:	2101      	movs	r1, #1
 8004e14:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e16:	f7fd f969 	bl	80020ec <HAL_GetTick>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e1e:	2316      	movs	r3, #22
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	1dba      	adds	r2, r7, #6
 8004e24:	8812      	ldrh	r2, [r2, #0]
 8004e26:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	225d      	movs	r2, #93	; 0x5d
 8004e2c:	5c9b      	ldrb	r3, [r3, r2]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d004      	beq.n	8004e3e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004e34:	231f      	movs	r3, #31
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	2202      	movs	r2, #2
 8004e3a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e3c:	e11d      	b.n	800507a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_SPI_Transmit+0x64>
 8004e44:	1dbb      	adds	r3, r7, #6
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004e4c:	231f      	movs	r3, #31
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e54:	e111      	b.n	800507a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	225d      	movs	r2, #93	; 0x5d
 8004e5a:	2103      	movs	r1, #3
 8004e5c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1dba      	adds	r2, r7, #6
 8004e6e:	8812      	ldrh	r2, [r2, #0]
 8004e70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1dba      	adds	r2, r7, #6
 8004e76:	8812      	ldrh	r2, [r2, #0]
 8004e78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2244      	movs	r2, #68	; 0x44
 8004e84:	2100      	movs	r1, #0
 8004e86:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2246      	movs	r2, #70	; 0x46
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d110      	bne.n	8004eca <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2140      	movs	r1, #64	; 0x40
 8004eb4:	438a      	bics	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2180      	movs	r1, #128	; 0x80
 8004ec4:	01c9      	lsls	r1, r1, #7
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2240      	movs	r2, #64	; 0x40
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d007      	beq.n	8004ee8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2140      	movs	r1, #64	; 0x40
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	23e0      	movs	r3, #224	; 0xe0
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d94e      	bls.n	8004f92 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <HAL_SPI_Transmit+0x11e>
 8004efc:	2316      	movs	r3, #22
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d13f      	bne.n	8004f86 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f2a:	e02c      	b.n	8004f86 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2202      	movs	r2, #2
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d112      	bne.n	8004f60 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	881a      	ldrh	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	1c9a      	adds	r2, r3, #2
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f5e:	e012      	b.n	8004f86 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f60:	f7fd f8c4 	bl	80020ec <HAL_GetTick>
 8004f64:	0002      	movs	r2, r0
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d802      	bhi.n	8004f76 <HAL_SPI_Transmit+0x18e>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	d102      	bne.n	8004f7c <HAL_SPI_Transmit+0x194>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004f7c:	231f      	movs	r3, #31
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	2203      	movs	r2, #3
 8004f82:	701a      	strb	r2, [r3, #0]
          goto error;
 8004f84:	e079      	b.n	800507a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1cd      	bne.n	8004f2c <HAL_SPI_Transmit+0x144>
 8004f90:	e04f      	b.n	8005032 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <HAL_SPI_Transmit+0x1bc>
 8004f9a:	2316      	movs	r3, #22
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d141      	bne.n	8005028 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	330c      	adds	r3, #12
 8004fae:	7812      	ldrb	r2, [r2, #0]
 8004fb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004fca:	e02d      	b.n	8005028 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d113      	bne.n	8005002 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	7812      	ldrb	r2, [r2, #0]
 8004fe6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005000:	e012      	b.n	8005028 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005002:	f7fd f873 	bl	80020ec <HAL_GetTick>
 8005006:	0002      	movs	r2, r0
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d802      	bhi.n	8005018 <HAL_SPI_Transmit+0x230>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	d102      	bne.n	800501e <HAL_SPI_Transmit+0x236>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800501e:	231f      	movs	r3, #31
 8005020:	18fb      	adds	r3, r7, r3
 8005022:	2203      	movs	r2, #3
 8005024:	701a      	strb	r2, [r3, #0]
          goto error;
 8005026:	e028      	b.n	800507a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1cc      	bne.n	8004fcc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	0018      	movs	r0, r3
 800503a:	f000 f95d 	bl	80052f8 <SPI_EndRxTxTransaction>
 800503e:	1e03      	subs	r3, r0, #0
 8005040:	d002      	beq.n	8005048 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800506e:	231f      	movs	r3, #31
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	2201      	movs	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e000      	b.n	800507a <HAL_SPI_Transmit+0x292>
  }

error:
 8005078:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	225d      	movs	r2, #93	; 0x5d
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	225c      	movs	r2, #92	; 0x5c
 8005086:	2100      	movs	r1, #0
 8005088:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800508a:	231f      	movs	r3, #31
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	781b      	ldrb	r3, [r3, #0]
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b008      	add	sp, #32
 8005096:	bd80      	pop	{r7, pc}

08005098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	1dfb      	adds	r3, r7, #7
 80050a6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050a8:	f7fd f820 	bl	80020ec <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	18d3      	adds	r3, r2, r3
 80050b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050b8:	f7fd f818 	bl	80020ec <HAL_GetTick>
 80050bc:	0003      	movs	r3, r0
 80050be:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050c0:	4b3a      	ldr	r3, [pc, #232]	; (80051ac <SPI_WaitFlagStateUntilTimeout+0x114>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	015b      	lsls	r3, r3, #5
 80050c6:	0d1b      	lsrs	r3, r3, #20
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	4353      	muls	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ce:	e058      	b.n	8005182 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	d055      	beq.n	8005182 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050d6:	f7fd f809 	bl	80020ec <HAL_GetTick>
 80050da:	0002      	movs	r2, r0
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d902      	bls.n	80050ec <SPI_WaitFlagStateUntilTimeout+0x54>
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d142      	bne.n	8005172 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	21e0      	movs	r1, #224	; 0xe0
 80050f8:	438a      	bics	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	2382      	movs	r3, #130	; 0x82
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	429a      	cmp	r2, r3
 8005106:	d113      	bne.n	8005130 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	2380      	movs	r3, #128	; 0x80
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	429a      	cmp	r2, r3
 8005112:	d005      	beq.n	8005120 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	429a      	cmp	r2, r3
 800511e:	d107      	bne.n	8005130 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2140      	movs	r1, #64	; 0x40
 800512c:	438a      	bics	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	019b      	lsls	r3, r3, #6
 8005138:	429a      	cmp	r2, r3
 800513a:	d110      	bne.n	800515e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	491a      	ldr	r1, [pc, #104]	; (80051b0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005148:	400a      	ands	r2, r1
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2180      	movs	r1, #128	; 0x80
 8005158:	0189      	lsls	r1, r1, #6
 800515a:	430a      	orrs	r2, r1
 800515c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	225d      	movs	r2, #93	; 0x5d
 8005162:	2101      	movs	r1, #1
 8005164:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	225c      	movs	r2, #92	; 0x5c
 800516a:	2100      	movs	r1, #0
 800516c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e017      	b.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3b01      	subs	r3, #1
 8005180:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	4013      	ands	r3, r2
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	425a      	negs	r2, r3
 8005192:	4153      	adcs	r3, r2
 8005194:	b2db      	uxtb	r3, r3
 8005196:	001a      	movs	r2, r3
 8005198:	1dfb      	adds	r3, r7, #7
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d197      	bne.n	80050d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	0018      	movs	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b008      	add	sp, #32
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	20000000 	.word	0x20000000
 80051b0:	ffffdfff 	.word	0xffffdfff

080051b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08a      	sub	sp, #40	; 0x28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051c2:	2317      	movs	r3, #23
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051ca:	f7fc ff8f 	bl	80020ec <HAL_GetTick>
 80051ce:	0002      	movs	r2, r0
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	18d3      	adds	r3, r2, r3
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80051da:	f7fc ff87 	bl	80020ec <HAL_GetTick>
 80051de:	0003      	movs	r3, r0
 80051e0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051ea:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	0013      	movs	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	189b      	adds	r3, r3, r2
 80051f4:	00da      	lsls	r2, r3, #3
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	0d1b      	lsrs	r3, r3, #20
 80051fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fc:	4353      	muls	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005200:	e068      	b.n	80052d4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	23c0      	movs	r3, #192	; 0xc0
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	429a      	cmp	r2, r3
 800520a:	d10a      	bne.n	8005222 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d107      	bne.n	8005222 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	2117      	movs	r1, #23
 800521a:	187b      	adds	r3, r7, r1
 800521c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800521e:	187b      	adds	r3, r7, r1
 8005220:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	3301      	adds	r3, #1
 8005226:	d055      	beq.n	80052d4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005228:	f7fc ff60 	bl	80020ec <HAL_GetTick>
 800522c:	0002      	movs	r2, r0
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	429a      	cmp	r2, r3
 8005236:	d902      	bls.n	800523e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d142      	bne.n	80052c4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	21e0      	movs	r1, #224	; 0xe0
 800524a:	438a      	bics	r2, r1
 800524c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	2382      	movs	r3, #130	; 0x82
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	429a      	cmp	r2, r3
 8005258:	d113      	bne.n	8005282 <SPI_WaitFifoStateUntilTimeout+0xce>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	429a      	cmp	r2, r3
 8005264:	d005      	beq.n	8005272 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	429a      	cmp	r2, r3
 8005270:	d107      	bne.n	8005282 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2140      	movs	r1, #64	; 0x40
 800527e:	438a      	bics	r2, r1
 8005280:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	019b      	lsls	r3, r3, #6
 800528a:	429a      	cmp	r2, r3
 800528c:	d110      	bne.n	80052b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4916      	ldr	r1, [pc, #88]	; (80052f4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800529a:	400a      	ands	r2, r1
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	0189      	lsls	r1, r1, #6
 80052ac:	430a      	orrs	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	225d      	movs	r2, #93	; 0x5d
 80052b4:	2101      	movs	r1, #1
 80052b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	225c      	movs	r2, #92	; 0x5c
 80052bc:	2100      	movs	r1, #0
 80052be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e010      	b.n	80052e6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4013      	ands	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d18e      	bne.n	8005202 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	0018      	movs	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b00a      	add	sp, #40	; 0x28
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	20000000 	.word	0x20000000
 80052f4:	ffffdfff 	.word	0xffffdfff

080052f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	23c0      	movs	r3, #192	; 0xc0
 8005308:	0159      	lsls	r1, r3, #5
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	0013      	movs	r3, r2
 8005312:	2200      	movs	r2, #0
 8005314:	f7ff ff4e 	bl	80051b4 <SPI_WaitFifoStateUntilTimeout>
 8005318:	1e03      	subs	r3, r0, #0
 800531a:	d007      	beq.n	800532c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005320:	2220      	movs	r2, #32
 8005322:	431a      	orrs	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e027      	b.n	800537c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	0013      	movs	r3, r2
 8005336:	2200      	movs	r2, #0
 8005338:	2180      	movs	r1, #128	; 0x80
 800533a:	f7ff fead 	bl	8005098 <SPI_WaitFlagStateUntilTimeout>
 800533e:	1e03      	subs	r3, r0, #0
 8005340:	d007      	beq.n	8005352 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005346:	2220      	movs	r2, #32
 8005348:	431a      	orrs	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e014      	b.n	800537c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	23c0      	movs	r3, #192	; 0xc0
 8005356:	00d9      	lsls	r1, r3, #3
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	0013      	movs	r3, r2
 8005360:	2200      	movs	r2, #0
 8005362:	f7ff ff27 	bl	80051b4 <SPI_WaitFifoStateUntilTimeout>
 8005366:	1e03      	subs	r3, r0, #0
 8005368:	d007      	beq.n	800537a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536e:	2220      	movs	r2, #32
 8005370:	431a      	orrs	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e000      	b.n	800537c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	0018      	movs	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	b004      	add	sp, #16
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e04a      	b.n	800542c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	223d      	movs	r2, #61	; 0x3d
 800539a:	5c9b      	ldrb	r3, [r3, r2]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d107      	bne.n	80053b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	223c      	movs	r2, #60	; 0x3c
 80053a6:	2100      	movs	r1, #0
 80053a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7fc fcf3 	bl	8001d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	223d      	movs	r2, #61	; 0x3d
 80053b6:	2102      	movs	r1, #2
 80053b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3304      	adds	r3, #4
 80053c2:	0019      	movs	r1, r3
 80053c4:	0010      	movs	r0, r2
 80053c6:	f000 fd7b 	bl	8005ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2248      	movs	r2, #72	; 0x48
 80053ce:	2101      	movs	r1, #1
 80053d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	223e      	movs	r2, #62	; 0x3e
 80053d6:	2101      	movs	r1, #1
 80053d8:	5499      	strb	r1, [r3, r2]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	223f      	movs	r2, #63	; 0x3f
 80053de:	2101      	movs	r1, #1
 80053e0:	5499      	strb	r1, [r3, r2]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2240      	movs	r2, #64	; 0x40
 80053e6:	2101      	movs	r1, #1
 80053e8:	5499      	strb	r1, [r3, r2]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2241      	movs	r2, #65	; 0x41
 80053ee:	2101      	movs	r1, #1
 80053f0:	5499      	strb	r1, [r3, r2]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2242      	movs	r2, #66	; 0x42
 80053f6:	2101      	movs	r1, #1
 80053f8:	5499      	strb	r1, [r3, r2]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2243      	movs	r2, #67	; 0x43
 80053fe:	2101      	movs	r1, #1
 8005400:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2244      	movs	r2, #68	; 0x44
 8005406:	2101      	movs	r1, #1
 8005408:	5499      	strb	r1, [r3, r2]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2245      	movs	r2, #69	; 0x45
 800540e:	2101      	movs	r1, #1
 8005410:	5499      	strb	r1, [r3, r2]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2246      	movs	r2, #70	; 0x46
 8005416:	2101      	movs	r1, #1
 8005418:	5499      	strb	r1, [r3, r2]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2247      	movs	r2, #71	; 0x47
 800541e:	2101      	movs	r1, #1
 8005420:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	223d      	movs	r2, #61	; 0x3d
 8005426:	2101      	movs	r1, #1
 8005428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b002      	add	sp, #8
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	223d      	movs	r2, #61	; 0x3d
 8005440:	5c9b      	ldrb	r3, [r3, r2]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	d001      	beq.n	800544c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e035      	b.n	80054b8 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	223d      	movs	r2, #61	; 0x3d
 8005450:	2102      	movs	r1, #2
 8005452:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <HAL_TIM_Base_Start+0x8c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00a      	beq.n	8005474 <HAL_TIM_Base_Start+0x40>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	05db      	lsls	r3, r3, #23
 8005466:	429a      	cmp	r2, r3
 8005468:	d004      	beq.n	8005474 <HAL_TIM_Base_Start+0x40>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <HAL_TIM_Base_Start+0x90>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d116      	bne.n	80054a2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <HAL_TIM_Base_Start+0x94>)
 800547c:	4013      	ands	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b06      	cmp	r3, #6
 8005484:	d016      	beq.n	80054b4 <HAL_TIM_Base_Start+0x80>
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	025b      	lsls	r3, r3, #9
 800548c:	429a      	cmp	r2, r3
 800548e:	d011      	beq.n	80054b4 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2101      	movs	r1, #1
 800549c:	430a      	orrs	r2, r1
 800549e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a0:	e008      	b.n	80054b4 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2101      	movs	r1, #1
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e000      	b.n	80054b6 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	0018      	movs	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b004      	add	sp, #16
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40000400 	.word	0x40000400
 80054c8:	00010007 	.word	0x00010007

080054cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <HAL_TIM_Base_Stop+0x44>)
 80054dc:	4013      	ands	r3, r2
 80054de:	d10d      	bne.n	80054fc <HAL_TIM_Base_Stop+0x30>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	4a0b      	ldr	r2, [pc, #44]	; (8005514 <HAL_TIM_Base_Stop+0x48>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	d107      	bne.n	80054fc <HAL_TIM_Base_Stop+0x30>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2101      	movs	r1, #1
 80054f8:	438a      	bics	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	223d      	movs	r2, #61	; 0x3d
 8005500:	2101      	movs	r1, #1
 8005502:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	0018      	movs	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	b002      	add	sp, #8
 800550c:	bd80      	pop	{r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	00001111 	.word	0x00001111
 8005514:	00000444 	.word	0x00000444

08005518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	223d      	movs	r2, #61	; 0x3d
 8005524:	5c9b      	ldrb	r3, [r3, r2]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d001      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e03d      	b.n	80055ac <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	223d      	movs	r2, #61	; 0x3d
 8005534:	2102      	movs	r1, #2
 8005536:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2101      	movs	r1, #1
 8005544:	430a      	orrs	r2, r1
 8005546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <HAL_TIM_Base_Start_IT+0x9c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00a      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x50>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	05db      	lsls	r3, r3, #23
 800555a:	429a      	cmp	r2, r3
 800555c:	d004      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x50>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d116      	bne.n	8005596 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	4a13      	ldr	r2, [pc, #76]	; (80055bc <HAL_TIM_Base_Start_IT+0xa4>)
 8005570:	4013      	ands	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b06      	cmp	r3, #6
 8005578:	d016      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x90>
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	025b      	lsls	r3, r3, #9
 8005580:	429a      	cmp	r2, r3
 8005582:	d011      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2101      	movs	r1, #1
 8005590:	430a      	orrs	r2, r1
 8005592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005594:	e008      	b.n	80055a8 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2101      	movs	r1, #1
 80055a2:	430a      	orrs	r2, r1
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e000      	b.n	80055aa <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	0018      	movs	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b004      	add	sp, #16
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40000400 	.word	0x40000400
 80055bc:	00010007 	.word	0x00010007

080055c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2101      	movs	r1, #1
 80055d4:	438a      	bics	r2, r1
 80055d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	4a0d      	ldr	r2, [pc, #52]	; (8005614 <HAL_TIM_Base_Stop_IT+0x54>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	d10d      	bne.n	8005600 <HAL_TIM_Base_Stop_IT+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <HAL_TIM_Base_Stop_IT+0x58>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	d107      	bne.n	8005600 <HAL_TIM_Base_Stop_IT+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2101      	movs	r1, #1
 80055fc:	438a      	bics	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	223d      	movs	r2, #61	; 0x3d
 8005604:	2101      	movs	r1, #1
 8005606:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	0018      	movs	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	b002      	add	sp, #8
 8005610:	bd80      	pop	{r7, pc}
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	00001111 	.word	0x00001111
 8005618:	00000444 	.word	0x00000444

0800561c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e04a      	b.n	80056c4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	223d      	movs	r2, #61	; 0x3d
 8005632:	5c9b      	ldrb	r3, [r3, r2]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	223c      	movs	r2, #60	; 0x3c
 800563e:	2100      	movs	r1, #0
 8005640:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0018      	movs	r0, r3
 8005646:	f000 f841 	bl	80056cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	223d      	movs	r2, #61	; 0x3d
 800564e:	2102      	movs	r1, #2
 8005650:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3304      	adds	r3, #4
 800565a:	0019      	movs	r1, r3
 800565c:	0010      	movs	r0, r2
 800565e:	f000 fc2f 	bl	8005ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2248      	movs	r2, #72	; 0x48
 8005666:	2101      	movs	r1, #1
 8005668:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	223e      	movs	r2, #62	; 0x3e
 800566e:	2101      	movs	r1, #1
 8005670:	5499      	strb	r1, [r3, r2]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	223f      	movs	r2, #63	; 0x3f
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2240      	movs	r2, #64	; 0x40
 800567e:	2101      	movs	r1, #1
 8005680:	5499      	strb	r1, [r3, r2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2241      	movs	r2, #65	; 0x41
 8005686:	2101      	movs	r1, #1
 8005688:	5499      	strb	r1, [r3, r2]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2242      	movs	r2, #66	; 0x42
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2243      	movs	r2, #67	; 0x43
 8005696:	2101      	movs	r1, #1
 8005698:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2244      	movs	r2, #68	; 0x44
 800569e:	2101      	movs	r1, #1
 80056a0:	5499      	strb	r1, [r3, r2]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2245      	movs	r2, #69	; 0x45
 80056a6:	2101      	movs	r1, #1
 80056a8:	5499      	strb	r1, [r3, r2]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2246      	movs	r2, #70	; 0x46
 80056ae:	2101      	movs	r1, #1
 80056b0:	5499      	strb	r1, [r3, r2]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2247      	movs	r2, #71	; 0x47
 80056b6:	2101      	movs	r1, #1
 80056b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	223d      	movs	r2, #61	; 0x3d
 80056be:	2101      	movs	r1, #1
 80056c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	0018      	movs	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b002      	add	sp, #8
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b002      	add	sp, #8
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d108      	bne.n	80056fe <HAL_TIM_PWM_Start+0x22>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	223e      	movs	r2, #62	; 0x3e
 80056f0:	5c9b      	ldrb	r3, [r3, r2]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	4193      	sbcs	r3, r2
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	e037      	b.n	800576e <HAL_TIM_PWM_Start+0x92>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b04      	cmp	r3, #4
 8005702:	d108      	bne.n	8005716 <HAL_TIM_PWM_Start+0x3a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	223f      	movs	r2, #63	; 0x3f
 8005708:	5c9b      	ldrb	r3, [r3, r2]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	1e5a      	subs	r2, r3, #1
 8005710:	4193      	sbcs	r3, r2
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e02b      	b.n	800576e <HAL_TIM_PWM_Start+0x92>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b08      	cmp	r3, #8
 800571a:	d108      	bne.n	800572e <HAL_TIM_PWM_Start+0x52>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2240      	movs	r2, #64	; 0x40
 8005720:	5c9b      	ldrb	r3, [r3, r2]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	1e5a      	subs	r2, r3, #1
 8005728:	4193      	sbcs	r3, r2
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e01f      	b.n	800576e <HAL_TIM_PWM_Start+0x92>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b0c      	cmp	r3, #12
 8005732:	d108      	bne.n	8005746 <HAL_TIM_PWM_Start+0x6a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2241      	movs	r2, #65	; 0x41
 8005738:	5c9b      	ldrb	r3, [r3, r2]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	1e5a      	subs	r2, r3, #1
 8005740:	4193      	sbcs	r3, r2
 8005742:	b2db      	uxtb	r3, r3
 8005744:	e013      	b.n	800576e <HAL_TIM_PWM_Start+0x92>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b10      	cmp	r3, #16
 800574a:	d108      	bne.n	800575e <HAL_TIM_PWM_Start+0x82>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2242      	movs	r2, #66	; 0x42
 8005750:	5c9b      	ldrb	r3, [r3, r2]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	4193      	sbcs	r3, r2
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e007      	b.n	800576e <HAL_TIM_PWM_Start+0x92>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2243      	movs	r2, #67	; 0x43
 8005762:	5c9b      	ldrb	r3, [r3, r2]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	1e5a      	subs	r2, r3, #1
 800576a:	4193      	sbcs	r3, r2
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e081      	b.n	800587a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Start+0xaa>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	223e      	movs	r2, #62	; 0x3e
 8005780:	2102      	movs	r1, #2
 8005782:	5499      	strb	r1, [r3, r2]
 8005784:	e023      	b.n	80057ce <HAL_TIM_PWM_Start+0xf2>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0xba>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	223f      	movs	r2, #63	; 0x3f
 8005790:	2102      	movs	r1, #2
 8005792:	5499      	strb	r1, [r3, r2]
 8005794:	e01b      	b.n	80057ce <HAL_TIM_PWM_Start+0xf2>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0xca>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2240      	movs	r2, #64	; 0x40
 80057a0:	2102      	movs	r1, #2
 80057a2:	5499      	strb	r1, [r3, r2]
 80057a4:	e013      	b.n	80057ce <HAL_TIM_PWM_Start+0xf2>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_PWM_Start+0xda>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2241      	movs	r2, #65	; 0x41
 80057b0:	2102      	movs	r1, #2
 80057b2:	5499      	strb	r1, [r3, r2]
 80057b4:	e00b      	b.n	80057ce <HAL_TIM_PWM_Start+0xf2>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0xea>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2242      	movs	r2, #66	; 0x42
 80057c0:	2102      	movs	r1, #2
 80057c2:	5499      	strb	r1, [r3, r2]
 80057c4:	e003      	b.n	80057ce <HAL_TIM_PWM_Start+0xf2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2243      	movs	r2, #67	; 0x43
 80057ca:	2102      	movs	r1, #2
 80057cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	2201      	movs	r2, #1
 80057d6:	0018      	movs	r0, r3
 80057d8:	f000 ff20 	bl	800661c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a28      	ldr	r2, [pc, #160]	; (8005884 <HAL_TIM_PWM_Start+0x1a8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d009      	beq.n	80057fa <HAL_TIM_PWM_Start+0x11e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a27      	ldr	r2, [pc, #156]	; (8005888 <HAL_TIM_PWM_Start+0x1ac>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_TIM_PWM_Start+0x11e>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a25      	ldr	r2, [pc, #148]	; (800588c <HAL_TIM_PWM_Start+0x1b0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d101      	bne.n	80057fe <HAL_TIM_PWM_Start+0x122>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_TIM_PWM_Start+0x124>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2180      	movs	r1, #128	; 0x80
 8005810:	0209      	lsls	r1, r1, #8
 8005812:	430a      	orrs	r2, r1
 8005814:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1a      	ldr	r2, [pc, #104]	; (8005884 <HAL_TIM_PWM_Start+0x1a8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00a      	beq.n	8005836 <HAL_TIM_PWM_Start+0x15a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	05db      	lsls	r3, r3, #23
 8005828:	429a      	cmp	r2, r3
 800582a:	d004      	beq.n	8005836 <HAL_TIM_PWM_Start+0x15a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a17      	ldr	r2, [pc, #92]	; (8005890 <HAL_TIM_PWM_Start+0x1b4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d116      	bne.n	8005864 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	4a15      	ldr	r2, [pc, #84]	; (8005894 <HAL_TIM_PWM_Start+0x1b8>)
 800583e:	4013      	ands	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b06      	cmp	r3, #6
 8005846:	d016      	beq.n	8005876 <HAL_TIM_PWM_Start+0x19a>
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	025b      	lsls	r3, r3, #9
 800584e:	429a      	cmp	r2, r3
 8005850:	d011      	beq.n	8005876 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2101      	movs	r1, #1
 800585e:	430a      	orrs	r2, r1
 8005860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	e008      	b.n	8005876 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2101      	movs	r1, #1
 8005870:	430a      	orrs	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e000      	b.n	8005878 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	0018      	movs	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	b004      	add	sp, #16
 8005880:	bd80      	pop	{r7, pc}
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40014400 	.word	0x40014400
 800588c:	40014800 	.word	0x40014800
 8005890:	40000400 	.word	0x40000400
 8005894:	00010007 	.word	0x00010007

08005898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2202      	movs	r2, #2
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d124      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2202      	movs	r2, #2
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d11d      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2203      	movs	r2, #3
 80058c2:	4252      	negs	r2, r2
 80058c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	2203      	movs	r2, #3
 80058d4:	4013      	ands	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	0018      	movs	r0, r3
 80058dc:	f000 fad8 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 80058e0:	e007      	b.n	80058f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 facb 	bl	8005e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f000 fad7 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2204      	movs	r2, #4
 8005900:	4013      	ands	r3, r2
 8005902:	2b04      	cmp	r3, #4
 8005904:	d125      	bne.n	8005952 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2204      	movs	r2, #4
 800590e:	4013      	ands	r3, r2
 8005910:	2b04      	cmp	r3, #4
 8005912:	d11e      	bne.n	8005952 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2205      	movs	r2, #5
 800591a:	4252      	negs	r2, r2
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	23c0      	movs	r3, #192	; 0xc0
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4013      	ands	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 faab 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 800593a:	e007      	b.n	800594c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	0018      	movs	r0, r3
 8005940:	f000 fa9e 	bl	8005e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	0018      	movs	r0, r3
 8005948:	f000 faaa 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2208      	movs	r2, #8
 800595a:	4013      	ands	r3, r2
 800595c:	2b08      	cmp	r3, #8
 800595e:	d124      	bne.n	80059aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2208      	movs	r2, #8
 8005968:	4013      	ands	r3, r2
 800596a:	2b08      	cmp	r3, #8
 800596c:	d11d      	bne.n	80059aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2209      	movs	r2, #9
 8005974:	4252      	negs	r2, r2
 8005976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2204      	movs	r2, #4
 800597c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	2203      	movs	r2, #3
 8005986:	4013      	ands	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	0018      	movs	r0, r3
 800598e:	f000 fa7f 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 8005992:	e007      	b.n	80059a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	0018      	movs	r0, r3
 8005998:	f000 fa72 	bl	8005e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	0018      	movs	r0, r3
 80059a0:	f000 fa7e 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2210      	movs	r2, #16
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d125      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2210      	movs	r2, #16
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d11e      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2211      	movs	r2, #17
 80059cc:	4252      	negs	r2, r2
 80059ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2208      	movs	r2, #8
 80059d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	23c0      	movs	r3, #192	; 0xc0
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4013      	ands	r3, r2
 80059e2:	d004      	beq.n	80059ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f000 fa52 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 80059ec:	e007      	b.n	80059fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f000 fa45 	bl	8005e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	0018      	movs	r0, r3
 80059fa:	f000 fa51 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d10f      	bne.n	8005a32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d108      	bne.n	8005a32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2202      	movs	r2, #2
 8005a26:	4252      	negs	r2, r2
 8005a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f004 fd1b 	bl	800a468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2280      	movs	r2, #128	; 0x80
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d10f      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b80      	cmp	r3, #128	; 0x80
 8005a4c:	d108      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2281      	movs	r2, #129	; 0x81
 8005a54:	4252      	negs	r2, r2
 8005a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 ff18 	bl	8006890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	2380      	movs	r3, #128	; 0x80
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d10e      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2280      	movs	r2, #128	; 0x80
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b80      	cmp	r3, #128	; 0x80
 8005a80:	d107      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <HAL_TIM_IRQHandler+0x260>)
 8005a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f000 ff07 	bl	80068a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2240      	movs	r2, #64	; 0x40
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b40      	cmp	r3, #64	; 0x40
 8005a9e:	d10f      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2240      	movs	r2, #64	; 0x40
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b40      	cmp	r3, #64	; 0x40
 8005aac:	d108      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2241      	movs	r2, #65	; 0x41
 8005ab4:	4252      	negs	r2, r2
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 f9f8 	bl	8005eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d10f      	bne.n	8005aee <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d108      	bne.n	8005aee <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2221      	movs	r2, #33	; 0x21
 8005ae2:	4252      	negs	r2, r2
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f000 fec9 	bl	8006880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b002      	add	sp, #8
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	fffffeff 	.word	0xfffffeff

08005afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	223c      	movs	r2, #60	; 0x3c
 8005b0c:	5c9b      	ldrb	r3, [r3, r2]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0df      	b.n	8005cd6 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	223c      	movs	r2, #60	; 0x3c
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	5499      	strb	r1, [r3, r2]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b14      	cmp	r3, #20
 8005b22:	d900      	bls.n	8005b26 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005b24:	e0d1      	b.n	8005cca <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	009a      	lsls	r2, r3, #2
 8005b2a:	4b6d      	ldr	r3, [pc, #436]	; (8005ce0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8005b2c:	18d3      	adds	r3, r2, r3
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0011      	movs	r1, r2
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f000 fa36 	bl	8005fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2108      	movs	r1, #8
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2104      	movs	r1, #4
 8005b5c:	438a      	bics	r2, r1
 8005b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6999      	ldr	r1, [r3, #24]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	619a      	str	r2, [r3, #24]
      break;
 8005b72:	e0ab      	b.n	8005ccc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	0011      	movs	r1, r2
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f000 fa95 	bl	80060ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699a      	ldr	r2, [r3, #24]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2180      	movs	r1, #128	; 0x80
 8005b8e:	0109      	lsls	r1, r1, #4
 8005b90:	430a      	orrs	r2, r1
 8005b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4951      	ldr	r1, [pc, #324]	; (8005ce4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005ba0:	400a      	ands	r2, r1
 8005ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	021a      	lsls	r2, r3, #8
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	619a      	str	r2, [r3, #24]
      break;
 8005bb8:	e088      	b.n	8005ccc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	0011      	movs	r1, r2
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f000 faf0 	bl	80061a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2108      	movs	r1, #8
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69da      	ldr	r2, [r3, #28]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2104      	movs	r1, #4
 8005be4:	438a      	bics	r2, r1
 8005be6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69d9      	ldr	r1, [r3, #28]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	61da      	str	r2, [r3, #28]
      break;
 8005bfa:	e067      	b.n	8005ccc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	0011      	movs	r1, r2
 8005c04:	0018      	movs	r0, r3
 8005c06:	f000 fb51 	bl	80062ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2180      	movs	r1, #128	; 0x80
 8005c16:	0109      	lsls	r1, r1, #4
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	69da      	ldr	r2, [r3, #28]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	492f      	ldr	r1, [pc, #188]	; (8005ce4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005c28:	400a      	ands	r2, r1
 8005c2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69d9      	ldr	r1, [r3, #28]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	021a      	lsls	r2, r3, #8
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	61da      	str	r2, [r3, #28]
      break;
 8005c40:	e044      	b.n	8005ccc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	0011      	movs	r1, r2
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f000 fb92 	bl	8006374 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2108      	movs	r1, #8
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2104      	movs	r1, #4
 8005c6c:	438a      	bics	r2, r1
 8005c6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c82:	e023      	b.n	8005ccc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	0011      	movs	r1, r2
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f000 fbcb 	bl	8006428 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2180      	movs	r1, #128	; 0x80
 8005c9e:	0109      	lsls	r1, r1, #4
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	490d      	ldr	r1, [pc, #52]	; (8005ce4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005cb0:	400a      	ands	r2, r1
 8005cb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	021a      	lsls	r2, r3, #8
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cc8:	e000      	b.n	8005ccc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8005cca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	223c      	movs	r2, #60	; 0x3c
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	b004      	add	sp, #16
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	0800c09c 	.word	0x0800c09c
 8005ce4:	fffffbff 	.word	0xfffffbff

08005ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	223c      	movs	r2, #60	; 0x3c
 8005cf6:	5c9b      	ldrb	r3, [r3, r2]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIM_ConfigClockSource+0x18>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e0b7      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x188>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	223c      	movs	r2, #60	; 0x3c
 8005d04:	2101      	movs	r1, #1
 8005d06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	223d      	movs	r2, #61	; 0x3d
 8005d0c:	2102      	movs	r1, #2
 8005d0e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a57      	ldr	r2, [pc, #348]	; (8005e78 <HAL_TIM_ConfigClockSource+0x190>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a56      	ldr	r2, [pc, #344]	; (8005e7c <HAL_TIM_ConfigClockSource+0x194>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2280      	movs	r2, #128	; 0x80
 8005d36:	0192      	lsls	r2, r2, #6
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d040      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0xd6>
 8005d3c:	2280      	movs	r2, #128	; 0x80
 8005d3e:	0192      	lsls	r2, r2, #6
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d900      	bls.n	8005d46 <HAL_TIM_ConfigClockSource+0x5e>
 8005d44:	e088      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x170>
 8005d46:	2280      	movs	r2, #128	; 0x80
 8005d48:	0152      	lsls	r2, r2, #5
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d100      	bne.n	8005d50 <HAL_TIM_ConfigClockSource+0x68>
 8005d4e:	e085      	b.n	8005e5c <HAL_TIM_ConfigClockSource+0x174>
 8005d50:	2280      	movs	r2, #128	; 0x80
 8005d52:	0152      	lsls	r2, r2, #5
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d900      	bls.n	8005d5a <HAL_TIM_ConfigClockSource+0x72>
 8005d58:	e07e      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x170>
 8005d5a:	2b70      	cmp	r3, #112	; 0x70
 8005d5c:	d018      	beq.n	8005d90 <HAL_TIM_ConfigClockSource+0xa8>
 8005d5e:	d900      	bls.n	8005d62 <HAL_TIM_ConfigClockSource+0x7a>
 8005d60:	e07a      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x170>
 8005d62:	2b60      	cmp	r3, #96	; 0x60
 8005d64:	d04f      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x11e>
 8005d66:	d900      	bls.n	8005d6a <HAL_TIM_ConfigClockSource+0x82>
 8005d68:	e076      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x170>
 8005d6a:	2b50      	cmp	r3, #80	; 0x50
 8005d6c:	d03b      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0xfe>
 8005d6e:	d900      	bls.n	8005d72 <HAL_TIM_ConfigClockSource+0x8a>
 8005d70:	e072      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x170>
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d057      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x13e>
 8005d76:	d900      	bls.n	8005d7a <HAL_TIM_ConfigClockSource+0x92>
 8005d78:	e06e      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x170>
 8005d7a:	2b30      	cmp	r3, #48	; 0x30
 8005d7c:	d063      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x15e>
 8005d7e:	d86b      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x170>
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d060      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x15e>
 8005d84:	d868      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x170>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d05d      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x15e>
 8005d8a:	2b10      	cmp	r3, #16
 8005d8c:	d05b      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d8e:	e063      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6899      	ldr	r1, [r3, #8]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f000 fc1c 	bl	80065dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2277      	movs	r2, #119	; 0x77
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	609a      	str	r2, [r3, #8]
      break;
 8005dbc:	e04f      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6899      	ldr	r1, [r3, #8]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f000 fc05 	bl	80065dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2180      	movs	r1, #128	; 0x80
 8005dde:	01c9      	lsls	r1, r1, #7
 8005de0:	430a      	orrs	r2, r1
 8005de2:	609a      	str	r2, [r3, #8]
      break;
 8005de4:	e03b      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	001a      	movs	r2, r3
 8005df4:	f000 fb76 	bl	80064e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2150      	movs	r1, #80	; 0x50
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f000 fbd0 	bl	80065a4 <TIM_ITRx_SetConfig>
      break;
 8005e04:	e02b      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	001a      	movs	r2, r3
 8005e14:	f000 fb94 	bl	8006540 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2160      	movs	r1, #96	; 0x60
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f000 fbc0 	bl	80065a4 <TIM_ITRx_SetConfig>
      break;
 8005e24:	e01b      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6859      	ldr	r1, [r3, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	001a      	movs	r2, r3
 8005e34:	f000 fb56 	bl	80064e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2140      	movs	r1, #64	; 0x40
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fbb0 	bl	80065a4 <TIM_ITRx_SetConfig>
      break;
 8005e44:	e00b      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	0019      	movs	r1, r3
 8005e50:	0010      	movs	r0, r2
 8005e52:	f000 fba7 	bl	80065a4 <TIM_ITRx_SetConfig>
        break;
 8005e56:	e002      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	e000      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005e5c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	223d      	movs	r2, #61	; 0x3d
 8005e62:	2101      	movs	r1, #1
 8005e64:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	223c      	movs	r2, #60	; 0x3c
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b004      	add	sp, #16
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	ffceff88 	.word	0xffceff88
 8005e7c:	ffff00ff 	.word	0xffff00ff

08005e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e88:	46c0      	nop			; (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b002      	add	sp, #8
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e98:	46c0      	nop			; (mov r8, r8)
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	b002      	add	sp, #8
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b002      	add	sp, #8
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eb8:	46c0      	nop			; (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b002      	add	sp, #8
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a30      	ldr	r2, [pc, #192]	; (8005f94 <TIM_Base_SetConfig+0xd4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d008      	beq.n	8005eea <TIM_Base_SetConfig+0x2a>
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	05db      	lsls	r3, r3, #23
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d003      	beq.n	8005eea <TIM_Base_SetConfig+0x2a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2c      	ldr	r2, [pc, #176]	; (8005f98 <TIM_Base_SetConfig+0xd8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d108      	bne.n	8005efc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2270      	movs	r2, #112	; 0x70
 8005eee:	4393      	bics	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a25      	ldr	r2, [pc, #148]	; (8005f94 <TIM_Base_SetConfig+0xd4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d014      	beq.n	8005f2e <TIM_Base_SetConfig+0x6e>
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	05db      	lsls	r3, r3, #23
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d00f      	beq.n	8005f2e <TIM_Base_SetConfig+0x6e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <TIM_Base_SetConfig+0xd8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00b      	beq.n	8005f2e <TIM_Base_SetConfig+0x6e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a20      	ldr	r2, [pc, #128]	; (8005f9c <TIM_Base_SetConfig+0xdc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d007      	beq.n	8005f2e <TIM_Base_SetConfig+0x6e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <TIM_Base_SetConfig+0xe0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d003      	beq.n	8005f2e <TIM_Base_SetConfig+0x6e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1e      	ldr	r2, [pc, #120]	; (8005fa4 <TIM_Base_SetConfig+0xe4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d108      	bne.n	8005f40 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <TIM_Base_SetConfig+0xe8>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	4393      	bics	r3, r2
 8005f46:	001a      	movs	r2, r3
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a0a      	ldr	r2, [pc, #40]	; (8005f94 <TIM_Base_SetConfig+0xd4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d007      	beq.n	8005f7e <TIM_Base_SetConfig+0xbe>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a0b      	ldr	r2, [pc, #44]	; (8005fa0 <TIM_Base_SetConfig+0xe0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_Base_SetConfig+0xbe>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <TIM_Base_SetConfig+0xe4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d103      	bne.n	8005f86 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	615a      	str	r2, [r3, #20]
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b004      	add	sp, #16
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40002000 	.word	0x40002000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800
 8005fa8:	fffffcff 	.word	0xfffffcff

08005fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	4393      	bics	r3, r2
 8005fbe:	001a      	movs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a2e      	ldr	r2, [pc, #184]	; (8006094 <TIM_OC1_SetConfig+0xe8>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2203      	movs	r2, #3
 8005fe2:	4393      	bics	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	4393      	bics	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a24      	ldr	r2, [pc, #144]	; (8006098 <TIM_OC1_SetConfig+0xec>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d007      	beq.n	800601a <TIM_OC1_SetConfig+0x6e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a23      	ldr	r2, [pc, #140]	; (800609c <TIM_OC1_SetConfig+0xf0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d003      	beq.n	800601a <TIM_OC1_SetConfig+0x6e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a22      	ldr	r2, [pc, #136]	; (80060a0 <TIM_OC1_SetConfig+0xf4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d10c      	bne.n	8006034 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2208      	movs	r2, #8
 800601e:	4393      	bics	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2204      	movs	r2, #4
 8006030:	4393      	bics	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a18      	ldr	r2, [pc, #96]	; (8006098 <TIM_OC1_SetConfig+0xec>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_OC1_SetConfig+0xa0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a17      	ldr	r2, [pc, #92]	; (800609c <TIM_OC1_SetConfig+0xf0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_OC1_SetConfig+0xa0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a16      	ldr	r2, [pc, #88]	; (80060a0 <TIM_OC1_SetConfig+0xf4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d111      	bne.n	8006070 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4a15      	ldr	r2, [pc, #84]	; (80060a4 <TIM_OC1_SetConfig+0xf8>)
 8006050:	4013      	ands	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <TIM_OC1_SetConfig+0xfc>)
 8006058:	4013      	ands	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	621a      	str	r2, [r3, #32]
}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	46bd      	mov	sp, r7
 800608e:	b006      	add	sp, #24
 8006090:	bd80      	pop	{r7, pc}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	fffeff8f 	.word	0xfffeff8f
 8006098:	40012c00 	.word	0x40012c00
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800
 80060a4:	fffffeff 	.word	0xfffffeff
 80060a8:	fffffdff 	.word	0xfffffdff

080060ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	2210      	movs	r2, #16
 80060bc:	4393      	bics	r3, r2
 80060be:	001a      	movs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a2c      	ldr	r2, [pc, #176]	; (800618c <TIM_OC2_SetConfig+0xe0>)
 80060da:	4013      	ands	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a2b      	ldr	r2, [pc, #172]	; (8006190 <TIM_OC2_SetConfig+0xe4>)
 80060e2:	4013      	ands	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2220      	movs	r2, #32
 80060f6:	4393      	bics	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a22      	ldr	r2, [pc, #136]	; (8006194 <TIM_OC2_SetConfig+0xe8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d10d      	bne.n	800612a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2280      	movs	r2, #128	; 0x80
 8006112:	4393      	bics	r3, r2
 8006114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2240      	movs	r2, #64	; 0x40
 8006126:	4393      	bics	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <TIM_OC2_SetConfig+0xe8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d007      	beq.n	8006142 <TIM_OC2_SetConfig+0x96>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a18      	ldr	r2, [pc, #96]	; (8006198 <TIM_OC2_SetConfig+0xec>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d003      	beq.n	8006142 <TIM_OC2_SetConfig+0x96>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a17      	ldr	r2, [pc, #92]	; (800619c <TIM_OC2_SetConfig+0xf0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d113      	bne.n	800616a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <TIM_OC2_SetConfig+0xf4>)
 8006146:	4013      	ands	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <TIM_OC2_SetConfig+0xf8>)
 800614e:	4013      	ands	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	621a      	str	r2, [r3, #32]
}
 8006184:	46c0      	nop			; (mov r8, r8)
 8006186:	46bd      	mov	sp, r7
 8006188:	b006      	add	sp, #24
 800618a:	bd80      	pop	{r7, pc}
 800618c:	feff8fff 	.word	0xfeff8fff
 8006190:	fffffcff 	.word	0xfffffcff
 8006194:	40012c00 	.word	0x40012c00
 8006198:	40014400 	.word	0x40014400
 800619c:	40014800 	.word	0x40014800
 80061a0:	fffffbff 	.word	0xfffffbff
 80061a4:	fffff7ff 	.word	0xfffff7ff

080061a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	4a33      	ldr	r2, [pc, #204]	; (8006284 <TIM_OC3_SetConfig+0xdc>)
 80061b8:	401a      	ands	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a2d      	ldr	r2, [pc, #180]	; (8006288 <TIM_OC3_SetConfig+0xe0>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2203      	movs	r2, #3
 80061dc:	4393      	bics	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	4a27      	ldr	r2, [pc, #156]	; (800628c <TIM_OC3_SetConfig+0xe4>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a23      	ldr	r2, [pc, #140]	; (8006290 <TIM_OC3_SetConfig+0xe8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d10d      	bne.n	8006222 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	4a22      	ldr	r2, [pc, #136]	; (8006294 <TIM_OC3_SetConfig+0xec>)
 800620a:	4013      	ands	r3, r2
 800620c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <TIM_OC3_SetConfig+0xf0>)
 800621e:	4013      	ands	r3, r2
 8006220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1a      	ldr	r2, [pc, #104]	; (8006290 <TIM_OC3_SetConfig+0xe8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d007      	beq.n	800623a <TIM_OC3_SetConfig+0x92>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a1b      	ldr	r2, [pc, #108]	; (800629c <TIM_OC3_SetConfig+0xf4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d003      	beq.n	800623a <TIM_OC3_SetConfig+0x92>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a1a      	ldr	r2, [pc, #104]	; (80062a0 <TIM_OC3_SetConfig+0xf8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d113      	bne.n	8006262 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <TIM_OC3_SetConfig+0xfc>)
 800623e:	4013      	ands	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <TIM_OC3_SetConfig+0x100>)
 8006246:	4013      	ands	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	621a      	str	r2, [r3, #32]
}
 800627c:	46c0      	nop			; (mov r8, r8)
 800627e:	46bd      	mov	sp, r7
 8006280:	b006      	add	sp, #24
 8006282:	bd80      	pop	{r7, pc}
 8006284:	fffffeff 	.word	0xfffffeff
 8006288:	fffeff8f 	.word	0xfffeff8f
 800628c:	fffffdff 	.word	0xfffffdff
 8006290:	40012c00 	.word	0x40012c00
 8006294:	fffff7ff 	.word	0xfffff7ff
 8006298:	fffffbff 	.word	0xfffffbff
 800629c:	40014400 	.word	0x40014400
 80062a0:	40014800 	.word	0x40014800
 80062a4:	ffffefff 	.word	0xffffefff
 80062a8:	ffffdfff 	.word	0xffffdfff

080062ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	4a26      	ldr	r2, [pc, #152]	; (8006354 <TIM_OC4_SetConfig+0xa8>)
 80062bc:	401a      	ands	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4a20      	ldr	r2, [pc, #128]	; (8006358 <TIM_OC4_SetConfig+0xac>)
 80062d8:	4013      	ands	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4a1f      	ldr	r2, [pc, #124]	; (800635c <TIM_OC4_SetConfig+0xb0>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <TIM_OC4_SetConfig+0xb4>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	031b      	lsls	r3, r3, #12
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4313      	orrs	r3, r2
 8006302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a17      	ldr	r2, [pc, #92]	; (8006364 <TIM_OC4_SetConfig+0xb8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <TIM_OC4_SetConfig+0x70>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a16      	ldr	r2, [pc, #88]	; (8006368 <TIM_OC4_SetConfig+0xbc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_OC4_SetConfig+0x70>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a15      	ldr	r2, [pc, #84]	; (800636c <TIM_OC4_SetConfig+0xc0>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d109      	bne.n	8006330 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4a14      	ldr	r2, [pc, #80]	; (8006370 <TIM_OC4_SetConfig+0xc4>)
 8006320:	4013      	ands	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	019b      	lsls	r3, r3, #6
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	46bd      	mov	sp, r7
 800634e:	b006      	add	sp, #24
 8006350:	bd80      	pop	{r7, pc}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	ffffefff 	.word	0xffffefff
 8006358:	feff8fff 	.word	0xfeff8fff
 800635c:	fffffcff 	.word	0xfffffcff
 8006360:	ffffdfff 	.word	0xffffdfff
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40014400 	.word	0x40014400
 800636c:	40014800 	.word	0x40014800
 8006370:	ffffbfff 	.word	0xffffbfff

08006374 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	4a23      	ldr	r2, [pc, #140]	; (8006410 <TIM_OC5_SetConfig+0x9c>)
 8006384:	401a      	ands	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4a1d      	ldr	r2, [pc, #116]	; (8006414 <TIM_OC5_SetConfig+0xa0>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4a19      	ldr	r2, [pc, #100]	; (8006418 <TIM_OC5_SetConfig+0xa4>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	041b      	lsls	r3, r3, #16
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a15      	ldr	r2, [pc, #84]	; (800641c <TIM_OC5_SetConfig+0xa8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_OC5_SetConfig+0x66>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a14      	ldr	r2, [pc, #80]	; (8006420 <TIM_OC5_SetConfig+0xac>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_OC5_SetConfig+0x66>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a13      	ldr	r2, [pc, #76]	; (8006424 <TIM_OC5_SetConfig+0xb0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d109      	bne.n	80063ee <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	4a0c      	ldr	r2, [pc, #48]	; (8006410 <TIM_OC5_SetConfig+0x9c>)
 80063de:	4013      	ands	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	621a      	str	r2, [r3, #32]
}
 8006408:	46c0      	nop			; (mov r8, r8)
 800640a:	46bd      	mov	sp, r7
 800640c:	b006      	add	sp, #24
 800640e:	bd80      	pop	{r7, pc}
 8006410:	fffeffff 	.word	0xfffeffff
 8006414:	fffeff8f 	.word	0xfffeff8f
 8006418:	fffdffff 	.word	0xfffdffff
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40014400 	.word	0x40014400
 8006424:	40014800 	.word	0x40014800

08006428 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	4a24      	ldr	r2, [pc, #144]	; (80064c8 <TIM_OC6_SetConfig+0xa0>)
 8006438:	401a      	ands	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4a1e      	ldr	r2, [pc, #120]	; (80064cc <TIM_OC6_SetConfig+0xa4>)
 8006454:	4013      	ands	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	4a1a      	ldr	r2, [pc, #104]	; (80064d0 <TIM_OC6_SetConfig+0xa8>)
 8006468:	4013      	ands	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	051b      	lsls	r3, r3, #20
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a16      	ldr	r2, [pc, #88]	; (80064d4 <TIM_OC6_SetConfig+0xac>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d007      	beq.n	8006490 <TIM_OC6_SetConfig+0x68>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a15      	ldr	r2, [pc, #84]	; (80064d8 <TIM_OC6_SetConfig+0xb0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_OC6_SetConfig+0x68>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a14      	ldr	r2, [pc, #80]	; (80064dc <TIM_OC6_SetConfig+0xb4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d109      	bne.n	80064a4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <TIM_OC6_SetConfig+0xb8>)
 8006494:	4013      	ands	r3, r2
 8006496:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	029b      	lsls	r3, r3, #10
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	621a      	str	r2, [r3, #32]
}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	46bd      	mov	sp, r7
 80064c2:	b006      	add	sp, #24
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	ffefffff 	.word	0xffefffff
 80064cc:	feff8fff 	.word	0xfeff8fff
 80064d0:	ffdfffff 	.word	0xffdfffff
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800
 80064e0:	fffbffff 	.word	0xfffbffff

080064e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	2201      	movs	r2, #1
 80064fc:	4393      	bics	r3, r2
 80064fe:	001a      	movs	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	22f0      	movs	r2, #240	; 0xf0
 800650e:	4393      	bics	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	011b      	lsls	r3, r3, #4
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	220a      	movs	r2, #10
 8006520:	4393      	bics	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	621a      	str	r2, [r3, #32]
}
 8006538:	46c0      	nop			; (mov r8, r8)
 800653a:	46bd      	mov	sp, r7
 800653c:	b006      	add	sp, #24
 800653e:	bd80      	pop	{r7, pc}

08006540 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	2210      	movs	r2, #16
 8006552:	4393      	bics	r3, r2
 8006554:	001a      	movs	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	4a0d      	ldr	r2, [pc, #52]	; (80065a0 <TIM_TI2_ConfigInputStage+0x60>)
 800656a:	4013      	ands	r3, r2
 800656c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	031b      	lsls	r3, r3, #12
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	22a0      	movs	r2, #160	; 0xa0
 800657c:	4393      	bics	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	621a      	str	r2, [r3, #32]
}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	46bd      	mov	sp, r7
 800659a:	b006      	add	sp, #24
 800659c:	bd80      	pop	{r7, pc}
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	ffff0fff 	.word	0xffff0fff

080065a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <TIM_ITRx_SetConfig+0x34>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	2207      	movs	r2, #7
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	609a      	str	r2, [r3, #8]
}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	46bd      	mov	sp, r7
 80065d2:	b004      	add	sp, #16
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	ffcfff8f 	.word	0xffcfff8f

080065dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	4a09      	ldr	r2, [pc, #36]	; (8006618 <TIM_ETR_SetConfig+0x3c>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	021a      	lsls	r2, r3, #8
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	431a      	orrs	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4313      	orrs	r3, r2
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	609a      	str	r2, [r3, #8]
}
 8006610:	46c0      	nop			; (mov r8, r8)
 8006612:	46bd      	mov	sp, r7
 8006614:	b006      	add	sp, #24
 8006616:	bd80      	pop	{r7, pc}
 8006618:	ffff00ff 	.word	0xffff00ff

0800661c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	221f      	movs	r2, #31
 800662c:	4013      	ands	r3, r2
 800662e:	2201      	movs	r2, #1
 8006630:	409a      	lsls	r2, r3
 8006632:	0013      	movs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	43d2      	mvns	r2, r2
 800663e:	401a      	ands	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	211f      	movs	r1, #31
 800664c:	400b      	ands	r3, r1
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	4099      	lsls	r1, r3
 8006652:	000b      	movs	r3, r1
 8006654:	431a      	orrs	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	46c0      	nop			; (mov r8, r8)
 800665c:	46bd      	mov	sp, r7
 800665e:	b006      	add	sp, #24
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	223c      	movs	r2, #60	; 0x3c
 8006672:	5c9b      	ldrb	r3, [r3, r2]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006678:	2302      	movs	r3, #2
 800667a:	e050      	b.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	223c      	movs	r2, #60	; 0x3c
 8006680:	2101      	movs	r1, #1
 8006682:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	223d      	movs	r2, #61	; 0x3d
 8006688:	2102      	movs	r1, #2
 800668a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a21      	ldr	r2, [pc, #132]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d108      	bne.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4a20      	ldr	r2, [pc, #128]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2270      	movs	r2, #112	; 0x70
 80066bc:	4393      	bics	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a14      	ldr	r2, [pc, #80]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00a      	beq.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	05db      	lsls	r3, r3, #23
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d004      	beq.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a10      	ldr	r2, [pc, #64]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d10c      	bne.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2280      	movs	r2, #128	; 0x80
 80066f6:	4393      	bics	r3, r2
 80066f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	4313      	orrs	r3, r2
 8006702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	223d      	movs	r2, #61	; 0x3d
 8006710:	2101      	movs	r1, #1
 8006712:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	223c      	movs	r2, #60	; 0x3c
 8006718:	2100      	movs	r1, #0
 800671a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	0018      	movs	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	b004      	add	sp, #16
 8006724:	bd80      	pop	{r7, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	40012c00 	.word	0x40012c00
 800672c:	ff0fffff 	.word	0xff0fffff
 8006730:	40000400 	.word	0x40000400

08006734 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	223c      	movs	r2, #60	; 0x3c
 8006746:	5c9b      	ldrb	r3, [r3, r2]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800674c:	2302      	movs	r3, #2
 800674e:	e079      	b.n	8006844 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	223c      	movs	r2, #60	; 0x3c
 8006754:	2101      	movs	r1, #1
 8006756:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	22ff      	movs	r2, #255	; 0xff
 800675c:	4393      	bics	r3, r2
 800675e:	001a      	movs	r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a38      	ldr	r2, [pc, #224]	; (800684c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800676c:	401a      	ands	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a35      	ldr	r2, [pc, #212]	; (8006850 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800677a:	401a      	ands	r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a33      	ldr	r2, [pc, #204]	; (8006854 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006788:	401a      	ands	r2, r3
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a30      	ldr	r2, [pc, #192]	; (8006858 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006796:	401a      	ands	r2, r3
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a2e      	ldr	r2, [pc, #184]	; (800685c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80067a4:	401a      	ands	r2, r3
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4a2b      	ldr	r2, [pc, #172]	; (8006860 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80067b2:	401a      	ands	r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a29      	ldr	r2, [pc, #164]	; (8006864 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80067c0:	401a      	ands	r2, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a25      	ldr	r2, [pc, #148]	; (8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d106      	bne.n	80067e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4a24      	ldr	r2, [pc, #144]	; (800686c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80067da:	401a      	ands	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1f      	ldr	r2, [pc, #124]	; (8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d121      	bne.n	8006832 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4a1f      	ldr	r2, [pc, #124]	; (8006870 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80067f2:	401a      	ands	r2, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f8:	051b      	lsls	r3, r3, #20
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006802:	401a      	ands	r2, r3
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	4313      	orrs	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a1a      	ldr	r2, [pc, #104]	; (8006878 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006810:	401a      	ands	r2, r3
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a12      	ldr	r2, [pc, #72]	; (8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d106      	bne.n	8006832 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4a15      	ldr	r2, [pc, #84]	; (800687c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006828:	401a      	ands	r2, r3
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	223c      	movs	r2, #60	; 0x3c
 800683e:	2100      	movs	r1, #0
 8006840:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	0018      	movs	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	b004      	add	sp, #16
 800684a:	bd80      	pop	{r7, pc}
 800684c:	fffffcff 	.word	0xfffffcff
 8006850:	fffffbff 	.word	0xfffffbff
 8006854:	fffff7ff 	.word	0xfffff7ff
 8006858:	ffffefff 	.word	0xffffefff
 800685c:	ffffdfff 	.word	0xffffdfff
 8006860:	ffffbfff 	.word	0xffffbfff
 8006864:	fff0ffff 	.word	0xfff0ffff
 8006868:	40012c00 	.word	0x40012c00
 800686c:	efffffff 	.word	0xefffffff
 8006870:	ff0fffff 	.word	0xff0fffff
 8006874:	feffffff 	.word	0xfeffffff
 8006878:	fdffffff 	.word	0xfdffffff
 800687c:	dfffffff 	.word	0xdfffffff

08006880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006888:	46c0      	nop			; (mov r8, r8)
 800688a:	46bd      	mov	sp, r7
 800688c:	b002      	add	sp, #8
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006898:	46c0      	nop			; (mov r8, r8)
 800689a:	46bd      	mov	sp, r7
 800689c:	b002      	add	sp, #8
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068a8:	46c0      	nop			; (mov r8, r8)
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b002      	add	sp, #8
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <Scope_Init>:
#include "app.h"

void Scope_Init(void) {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
    scope_exit = 0;
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <Scope_Init+0x1c>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	701a      	strb	r2, [r3, #0]
    Scope_Sample_Init();
 80068ba:	f001 fb97 	bl	8007fec <Scope_Sample_Init>
    Scope_UI_Init();
 80068be:	f000 fc53 	bl	8007168 <Scope_UI_Init>
    Scope_Operate_Init();
 80068c2:	f000 fea5 	bl	8007610 <Scope_Operate_Init>
}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	2000018c 	.word	0x2000018c

080068d0 <Scope_DeInit>:

void Scope_DeInit(void) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
    Scope_Sample_DeInit();
 80068d4:	f001 fbb8 	bl	8008048 <Scope_Sample_DeInit>
    Scope_UI_DeInit();
 80068d8:	f000 fc51 	bl	800717e <Scope_UI_DeInit>
    Scope_Operate_DeInit();
 80068dc:	f000 fea4 	bl	8007628 <Scope_Operate_DeInit>
}
 80068e0:	46c0      	nop			; (mov r8, r8)
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <Scope_Loop>:

// 返回1表示退出示波器程序
uint8_t Scope_Loop(void) {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
    Scope_Sample_Try_Process();
 80068ec:	f001 fc26 	bl	800813c <Scope_Sample_Try_Process>
    Scope_UI_Try_Refresh(0);
 80068f0:	2000      	movs	r0, #0
 80068f2:	f000 fc4d 	bl	8007190 <Scope_UI_Try_Refresh>
    Scope_Operate_Try_Process();
 80068f6:	f000 fe9f 	bl	8007638 <Scope_Operate_Try_Process>
    return scope_exit;
 80068fa:	4b02      	ldr	r3, [pc, #8]	; (8006904 <Scope_Loop+0x1c>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
}
 80068fe:	0018      	movs	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	2000018c 	.word	0x2000018c

08006908 <Draw_Dotted_Line_X>:
#include <string.h> // strlen

/*-----------------------------------------------------静态函数-----------------------------------------------------*/

// 画和y轴平行的虚线，space为间隔的像素点数
static void Draw_Dotted_Line_X(uint8_t y, uint8_t x1, uint8_t x2, uint8_t space) {
 8006908:	b5b0      	push	{r4, r5, r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	0005      	movs	r5, r0
 8006910:	000c      	movs	r4, r1
 8006912:	0010      	movs	r0, r2
 8006914:	0019      	movs	r1, r3
 8006916:	1dfb      	adds	r3, r7, #7
 8006918:	1c2a      	adds	r2, r5, #0
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	1dbb      	adds	r3, r7, #6
 800691e:	1c22      	adds	r2, r4, #0
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	1d7b      	adds	r3, r7, #5
 8006924:	1c02      	adds	r2, r0, #0
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	1d3b      	adds	r3, r7, #4
 800692a:	1c0a      	adds	r2, r1, #0
 800692c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = x1; i < x2; i += space)
 800692e:	230f      	movs	r3, #15
 8006930:	18fb      	adds	r3, r7, r3
 8006932:	1dba      	adds	r2, r7, #6
 8006934:	7812      	ldrb	r2, [r2, #0]
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e00f      	b.n	800695a <Draw_Dotted_Line_X+0x52>
        OLED_DrawPoint(i, y, 1);
 800693a:	1dfb      	adds	r3, r7, #7
 800693c:	7819      	ldrb	r1, [r3, #0]
 800693e:	240f      	movs	r4, #15
 8006940:	193b      	adds	r3, r7, r4
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2201      	movs	r2, #1
 8006946:	0018      	movs	r0, r3
 8006948:	f003 f940 	bl	8009bcc <OLED_DrawPoint>
    for (uint8_t i = x1; i < x2; i += space)
 800694c:	193b      	adds	r3, r7, r4
 800694e:	1939      	adds	r1, r7, r4
 8006950:	1d3a      	adds	r2, r7, #4
 8006952:	7809      	ldrb	r1, [r1, #0]
 8006954:	7812      	ldrb	r2, [r2, #0]
 8006956:	188a      	adds	r2, r1, r2
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	230f      	movs	r3, #15
 800695c:	18fa      	adds	r2, r7, r3
 800695e:	1d7b      	adds	r3, r7, #5
 8006960:	7812      	ldrb	r2, [r2, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d3e8      	bcc.n	800693a <Draw_Dotted_Line_X+0x32>
}
 8006968:	46c0      	nop			; (mov r8, r8)
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	46bd      	mov	sp, r7
 800696e:	b004      	add	sp, #16
 8006970:	bdb0      	pop	{r4, r5, r7, pc}

08006972 <Draw_Dotted_Line_Y>:

// 画和y轴平行的虚线，space为间隔的像素点数
static void Draw_Dotted_Line_Y(uint8_t x, uint8_t y1, uint8_t y2, uint8_t space) {
 8006972:	b5b0      	push	{r4, r5, r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	0005      	movs	r5, r0
 800697a:	000c      	movs	r4, r1
 800697c:	0010      	movs	r0, r2
 800697e:	0019      	movs	r1, r3
 8006980:	1dfb      	adds	r3, r7, #7
 8006982:	1c2a      	adds	r2, r5, #0
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	1dbb      	adds	r3, r7, #6
 8006988:	1c22      	adds	r2, r4, #0
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	1d7b      	adds	r3, r7, #5
 800698e:	1c02      	adds	r2, r0, #0
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	1d3b      	adds	r3, r7, #4
 8006994:	1c0a      	adds	r2, r1, #0
 8006996:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = y1; i < y2; i += space)
 8006998:	230f      	movs	r3, #15
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	1dba      	adds	r2, r7, #6
 800699e:	7812      	ldrb	r2, [r2, #0]
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	e00f      	b.n	80069c4 <Draw_Dotted_Line_Y+0x52>
        OLED_DrawPoint(x, i, 1);
 80069a4:	240f      	movs	r4, #15
 80069a6:	193b      	adds	r3, r7, r4
 80069a8:	7819      	ldrb	r1, [r3, #0]
 80069aa:	1dfb      	adds	r3, r7, #7
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2201      	movs	r2, #1
 80069b0:	0018      	movs	r0, r3
 80069b2:	f003 f90b 	bl	8009bcc <OLED_DrawPoint>
    for (uint8_t i = y1; i < y2; i += space)
 80069b6:	193b      	adds	r3, r7, r4
 80069b8:	1939      	adds	r1, r7, r4
 80069ba:	1d3a      	adds	r2, r7, #4
 80069bc:	7809      	ldrb	r1, [r1, #0]
 80069be:	7812      	ldrb	r2, [r2, #0]
 80069c0:	188a      	adds	r2, r1, r2
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	230f      	movs	r3, #15
 80069c6:	18fa      	adds	r2, r7, r3
 80069c8:	1d7b      	adds	r3, r7, #5
 80069ca:	7812      	ldrb	r2, [r2, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d3e8      	bcc.n	80069a4 <Draw_Dotted_Line_Y+0x32>
}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	46c0      	nop			; (mov r8, r8)
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b004      	add	sp, #16
 80069da:	bdb0      	pop	{r4, r5, r7, pc}

080069dc <Voltage_To_Coordinate>:

static uint16_t Voltage_To_Coordinate(float voltage) {
 80069dc:	b5b0      	push	{r4, r5, r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
    int16_t val = (int16_t) ((SCOPE_Y_MIN + SCOPE_Y_MAX) / 2.0f -
                             (voltage / scope_voltage_div[scope_voltage_div_select] * SCOPE_Y_POINTS_DIV));
 80069e4:	4b19      	ldr	r3, [pc, #100]	; (8006a4c <Voltage_To_Coordinate+0x70>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	001a      	movs	r2, r3
 80069ea:	4b19      	ldr	r3, [pc, #100]	; (8006a50 <Voltage_To_Coordinate+0x74>)
 80069ec:	0092      	lsls	r2, r2, #2
 80069ee:	58d3      	ldr	r3, [r2, r3]
 80069f0:	1c19      	adds	r1, r3, #0
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7f9 fef2 	bl	80007dc <__aeabi_fdiv>
 80069f8:	1c03      	adds	r3, r0, #0
 80069fa:	4916      	ldr	r1, [pc, #88]	; (8006a54 <Voltage_To_Coordinate+0x78>)
 80069fc:	1c18      	adds	r0, r3, #0
 80069fe:	f7fa f8b7 	bl	8000b70 <__aeabi_fmul>
 8006a02:	1c03      	adds	r3, r0, #0
    int16_t val = (int16_t) ((SCOPE_Y_MIN + SCOPE_Y_MAX) / 2.0f -
 8006a04:	1c19      	adds	r1, r3, #0
 8006a06:	4814      	ldr	r0, [pc, #80]	; (8006a58 <Voltage_To_Coordinate+0x7c>)
 8006a08:	f7fa f9cc 	bl	8000da4 <__aeabi_fsub>
 8006a0c:	1c03      	adds	r3, r0, #0
 8006a0e:	250e      	movs	r5, #14
 8006a10:	197c      	adds	r4, r7, r5
 8006a12:	1c18      	adds	r0, r3, #0
 8006a14:	f7fa fba4 	bl	8001160 <__aeabi_f2iz>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	8023      	strh	r3, [r4, #0]
    // 限值：上限与下限
    if (val < SCOPE_Y_MIN) val = SCOPE_Y_MIN;
 8006a1c:	197b      	adds	r3, r7, r5
 8006a1e:	2200      	movs	r2, #0
 8006a20:	5e9b      	ldrsh	r3, [r3, r2]
 8006a22:	2b09      	cmp	r3, #9
 8006a24:	dc02      	bgt.n	8006a2c <Voltage_To_Coordinate+0x50>
 8006a26:	197b      	adds	r3, r7, r5
 8006a28:	220a      	movs	r2, #10
 8006a2a:	801a      	strh	r2, [r3, #0]
    if (val > SCOPE_Y_MAX) val = SCOPE_Y_MAX;
 8006a2c:	220e      	movs	r2, #14
 8006a2e:	18bb      	adds	r3, r7, r2
 8006a30:	2100      	movs	r1, #0
 8006a32:	5e5b      	ldrsh	r3, [r3, r1]
 8006a34:	2b64      	cmp	r3, #100	; 0x64
 8006a36:	dd02      	ble.n	8006a3e <Voltage_To_Coordinate+0x62>
 8006a38:	18bb      	adds	r3, r7, r2
 8006a3a:	2264      	movs	r2, #100	; 0x64
 8006a3c:	801a      	strh	r2, [r3, #0]

    return val;
 8006a3e:	230e      	movs	r3, #14
 8006a40:	18fb      	adds	r3, r7, r3
 8006a42:	881b      	ldrh	r3, [r3, #0]
}
 8006a44:	0018      	movs	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	b004      	add	sp, #16
 8006a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8006a4c:	2000001d 	.word	0x2000001d
 8006a50:	0800c194 	.word	0x0800c194
 8006a54:	41100000 	.word	0x41100000
 8006a58:	425c0000 	.word	0x425c0000

08006a5c <Show_Framework>:

static void Show_Framework() {
 8006a5c:	b590      	push	{r4, r7, lr}
 8006a5e:	b089      	sub	sp, #36	; 0x24
 8006a60:	af02      	add	r7, sp, #8
    // 绘制边框
    OLED_DrawLine(SCOPE_X_MIN, SCOPE_Y_MIN, SCOPE_X_MIN, SCOPE_Y_MAX, 1);
 8006a62:	2301      	movs	r3, #1
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	2364      	movs	r3, #100	; 0x64
 8006a68:	2200      	movs	r2, #0
 8006a6a:	210a      	movs	r1, #10
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	f003 f939 	bl	8009ce4 <OLED_DrawLine>
    OLED_DrawLine(SCOPE_X_MIN, SCOPE_Y_MIN, SCOPE_X_MAX, SCOPE_Y_MIN, 1);
 8006a72:	2301      	movs	r3, #1
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	230a      	movs	r3, #10
 8006a78:	227f      	movs	r2, #127	; 0x7f
 8006a7a:	210a      	movs	r1, #10
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f003 f931 	bl	8009ce4 <OLED_DrawLine>
    OLED_DrawLine(SCOPE_X_MAX, SCOPE_Y_MAX, SCOPE_X_MIN, SCOPE_Y_MAX, 1);
 8006a82:	2301      	movs	r3, #1
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	2364      	movs	r3, #100	; 0x64
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2164      	movs	r1, #100	; 0x64
 8006a8c:	207f      	movs	r0, #127	; 0x7f
 8006a8e:	f003 f929 	bl	8009ce4 <OLED_DrawLine>
    OLED_DrawLine(SCOPE_X_MAX, SCOPE_Y_MAX, SCOPE_X_MAX, SCOPE_Y_MIN, 1);
 8006a92:	2301      	movs	r3, #1
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	230a      	movs	r3, #10
 8006a98:	227f      	movs	r2, #127	; 0x7f
 8006a9a:	2164      	movs	r1, #100	; 0x64
 8006a9c:	207f      	movs	r0, #127	; 0x7f
 8006a9e:	f003 f921 	bl	8009ce4 <OLED_DrawLine>

#pragma clang diagnostic push
#pragma ide diagnostic ignored "cert-flp30-c"
    // 绘制刻度线
    // 和x轴平行的线
    Draw_Dotted_Line_X(SCOPE_Y_MIN + (float) SCOPE_Y_NUM / 2, SCOPE_X_MIN, SCOPE_X_MAX, 2);
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	227f      	movs	r2, #127	; 0x7f
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	2037      	movs	r0, #55	; 0x37
 8006aaa:	f7ff ff2d 	bl	8006908 <Draw_Dotted_Line_X>
    for (float i = SCOPE_Y_MIN + (float) SCOPE_Y_NUM / 2 - SCOPE_Y_POINTS_DIV; i > SCOPE_Y_MIN; i -= SCOPE_Y_POINTS_DIV)
 8006aae:	4baf      	ldr	r3, [pc, #700]	; (8006d6c <Show_Framework+0x310>)
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e015      	b.n	8006ae0 <Show_Framework+0x84>
        Draw_Dotted_Line_X((uint8_t) (i + 0.5f), SCOPE_X_MIN, SCOPE_X_MAX, 3);
 8006ab4:	21fc      	movs	r1, #252	; 0xfc
 8006ab6:	0589      	lsls	r1, r1, #22
 8006ab8:	6978      	ldr	r0, [r7, #20]
 8006aba:	f7f9 fcf3 	bl	80004a4 <__aeabi_fadd>
 8006abe:	1c03      	adds	r3, r0, #0
 8006ac0:	1c18      	adds	r0, r3, #0
 8006ac2:	f7f9 fcd7 	bl	8000474 <__aeabi_f2uiz>
 8006ac6:	0003      	movs	r3, r0
 8006ac8:	b2d8      	uxtb	r0, r3
 8006aca:	2303      	movs	r3, #3
 8006acc:	227f      	movs	r2, #127	; 0x7f
 8006ace:	2100      	movs	r1, #0
 8006ad0:	f7ff ff1a 	bl	8006908 <Draw_Dotted_Line_X>
    for (float i = SCOPE_Y_MIN + (float) SCOPE_Y_NUM / 2 - SCOPE_Y_POINTS_DIV; i > SCOPE_Y_MIN; i -= SCOPE_Y_POINTS_DIV)
 8006ad4:	49a6      	ldr	r1, [pc, #664]	; (8006d70 <Show_Framework+0x314>)
 8006ad6:	6978      	ldr	r0, [r7, #20]
 8006ad8:	f7fa f964 	bl	8000da4 <__aeabi_fsub>
 8006adc:	1c03      	adds	r3, r0, #0
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	49a4      	ldr	r1, [pc, #656]	; (8006d74 <Show_Framework+0x318>)
 8006ae2:	6978      	ldr	r0, [r7, #20]
 8006ae4:	f7f9 fcb2 	bl	800044c <__aeabi_fcmpgt>
 8006ae8:	1e03      	subs	r3, r0, #0
 8006aea:	d1e3      	bne.n	8006ab4 <Show_Framework+0x58>
//        OLED_DrawLine(SCOPE_X_MIN, (uint8_t) (i + 0.5f), SCOPE_X_MAX, (uint8_t) (i + 0.5f), 1);
    for (float i = SCOPE_Y_MIN + (float) SCOPE_Y_NUM / 2 + SCOPE_Y_POINTS_DIV; i < SCOPE_Y_MAX; i += SCOPE_Y_POINTS_DIV)
 8006aec:	2385      	movs	r3, #133	; 0x85
 8006aee:	05db      	lsls	r3, r3, #23
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	e015      	b.n	8006b20 <Show_Framework+0xc4>
        Draw_Dotted_Line_X((uint8_t) (i + 0.5f), SCOPE_X_MIN, SCOPE_X_MAX, 3);
 8006af4:	21fc      	movs	r1, #252	; 0xfc
 8006af6:	0589      	lsls	r1, r1, #22
 8006af8:	6938      	ldr	r0, [r7, #16]
 8006afa:	f7f9 fcd3 	bl	80004a4 <__aeabi_fadd>
 8006afe:	1c03      	adds	r3, r0, #0
 8006b00:	1c18      	adds	r0, r3, #0
 8006b02:	f7f9 fcb7 	bl	8000474 <__aeabi_f2uiz>
 8006b06:	0003      	movs	r3, r0
 8006b08:	b2d8      	uxtb	r0, r3
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	227f      	movs	r2, #127	; 0x7f
 8006b0e:	2100      	movs	r1, #0
 8006b10:	f7ff fefa 	bl	8006908 <Draw_Dotted_Line_X>
    for (float i = SCOPE_Y_MIN + (float) SCOPE_Y_NUM / 2 + SCOPE_Y_POINTS_DIV; i < SCOPE_Y_MAX; i += SCOPE_Y_POINTS_DIV)
 8006b14:	4996      	ldr	r1, [pc, #600]	; (8006d70 <Show_Framework+0x314>)
 8006b16:	6938      	ldr	r0, [r7, #16]
 8006b18:	f7f9 fcc4 	bl	80004a4 <__aeabi_fadd>
 8006b1c:	1c03      	adds	r3, r0, #0
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	4995      	ldr	r1, [pc, #596]	; (8006d78 <Show_Framework+0x31c>)
 8006b22:	6938      	ldr	r0, [r7, #16]
 8006b24:	f7f9 fc7e 	bl	8000424 <__aeabi_fcmplt>
 8006b28:	1e03      	subs	r3, r0, #0
 8006b2a:	d1e3      	bne.n	8006af4 <Show_Framework+0x98>
//        OLED_DrawLine(SCOPE_X_MIN, (uint8_t) (i + 0.5f), SCOPE_X_MAX, (uint8_t) (i + 0.5f), 1);

    // 和y轴平行的线
    Draw_Dotted_Line_Y(SCOPE_X_MIN + (float) SCOPE_X_NUM / 2, SCOPE_Y_MIN, SCOPE_Y_MAX, 2);
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	2264      	movs	r2, #100	; 0x64
 8006b30:	210a      	movs	r1, #10
 8006b32:	203f      	movs	r0, #63	; 0x3f
 8006b34:	f7ff ff1d 	bl	8006972 <Draw_Dotted_Line_Y>
    for (float i = SCOPE_X_MIN + (float) SCOPE_X_NUM / 2 - SCOPE_X_POINTS_DIV; i > SCOPE_X_MIN; i -= SCOPE_X_POINTS_DIV)
 8006b38:	4b90      	ldr	r3, [pc, #576]	; (8006d7c <Show_Framework+0x320>)
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	e015      	b.n	8006b6a <Show_Framework+0x10e>
        Draw_Dotted_Line_Y((uint8_t) (i + 0.5f), SCOPE_Y_MIN, SCOPE_Y_MAX, 3);
 8006b3e:	21fc      	movs	r1, #252	; 0xfc
 8006b40:	0589      	lsls	r1, r1, #22
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7f9 fcae 	bl	80004a4 <__aeabi_fadd>
 8006b48:	1c03      	adds	r3, r0, #0
 8006b4a:	1c18      	adds	r0, r3, #0
 8006b4c:	f7f9 fc92 	bl	8000474 <__aeabi_f2uiz>
 8006b50:	0003      	movs	r3, r0
 8006b52:	b2d8      	uxtb	r0, r3
 8006b54:	2303      	movs	r3, #3
 8006b56:	2264      	movs	r2, #100	; 0x64
 8006b58:	210a      	movs	r1, #10
 8006b5a:	f7ff ff0a 	bl	8006972 <Draw_Dotted_Line_Y>
    for (float i = SCOPE_X_MIN + (float) SCOPE_X_NUM / 2 - SCOPE_X_POINTS_DIV; i > SCOPE_X_MIN; i -= SCOPE_X_POINTS_DIV)
 8006b5e:	4988      	ldr	r1, [pc, #544]	; (8006d80 <Show_Framework+0x324>)
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f7fa f91f 	bl	8000da4 <__aeabi_fsub>
 8006b66:	1c03      	adds	r3, r0, #0
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7f9 fc6d 	bl	800044c <__aeabi_fcmpgt>
 8006b72:	1e03      	subs	r3, r0, #0
 8006b74:	d1e3      	bne.n	8006b3e <Show_Framework+0xe2>
//        OLED_DrawLine((uint8_t) (i + 0.5f),SCOPE_Y_MIN, (uint8_t) (i + 0.5f), SCOPE_Y_MAX, 1);
    for (float i = SCOPE_X_MIN + (float) SCOPE_X_NUM / 2 + SCOPE_X_POINTS_DIV; i < SCOPE_X_MAX; i += SCOPE_X_POINTS_DIV)
 8006b76:	4b83      	ldr	r3, [pc, #524]	; (8006d84 <Show_Framework+0x328>)
 8006b78:	60bb      	str	r3, [r7, #8]
 8006b7a:	e015      	b.n	8006ba8 <Show_Framework+0x14c>
        Draw_Dotted_Line_Y((uint8_t) (i + 0.5f), SCOPE_Y_MIN, SCOPE_Y_MAX, 3);
 8006b7c:	21fc      	movs	r1, #252	; 0xfc
 8006b7e:	0589      	lsls	r1, r1, #22
 8006b80:	68b8      	ldr	r0, [r7, #8]
 8006b82:	f7f9 fc8f 	bl	80004a4 <__aeabi_fadd>
 8006b86:	1c03      	adds	r3, r0, #0
 8006b88:	1c18      	adds	r0, r3, #0
 8006b8a:	f7f9 fc73 	bl	8000474 <__aeabi_f2uiz>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	b2d8      	uxtb	r0, r3
 8006b92:	2303      	movs	r3, #3
 8006b94:	2264      	movs	r2, #100	; 0x64
 8006b96:	210a      	movs	r1, #10
 8006b98:	f7ff feeb 	bl	8006972 <Draw_Dotted_Line_Y>
    for (float i = SCOPE_X_MIN + (float) SCOPE_X_NUM / 2 + SCOPE_X_POINTS_DIV; i < SCOPE_X_MAX; i += SCOPE_X_POINTS_DIV)
 8006b9c:	4978      	ldr	r1, [pc, #480]	; (8006d80 <Show_Framework+0x324>)
 8006b9e:	68b8      	ldr	r0, [r7, #8]
 8006ba0:	f7f9 fc80 	bl	80004a4 <__aeabi_fadd>
 8006ba4:	1c03      	adds	r3, r0, #0
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	4977      	ldr	r1, [pc, #476]	; (8006d88 <Show_Framework+0x32c>)
 8006baa:	68b8      	ldr	r0, [r7, #8]
 8006bac:	f7f9 fc3a 	bl	8000424 <__aeabi_fcmplt>
 8006bb0:	1e03      	subs	r3, r0, #0
 8006bb2:	d1e3      	bne.n	8006b7c <Show_Framework+0x120>
//        OLED_DrawLine((uint8_t) (i + 0.5f),SCOPE_Y_MIN , (uint8_t) (i + 0.5f),SCOPE_Y_MAX , 1);
#pragma clang diagnostic pop

    OLED_ShowString(40, 0, "Wave", 8, 1);
 8006bb4:	4a75      	ldr	r2, [pc, #468]	; (8006d8c <Show_Framework+0x330>)
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	2308      	movs	r3, #8
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	2028      	movs	r0, #40	; 0x28
 8006bc0:	f003 fa0a 	bl	8009fd8 <OLED_ShowString>
    OLED_ShowString(80, 0, "Y", 8, 1);
 8006bc4:	4a72      	ldr	r2, [pc, #456]	; (8006d90 <Show_Framework+0x334>)
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	2308      	movs	r3, #8
 8006bcc:	2100      	movs	r1, #0
 8006bce:	2050      	movs	r0, #80	; 0x50
 8006bd0:	f003 fa02 	bl	8009fd8 <OLED_ShowString>

    // 显示刻度选择、触发电平
    uint8_t len;
    switch (scope_key_l_r_func) {
 8006bd4:	4b6f      	ldr	r3, [pc, #444]	; (8006d94 <Show_Framework+0x338>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d076      	beq.n	8006cca <Show_Framework+0x26e>
 8006bdc:	dd00      	ble.n	8006be0 <Show_Framework+0x184>
 8006bde:	e0c0      	b.n	8006d62 <Show_Framework+0x306>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <Show_Framework+0x18e>
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d038      	beq.n	8006c5a <Show_Framework+0x1fe>
            uint16_t val = Voltage_To_Coordinate(scope_tri_voltage);
            OLED_DrawLine(SCOPE_X_MIN, val, SCOPE_X_MAX, val, 1);
            break;

        default:
            break;
 8006be8:	e0bb      	b.n	8006d62 <Show_Framework+0x306>
            OLED_ShowString(0, 0, scope_ms_div_label[scope_ms_div_select], 8, 0);
 8006bea:	4b6b      	ldr	r3, [pc, #428]	; (8006d98 <Show_Framework+0x33c>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	001a      	movs	r2, r3
 8006bf0:	0013      	movs	r3, r2
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	189b      	adds	r3, r3, r2
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	4a68      	ldr	r2, [pc, #416]	; (8006d9c <Show_Framework+0x340>)
 8006bfa:	189a      	adds	r2, r3, r2
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	2308      	movs	r3, #8
 8006c02:	2100      	movs	r1, #0
 8006c04:	2000      	movs	r0, #0
 8006c06:	f003 f9e7 	bl	8009fd8 <OLED_ShowString>
            len = strlen(scope_voltage_div_label[scope_voltage_div_select]);
 8006c0a:	4b65      	ldr	r3, [pc, #404]	; (8006da0 <Show_Framework+0x344>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	001a      	movs	r2, r3
 8006c10:	0013      	movs	r3, r2
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	189b      	adds	r3, r3, r2
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	4a62      	ldr	r2, [pc, #392]	; (8006da4 <Show_Framework+0x348>)
 8006c1a:	189b      	adds	r3, r3, r2
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f7f9 fa71 	bl	8000104 <strlen>
 8006c22:	0002      	movs	r2, r0
 8006c24:	1dfb      	adds	r3, r7, #7
 8006c26:	701a      	strb	r2, [r3, #0]
            OLED_ShowString(127 - len * 6, 0, scope_voltage_div_label[scope_voltage_div_select], 8, 1);
 8006c28:	1dfb      	adds	r3, r7, #7
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	1c1a      	adds	r2, r3, #0
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	18db      	adds	r3, r3, r3
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	337f      	adds	r3, #127	; 0x7f
 8006c38:	b2d8      	uxtb	r0, r3
 8006c3a:	4b59      	ldr	r3, [pc, #356]	; (8006da0 <Show_Framework+0x344>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	001a      	movs	r2, r3
 8006c40:	0013      	movs	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	189b      	adds	r3, r3, r2
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	4a56      	ldr	r2, [pc, #344]	; (8006da4 <Show_Framework+0x348>)
 8006c4a:	189a      	adds	r2, r3, r2
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	2308      	movs	r3, #8
 8006c52:	2100      	movs	r1, #0
 8006c54:	f003 f9c0 	bl	8009fd8 <OLED_ShowString>
            break;
 8006c58:	e084      	b.n	8006d64 <Show_Framework+0x308>
            OLED_ShowString(0, 0, scope_ms_div_label[scope_ms_div_select], 8, 1);
 8006c5a:	4b4f      	ldr	r3, [pc, #316]	; (8006d98 <Show_Framework+0x33c>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	001a      	movs	r2, r3
 8006c60:	0013      	movs	r3, r2
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	189b      	adds	r3, r3, r2
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	4a4c      	ldr	r2, [pc, #304]	; (8006d9c <Show_Framework+0x340>)
 8006c6a:	189a      	adds	r2, r3, r2
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	2308      	movs	r3, #8
 8006c72:	2100      	movs	r1, #0
 8006c74:	2000      	movs	r0, #0
 8006c76:	f003 f9af 	bl	8009fd8 <OLED_ShowString>
            len = strlen(scope_voltage_div_label[scope_voltage_div_select]);
 8006c7a:	4b49      	ldr	r3, [pc, #292]	; (8006da0 <Show_Framework+0x344>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	001a      	movs	r2, r3
 8006c80:	0013      	movs	r3, r2
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	189b      	adds	r3, r3, r2
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	4a46      	ldr	r2, [pc, #280]	; (8006da4 <Show_Framework+0x348>)
 8006c8a:	189b      	adds	r3, r3, r2
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f7f9 fa39 	bl	8000104 <strlen>
 8006c92:	0002      	movs	r2, r0
 8006c94:	1dfb      	adds	r3, r7, #7
 8006c96:	701a      	strb	r2, [r3, #0]
            OLED_ShowString(127 - len * 6, 0, scope_voltage_div_label[scope_voltage_div_select], 8, 0);
 8006c98:	1dfb      	adds	r3, r7, #7
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	1c1a      	adds	r2, r3, #0
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	18db      	adds	r3, r3, r3
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	337f      	adds	r3, #127	; 0x7f
 8006ca8:	b2d8      	uxtb	r0, r3
 8006caa:	4b3d      	ldr	r3, [pc, #244]	; (8006da0 <Show_Framework+0x344>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	001a      	movs	r2, r3
 8006cb0:	0013      	movs	r3, r2
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	189b      	adds	r3, r3, r2
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	4a3a      	ldr	r2, [pc, #232]	; (8006da4 <Show_Framework+0x348>)
 8006cba:	189a      	adds	r2, r3, r2
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	f003 f988 	bl	8009fd8 <OLED_ShowString>
            break;
 8006cc8:	e04c      	b.n	8006d64 <Show_Framework+0x308>
            OLED_ShowString(0, 0, scope_ms_div_label[scope_ms_div_select], 8, 1);
 8006cca:	4b33      	ldr	r3, [pc, #204]	; (8006d98 <Show_Framework+0x33c>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	001a      	movs	r2, r3
 8006cd0:	0013      	movs	r3, r2
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	189b      	adds	r3, r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	4a30      	ldr	r2, [pc, #192]	; (8006d9c <Show_Framework+0x340>)
 8006cda:	189a      	adds	r2, r3, r2
 8006cdc:	2301      	movs	r3, #1
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f003 f977 	bl	8009fd8 <OLED_ShowString>
            len = strlen(scope_voltage_div_label[scope_voltage_div_select]);
 8006cea:	4b2d      	ldr	r3, [pc, #180]	; (8006da0 <Show_Framework+0x344>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	001a      	movs	r2, r3
 8006cf0:	0013      	movs	r3, r2
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	189b      	adds	r3, r3, r2
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	4a2a      	ldr	r2, [pc, #168]	; (8006da4 <Show_Framework+0x348>)
 8006cfa:	189b      	adds	r3, r3, r2
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f7f9 fa01 	bl	8000104 <strlen>
 8006d02:	0002      	movs	r2, r0
 8006d04:	1dfb      	adds	r3, r7, #7
 8006d06:	701a      	strb	r2, [r3, #0]
            OLED_ShowString(127 - len * 6, 0, scope_voltage_div_label[scope_voltage_div_select], 8, 1);
 8006d08:	1dfb      	adds	r3, r7, #7
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	1c1a      	adds	r2, r3, #0
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	18db      	adds	r3, r3, r3
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	337f      	adds	r3, #127	; 0x7f
 8006d18:	b2d8      	uxtb	r0, r3
 8006d1a:	4b21      	ldr	r3, [pc, #132]	; (8006da0 <Show_Framework+0x344>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	001a      	movs	r2, r3
 8006d20:	0013      	movs	r3, r2
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	189b      	adds	r3, r3, r2
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	4a1e      	ldr	r2, [pc, #120]	; (8006da4 <Show_Framework+0x348>)
 8006d2a:	189a      	adds	r2, r3, r2
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2308      	movs	r3, #8
 8006d32:	2100      	movs	r1, #0
 8006d34:	f003 f950 	bl	8009fd8 <OLED_ShowString>
            uint16_t val = Voltage_To_Coordinate(scope_tri_voltage);
 8006d38:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <Show_Framework+0x34c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	1d3c      	adds	r4, r7, #4
 8006d3e:	1c18      	adds	r0, r3, #0
 8006d40:	f7ff fe4c 	bl	80069dc <Voltage_To_Coordinate>
 8006d44:	0003      	movs	r3, r0
 8006d46:	8023      	strh	r3, [r4, #0]
            OLED_DrawLine(SCOPE_X_MIN, val, SCOPE_X_MAX, val, 1);
 8006d48:	1d3b      	adds	r3, r7, #4
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b2d9      	uxtb	r1, r3
 8006d4e:	1d3b      	adds	r3, r7, #4
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2201      	movs	r2, #1
 8006d56:	9200      	str	r2, [sp, #0]
 8006d58:	227f      	movs	r2, #127	; 0x7f
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	f002 ffc2 	bl	8009ce4 <OLED_DrawLine>
            break;
 8006d60:	e000      	b.n	8006d64 <Show_Framework+0x308>
            break;
 8006d62:	46c0      	nop			; (mov r8, r8)
    }

}
 8006d64:	46c0      	nop			; (mov r8, r8)
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b007      	add	sp, #28
 8006d6a:	bd90      	pop	{r4, r7, pc}
 8006d6c:	42380000 	.word	0x42380000
 8006d70:	41100000 	.word	0x41100000
 8006d74:	41200000 	.word	0x41200000
 8006d78:	42c80000 	.word	0x42c80000
 8006d7c:	424b3333 	.word	0x424b3333
 8006d80:	414b3333 	.word	0x414b3333
 8006d84:	42986666 	.word	0x42986666
 8006d88:	42fe0000 	.word	0x42fe0000
 8006d8c:	0800bf3c 	.word	0x0800bf3c
 8006d90:	0800bf44 	.word	0x0800bf44
 8006d94:	2000018e 	.word	0x2000018e
 8006d98:	2000001c 	.word	0x2000001c
 8006d9c:	0800c130 	.word	0x0800c130
 8006da0:	2000001d 	.word	0x2000001d
 8006da4:	0800c1ac 	.word	0x0800c1ac
 8006da8:	20000194 	.word	0x20000194

08006dac <Show_Wave>:

static void Show_Wave(Scope_Sample *sample) {
 8006dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dae:	b08d      	sub	sp, #52	; 0x34
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	6078      	str	r0, [r7, #4]
    float ratio = (float) (sample->len - 1) / (float) (SCOPE_X_NUM - 1);
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	23ff      	movs	r3, #255	; 0xff
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	5ad3      	ldrh	r3, [r2, r3]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	f7fa f9ee 	bl	80011a0 <__aeabi_i2f>
 8006dc4:	1c03      	adds	r3, r0, #0
 8006dc6:	494f      	ldr	r1, [pc, #316]	; (8006f04 <Show_Wave+0x158>)
 8006dc8:	1c18      	adds	r0, r3, #0
 8006dca:	f7f9 fd07 	bl	80007dc <__aeabi_fdiv>
 8006dce:	1c03      	adds	r3, r0, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
    float j = 0; // 循环附元，表示原数据数组的下标
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t j_int = UINT16_MAX; // 第一个点一定有数据，这样便于绘制第一个点，+1后变为0
 8006dd6:	2322      	movs	r3, #34	; 0x22
 8006dd8:	18fb      	adds	r3, r7, r3
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4252      	negs	r2, r2
 8006dde:	801a      	strh	r2, [r3, #0]
    uint16_t last_i[SCOPE_CHANNEL_NUM] = {0}, last_val[SCOPE_CHANNEL_NUM];
 8006de0:	230c      	movs	r3, #12
 8006de2:	18fb      	adds	r3, r7, r3
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < SCOPE_X_NUM; i++) { // 以示波器的横轴每个像素点为循环主元
 8006de8:	2320      	movs	r3, #32
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	2200      	movs	r2, #0
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	e07d      	b.n	8006eee <Show_Wave+0x142>
        if ((uint16_t) j != j_int) { // j累计到一个新整数
 8006df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006df4:	f7f9 fb3e 	bl	8000474 <__aeabi_f2uiz>
 8006df8:	0003      	movs	r3, r0
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2122      	movs	r1, #34	; 0x22
 8006dfe:	187a      	adds	r2, r7, r1
 8006e00:	8812      	ldrh	r2, [r2, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d067      	beq.n	8006ed6 <Show_Wave+0x12a>
            j_int++;
 8006e06:	187b      	adds	r3, r7, r1
 8006e08:	881a      	ldrh	r2, [r3, #0]
 8006e0a:	187b      	adds	r3, r7, r1
 8006e0c:	3201      	adds	r2, #1
 8006e0e:	801a      	strh	r2, [r3, #0]

            for (uint8_t k = 0; k < SCOPE_CHANNEL_NUM; k++) {
 8006e10:	231f      	movs	r3, #31
 8006e12:	18fb      	adds	r3, r7, r3
 8006e14:	2200      	movs	r2, #0
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	e058      	b.n	8006ecc <Show_Wave+0x120>
                float voltage = toVoltage(sample->data[sample->sp + j_int][k]);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a3a      	ldr	r2, [pc, #232]	; (8006f08 <Show_Wave+0x15c>)
 8006e1e:	5a9b      	ldrh	r3, [r3, r2]
 8006e20:	001a      	movs	r2, r3
 8006e22:	2622      	movs	r6, #34	; 0x22
 8006e24:	19bb      	adds	r3, r7, r6
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	18d1      	adds	r1, r2, r3
 8006e2a:	251f      	movs	r5, #31
 8006e2c:	197b      	adds	r3, r7, r5
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	0049      	lsls	r1, r1, #1
 8006e34:	18cb      	adds	r3, r1, r3
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	18d3      	adds	r3, r2, r3
 8006e3a:	3302      	adds	r3, #2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f7fa f9f4 	bl	800122c <__aeabi_ui2f>
 8006e44:	1c03      	adds	r3, r0, #0
 8006e46:	1c18      	adds	r0, r3, #0
 8006e48:	f002 fb0a 	bl	8009460 <toVoltage>
 8006e4c:	1c03      	adds	r3, r0, #0
 8006e4e:	617b      	str	r3, [r7, #20]
                uint16_t val = Voltage_To_Coordinate(voltage);
 8006e50:	2312      	movs	r3, #18
 8006e52:	18fc      	adds	r4, r7, r3
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	1c18      	adds	r0, r3, #0
 8006e58:	f7ff fdc0 	bl	80069dc <Voltage_To_Coordinate>
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	8023      	strh	r3, [r4, #0]

                if (j_int != 0)
 8006e60:	19bb      	adds	r3, r7, r6
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d019      	beq.n	8006e9c <Show_Wave+0xf0>
                    OLED_DrawLine(SCOPE_X_MIN + last_i[k], last_val[k], SCOPE_X_MIN + i, val, 1);
 8006e68:	197b      	adds	r3, r7, r5
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	210c      	movs	r1, #12
 8006e6e:	187b      	adds	r3, r7, r1
 8006e70:	0052      	lsls	r2, r2, #1
 8006e72:	5ad3      	ldrh	r3, [r2, r3]
 8006e74:	b2d8      	uxtb	r0, r3
 8006e76:	197b      	adds	r3, r7, r5
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	2108      	movs	r1, #8
 8006e7c:	187b      	adds	r3, r7, r1
 8006e7e:	0052      	lsls	r2, r2, #1
 8006e80:	5ad3      	ldrh	r3, [r2, r3]
 8006e82:	b2d9      	uxtb	r1, r3
 8006e84:	2220      	movs	r2, #32
 8006e86:	18bb      	adds	r3, r7, r2
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	2312      	movs	r3, #18
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2401      	movs	r4, #1
 8006e96:	9400      	str	r4, [sp, #0]
 8006e98:	f002 ff24 	bl	8009ce4 <OLED_DrawLine>
                last_i[k] = i;
 8006e9c:	201f      	movs	r0, #31
 8006e9e:	183b      	adds	r3, r7, r0
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	18fb      	adds	r3, r7, r3
 8006ea6:	0052      	lsls	r2, r2, #1
 8006ea8:	2120      	movs	r1, #32
 8006eaa:	1879      	adds	r1, r7, r1
 8006eac:	8809      	ldrh	r1, [r1, #0]
 8006eae:	52d1      	strh	r1, [r2, r3]
                last_val[k] = val;
 8006eb0:	183b      	adds	r3, r7, r0
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	18fb      	adds	r3, r7, r3
 8006eb8:	0052      	lsls	r2, r2, #1
 8006eba:	2112      	movs	r1, #18
 8006ebc:	1879      	adds	r1, r7, r1
 8006ebe:	8809      	ldrh	r1, [r1, #0]
 8006ec0:	52d1      	strh	r1, [r2, r3]
            for (uint8_t k = 0; k < SCOPE_CHANNEL_NUM; k++) {
 8006ec2:	183b      	adds	r3, r7, r0
 8006ec4:	781a      	ldrb	r2, [r3, #0]
 8006ec6:	183b      	adds	r3, r7, r0
 8006ec8:	3201      	adds	r2, #1
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	231f      	movs	r3, #31
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d9a1      	bls.n	8006e1a <Show_Wave+0x6e>
            }
        }
        j += ratio;
 8006ed6:	69b9      	ldr	r1, [r7, #24]
 8006ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eda:	f7f9 fae3 	bl	80004a4 <__aeabi_fadd>
 8006ede:	1c03      	adds	r3, r0, #0
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
    for (uint16_t i = 0; i < SCOPE_X_NUM; i++) { // 以示波器的横轴每个像素点为循环主元
 8006ee2:	2120      	movs	r1, #32
 8006ee4:	187b      	adds	r3, r7, r1
 8006ee6:	881a      	ldrh	r2, [r3, #0]
 8006ee8:	187b      	adds	r3, r7, r1
 8006eea:	3201      	adds	r2, #1
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	2320      	movs	r3, #32
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	2b7e      	cmp	r3, #126	; 0x7e
 8006ef6:	d800      	bhi.n	8006efa <Show_Wave+0x14e>
 8006ef8:	e77b      	b.n	8006df2 <Show_Wave+0x46>
    }
}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	46c0      	nop			; (mov r8, r8)
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b00b      	add	sp, #44	; 0x2c
 8006f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f04:	42fc0000 	.word	0x42fc0000
 8006f08:	000003fa 	.word	0x000003fa

08006f0c <Show_Information>:

static void Show_Information(Scope_Sample *sample) {
 8006f0c:	b5b0      	push	{r4, r5, r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	6078      	str	r0, [r7, #4]
    char str_buf[10]; // 字符串缓冲区
    uint8_t len;

    // 显示测量参数
    // Channel1
    OLED_ShowString(0, 104, "CH1", 8, 1);
 8006f14:	4a82      	ldr	r2, [pc, #520]	; (8007120 <Show_Information+0x214>)
 8006f16:	2301      	movs	r3, #1
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	2308      	movs	r3, #8
 8006f1c:	2168      	movs	r1, #104	; 0x68
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f003 f85a 	bl	8009fd8 <OLED_ShowString>
    floatToStr(str_buf, sample->vpp[0], 1);
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	2380      	movs	r3, #128	; 0x80
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	58d1      	ldr	r1, [r2, r3]
 8006f2c:	240c      	movs	r4, #12
 8006f2e:	193b      	adds	r3, r7, r4
 8006f30:	2201      	movs	r2, #1
 8006f32:	0018      	movs	r0, r3
 8006f34:	f002 fb64 	bl	8009600 <floatToStr>
    strcat(str_buf, "V");
 8006f38:	193b      	adds	r3, r7, r4
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f7f9 f8e2 	bl	8000104 <strlen>
 8006f40:	0003      	movs	r3, r0
 8006f42:	001a      	movs	r2, r3
 8006f44:	193b      	adds	r3, r7, r4
 8006f46:	189a      	adds	r2, r3, r2
 8006f48:	4b76      	ldr	r3, [pc, #472]	; (8007124 <Show_Information+0x218>)
 8006f4a:	0010      	movs	r0, r2
 8006f4c:	0019      	movs	r1, r3
 8006f4e:	2302      	movs	r3, #2
 8006f50:	001a      	movs	r2, r3
 8006f52:	f004 fe61 	bl	800bc18 <memcpy>
    OLED_ShowString(22, 104, str_buf, 8, 1);
 8006f56:	193a      	adds	r2, r7, r4
 8006f58:	2301      	movs	r3, #1
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	2168      	movs	r1, #104	; 0x68
 8006f60:	2016      	movs	r0, #22
 8006f62:	f003 f839 	bl	8009fd8 <OLED_ShowString>

    len = floatToStr(str_buf, sample->avg[0], 1) + 1;
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	2381      	movs	r3, #129	; 0x81
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	58d1      	ldr	r1, [r2, r3]
 8006f6e:	193b      	adds	r3, r7, r4
 8006f70:	2201      	movs	r2, #1
 8006f72:	0018      	movs	r0, r3
 8006f74:	f002 fb44 	bl	8009600 <floatToStr>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	001a      	movs	r2, r3
 8006f7c:	2517      	movs	r5, #23
 8006f7e:	197b      	adds	r3, r7, r5
 8006f80:	3201      	adds	r2, #1
 8006f82:	701a      	strb	r2, [r3, #0]
    strcat(str_buf, "V");
 8006f84:	193b      	adds	r3, r7, r4
 8006f86:	0018      	movs	r0, r3
 8006f88:	f7f9 f8bc 	bl	8000104 <strlen>
 8006f8c:	0003      	movs	r3, r0
 8006f8e:	001a      	movs	r2, r3
 8006f90:	193b      	adds	r3, r7, r4
 8006f92:	189a      	adds	r2, r3, r2
 8006f94:	4b63      	ldr	r3, [pc, #396]	; (8007124 <Show_Information+0x218>)
 8006f96:	0010      	movs	r0, r2
 8006f98:	0019      	movs	r1, r3
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	001a      	movs	r2, r3
 8006f9e:	f004 fe3b 	bl	800bc18 <memcpy>
    OLED_ShowString(64 - len * 3, 104, str_buf, 8, 1);
 8006fa2:	197b      	adds	r3, r7, r5
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	1c1a      	adds	r2, r3, #0
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	3340      	adds	r3, #64	; 0x40
 8006fb0:	b2d8      	uxtb	r0, r3
 8006fb2:	193a      	adds	r2, r7, r4
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	2308      	movs	r3, #8
 8006fba:	2168      	movs	r1, #104	; 0x68
 8006fbc:	f003 f80c 	bl	8009fd8 <OLED_ShowString>

    len = floatToStr(str_buf, sample->freq[0], 0) + 2;
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	2382      	movs	r3, #130	; 0x82
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	58d1      	ldr	r1, [r2, r3]
 8006fc8:	193b      	adds	r3, r7, r4
 8006fca:	2200      	movs	r2, #0
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f002 fb17 	bl	8009600 <floatToStr>
 8006fd2:	0003      	movs	r3, r0
 8006fd4:	001a      	movs	r2, r3
 8006fd6:	197b      	adds	r3, r7, r5
 8006fd8:	3202      	adds	r2, #2
 8006fda:	701a      	strb	r2, [r3, #0]
    strcat(str_buf, "Hz");
 8006fdc:	193b      	adds	r3, r7, r4
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f7f9 f890 	bl	8000104 <strlen>
 8006fe4:	0003      	movs	r3, r0
 8006fe6:	001a      	movs	r2, r3
 8006fe8:	193b      	adds	r3, r7, r4
 8006fea:	189a      	adds	r2, r3, r2
 8006fec:	4b4e      	ldr	r3, [pc, #312]	; (8007128 <Show_Information+0x21c>)
 8006fee:	0010      	movs	r0, r2
 8006ff0:	0019      	movs	r1, r3
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	001a      	movs	r2, r3
 8006ff6:	f004 fe0f 	bl	800bc18 <memcpy>
    OLED_ShowString(127 - len * 6, 104, str_buf, 8, 1);
 8006ffa:	197b      	adds	r3, r7, r5
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	1c1a      	adds	r2, r3, #0
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	18db      	adds	r3, r3, r3
 8007006:	b2db      	uxtb	r3, r3
 8007008:	337f      	adds	r3, #127	; 0x7f
 800700a:	b2d8      	uxtb	r0, r3
 800700c:	193a      	adds	r2, r7, r4
 800700e:	2301      	movs	r3, #1
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	2308      	movs	r3, #8
 8007014:	2168      	movs	r1, #104	; 0x68
 8007016:	f002 ffdf 	bl	8009fd8 <OLED_ShowString>

    // Channel2
    OLED_ShowString(0, 112, "CH2", 8, 1);
 800701a:	4a44      	ldr	r2, [pc, #272]	; (800712c <Show_Information+0x220>)
 800701c:	2301      	movs	r3, #1
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	2308      	movs	r3, #8
 8007022:	2170      	movs	r1, #112	; 0x70
 8007024:	2000      	movs	r0, #0
 8007026:	f002 ffd7 	bl	8009fd8 <OLED_ShowString>
    floatToStr(str_buf, sample->vpp[1], 1);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a40      	ldr	r2, [pc, #256]	; (8007130 <Show_Information+0x224>)
 800702e:	5899      	ldr	r1, [r3, r2]
 8007030:	193b      	adds	r3, r7, r4
 8007032:	2201      	movs	r2, #1
 8007034:	0018      	movs	r0, r3
 8007036:	f002 fae3 	bl	8009600 <floatToStr>
    strcat(str_buf, "V");
 800703a:	193b      	adds	r3, r7, r4
 800703c:	0018      	movs	r0, r3
 800703e:	f7f9 f861 	bl	8000104 <strlen>
 8007042:	0003      	movs	r3, r0
 8007044:	001a      	movs	r2, r3
 8007046:	193b      	adds	r3, r7, r4
 8007048:	189a      	adds	r2, r3, r2
 800704a:	4b36      	ldr	r3, [pc, #216]	; (8007124 <Show_Information+0x218>)
 800704c:	0010      	movs	r0, r2
 800704e:	0019      	movs	r1, r3
 8007050:	2302      	movs	r3, #2
 8007052:	001a      	movs	r2, r3
 8007054:	f004 fde0 	bl	800bc18 <memcpy>
    OLED_ShowString(22, 112, str_buf, 8, 1);
 8007058:	193a      	adds	r2, r7, r4
 800705a:	2301      	movs	r3, #1
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	2308      	movs	r3, #8
 8007060:	2170      	movs	r1, #112	; 0x70
 8007062:	2016      	movs	r0, #22
 8007064:	f002 ffb8 	bl	8009fd8 <OLED_ShowString>

    len = floatToStr(str_buf, sample->avg[1], 1) + 1;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a32      	ldr	r2, [pc, #200]	; (8007134 <Show_Information+0x228>)
 800706c:	5899      	ldr	r1, [r3, r2]
 800706e:	193b      	adds	r3, r7, r4
 8007070:	2201      	movs	r2, #1
 8007072:	0018      	movs	r0, r3
 8007074:	f002 fac4 	bl	8009600 <floatToStr>
 8007078:	0003      	movs	r3, r0
 800707a:	001a      	movs	r2, r3
 800707c:	197b      	adds	r3, r7, r5
 800707e:	3201      	adds	r2, #1
 8007080:	701a      	strb	r2, [r3, #0]
    strcat(str_buf, "V");
 8007082:	193b      	adds	r3, r7, r4
 8007084:	0018      	movs	r0, r3
 8007086:	f7f9 f83d 	bl	8000104 <strlen>
 800708a:	0003      	movs	r3, r0
 800708c:	001a      	movs	r2, r3
 800708e:	193b      	adds	r3, r7, r4
 8007090:	189a      	adds	r2, r3, r2
 8007092:	4b24      	ldr	r3, [pc, #144]	; (8007124 <Show_Information+0x218>)
 8007094:	0010      	movs	r0, r2
 8007096:	0019      	movs	r1, r3
 8007098:	2302      	movs	r3, #2
 800709a:	001a      	movs	r2, r3
 800709c:	f004 fdbc 	bl	800bc18 <memcpy>
    OLED_ShowString(64 - len * 3, 112, str_buf, 8, 1);
 80070a0:	197b      	adds	r3, r7, r5
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	1c1a      	adds	r2, r3, #0
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	3340      	adds	r3, #64	; 0x40
 80070ae:	b2d8      	uxtb	r0, r3
 80070b0:	193a      	adds	r2, r7, r4
 80070b2:	2301      	movs	r3, #1
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	2308      	movs	r3, #8
 80070b8:	2170      	movs	r1, #112	; 0x70
 80070ba:	f002 ff8d 	bl	8009fd8 <OLED_ShowString>

    len = floatToStr(str_buf, sample->freq[1], 0) + 2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a1d      	ldr	r2, [pc, #116]	; (8007138 <Show_Information+0x22c>)
 80070c2:	5899      	ldr	r1, [r3, r2]
 80070c4:	193b      	adds	r3, r7, r4
 80070c6:	2200      	movs	r2, #0
 80070c8:	0018      	movs	r0, r3
 80070ca:	f002 fa99 	bl	8009600 <floatToStr>
 80070ce:	0003      	movs	r3, r0
 80070d0:	001a      	movs	r2, r3
 80070d2:	197b      	adds	r3, r7, r5
 80070d4:	3202      	adds	r2, #2
 80070d6:	701a      	strb	r2, [r3, #0]
    strcat(str_buf, "Hz");
 80070d8:	193b      	adds	r3, r7, r4
 80070da:	0018      	movs	r0, r3
 80070dc:	f7f9 f812 	bl	8000104 <strlen>
 80070e0:	0003      	movs	r3, r0
 80070e2:	001a      	movs	r2, r3
 80070e4:	193b      	adds	r3, r7, r4
 80070e6:	189a      	adds	r2, r3, r2
 80070e8:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <Show_Information+0x21c>)
 80070ea:	0010      	movs	r0, r2
 80070ec:	0019      	movs	r1, r3
 80070ee:	2303      	movs	r3, #3
 80070f0:	001a      	movs	r2, r3
 80070f2:	f004 fd91 	bl	800bc18 <memcpy>
    OLED_ShowString(127 - len * 6, 112, str_buf, 8, 1);
 80070f6:	197b      	adds	r3, r7, r5
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	1c1a      	adds	r2, r3, #0
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	18db      	adds	r3, r3, r3
 8007102:	b2db      	uxtb	r3, r3
 8007104:	337f      	adds	r3, #127	; 0x7f
 8007106:	b2d8      	uxtb	r0, r3
 8007108:	193a      	adds	r2, r7, r4
 800710a:	2301      	movs	r3, #1
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	2308      	movs	r3, #8
 8007110:	2170      	movs	r1, #112	; 0x70
 8007112:	f002 ff61 	bl	8009fd8 <OLED_ShowString>
}
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	46bd      	mov	sp, r7
 800711a:	b006      	add	sp, #24
 800711c:	bdb0      	pop	{r4, r5, r7, pc}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	0800bf48 	.word	0x0800bf48
 8007124:	0800bf4c 	.word	0x0800bf4c
 8007128:	0800bf50 	.word	0x0800bf50
 800712c:	0800bf54 	.word	0x0800bf54
 8007130:	00000404 	.word	0x00000404
 8007134:	0000040c 	.word	0x0000040c
 8007138:	00000414 	.word	0x00000414

0800713c <Scope_UI_Refresh_Sub>:

static void Scope_UI_Refresh_Sub(Scope_Sample *sample) {
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
    OLED_Clear();
 8007144:	f002 fd14 	bl	8009b70 <OLED_Clear>
    Show_Framework();
 8007148:	f7ff fc88 	bl	8006a5c <Show_Framework>
    Show_Wave(sample);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	0018      	movs	r0, r3
 8007150:	f7ff fe2c 	bl	8006dac <Show_Wave>
    Show_Information(sample);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	0018      	movs	r0, r3
 8007158:	f7ff fed8 	bl	8006f0c <Show_Information>
    OLED_Refresh();
 800715c:	f002 fcc6 	bl	8009aec <OLED_Refresh>
}
 8007160:	46c0      	nop			; (mov r8, r8)
 8007162:	46bd      	mov	sp, r7
 8007164:	b002      	add	sp, #8
 8007166:	bd80      	pop	{r7, pc}

08007168 <Scope_UI_Init>:

/*-----------------------------------------------------接口函数-----------------------------------------------------*/

void Scope_UI_Init(void) {
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
    OLED_Clear();
 800716c:	f002 fd00 	bl	8009b70 <OLED_Clear>
    Show_Framework();
 8007170:	f7ff fc74 	bl	8006a5c <Show_Framework>
    OLED_Refresh();
 8007174:	f002 fcba 	bl	8009aec <OLED_Refresh>
}
 8007178:	46c0      	nop			; (mov r8, r8)
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <Scope_UI_DeInit>:

void Scope_UI_DeInit(void) {
 800717e:	b580      	push	{r7, lr}
 8007180:	af00      	add	r7, sp, #0
    OLED_Clear();
 8007182:	f002 fcf5 	bl	8009b70 <OLED_Clear>
    OLED_Refresh();
 8007186:	f002 fcb1 	bl	8009aec <OLED_Refresh>
}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <Scope_UI_Try_Refresh>:

// 返回值表示是否成功刷新
void Scope_UI_Try_Refresh(uint8_t force) {
 8007190:	b590      	push	{r4, r7, lr}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	0002      	movs	r2, r0
 8007198:	1dfb      	adds	r3, r7, #7
 800719a:	701a      	strb	r2, [r3, #0]
    uint8_t success = 0;
 800719c:	230f      	movs	r3, #15
 800719e:	18fb      	adds	r3, r7, r3
 80071a0:	2200      	movs	r2, #0
 80071a2:	701a      	strb	r2, [r3, #0]
    if (!scope_hold) {
 80071a4:	4b2b      	ldr	r3, [pc, #172]	; (8007254 <Scope_UI_Try_Refresh+0xc4>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d140      	bne.n	800722e <Scope_UI_Try_Refresh+0x9e>
        for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 80071ac:	230e      	movs	r3, #14
 80071ae:	18fb      	adds	r3, r7, r3
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	e034      	b.n	8007220 <Scope_UI_Try_Refresh+0x90>
            if (scope_sample_arr[i] == NULL)
 80071b6:	210e      	movs	r1, #14
 80071b8:	187b      	adds	r3, r7, r1
 80071ba:	781a      	ldrb	r2, [r3, #0]
 80071bc:	4b26      	ldr	r3, [pc, #152]	; (8007258 <Scope_UI_Try_Refresh+0xc8>)
 80071be:	0092      	lsls	r2, r2, #2
 80071c0:	58d3      	ldr	r3, [r2, r3]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d032      	beq.n	800722c <Scope_UI_Try_Refresh+0x9c>
                break;
            if (scope_sample_arr[i]->is_handle == 1) {
 80071c6:	187b      	adds	r3, r7, r1
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	4b23      	ldr	r3, [pc, #140]	; (8007258 <Scope_UI_Try_Refresh+0xc8>)
 80071cc:	0092      	lsls	r2, r2, #2
 80071ce:	58d3      	ldr	r3, [r2, r3]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d11e      	bne.n	8007214 <Scope_UI_Try_Refresh+0x84>
                Scope_UI_Refresh_Sub(scope_sample_arr[i]);
 80071d6:	000c      	movs	r4, r1
 80071d8:	187b      	adds	r3, r7, r1
 80071da:	781a      	ldrb	r2, [r3, #0]
 80071dc:	4b1e      	ldr	r3, [pc, #120]	; (8007258 <Scope_UI_Try_Refresh+0xc8>)
 80071de:	0092      	lsls	r2, r2, #2
 80071e0:	58d3      	ldr	r3, [r2, r3]
 80071e2:	0018      	movs	r0, r3
 80071e4:	f7ff ffaa 	bl	800713c <Scope_UI_Refresh_Sub>
                scope_sample_arr[i]->sample_flag = Scope_Sample_Not;
 80071e8:	0021      	movs	r1, r4
 80071ea:	187b      	adds	r3, r7, r1
 80071ec:	781a      	ldrb	r2, [r3, #0]
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <Scope_UI_Try_Refresh+0xc8>)
 80071f0:	0092      	lsls	r2, r2, #2
 80071f2:	58d3      	ldr	r3, [r2, r3]
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
                scope_sample_arr[i]->is_handle = 0;
 80071f8:	187b      	adds	r3, r7, r1
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	4b16      	ldr	r3, [pc, #88]	; (8007258 <Scope_UI_Try_Refresh+0xc8>)
 80071fe:	0092      	lsls	r2, r2, #2
 8007200:	58d3      	ldr	r3, [r2, r3]
 8007202:	2200      	movs	r2, #0
 8007204:	705a      	strb	r2, [r3, #1]
                Scope_Sample_Try_Start_New_ADC();
 8007206:	f000 fffb 	bl	8008200 <Scope_Sample_Try_Start_New_ADC>
                success = 1;
 800720a:	230f      	movs	r3, #15
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	2201      	movs	r2, #1
 8007210:	701a      	strb	r2, [r3, #0]
                break; // 只渲染一帧
 8007212:	e00c      	b.n	800722e <Scope_UI_Try_Refresh+0x9e>
        for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 8007214:	210e      	movs	r1, #14
 8007216:	187b      	adds	r3, r7, r1
 8007218:	781a      	ldrb	r2, [r3, #0]
 800721a:	187b      	adds	r3, r7, r1
 800721c:	3201      	adds	r2, #1
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	230e      	movs	r3, #14
 8007222:	18fb      	adds	r3, r7, r3
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0c5      	beq.n	80071b6 <Scope_UI_Try_Refresh+0x26>
 800722a:	e000      	b.n	800722e <Scope_UI_Try_Refresh+0x9e>
                break;
 800722c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
    if (!success && force) {
 800722e:	230f      	movs	r3, #15
 8007230:	18fb      	adds	r3, r7, r3
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <Scope_UI_Try_Refresh+0xbc>
 8007238:	1dfb      	adds	r3, r7, #7
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <Scope_UI_Try_Refresh+0xbc>
        OLED_Clear();
 8007240:	f002 fc96 	bl	8009b70 <OLED_Clear>
        Show_Framework();
 8007244:	f7ff fc0a 	bl	8006a5c <Show_Framework>
        OLED_Refresh();
 8007248:	f002 fc50 	bl	8009aec <OLED_Refresh>
    }
}
 800724c:	46c0      	nop			; (mov r8, r8)
 800724e:	46bd      	mov	sp, r7
 8007250:	b005      	add	sp, #20
 8007252:	bd90      	pop	{r4, r7, pc}
 8007254:	2000018d 	.word	0x2000018d
 8007258:	2000046c 	.word	0x2000046c

0800725c <Get_Max_Voltage>:
#include "operate.h"

#include "math.h"

static inline float Get_Max_Voltage(void) {
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
    return scope_voltage_div[scope_voltage_div_select] * SCOPE_Y_GRID / 2.0f;
 8007260:	4b09      	ldr	r3, [pc, #36]	; (8007288 <Get_Max_Voltage+0x2c>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	001a      	movs	r2, r3
 8007266:	4b09      	ldr	r3, [pc, #36]	; (800728c <Get_Max_Voltage+0x30>)
 8007268:	0092      	lsls	r2, r2, #2
 800726a:	58d3      	ldr	r3, [r2, r3]
 800726c:	4908      	ldr	r1, [pc, #32]	; (8007290 <Get_Max_Voltage+0x34>)
 800726e:	1c18      	adds	r0, r3, #0
 8007270:	f7f9 fc7e 	bl	8000b70 <__aeabi_fmul>
 8007274:	1c03      	adds	r3, r0, #0
 8007276:	2180      	movs	r1, #128	; 0x80
 8007278:	05c9      	lsls	r1, r1, #23
 800727a:	1c18      	adds	r0, r3, #0
 800727c:	f7f9 faae 	bl	80007dc <__aeabi_fdiv>
 8007280:	1c03      	adds	r3, r0, #0
}
 8007282:	1c18      	adds	r0, r3, #0
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	2000001d 	.word	0x2000001d
 800728c:	0800c194 	.word	0x0800c194
 8007290:	41200000 	.word	0x41200000

08007294 <Get_Step_Voltage>:

static inline float Get_Step_Voltage(void) {
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
    return scope_voltage_div[scope_voltage_div_select] / SCOPE_TRI_Voltage_STEPS_DIV;
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <Get_Step_Voltage+0x24>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	001a      	movs	r2, r3
 800729e:	4b07      	ldr	r3, [pc, #28]	; (80072bc <Get_Step_Voltage+0x28>)
 80072a0:	0092      	lsls	r2, r2, #2
 80072a2:	58d3      	ldr	r3, [r2, r3]
 80072a4:	2180      	movs	r1, #128	; 0x80
 80072a6:	05c9      	lsls	r1, r1, #23
 80072a8:	1c18      	adds	r0, r3, #0
 80072aa:	f7f9 fa97 	bl	80007dc <__aeabi_fdiv>
 80072ae:	1c03      	adds	r3, r0, #0
}
 80072b0:	1c18      	adds	r0, r3, #0
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	2000001d 	.word	0x2000001d
 80072bc:	0800c194 	.word	0x0800c194

080072c0 <isInt>:

static inline uint8_t isInt(float x) {
 80072c0:	b590      	push	{r4, r7, lr}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
    return x == (float) (int32_t) x;
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7f9 ff49 	bl	8001160 <__aeabi_f2iz>
 80072ce:	0003      	movs	r3, r0
 80072d0:	0018      	movs	r0, r3
 80072d2:	f7f9 ff65 	bl	80011a0 <__aeabi_i2f>
 80072d6:	1c03      	adds	r3, r0, #0
 80072d8:	2201      	movs	r2, #1
 80072da:	1c14      	adds	r4, r2, #0
 80072dc:	1c19      	adds	r1, r3, #0
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7f9 f89a 	bl	8000418 <__aeabi_fcmpeq>
 80072e4:	1e03      	subs	r3, r0, #0
 80072e6:	d101      	bne.n	80072ec <isInt+0x2c>
 80072e8:	2300      	movs	r3, #0
 80072ea:	1c1c      	adds	r4, r3, #0
 80072ec:	b2e3      	uxtb	r3, r4
}
 80072ee:	0018      	movs	r0, r3
 80072f0:	46bd      	mov	sp, r7
 80072f2:	b003      	add	sp, #12
 80072f4:	bd90      	pop	{r4, r7, pc}
	...

080072f8 <Opt_Tri_Voltage>:

// 修正因调整缩放电压刻度，而带来的问题
// 返回值表示是否调整了
static uint8_t Opt_Tri_Voltage(void) {
 80072f8:	b590      	push	{r4, r7, lr}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
    // 超过目前能显示的最大电压
    if (scope_tri_voltage >= Get_Max_Voltage()) {
 80072fe:	f7ff ffad 	bl	800725c <Get_Max_Voltage>
 8007302:	1c02      	adds	r2, r0, #0
 8007304:	4b2e      	ldr	r3, [pc, #184]	; (80073c0 <Opt_Tri_Voltage+0xc8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	1c19      	adds	r1, r3, #0
 800730a:	1c10      	adds	r0, r2, #0
 800730c:	f7f9 f894 	bl	8000438 <__aeabi_fcmple>
 8007310:	1e03      	subs	r3, r0, #0
 8007312:	d00f      	beq.n	8007334 <Opt_Tri_Voltage+0x3c>
        scope_tri_voltage = Get_Max_Voltage() - Get_Step_Voltage();
 8007314:	f7ff ffa2 	bl	800725c <Get_Max_Voltage>
 8007318:	1c04      	adds	r4, r0, #0
 800731a:	f7ff ffbb 	bl	8007294 <Get_Step_Voltage>
 800731e:	1c03      	adds	r3, r0, #0
 8007320:	1c19      	adds	r1, r3, #0
 8007322:	1c20      	adds	r0, r4, #0
 8007324:	f7f9 fd3e 	bl	8000da4 <__aeabi_fsub>
 8007328:	1c03      	adds	r3, r0, #0
 800732a:	1c1a      	adds	r2, r3, #0
 800732c:	4b24      	ldr	r3, [pc, #144]	; (80073c0 <Opt_Tri_Voltage+0xc8>)
 800732e:	601a      	str	r2, [r3, #0]
        return 1;
 8007330:	2301      	movs	r3, #1
 8007332:	e041      	b.n	80073b8 <Opt_Tri_Voltage+0xc0>
    }
    if (scope_tri_voltage <= -Get_Max_Voltage()) {
 8007334:	f7ff ff92 	bl	800725c <Get_Max_Voltage>
 8007338:	1c02      	adds	r2, r0, #0
 800733a:	2380      	movs	r3, #128	; 0x80
 800733c:	061b      	lsls	r3, r3, #24
 800733e:	405a      	eors	r2, r3
 8007340:	4b1f      	ldr	r3, [pc, #124]	; (80073c0 <Opt_Tri_Voltage+0xc8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	1c19      	adds	r1, r3, #0
 8007346:	1c10      	adds	r0, r2, #0
 8007348:	f7f9 f88a 	bl	8000460 <__aeabi_fcmpge>
 800734c:	1e03      	subs	r3, r0, #0
 800734e:	d00f      	beq.n	8007370 <Opt_Tri_Voltage+0x78>
        scope_tri_voltage = -Get_Max_Voltage() + Get_Step_Voltage();
 8007350:	f7ff ffa0 	bl	8007294 <Get_Step_Voltage>
 8007354:	1c04      	adds	r4, r0, #0
 8007356:	f7ff ff81 	bl	800725c <Get_Max_Voltage>
 800735a:	1c03      	adds	r3, r0, #0
 800735c:	1c19      	adds	r1, r3, #0
 800735e:	1c20      	adds	r0, r4, #0
 8007360:	f7f9 fd20 	bl	8000da4 <__aeabi_fsub>
 8007364:	1c03      	adds	r3, r0, #0
 8007366:	1c1a      	adds	r2, r3, #0
 8007368:	4b15      	ldr	r3, [pc, #84]	; (80073c0 <Opt_Tri_Voltage+0xc8>)
 800736a:	601a      	str	r2, [r3, #0]
        return 1;
 800736c:	2301      	movs	r3, #1
 800736e:	e023      	b.n	80073b8 <Opt_Tri_Voltage+0xc0>
    }

    // 把触发电压对齐到step
    float check = scope_tri_voltage / Get_Step_Voltage();
 8007370:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <Opt_Tri_Voltage+0xc8>)
 8007372:	681c      	ldr	r4, [r3, #0]
 8007374:	f7ff ff8e 	bl	8007294 <Get_Step_Voltage>
 8007378:	1c03      	adds	r3, r0, #0
 800737a:	1c19      	adds	r1, r3, #0
 800737c:	1c20      	adds	r0, r4, #0
 800737e:	f7f9 fa2d 	bl	80007dc <__aeabi_fdiv>
 8007382:	1c03      	adds	r3, r0, #0
 8007384:	607b      	str	r3, [r7, #4]
    if (!isInt(check)) {
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	1c18      	adds	r0, r3, #0
 800738a:	f7ff ff99 	bl	80072c0 <isInt>
 800738e:	1e03      	subs	r3, r0, #0
 8007390:	d111      	bne.n	80073b6 <Opt_Tri_Voltage+0xbe>
        scope_tri_voltage = roundf(check) * Get_Step_Voltage();
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	1c18      	adds	r0, r3, #0
 8007396:	f004 fd27 	bl	800bde8 <roundf>
 800739a:	1c04      	adds	r4, r0, #0
 800739c:	f7ff ff7a 	bl	8007294 <Get_Step_Voltage>
 80073a0:	1c03      	adds	r3, r0, #0
 80073a2:	1c19      	adds	r1, r3, #0
 80073a4:	1c20      	adds	r0, r4, #0
 80073a6:	f7f9 fbe3 	bl	8000b70 <__aeabi_fmul>
 80073aa:	1c03      	adds	r3, r0, #0
 80073ac:	1c1a      	adds	r2, r3, #0
 80073ae:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <Opt_Tri_Voltage+0xc8>)
 80073b0:	601a      	str	r2, [r3, #0]
        return 1;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e000      	b.n	80073b8 <Opt_Tri_Voltage+0xc0>
    }

    return 0;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b003      	add	sp, #12
 80073be:	bd90      	pop	{r4, r7, pc}
 80073c0:	20000194 	.word	0x20000194

080073c4 <Handle_KEY_L>:

static void Handle_KEY_L(void) {
 80073c4:	b5b0      	push	{r4, r5, r7, lr}
 80073c6:	af00      	add	r7, sp, #0
    if (scope_hold)
 80073c8:	4b3e      	ldr	r3, [pc, #248]	; (80074c4 <Handle_KEY_L+0x100>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d000      	beq.n	80073d2 <Handle_KEY_L+0xe>
 80073d0:	e072      	b.n	80074b8 <Handle_KEY_L+0xf4>
        return;

    switch (scope_key_l_r_func) {
 80073d2:	4b3d      	ldr	r3, [pc, #244]	; (80074c8 <Handle_KEY_L+0x104>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d032      	beq.n	8007440 <Handle_KEY_L+0x7c>
 80073da:	dd00      	ble.n	80073de <Handle_KEY_L+0x1a>
 80073dc:	e06e      	b.n	80074bc <Handle_KEY_L+0xf8>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <Handle_KEY_L+0x24>
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d017      	beq.n	8007416 <Handle_KEY_L+0x52>
                Buzzer_Beep(1);
            }
            break;

        default:
            break;
 80073e6:	e069      	b.n	80074bc <Handle_KEY_L+0xf8>
            if (scope_ms_div_select >= 1) {
 80073e8:	4b38      	ldr	r3, [pc, #224]	; (80074cc <Handle_KEY_L+0x108>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00e      	beq.n	800740e <Handle_KEY_L+0x4a>
                scope_ms_div_select--;
 80073f0:	4b36      	ldr	r3, [pc, #216]	; (80074cc <Handle_KEY_L+0x108>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	4b34      	ldr	r3, [pc, #208]	; (80074cc <Handle_KEY_L+0x108>)
 80073fa:	701a      	strb	r2, [r3, #0]
                Scope_Sample_Refresh_Sample_Rate();
 80073fc:	f000 fe5e 	bl	80080bc <Scope_Sample_Refresh_Sample_Rate>
                Scope_UI_Try_Refresh(1);
 8007400:	2001      	movs	r0, #1
 8007402:	f7ff fec5 	bl	8007190 <Scope_UI_Try_Refresh>
                Buzzer_Beep(0);
 8007406:	2000      	movs	r0, #0
 8007408:	f001 ffe2 	bl	80093d0 <Buzzer_Beep>
            break;
 800740c:	e057      	b.n	80074be <Handle_KEY_L+0xfa>
                Buzzer_Beep(1);
 800740e:	2001      	movs	r0, #1
 8007410:	f001 ffde 	bl	80093d0 <Buzzer_Beep>
            break;
 8007414:	e053      	b.n	80074be <Handle_KEY_L+0xfa>
            if (scope_voltage_div_select >= 1) {
 8007416:	4b2e      	ldr	r3, [pc, #184]	; (80074d0 <Handle_KEY_L+0x10c>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00c      	beq.n	8007438 <Handle_KEY_L+0x74>
                scope_voltage_div_select--;
 800741e:	4b2c      	ldr	r3, [pc, #176]	; (80074d0 <Handle_KEY_L+0x10c>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	3b01      	subs	r3, #1
 8007424:	b2da      	uxtb	r2, r3
 8007426:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <Handle_KEY_L+0x10c>)
 8007428:	701a      	strb	r2, [r3, #0]
                Scope_UI_Try_Refresh(1);
 800742a:	2001      	movs	r0, #1
 800742c:	f7ff feb0 	bl	8007190 <Scope_UI_Try_Refresh>
                Buzzer_Beep(0);
 8007430:	2000      	movs	r0, #0
 8007432:	f001 ffcd 	bl	80093d0 <Buzzer_Beep>
            break;
 8007436:	e042      	b.n	80074be <Handle_KEY_L+0xfa>
                Buzzer_Beep(1);
 8007438:	2001      	movs	r0, #1
 800743a:	f001 ffc9 	bl	80093d0 <Buzzer_Beep>
            break;
 800743e:	e03e      	b.n	80074be <Handle_KEY_L+0xfa>
            if (scope_tri_voltage - Get_Step_Voltage() > -Get_Max_Voltage()) {
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <Handle_KEY_L+0x110>)
 8007442:	681c      	ldr	r4, [r3, #0]
 8007444:	f7ff ff26 	bl	8007294 <Get_Step_Voltage>
 8007448:	1c03      	adds	r3, r0, #0
 800744a:	1c19      	adds	r1, r3, #0
 800744c:	1c20      	adds	r0, r4, #0
 800744e:	f7f9 fca9 	bl	8000da4 <__aeabi_fsub>
 8007452:	1c03      	adds	r3, r0, #0
 8007454:	1c1c      	adds	r4, r3, #0
 8007456:	f7ff ff01 	bl	800725c <Get_Max_Voltage>
 800745a:	1c02      	adds	r2, r0, #0
 800745c:	2380      	movs	r3, #128	; 0x80
 800745e:	061b      	lsls	r3, r3, #24
 8007460:	4053      	eors	r3, r2
 8007462:	1c19      	adds	r1, r3, #0
 8007464:	1c20      	adds	r0, r4, #0
 8007466:	f7f8 fff1 	bl	800044c <__aeabi_fcmpgt>
 800746a:	1e03      	subs	r3, r0, #0
 800746c:	d015      	beq.n	800749a <Handle_KEY_L+0xd6>
                scope_tri_voltage -= Get_Step_Voltage();
 800746e:	f7ff ff11 	bl	8007294 <Get_Step_Voltage>
 8007472:	1c02      	adds	r2, r0, #0
 8007474:	4b17      	ldr	r3, [pc, #92]	; (80074d4 <Handle_KEY_L+0x110>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	1c11      	adds	r1, r2, #0
 800747a:	1c18      	adds	r0, r3, #0
 800747c:	f7f9 fc92 	bl	8000da4 <__aeabi_fsub>
 8007480:	1c03      	adds	r3, r0, #0
 8007482:	1c1a      	adds	r2, r3, #0
 8007484:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <Handle_KEY_L+0x110>)
 8007486:	601a      	str	r2, [r3, #0]
                Opt_Tri_Voltage();
 8007488:	f7ff ff36 	bl	80072f8 <Opt_Tri_Voltage>
                Scope_UI_Try_Refresh(1);
 800748c:	2001      	movs	r0, #1
 800748e:	f7ff fe7f 	bl	8007190 <Scope_UI_Try_Refresh>
                Buzzer_Beep(0);
 8007492:	2000      	movs	r0, #0
 8007494:	f001 ff9c 	bl	80093d0 <Buzzer_Beep>
            break;
 8007498:	e011      	b.n	80074be <Handle_KEY_L+0xfa>
            } else if (Opt_Tri_Voltage()) {
 800749a:	f7ff ff2d 	bl	80072f8 <Opt_Tri_Voltage>
 800749e:	1e03      	subs	r3, r0, #0
 80074a0:	d006      	beq.n	80074b0 <Handle_KEY_L+0xec>
                Scope_UI_Try_Refresh(1);
 80074a2:	2001      	movs	r0, #1
 80074a4:	f7ff fe74 	bl	8007190 <Scope_UI_Try_Refresh>
                Buzzer_Beep(0);
 80074a8:	2000      	movs	r0, #0
 80074aa:	f001 ff91 	bl	80093d0 <Buzzer_Beep>
            break;
 80074ae:	e006      	b.n	80074be <Handle_KEY_L+0xfa>
                Buzzer_Beep(1);
 80074b0:	2001      	movs	r0, #1
 80074b2:	f001 ff8d 	bl	80093d0 <Buzzer_Beep>
            break;
 80074b6:	e002      	b.n	80074be <Handle_KEY_L+0xfa>
        return;
 80074b8:	46c0      	nop			; (mov r8, r8)
 80074ba:	e000      	b.n	80074be <Handle_KEY_L+0xfa>
            break;
 80074bc:	46c0      	nop			; (mov r8, r8)
    }
}
 80074be:	46bd      	mov	sp, r7
 80074c0:	bdb0      	pop	{r4, r5, r7, pc}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	2000018d 	.word	0x2000018d
 80074c8:	2000018e 	.word	0x2000018e
 80074cc:	2000001c 	.word	0x2000001c
 80074d0:	2000001d 	.word	0x2000001d
 80074d4:	20000194 	.word	0x20000194

080074d8 <Handle_KEY_R>:

static void Handle_KEY_R() {
 80074d8:	b5b0      	push	{r4, r5, r7, lr}
 80074da:	af00      	add	r7, sp, #0
    if (scope_hold)
 80074dc:	4b43      	ldr	r3, [pc, #268]	; (80075ec <Handle_KEY_R+0x114>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d000      	beq.n	80074e6 <Handle_KEY_R+0xe>
 80074e4:	e07d      	b.n	80075e2 <Handle_KEY_R+0x10a>
        return;

    switch (scope_key_l_r_func) {
 80074e6:	4b42      	ldr	r3, [pc, #264]	; (80075f0 <Handle_KEY_R+0x118>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d040      	beq.n	8007570 <Handle_KEY_R+0x98>
 80074ee:	dd00      	ble.n	80074f2 <Handle_KEY_R+0x1a>
 80074f0:	e079      	b.n	80075e6 <Handle_KEY_R+0x10e>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <Handle_KEY_R+0x24>
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d01e      	beq.n	8007538 <Handle_KEY_R+0x60>
                Buzzer_Beep(1);
            }
            break;

        default:
            break;
 80074fa:	e074      	b.n	80075e6 <Handle_KEY_R+0x10e>
            if (scope_ms_div_select <= scope_ms_div_size - 2) {
 80074fc:	4b3d      	ldr	r3, [pc, #244]	; (80075f4 <Handle_KEY_R+0x11c>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	3b01      	subs	r3, #1
 8007502:	4a3d      	ldr	r2, [pc, #244]	; (80075f8 <Handle_KEY_R+0x120>)
 8007504:	7812      	ldrb	r2, [r2, #0]
 8007506:	4293      	cmp	r3, r2
 8007508:	dd10      	ble.n	800752c <Handle_KEY_R+0x54>
                scope_ms_div_select++;
 800750a:	4b3b      	ldr	r3, [pc, #236]	; (80075f8 <Handle_KEY_R+0x120>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	3301      	adds	r3, #1
 8007510:	b2da      	uxtb	r2, r3
 8007512:	4b39      	ldr	r3, [pc, #228]	; (80075f8 <Handle_KEY_R+0x120>)
 8007514:	701a      	strb	r2, [r3, #0]
                Scope_Sample_Refresh_Sample_Rate();
 8007516:	f000 fdd1 	bl	80080bc <Scope_Sample_Refresh_Sample_Rate>
                Scope_UI_Try_Refresh(1);
 800751a:	2001      	movs	r0, #1
 800751c:	f7ff fe38 	bl	8007190 <Scope_UI_Try_Refresh>
                Buzzer_Play(2300, 20);
 8007520:	4b36      	ldr	r3, [pc, #216]	; (80075fc <Handle_KEY_R+0x124>)
 8007522:	2114      	movs	r1, #20
 8007524:	1c18      	adds	r0, r3, #0
 8007526:	f001 ff2b 	bl	8009380 <Buzzer_Play>
            break;
 800752a:	e05d      	b.n	80075e8 <Handle_KEY_R+0x110>
                Buzzer_Play(4600, 100);
 800752c:	4b34      	ldr	r3, [pc, #208]	; (8007600 <Handle_KEY_R+0x128>)
 800752e:	2164      	movs	r1, #100	; 0x64
 8007530:	1c18      	adds	r0, r3, #0
 8007532:	f001 ff25 	bl	8009380 <Buzzer_Play>
            break;
 8007536:	e057      	b.n	80075e8 <Handle_KEY_R+0x110>
            if (scope_voltage_div_select <= scope_voltage_div_size - 2) {
 8007538:	4b32      	ldr	r3, [pc, #200]	; (8007604 <Handle_KEY_R+0x12c>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	3b01      	subs	r3, #1
 800753e:	4a32      	ldr	r2, [pc, #200]	; (8007608 <Handle_KEY_R+0x130>)
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	4293      	cmp	r3, r2
 8007544:	dd0e      	ble.n	8007564 <Handle_KEY_R+0x8c>
                scope_voltage_div_select++;
 8007546:	4b30      	ldr	r3, [pc, #192]	; (8007608 <Handle_KEY_R+0x130>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	3301      	adds	r3, #1
 800754c:	b2da      	uxtb	r2, r3
 800754e:	4b2e      	ldr	r3, [pc, #184]	; (8007608 <Handle_KEY_R+0x130>)
 8007550:	701a      	strb	r2, [r3, #0]
                Scope_UI_Try_Refresh(1);
 8007552:	2001      	movs	r0, #1
 8007554:	f7ff fe1c 	bl	8007190 <Scope_UI_Try_Refresh>
                Buzzer_Play(2300, 20);
 8007558:	4b28      	ldr	r3, [pc, #160]	; (80075fc <Handle_KEY_R+0x124>)
 800755a:	2114      	movs	r1, #20
 800755c:	1c18      	adds	r0, r3, #0
 800755e:	f001 ff0f 	bl	8009380 <Buzzer_Play>
            break;
 8007562:	e041      	b.n	80075e8 <Handle_KEY_R+0x110>
                Buzzer_Play(4600, 100);
 8007564:	4b26      	ldr	r3, [pc, #152]	; (8007600 <Handle_KEY_R+0x128>)
 8007566:	2164      	movs	r1, #100	; 0x64
 8007568:	1c18      	adds	r0, r3, #0
 800756a:	f001 ff09 	bl	8009380 <Buzzer_Play>
            break;
 800756e:	e03b      	b.n	80075e8 <Handle_KEY_R+0x110>
            if (scope_tri_voltage + Get_Step_Voltage() < Get_Max_Voltage()) {
 8007570:	f7ff fe90 	bl	8007294 <Get_Step_Voltage>
 8007574:	1c02      	adds	r2, r0, #0
 8007576:	4b25      	ldr	r3, [pc, #148]	; (800760c <Handle_KEY_R+0x134>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	1c19      	adds	r1, r3, #0
 800757c:	1c10      	adds	r0, r2, #0
 800757e:	f7f8 ff91 	bl	80004a4 <__aeabi_fadd>
 8007582:	1c03      	adds	r3, r0, #0
 8007584:	1c1c      	adds	r4, r3, #0
 8007586:	f7ff fe69 	bl	800725c <Get_Max_Voltage>
 800758a:	1c03      	adds	r3, r0, #0
 800758c:	1c19      	adds	r1, r3, #0
 800758e:	1c20      	adds	r0, r4, #0
 8007590:	f7f8 ff48 	bl	8000424 <__aeabi_fcmplt>
 8007594:	1e03      	subs	r3, r0, #0
 8007596:	d015      	beq.n	80075c4 <Handle_KEY_R+0xec>
                scope_tri_voltage += Get_Step_Voltage();
 8007598:	f7ff fe7c 	bl	8007294 <Get_Step_Voltage>
 800759c:	1c02      	adds	r2, r0, #0
 800759e:	4b1b      	ldr	r3, [pc, #108]	; (800760c <Handle_KEY_R+0x134>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	1c19      	adds	r1, r3, #0
 80075a4:	1c10      	adds	r0, r2, #0
 80075a6:	f7f8 ff7d 	bl	80004a4 <__aeabi_fadd>
 80075aa:	1c03      	adds	r3, r0, #0
 80075ac:	1c1a      	adds	r2, r3, #0
 80075ae:	4b17      	ldr	r3, [pc, #92]	; (800760c <Handle_KEY_R+0x134>)
 80075b0:	601a      	str	r2, [r3, #0]
                Opt_Tri_Voltage();
 80075b2:	f7ff fea1 	bl	80072f8 <Opt_Tri_Voltage>
                Scope_UI_Try_Refresh(1);
 80075b6:	2001      	movs	r0, #1
 80075b8:	f7ff fdea 	bl	8007190 <Scope_UI_Try_Refresh>
                Buzzer_Beep(0);
 80075bc:	2000      	movs	r0, #0
 80075be:	f001 ff07 	bl	80093d0 <Buzzer_Beep>
            break;
 80075c2:	e011      	b.n	80075e8 <Handle_KEY_R+0x110>
            } else if (Opt_Tri_Voltage()) {
 80075c4:	f7ff fe98 	bl	80072f8 <Opt_Tri_Voltage>
 80075c8:	1e03      	subs	r3, r0, #0
 80075ca:	d006      	beq.n	80075da <Handle_KEY_R+0x102>
                Scope_UI_Try_Refresh(1);
 80075cc:	2001      	movs	r0, #1
 80075ce:	f7ff fddf 	bl	8007190 <Scope_UI_Try_Refresh>
                Buzzer_Beep(0);
 80075d2:	2000      	movs	r0, #0
 80075d4:	f001 fefc 	bl	80093d0 <Buzzer_Beep>
            break;
 80075d8:	e006      	b.n	80075e8 <Handle_KEY_R+0x110>
                Buzzer_Beep(1);
 80075da:	2001      	movs	r0, #1
 80075dc:	f001 fef8 	bl	80093d0 <Buzzer_Beep>
            break;
 80075e0:	e002      	b.n	80075e8 <Handle_KEY_R+0x110>
        return;
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	e000      	b.n	80075e8 <Handle_KEY_R+0x110>
            break;
 80075e6:	46c0      	nop			; (mov r8, r8)
    }
}
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bdb0      	pop	{r4, r5, r7, pc}
 80075ec:	2000018d 	.word	0x2000018d
 80075f0:	2000018e 	.word	0x2000018e
 80075f4:	0800c190 	.word	0x0800c190
 80075f8:	2000001c 	.word	0x2000001c
 80075fc:	450fc000 	.word	0x450fc000
 8007600:	458fc000 	.word	0x458fc000
 8007604:	0800c1d0 	.word	0x0800c1d0
 8007608:	2000001d 	.word	0x2000001d
 800760c:	20000194 	.word	0x20000194

08007610 <Scope_Operate_Init>:

void Scope_Operate_Init(void) {
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
    scope_hold = 0;
 8007614:	4b03      	ldr	r3, [pc, #12]	; (8007624 <Scope_Operate_Init+0x14>)
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
    Key_Clear();
 800761a:	f002 f91f 	bl	800985c <Key_Clear>
}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	2000018d 	.word	0x2000018d

08007628 <Scope_Operate_DeInit>:

void Scope_Operate_DeInit(void) {
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
    Key_Clear();
 800762c:	f002 f916 	bl	800985c <Key_Clear>
}
 8007630:	46c0      	nop			; (mov r8, r8)
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <Scope_Operate_Try_Process>:

void Scope_Operate_Try_Process(void) {
 8007638:	b590      	push	{r4, r7, lr}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
    if (!Key_Empty()) {
 800763e:	f002 f91b 	bl	8009878 <Key_Empty>
 8007642:	1e03      	subs	r3, r0, #0
 8007644:	d139      	bne.n	80076ba <Scope_Operate_Try_Process+0x82>
        Key key = Key_Pop();
 8007646:	1dfc      	adds	r4, r7, #7
 8007648:	f002 f8e2 	bl	8009810 <Key_Pop>
 800764c:	0003      	movs	r3, r0
 800764e:	7023      	strb	r3, [r4, #0]
        switch (key) {
 8007650:	1dfb      	adds	r3, r7, #7
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b04      	cmp	r3, #4
 8007656:	d832      	bhi.n	80076be <Scope_Operate_Try_Process+0x86>
 8007658:	009a      	lsls	r2, r3, #2
 800765a:	4b1c      	ldr	r3, [pc, #112]	; (80076cc <Scope_Operate_Try_Process+0x94>)
 800765c:	18d3      	adds	r3, r2, r3
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	469f      	mov	pc, r3
            case Key_1:
                scope_exit = 1;
 8007662:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <Scope_Operate_Try_Process+0x98>)
 8007664:	2201      	movs	r2, #1
 8007666:	701a      	strb	r2, [r3, #0]
                Buzzer_Beep(1);
 8007668:	2001      	movs	r0, #1
 800766a:	f001 feb1 	bl	80093d0 <Buzzer_Beep>
                break;
 800766e:	e029      	b.n	80076c4 <Scope_Operate_Try_Process+0x8c>

            case Key_2:
                scope_hold = !scope_hold;
 8007670:	4b18      	ldr	r3, [pc, #96]	; (80076d4 <Scope_Operate_Try_Process+0x9c>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	425a      	negs	r2, r3
 8007676:	4153      	adcs	r3, r2
 8007678:	b2db      	uxtb	r3, r3
 800767a:	001a      	movs	r2, r3
 800767c:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <Scope_Operate_Try_Process+0x9c>)
 800767e:	701a      	strb	r2, [r3, #0]
                Buzzer_Beep(1);
 8007680:	2001      	movs	r0, #1
 8007682:	f001 fea5 	bl	80093d0 <Buzzer_Beep>
                break;
 8007686:	e01d      	b.n	80076c4 <Scope_Operate_Try_Process+0x8c>

            case Key_OK:
                if (!scope_hold) {
 8007688:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <Scope_Operate_Try_Process+0x9c>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d118      	bne.n	80076c2 <Scope_Operate_Try_Process+0x8a>
                    scope_key_l_r_func = (scope_key_l_r_func + 1) % 3;
 8007690:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <Scope_Operate_Try_Process+0xa0>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	3301      	adds	r3, #1
 8007696:	2103      	movs	r1, #3
 8007698:	0018      	movs	r0, r3
 800769a:	f7f8 feab 	bl	80003f4 <__aeabi_idivmod>
 800769e:	000b      	movs	r3, r1
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <Scope_Operate_Try_Process+0xa0>)
 80076a4:	701a      	strb	r2, [r3, #0]
                    Buzzer_Beep(1);
 80076a6:	2001      	movs	r0, #1
 80076a8:	f001 fe92 	bl	80093d0 <Buzzer_Beep>
                }
                break;
 80076ac:	e009      	b.n	80076c2 <Scope_Operate_Try_Process+0x8a>

            case Key_L:
                Handle_KEY_L();
 80076ae:	f7ff fe89 	bl	80073c4 <Handle_KEY_L>
                break;
 80076b2:	e007      	b.n	80076c4 <Scope_Operate_Try_Process+0x8c>

            case Key_R:
                Handle_KEY_R();
 80076b4:	f7ff ff10 	bl	80074d8 <Handle_KEY_R>
                break;
 80076b8:	e004      	b.n	80076c4 <Scope_Operate_Try_Process+0x8c>

            default:
                break;
        }
    }
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	e002      	b.n	80076c4 <Scope_Operate_Try_Process+0x8c>
                break;
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	e000      	b.n	80076c4 <Scope_Operate_Try_Process+0x8c>
                break;
 80076c2:	46c0      	nop			; (mov r8, r8)
}
 80076c4:	46c0      	nop			; (mov r8, r8)
 80076c6:	46bd      	mov	sp, r7
 80076c8:	b003      	add	sp, #12
 80076ca:	bd90      	pop	{r4, r7, pc}
 80076cc:	0800c1d4 	.word	0x0800c1d4
 80076d0:	2000018c 	.word	0x2000018c
 80076d4:	2000018d 	.word	0x2000018d
 80076d8:	2000018e 	.word	0x2000018e

080076dc <toFreq>:

static uint8_t dma_busy = 0;

/*-----------------------------------------------------静态函数-----------------------------------------------------*/

static inline float toFreq(float cycle) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
    return scope_sample_rate / cycle;
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <toFreq+0x20>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6879      	ldr	r1, [r7, #4]
 80076ea:	1c18      	adds	r0, r3, #0
 80076ec:	f7f9 f876 	bl	80007dc <__aeabi_fdiv>
 80076f0:	1c03      	adds	r3, r0, #0
}
 80076f2:	1c18      	adds	r0, r3, #0
 80076f4:	46bd      	mov	sp, r7
 80076f6:	b002      	add	sp, #8
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	20000470 	.word	0x20000470

08007700 <Min>:

static inline int Min(uint16_t a, uint16_t b) {
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	0002      	movs	r2, r0
 8007708:	1dbb      	adds	r3, r7, #6
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	1d3b      	adds	r3, r7, #4
 800770e:	1c0a      	adds	r2, r1, #0
 8007710:	801a      	strh	r2, [r3, #0]
    if (a < b)
 8007712:	1dba      	adds	r2, r7, #6
 8007714:	1d3b      	adds	r3, r7, #4
 8007716:	8812      	ldrh	r2, [r2, #0]
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d202      	bcs.n	8007724 <Min+0x24>
        return a;
 800771e:	1dbb      	adds	r3, r7, #6
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	e001      	b.n	8007728 <Min+0x28>
    else
        return b;
 8007724:	1d3b      	adds	r3, r7, #4
 8007726:	881b      	ldrh	r3, [r3, #0]
}
 8007728:	0018      	movs	r0, r3
 800772a:	46bd      	mov	sp, r7
 800772c:	b002      	add	sp, #8
 800772e:	bd80      	pop	{r7, pc}

08007730 <Clear_Flag>:

// 初始化所有采样相关的标志位
static void Clear_Flag() {
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
    dma_busy = 0;
 8007736:	4b15      	ldr	r3, [pc, #84]	; (800778c <Clear_Flag+0x5c>)
 8007738:	2200      	movs	r2, #0
 800773a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 800773c:	1dfb      	adds	r3, r7, #7
 800773e:	2200      	movs	r2, #0
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	e019      	b.n	8007778 <Clear_Flag+0x48>
        if (scope_sample_arr[i] == NULL)
 8007744:	1dfb      	adds	r3, r7, #7
 8007746:	781a      	ldrb	r2, [r3, #0]
 8007748:	4b11      	ldr	r3, [pc, #68]	; (8007790 <Clear_Flag+0x60>)
 800774a:	0092      	lsls	r2, r2, #2
 800774c:	58d3      	ldr	r3, [r2, r3]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d017      	beq.n	8007782 <Clear_Flag+0x52>
            break;
        scope_sample_arr[i]->sample_flag = Scope_Sample_Not;
 8007752:	1dfb      	adds	r3, r7, #7
 8007754:	781a      	ldrb	r2, [r3, #0]
 8007756:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <Clear_Flag+0x60>)
 8007758:	0092      	lsls	r2, r2, #2
 800775a:	58d3      	ldr	r3, [r2, r3]
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]
        scope_sample_arr[i]->is_handle = 0;
 8007760:	1dfb      	adds	r3, r7, #7
 8007762:	781a      	ldrb	r2, [r3, #0]
 8007764:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <Clear_Flag+0x60>)
 8007766:	0092      	lsls	r2, r2, #2
 8007768:	58d3      	ldr	r3, [r2, r3]
 800776a:	2200      	movs	r2, #0
 800776c:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 800776e:	1dfb      	adds	r3, r7, #7
 8007770:	781a      	ldrb	r2, [r3, #0]
 8007772:	1dfb      	adds	r3, r7, #7
 8007774:	3201      	adds	r2, #1
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	1dfb      	adds	r3, r7, #7
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0e1      	beq.n	8007744 <Clear_Flag+0x14>
    }
}
 8007780:	e000      	b.n	8007784 <Clear_Flag+0x54>
            break;
 8007782:	46c0      	nop			; (mov r8, r8)
}
 8007784:	46c0      	nop			; (mov r8, r8)
 8007786:	46bd      	mov	sp, r7
 8007788:	b002      	add	sp, #8
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20000198 	.word	0x20000198
 8007790:	2000046c 	.word	0x2000046c

08007794 <Scope_Sample_Process_Sub>:

// 处理采样数据
// 计算：最大值、最小值、平均值、周期、绘图数据
// 返回值：表示是否触发且数据量充足
static uint8_t Scope_Sample_Process_Sub(Scope_Sample *sample) {
 8007794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007796:	b0f9      	sub	sp, #484	; 0x1e4
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
    uint8_t rst;

    for (uint8_t k = 0; k < SCOPE_CHANNEL_NUM; k++) {
 800779c:	23ef      	movs	r3, #239	; 0xef
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	18fb      	adds	r3, r7, r3
 80077a2:	2200      	movs	r2, #0
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	f000 fc0e 	bl	8007fc6 <Scope_Sample_Process_Sub+0x832>
        // 计算最小值、最大值、平均值
        uint16_t min = UINT16_MAX, max = 0;
 80077aa:	23ee      	movs	r3, #238	; 0xee
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	2201      	movs	r2, #1
 80077b2:	4252      	negs	r2, r2
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	23ed      	movs	r3, #237	; 0xed
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	18fb      	adds	r3, r7, r3
 80077bc:	2200      	movs	r2, #0
 80077be:	801a      	strh	r2, [r3, #0]
        float avg;
        uint32_t sum = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	22ea      	movs	r2, #234	; 0xea
 80077c4:	0052      	lsls	r2, r2, #1
 80077c6:	18ba      	adds	r2, r7, r2
 80077c8:	6013      	str	r3, [r2, #0]
        for (uint16_t i = 0; i < SCOPE_SAMPLE_NUM; i++) {
 80077ca:	23e9      	movs	r3, #233	; 0xe9
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	2200      	movs	r2, #0
 80077d2:	801a      	strh	r2, [r3, #0]
 80077d4:	e05f      	b.n	8007896 <Scope_Sample_Process_Sub+0x102>
            if (sample->data[i][k] > max) max = sample->data[i][k];
 80077d6:	20e9      	movs	r0, #233	; 0xe9
 80077d8:	0040      	lsls	r0, r0, #1
 80077da:	183b      	adds	r3, r7, r0
 80077dc:	8819      	ldrh	r1, [r3, #0]
 80077de:	24ef      	movs	r4, #239	; 0xef
 80077e0:	0064      	lsls	r4, r4, #1
 80077e2:	193b      	adds	r3, r7, r4
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	0049      	lsls	r1, r1, #1
 80077ea:	18cb      	adds	r3, r1, r3
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	18d3      	adds	r3, r2, r3
 80077f0:	3302      	adds	r3, #2
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	21ed      	movs	r1, #237	; 0xed
 80077f6:	0049      	lsls	r1, r1, #1
 80077f8:	187a      	adds	r2, r7, r1
 80077fa:	8812      	ldrh	r2, [r2, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d20c      	bcs.n	800781a <Scope_Sample_Process_Sub+0x86>
 8007800:	183b      	adds	r3, r7, r0
 8007802:	8818      	ldrh	r0, [r3, #0]
 8007804:	193b      	adds	r3, r7, r4
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	187b      	adds	r3, r7, r1
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	0040      	lsls	r0, r0, #1
 800780e:	1882      	adds	r2, r0, r2
 8007810:	0052      	lsls	r2, r2, #1
 8007812:	188a      	adds	r2, r1, r2
 8007814:	3202      	adds	r2, #2
 8007816:	8812      	ldrh	r2, [r2, #0]
 8007818:	801a      	strh	r2, [r3, #0]
            if (sample->data[i][k] < min) min = sample->data[i][k];
 800781a:	20e9      	movs	r0, #233	; 0xe9
 800781c:	0040      	lsls	r0, r0, #1
 800781e:	183b      	adds	r3, r7, r0
 8007820:	8819      	ldrh	r1, [r3, #0]
 8007822:	24ef      	movs	r4, #239	; 0xef
 8007824:	0064      	lsls	r4, r4, #1
 8007826:	193b      	adds	r3, r7, r4
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	0049      	lsls	r1, r1, #1
 800782e:	18cb      	adds	r3, r1, r3
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	18d3      	adds	r3, r2, r3
 8007834:	3302      	adds	r3, #2
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	21ee      	movs	r1, #238	; 0xee
 800783a:	0049      	lsls	r1, r1, #1
 800783c:	187a      	adds	r2, r7, r1
 800783e:	8812      	ldrh	r2, [r2, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d90c      	bls.n	800785e <Scope_Sample_Process_Sub+0xca>
 8007844:	183b      	adds	r3, r7, r0
 8007846:	8818      	ldrh	r0, [r3, #0]
 8007848:	193b      	adds	r3, r7, r4
 800784a:	781a      	ldrb	r2, [r3, #0]
 800784c:	187b      	adds	r3, r7, r1
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	0040      	lsls	r0, r0, #1
 8007852:	1882      	adds	r2, r0, r2
 8007854:	0052      	lsls	r2, r2, #1
 8007856:	188a      	adds	r2, r1, r2
 8007858:	3202      	adds	r2, #2
 800785a:	8812      	ldrh	r2, [r2, #0]
 800785c:	801a      	strh	r2, [r3, #0]
            sum += sample->data[i][k];
 800785e:	20e9      	movs	r0, #233	; 0xe9
 8007860:	0040      	lsls	r0, r0, #1
 8007862:	183b      	adds	r3, r7, r0
 8007864:	8819      	ldrh	r1, [r3, #0]
 8007866:	23ef      	movs	r3, #239	; 0xef
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	18fb      	adds	r3, r7, r3
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	0049      	lsls	r1, r1, #1
 8007872:	18cb      	adds	r3, r1, r3
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	18d3      	adds	r3, r2, r3
 8007878:	3302      	adds	r3, #2
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	001a      	movs	r2, r3
 800787e:	21ea      	movs	r1, #234	; 0xea
 8007880:	0049      	lsls	r1, r1, #1
 8007882:	187b      	adds	r3, r7, r1
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	189b      	adds	r3, r3, r2
 8007888:	187a      	adds	r2, r7, r1
 800788a:	6013      	str	r3, [r2, #0]
        for (uint16_t i = 0; i < SCOPE_SAMPLE_NUM; i++) {
 800788c:	183b      	adds	r3, r7, r0
 800788e:	881a      	ldrh	r2, [r3, #0]
 8007890:	183b      	adds	r3, r7, r0
 8007892:	3201      	adds	r2, #1
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	23e9      	movs	r3, #233	; 0xe9
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	18fb      	adds	r3, r7, r3
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	2bfd      	cmp	r3, #253	; 0xfd
 80078a0:	d999      	bls.n	80077d6 <Scope_Sample_Process_Sub+0x42>
        }
        avg = (float) sum / SCOPE_SAMPLE_NUM;
 80078a2:	23ea      	movs	r3, #234	; 0xea
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	18fb      	adds	r3, r7, r3
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	f7f9 fcbf 	bl	800122c <__aeabi_ui2f>
 80078ae:	1c03      	adds	r3, r0, #0
 80078b0:	49c4      	ldr	r1, [pc, #784]	; (8007bc4 <Scope_Sample_Process_Sub+0x430>)
 80078b2:	1c18      	adds	r0, r3, #0
 80078b4:	f7f8 ff92 	bl	80007dc <__aeabi_fdiv>
 80078b8:	1c03      	adds	r3, r0, #0
 80078ba:	26de      	movs	r6, #222	; 0xde
 80078bc:	0076      	lsls	r6, r6, #1
 80078be:	19ba      	adds	r2, r7, r6
 80078c0:	6013      	str	r3, [r2, #0]
        // 因输入反相，输入最大值为数据最小值
        sample->vpp[k] = toVoltage(min) - toVoltage(max);
 80078c2:	23ee      	movs	r3, #238	; 0xee
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	18fb      	adds	r3, r7, r3
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	0018      	movs	r0, r3
 80078cc:	f7f9 fcae 	bl	800122c <__aeabi_ui2f>
 80078d0:	1c03      	adds	r3, r0, #0
 80078d2:	1c18      	adds	r0, r3, #0
 80078d4:	f001 fdc4 	bl	8009460 <toVoltage>
 80078d8:	1c05      	adds	r5, r0, #0
 80078da:	23ed      	movs	r3, #237	; 0xed
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	0018      	movs	r0, r3
 80078e4:	f7f9 fca2 	bl	800122c <__aeabi_ui2f>
 80078e8:	1c03      	adds	r3, r0, #0
 80078ea:	1c18      	adds	r0, r3, #0
 80078ec:	f001 fdb8 	bl	8009460 <toVoltage>
 80078f0:	1c02      	adds	r2, r0, #0
 80078f2:	23ef      	movs	r3, #239	; 0xef
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	18fb      	adds	r3, r7, r3
 80078f8:	781c      	ldrb	r4, [r3, #0]
 80078fa:	1c11      	adds	r1, r2, #0
 80078fc:	1c28      	adds	r0, r5, #0
 80078fe:	f7f9 fa51 	bl	8000da4 <__aeabi_fsub>
 8007902:	1c03      	adds	r3, r0, #0
 8007904:	1c19      	adds	r1, r3, #0
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	1c62      	adds	r2, r4, #1
 800790a:	32ff      	adds	r2, #255	; 0xff
 800790c:	0092      	lsls	r2, r2, #2
 800790e:	50d1      	str	r1, [r2, r3]
        sample->avg[k] = toVoltage(avg);
 8007910:	23ef      	movs	r3, #239	; 0xef
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	18fb      	adds	r3, r7, r3
 8007916:	781c      	ldrb	r4, [r3, #0]
 8007918:	19bb      	adds	r3, r7, r6
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	1c18      	adds	r0, r3, #0
 800791e:	f001 fd9f 	bl	8009460 <toVoltage>
 8007922:	1c01      	adds	r1, r0, #0
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	1ce2      	adds	r2, r4, #3
 8007928:	32ff      	adds	r2, #255	; 0xff
 800792a:	0092      	lsls	r2, r2, #2
 800792c:	50d1      	str	r1, [r2, r3]

        // 找到所有的上升沿、下降沿
        float tri_data = toData(scope_tri_voltage);
 800792e:	4ba6      	ldr	r3, [pc, #664]	; (8007bc8 <Scope_Sample_Process_Sub+0x434>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	1c18      	adds	r0, r3, #0
 8007934:	f001 fdb0 	bl	8009498 <toData>
 8007938:	1c03      	adds	r3, r0, #0
 800793a:	22dc      	movs	r2, #220	; 0xdc
 800793c:	0052      	lsls	r2, r2, #1
 800793e:	18ba      	adds	r2, r7, r2
 8007940:	6013      	str	r3, [r2, #0]
        uint16_t edges[2][SCOPE_MAX_EDGE];
        uint16_t edges_cnt[2] = {0};
 8007942:	23ce      	movs	r3, #206	; 0xce
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	18fb      	adds	r3, r7, r3
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]
        for (uint16_t i = SCOPE_TRI_CHECK_NUM; i < (uint16_t) (SCOPE_SAMPLE_NUM - SCOPE_TRI_CHECK_NUM); i++) {
 800794c:	23e8      	movs	r3, #232	; 0xe8
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	18fb      	adds	r3, r7, r3
 8007952:	2203      	movs	r2, #3
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	e142      	b.n	8007bde <Scope_Sample_Process_Sub+0x44a>
            // 检测数据上升沿
            uint8_t cnt = 0;
 8007958:	23d0      	movs	r3, #208	; 0xd0
 800795a:	33ff      	adds	r3, #255	; 0xff
 800795c:	18fb      	adds	r3, r7, r3
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
            for (uint8_t j = 1; j <= SCOPE_TRI_CHECK_NUM; j++) {
 8007962:	23e7      	movs	r3, #231	; 0xe7
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	18fb      	adds	r3, r7, r3
 8007968:	2201      	movs	r2, #1
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	e047      	b.n	80079fe <Scope_Sample_Process_Sub+0x26a>
                if ((float) sample->data[i - j][k] < tri_data && (float) sample->data[i + j][k] > tri_data)
 800796e:	25e8      	movs	r5, #232	; 0xe8
 8007970:	006d      	lsls	r5, r5, #1
 8007972:	197b      	adds	r3, r7, r5
 8007974:	881a      	ldrh	r2, [r3, #0]
 8007976:	24e7      	movs	r4, #231	; 0xe7
 8007978:	0064      	lsls	r4, r4, #1
 800797a:	193b      	adds	r3, r7, r4
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	1ad1      	subs	r1, r2, r3
 8007980:	26ef      	movs	r6, #239	; 0xef
 8007982:	0076      	lsls	r6, r6, #1
 8007984:	19bb      	adds	r3, r7, r6
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	0049      	lsls	r1, r1, #1
 800798c:	18cb      	adds	r3, r1, r3
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	18d3      	adds	r3, r2, r3
 8007992:	3302      	adds	r3, #2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	0018      	movs	r0, r3
 8007998:	f7f9 fc48 	bl	800122c <__aeabi_ui2f>
 800799c:	1c03      	adds	r3, r0, #0
 800799e:	1c19      	adds	r1, r3, #0
 80079a0:	23dc      	movs	r3, #220	; 0xdc
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	18fa      	adds	r2, r7, r3
 80079a6:	6810      	ldr	r0, [r2, #0]
 80079a8:	f7f8 fd50 	bl	800044c <__aeabi_fcmpgt>
 80079ac:	1e03      	subs	r3, r0, #0
 80079ae:	d02c      	beq.n	8007a0a <Scope_Sample_Process_Sub+0x276>
 80079b0:	197b      	adds	r3, r7, r5
 80079b2:	881a      	ldrh	r2, [r3, #0]
 80079b4:	193b      	adds	r3, r7, r4
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	18d1      	adds	r1, r2, r3
 80079ba:	19bb      	adds	r3, r7, r6
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	0049      	lsls	r1, r1, #1
 80079c2:	18cb      	adds	r3, r1, r3
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	18d3      	adds	r3, r2, r3
 80079c8:	3302      	adds	r3, #2
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	0018      	movs	r0, r3
 80079ce:	f7f9 fc2d 	bl	800122c <__aeabi_ui2f>
 80079d2:	1c03      	adds	r3, r0, #0
 80079d4:	1c19      	adds	r1, r3, #0
 80079d6:	23dc      	movs	r3, #220	; 0xdc
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	18fb      	adds	r3, r7, r3
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	f7f8 fd21 	bl	8000424 <__aeabi_fcmplt>
 80079e2:	1e03      	subs	r3, r0, #0
 80079e4:	d011      	beq.n	8007a0a <Scope_Sample_Process_Sub+0x276>
                    cnt++;
 80079e6:	21d0      	movs	r1, #208	; 0xd0
 80079e8:	31ff      	adds	r1, #255	; 0xff
 80079ea:	187b      	adds	r3, r7, r1
 80079ec:	781a      	ldrb	r2, [r3, #0]
 80079ee:	187b      	adds	r3, r7, r1
 80079f0:	3201      	adds	r2, #1
 80079f2:	701a      	strb	r2, [r3, #0]
            for (uint8_t j = 1; j <= SCOPE_TRI_CHECK_NUM; j++) {
 80079f4:	193b      	adds	r3, r7, r4
 80079f6:	781a      	ldrb	r2, [r3, #0]
 80079f8:	193b      	adds	r3, r7, r4
 80079fa:	3201      	adds	r2, #1
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	23e7      	movs	r3, #231	; 0xe7
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	18fb      	adds	r3, r7, r3
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d9b1      	bls.n	800796e <Scope_Sample_Process_Sub+0x1da>
                else
                    break;
            }
            if (cnt == SCOPE_TRI_CHECK_NUM && (float) sample->data[i][k] < tri_data) {
 8007a0a:	23d0      	movs	r3, #208	; 0xd0
 8007a0c:	33ff      	adds	r3, #255	; 0xff
 8007a0e:	18fb      	adds	r3, r7, r3
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d13a      	bne.n	8007a8c <Scope_Sample_Process_Sub+0x2f8>
 8007a16:	24e8      	movs	r4, #232	; 0xe8
 8007a18:	0064      	lsls	r4, r4, #1
 8007a1a:	193b      	adds	r3, r7, r4
 8007a1c:	8819      	ldrh	r1, [r3, #0]
 8007a1e:	23ef      	movs	r3, #239	; 0xef
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	18fb      	adds	r3, r7, r3
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	0049      	lsls	r1, r1, #1
 8007a2a:	18cb      	adds	r3, r1, r3
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	18d3      	adds	r3, r2, r3
 8007a30:	3302      	adds	r3, #2
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7f9 fbf9 	bl	800122c <__aeabi_ui2f>
 8007a3a:	1c03      	adds	r3, r0, #0
 8007a3c:	1c19      	adds	r1, r3, #0
 8007a3e:	23dc      	movs	r3, #220	; 0xdc
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	18fb      	adds	r3, r7, r3
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	f7f8 fd01 	bl	800044c <__aeabi_fcmpgt>
 8007a4a:	1e03      	subs	r3, r0, #0
 8007a4c:	d01e      	beq.n	8007a8c <Scope_Sample_Process_Sub+0x2f8>
                edges[Scope_Edge_Rise][edges_cnt[Scope_Edge_Rise]++] = i;
 8007a4e:	20ce      	movs	r0, #206	; 0xce
 8007a50:	0040      	lsls	r0, r0, #1
 8007a52:	183b      	adds	r3, r7, r0
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	b291      	uxth	r1, r2
 8007a5a:	183a      	adds	r2, r7, r0
 8007a5c:	8011      	strh	r1, [r2, #0]
 8007a5e:	001a      	movs	r2, r3
 8007a60:	4b5a      	ldr	r3, [pc, #360]	; (8007bcc <Scope_Sample_Process_Sub+0x438>)
 8007a62:	21f0      	movs	r1, #240	; 0xf0
 8007a64:	0049      	lsls	r1, r1, #1
 8007a66:	468c      	mov	ip, r1
 8007a68:	44bc      	add	ip, r7
 8007a6a:	4463      	add	r3, ip
 8007a6c:	0052      	lsls	r2, r2, #1
 8007a6e:	1939      	adds	r1, r7, r4
 8007a70:	8809      	ldrh	r1, [r1, #0]
 8007a72:	52d1      	strh	r1, [r2, r3]
                if (edges_cnt[Scope_Edge_Rise] >= SCOPE_MAX_EDGE) { // 边沿数超出上限
 8007a74:	183b      	adds	r3, r7, r0
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	2b63      	cmp	r3, #99	; 0x63
 8007a7a:	d907      	bls.n	8007a8c <Scope_Sample_Process_Sub+0x2f8>
                    edges_cnt[Scope_Edge_Rise] = edges_cnt[Scope_Edge_Fall] = 0;
 8007a7c:	183b      	adds	r3, r7, r0
 8007a7e:	2200      	movs	r2, #0
 8007a80:	805a      	strh	r2, [r3, #2]
 8007a82:	183b      	adds	r3, r7, r0
 8007a84:	885a      	ldrh	r2, [r3, #2]
 8007a86:	183b      	adds	r3, r7, r0
 8007a88:	801a      	strh	r2, [r3, #0]
                    break;
 8007a8a:	e0af      	b.n	8007bec <Scope_Sample_Process_Sub+0x458>
                }
            }

            // 检查数据下降沿
            cnt = 0;
 8007a8c:	23d0      	movs	r3, #208	; 0xd0
 8007a8e:	33ff      	adds	r3, #255	; 0xff
 8007a90:	18fb      	adds	r3, r7, r3
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
            for (uint8_t j = 1; j <= SCOPE_TRI_CHECK_NUM; j++) {
 8007a96:	23ce      	movs	r3, #206	; 0xce
 8007a98:	33ff      	adds	r3, #255	; 0xff
 8007a9a:	18fb      	adds	r3, r7, r3
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	e047      	b.n	8007b32 <Scope_Sample_Process_Sub+0x39e>
                if ((float) sample->data[i - j][k] > tri_data && (float) sample->data[i + j][k] < tri_data)
 8007aa2:	25e8      	movs	r5, #232	; 0xe8
 8007aa4:	006d      	lsls	r5, r5, #1
 8007aa6:	197b      	adds	r3, r7, r5
 8007aa8:	881a      	ldrh	r2, [r3, #0]
 8007aaa:	24ce      	movs	r4, #206	; 0xce
 8007aac:	34ff      	adds	r4, #255	; 0xff
 8007aae:	193b      	adds	r3, r7, r4
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	1ad1      	subs	r1, r2, r3
 8007ab4:	26ef      	movs	r6, #239	; 0xef
 8007ab6:	0076      	lsls	r6, r6, #1
 8007ab8:	19bb      	adds	r3, r7, r6
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	0049      	lsls	r1, r1, #1
 8007ac0:	18cb      	adds	r3, r1, r3
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	18d3      	adds	r3, r2, r3
 8007ac6:	3302      	adds	r3, #2
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	0018      	movs	r0, r3
 8007acc:	f7f9 fbae 	bl	800122c <__aeabi_ui2f>
 8007ad0:	1c03      	adds	r3, r0, #0
 8007ad2:	1c19      	adds	r1, r3, #0
 8007ad4:	23dc      	movs	r3, #220	; 0xdc
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	18fa      	adds	r2, r7, r3
 8007ada:	6810      	ldr	r0, [r2, #0]
 8007adc:	f7f8 fca2 	bl	8000424 <__aeabi_fcmplt>
 8007ae0:	1e03      	subs	r3, r0, #0
 8007ae2:	d02c      	beq.n	8007b3e <Scope_Sample_Process_Sub+0x3aa>
 8007ae4:	197b      	adds	r3, r7, r5
 8007ae6:	881a      	ldrh	r2, [r3, #0]
 8007ae8:	193b      	adds	r3, r7, r4
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	18d1      	adds	r1, r2, r3
 8007aee:	19bb      	adds	r3, r7, r6
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	0049      	lsls	r1, r1, #1
 8007af6:	18cb      	adds	r3, r1, r3
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	18d3      	adds	r3, r2, r3
 8007afc:	3302      	adds	r3, #2
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	0018      	movs	r0, r3
 8007b02:	f7f9 fb93 	bl	800122c <__aeabi_ui2f>
 8007b06:	1c03      	adds	r3, r0, #0
 8007b08:	1c19      	adds	r1, r3, #0
 8007b0a:	23dc      	movs	r3, #220	; 0xdc
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	18fb      	adds	r3, r7, r3
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	f7f8 fc9b 	bl	800044c <__aeabi_fcmpgt>
 8007b16:	1e03      	subs	r3, r0, #0
 8007b18:	d011      	beq.n	8007b3e <Scope_Sample_Process_Sub+0x3aa>
                    cnt++;
 8007b1a:	21d0      	movs	r1, #208	; 0xd0
 8007b1c:	31ff      	adds	r1, #255	; 0xff
 8007b1e:	187b      	adds	r3, r7, r1
 8007b20:	781a      	ldrb	r2, [r3, #0]
 8007b22:	187b      	adds	r3, r7, r1
 8007b24:	3201      	adds	r2, #1
 8007b26:	701a      	strb	r2, [r3, #0]
            for (uint8_t j = 1; j <= SCOPE_TRI_CHECK_NUM; j++) {
 8007b28:	193b      	adds	r3, r7, r4
 8007b2a:	781a      	ldrb	r2, [r3, #0]
 8007b2c:	193b      	adds	r3, r7, r4
 8007b2e:	3201      	adds	r2, #1
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	23ce      	movs	r3, #206	; 0xce
 8007b34:	33ff      	adds	r3, #255	; 0xff
 8007b36:	18fb      	adds	r3, r7, r3
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d9b1      	bls.n	8007aa2 <Scope_Sample_Process_Sub+0x30e>
                else
                    break;
            }
            if (cnt == SCOPE_TRI_CHECK_NUM && (float) sample->data[i][k] > tri_data) {
 8007b3e:	23d0      	movs	r3, #208	; 0xd0
 8007b40:	33ff      	adds	r3, #255	; 0xff
 8007b42:	18fb      	adds	r3, r7, r3
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d142      	bne.n	8007bd0 <Scope_Sample_Process_Sub+0x43c>
 8007b4a:	24e8      	movs	r4, #232	; 0xe8
 8007b4c:	0064      	lsls	r4, r4, #1
 8007b4e:	193b      	adds	r3, r7, r4
 8007b50:	8819      	ldrh	r1, [r3, #0]
 8007b52:	23ef      	movs	r3, #239	; 0xef
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	18fb      	adds	r3, r7, r3
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	0049      	lsls	r1, r1, #1
 8007b5e:	18cb      	adds	r3, r1, r3
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	18d3      	adds	r3, r2, r3
 8007b64:	3302      	adds	r3, #2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f7f9 fb5f 	bl	800122c <__aeabi_ui2f>
 8007b6e:	1c03      	adds	r3, r0, #0
 8007b70:	1c19      	adds	r1, r3, #0
 8007b72:	23dc      	movs	r3, #220	; 0xdc
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	6818      	ldr	r0, [r3, #0]
 8007b7a:	f7f8 fc53 	bl	8000424 <__aeabi_fcmplt>
 8007b7e:	1e03      	subs	r3, r0, #0
 8007b80:	d026      	beq.n	8007bd0 <Scope_Sample_Process_Sub+0x43c>
                edges[Scope_Edge_Fall][edges_cnt[Scope_Edge_Fall]++] = i;
 8007b82:	20ce      	movs	r0, #206	; 0xce
 8007b84:	0040      	lsls	r0, r0, #1
 8007b86:	183b      	adds	r3, r7, r0
 8007b88:	885b      	ldrh	r3, [r3, #2]
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	b291      	uxth	r1, r2
 8007b8e:	183a      	adds	r2, r7, r0
 8007b90:	8051      	strh	r1, [r2, #2]
 8007b92:	001a      	movs	r2, r3
 8007b94:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <Scope_Sample_Process_Sub+0x438>)
 8007b96:	21f0      	movs	r1, #240	; 0xf0
 8007b98:	0049      	lsls	r1, r1, #1
 8007b9a:	468c      	mov	ip, r1
 8007b9c:	44bc      	add	ip, r7
 8007b9e:	4463      	add	r3, ip
 8007ba0:	3264      	adds	r2, #100	; 0x64
 8007ba2:	0052      	lsls	r2, r2, #1
 8007ba4:	1939      	adds	r1, r7, r4
 8007ba6:	8809      	ldrh	r1, [r1, #0]
 8007ba8:	52d1      	strh	r1, [r2, r3]
                if (edges_cnt[Scope_Edge_Fall] >= SCOPE_MAX_EDGE) { // 边沿数超出上限
 8007baa:	183b      	adds	r3, r7, r0
 8007bac:	885b      	ldrh	r3, [r3, #2]
 8007bae:	2b63      	cmp	r3, #99	; 0x63
 8007bb0:	d90e      	bls.n	8007bd0 <Scope_Sample_Process_Sub+0x43c>
                    edges_cnt[Scope_Edge_Rise] = edges_cnt[Scope_Edge_Fall] = 0;
 8007bb2:	183b      	adds	r3, r7, r0
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	805a      	strh	r2, [r3, #2]
 8007bb8:	183b      	adds	r3, r7, r0
 8007bba:	885a      	ldrh	r2, [r3, #2]
 8007bbc:	183b      	adds	r3, r7, r0
 8007bbe:	801a      	strh	r2, [r3, #0]
                    break;
 8007bc0:	e014      	b.n	8007bec <Scope_Sample_Process_Sub+0x458>
 8007bc2:	46c0      	nop			; (mov r8, r8)
 8007bc4:	437e0000 	.word	0x437e0000
 8007bc8:	20000194 	.word	0x20000194
 8007bcc:	fffffe2c 	.word	0xfffffe2c
        for (uint16_t i = SCOPE_TRI_CHECK_NUM; i < (uint16_t) (SCOPE_SAMPLE_NUM - SCOPE_TRI_CHECK_NUM); i++) {
 8007bd0:	21e8      	movs	r1, #232	; 0xe8
 8007bd2:	0049      	lsls	r1, r1, #1
 8007bd4:	187b      	adds	r3, r7, r1
 8007bd6:	881a      	ldrh	r2, [r3, #0]
 8007bd8:	187b      	adds	r3, r7, r1
 8007bda:	3201      	adds	r2, #1
 8007bdc:	801a      	strh	r2, [r3, #0]
 8007bde:	23e8      	movs	r3, #232	; 0xe8
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	2bfa      	cmp	r3, #250	; 0xfa
 8007be8:	d800      	bhi.n	8007bec <Scope_Sample_Process_Sub+0x458>
 8007bea:	e6b5      	b.n	8007958 <Scope_Sample_Process_Sub+0x1c4>
                }
            }
        }

        // 计算周期
        float cycle = 0.0f;
 8007bec:	2300      	movs	r3, #0
 8007bee:	26e4      	movs	r6, #228	; 0xe4
 8007bf0:	0076      	lsls	r6, r6, #1
 8007bf2:	19ba      	adds	r2, r7, r6
 8007bf4:	6013      	str	r3, [r2, #0]
        if (edges_cnt[Scope_Edge_Rise] > 1 && edges_cnt[Scope_Edge_Fall] > 1) {
 8007bf6:	25ce      	movs	r5, #206	; 0xce
 8007bf8:	006d      	lsls	r5, r5, #1
 8007bfa:	197b      	adds	r3, r7, r5
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d967      	bls.n	8007cd2 <Scope_Sample_Process_Sub+0x53e>
 8007c02:	197b      	adds	r3, r7, r5
 8007c04:	885b      	ldrh	r3, [r3, #2]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d963      	bls.n	8007cd2 <Scope_Sample_Process_Sub+0x53e>
            float cycle1 =
                    (float) (edges[Scope_Edge_Rise][edges_cnt[Scope_Edge_Rise] - 1] - edges[Scope_Edge_Rise][0]) /
 8007c0a:	197b      	adds	r3, r7, r5
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	1e5a      	subs	r2, r3, #1
 8007c10:	4bd4      	ldr	r3, [pc, #848]	; (8007f64 <Scope_Sample_Process_Sub+0x7d0>)
 8007c12:	21f0      	movs	r1, #240	; 0xf0
 8007c14:	0049      	lsls	r1, r1, #1
 8007c16:	468c      	mov	ip, r1
 8007c18:	44bc      	add	ip, r7
 8007c1a:	4463      	add	r3, ip
 8007c1c:	0052      	lsls	r2, r2, #1
 8007c1e:	5ad3      	ldrh	r3, [r2, r3]
 8007c20:	001a      	movs	r2, r3
 8007c22:	4bd0      	ldr	r3, [pc, #832]	; (8007f64 <Scope_Sample_Process_Sub+0x7d0>)
 8007c24:	21f0      	movs	r1, #240	; 0xf0
 8007c26:	0049      	lsls	r1, r1, #1
 8007c28:	468c      	mov	ip, r1
 8007c2a:	44bc      	add	ip, r7
 8007c2c:	4463      	add	r3, ip
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	0018      	movs	r0, r3
 8007c34:	f7f9 fab4 	bl	80011a0 <__aeabi_i2f>
 8007c38:	1c04      	adds	r4, r0, #0
                    (float) (edges_cnt[Scope_Edge_Rise] - 1);
 8007c3a:	197b      	adds	r3, r7, r5
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	0018      	movs	r0, r3
 8007c42:	f7f9 faad 	bl	80011a0 <__aeabi_i2f>
 8007c46:	1c03      	adds	r3, r0, #0
            float cycle1 =
 8007c48:	1c19      	adds	r1, r3, #0
 8007c4a:	1c20      	adds	r0, r4, #0
 8007c4c:	f7f8 fdc6 	bl	80007dc <__aeabi_fdiv>
 8007c50:	1c03      	adds	r3, r0, #0
 8007c52:	22da      	movs	r2, #218	; 0xda
 8007c54:	0052      	lsls	r2, r2, #1
 8007c56:	18b9      	adds	r1, r7, r2
 8007c58:	600b      	str	r3, [r1, #0]
            float cycle2 =
                    (float) (edges[Scope_Edge_Fall][edges_cnt[Scope_Edge_Fall] - 1] - edges[Scope_Edge_Fall][0]) /
 8007c5a:	197b      	adds	r3, r7, r5
 8007c5c:	885b      	ldrh	r3, [r3, #2]
 8007c5e:	1e5a      	subs	r2, r3, #1
 8007c60:	4bc0      	ldr	r3, [pc, #768]	; (8007f64 <Scope_Sample_Process_Sub+0x7d0>)
 8007c62:	21f0      	movs	r1, #240	; 0xf0
 8007c64:	0049      	lsls	r1, r1, #1
 8007c66:	468c      	mov	ip, r1
 8007c68:	44bc      	add	ip, r7
 8007c6a:	4463      	add	r3, ip
 8007c6c:	3264      	adds	r2, #100	; 0x64
 8007c6e:	0052      	lsls	r2, r2, #1
 8007c70:	5ad3      	ldrh	r3, [r2, r3]
 8007c72:	0019      	movs	r1, r3
 8007c74:	4bbb      	ldr	r3, [pc, #748]	; (8007f64 <Scope_Sample_Process_Sub+0x7d0>)
 8007c76:	20f0      	movs	r0, #240	; 0xf0
 8007c78:	0040      	lsls	r0, r0, #1
 8007c7a:	4684      	mov	ip, r0
 8007c7c:	44bc      	add	ip, r7
 8007c7e:	4463      	add	r3, ip
 8007c80:	22c8      	movs	r2, #200	; 0xc8
 8007c82:	5a9b      	ldrh	r3, [r3, r2]
 8007c84:	1acb      	subs	r3, r1, r3
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7f9 fa8a 	bl	80011a0 <__aeabi_i2f>
 8007c8c:	1c04      	adds	r4, r0, #0
                    (float) (edges_cnt[Scope_Edge_Fall] - 1);
 8007c8e:	197b      	adds	r3, r7, r5
 8007c90:	885b      	ldrh	r3, [r3, #2]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	0018      	movs	r0, r3
 8007c96:	f7f9 fa83 	bl	80011a0 <__aeabi_i2f>
 8007c9a:	1c03      	adds	r3, r0, #0
            float cycle2 =
 8007c9c:	1c19      	adds	r1, r3, #0
 8007c9e:	1c20      	adds	r0, r4, #0
 8007ca0:	f7f8 fd9c 	bl	80007dc <__aeabi_fdiv>
 8007ca4:	1c03      	adds	r3, r0, #0
 8007ca6:	21d8      	movs	r1, #216	; 0xd8
 8007ca8:	0049      	lsls	r1, r1, #1
 8007caa:	1878      	adds	r0, r7, r1
 8007cac:	6003      	str	r3, [r0, #0]
            cycle = (cycle1 + cycle2) / 2;
 8007cae:	187b      	adds	r3, r7, r1
 8007cb0:	6819      	ldr	r1, [r3, #0]
 8007cb2:	22da      	movs	r2, #218	; 0xda
 8007cb4:	0052      	lsls	r2, r2, #1
 8007cb6:	18bb      	adds	r3, r7, r2
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	f7f8 fbf3 	bl	80004a4 <__aeabi_fadd>
 8007cbe:	1c03      	adds	r3, r0, #0
 8007cc0:	2180      	movs	r1, #128	; 0x80
 8007cc2:	05c9      	lsls	r1, r1, #23
 8007cc4:	1c18      	adds	r0, r3, #0
 8007cc6:	f7f8 fd89 	bl	80007dc <__aeabi_fdiv>
 8007cca:	1c03      	adds	r3, r0, #0
 8007ccc:	19ba      	adds	r2, r7, r6
 8007cce:	6013      	str	r3, [r2, #0]
        if (edges_cnt[Scope_Edge_Rise] > 1 && edges_cnt[Scope_Edge_Fall] > 1) {
 8007cd0:	e06a      	b.n	8007da8 <Scope_Sample_Process_Sub+0x614>
        } else if (edges_cnt[Scope_Edge_Rise] > 1) {
 8007cd2:	25ce      	movs	r5, #206	; 0xce
 8007cd4:	006d      	lsls	r5, r5, #1
 8007cd6:	197b      	adds	r3, r7, r5
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d92e      	bls.n	8007d3c <Scope_Sample_Process_Sub+0x5a8>
            float cycle1 =
                    (float) (edges[Scope_Edge_Rise][edges_cnt[Scope_Edge_Rise] - 1] - edges[Scope_Edge_Rise][0]) /
 8007cde:	197b      	adds	r3, r7, r5
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	1e5a      	subs	r2, r3, #1
 8007ce4:	4b9f      	ldr	r3, [pc, #636]	; (8007f64 <Scope_Sample_Process_Sub+0x7d0>)
 8007ce6:	21f0      	movs	r1, #240	; 0xf0
 8007ce8:	0049      	lsls	r1, r1, #1
 8007cea:	468c      	mov	ip, r1
 8007cec:	44bc      	add	ip, r7
 8007cee:	4463      	add	r3, ip
 8007cf0:	0052      	lsls	r2, r2, #1
 8007cf2:	5ad3      	ldrh	r3, [r2, r3]
 8007cf4:	001a      	movs	r2, r3
 8007cf6:	4b9b      	ldr	r3, [pc, #620]	; (8007f64 <Scope_Sample_Process_Sub+0x7d0>)
 8007cf8:	21f0      	movs	r1, #240	; 0xf0
 8007cfa:	0049      	lsls	r1, r1, #1
 8007cfc:	468c      	mov	ip, r1
 8007cfe:	44bc      	add	ip, r7
 8007d00:	4463      	add	r3, ip
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	0018      	movs	r0, r3
 8007d08:	f7f9 fa4a 	bl	80011a0 <__aeabi_i2f>
 8007d0c:	1c04      	adds	r4, r0, #0
                    (float) (edges_cnt[Scope_Edge_Rise] - 1);
 8007d0e:	197b      	adds	r3, r7, r5
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	0018      	movs	r0, r3
 8007d16:	f7f9 fa43 	bl	80011a0 <__aeabi_i2f>
 8007d1a:	1c03      	adds	r3, r0, #0
            float cycle1 =
 8007d1c:	1c19      	adds	r1, r3, #0
 8007d1e:	1c20      	adds	r0, r4, #0
 8007d20:	f7f8 fd5c 	bl	80007dc <__aeabi_fdiv>
 8007d24:	1c03      	adds	r3, r0, #0
 8007d26:	22d4      	movs	r2, #212	; 0xd4
 8007d28:	0052      	lsls	r2, r2, #1
 8007d2a:	18b9      	adds	r1, r7, r2
 8007d2c:	600b      	str	r3, [r1, #0]
            cycle = cycle1;
 8007d2e:	18bb      	adds	r3, r7, r2
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	22e4      	movs	r2, #228	; 0xe4
 8007d34:	0052      	lsls	r2, r2, #1
 8007d36:	18ba      	adds	r2, r7, r2
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	e035      	b.n	8007da8 <Scope_Sample_Process_Sub+0x614>
        } else if (edges_cnt[Scope_Edge_Fall] > 1) {
 8007d3c:	25ce      	movs	r5, #206	; 0xce
 8007d3e:	006d      	lsls	r5, r5, #1
 8007d40:	197b      	adds	r3, r7, r5
 8007d42:	885b      	ldrh	r3, [r3, #2]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d92f      	bls.n	8007da8 <Scope_Sample_Process_Sub+0x614>
            float cycle2 =
                    (float) (edges[Scope_Edge_Fall][edges_cnt[Scope_Edge_Fall] - 1] - edges[Scope_Edge_Fall][0]) /
 8007d48:	197b      	adds	r3, r7, r5
 8007d4a:	885b      	ldrh	r3, [r3, #2]
 8007d4c:	1e5a      	subs	r2, r3, #1
 8007d4e:	4b85      	ldr	r3, [pc, #532]	; (8007f64 <Scope_Sample_Process_Sub+0x7d0>)
 8007d50:	21f0      	movs	r1, #240	; 0xf0
 8007d52:	0049      	lsls	r1, r1, #1
 8007d54:	468c      	mov	ip, r1
 8007d56:	44bc      	add	ip, r7
 8007d58:	4463      	add	r3, ip
 8007d5a:	3264      	adds	r2, #100	; 0x64
 8007d5c:	0052      	lsls	r2, r2, #1
 8007d5e:	5ad3      	ldrh	r3, [r2, r3]
 8007d60:	0019      	movs	r1, r3
 8007d62:	4b80      	ldr	r3, [pc, #512]	; (8007f64 <Scope_Sample_Process_Sub+0x7d0>)
 8007d64:	22f0      	movs	r2, #240	; 0xf0
 8007d66:	0052      	lsls	r2, r2, #1
 8007d68:	4694      	mov	ip, r2
 8007d6a:	44bc      	add	ip, r7
 8007d6c:	4463      	add	r3, ip
 8007d6e:	22c8      	movs	r2, #200	; 0xc8
 8007d70:	5a9b      	ldrh	r3, [r3, r2]
 8007d72:	1acb      	subs	r3, r1, r3
 8007d74:	0018      	movs	r0, r3
 8007d76:	f7f9 fa13 	bl	80011a0 <__aeabi_i2f>
 8007d7a:	1c04      	adds	r4, r0, #0
                    (float) (edges_cnt[Scope_Edge_Fall] - 1);
 8007d7c:	197b      	adds	r3, r7, r5
 8007d7e:	885b      	ldrh	r3, [r3, #2]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	0018      	movs	r0, r3
 8007d84:	f7f9 fa0c 	bl	80011a0 <__aeabi_i2f>
 8007d88:	1c03      	adds	r3, r0, #0
            float cycle2 =
 8007d8a:	1c19      	adds	r1, r3, #0
 8007d8c:	1c20      	adds	r0, r4, #0
 8007d8e:	f7f8 fd25 	bl	80007dc <__aeabi_fdiv>
 8007d92:	1c03      	adds	r3, r0, #0
 8007d94:	22d6      	movs	r2, #214	; 0xd6
 8007d96:	0052      	lsls	r2, r2, #1
 8007d98:	18b9      	adds	r1, r7, r2
 8007d9a:	600b      	str	r3, [r1, #0]
            cycle = cycle2;
 8007d9c:	18bb      	adds	r3, r7, r2
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	22e4      	movs	r2, #228	; 0xe4
 8007da2:	0052      	lsls	r2, r2, #1
 8007da4:	18ba      	adds	r2, r7, r2
 8007da6:	6013      	str	r3, [r2, #0]
        }
        sample->freq[k] = toFreq(cycle);
 8007da8:	25ef      	movs	r5, #239	; 0xef
 8007daa:	006d      	lsls	r5, r5, #1
 8007dac:	197b      	adds	r3, r7, r5
 8007dae:	781c      	ldrb	r4, [r3, #0]
 8007db0:	23e4      	movs	r3, #228	; 0xe4
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	18fb      	adds	r3, r7, r3
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	1c18      	adds	r0, r3, #0
 8007dba:	f7ff fc8f 	bl	80076dc <toFreq>
 8007dbe:	1c01      	adds	r1, r0, #0
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	1d62      	adds	r2, r4, #5
 8007dc4:	32ff      	adds	r2, #255	; 0xff
 8007dc6:	0092      	lsls	r2, r2, #2
 8007dc8:	50d1      	str	r1, [r2, r3]

        // Channel1为触发通道
        if (k == scope_tri_channel) {
 8007dca:	4b67      	ldr	r3, [pc, #412]	; (8007f68 <Scope_Sample_Process_Sub+0x7d4>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	197a      	adds	r2, r7, r5
 8007dd0:	7812      	ldrb	r2, [r2, #0]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d000      	beq.n	8007dd8 <Scope_Sample_Process_Sub+0x644>
 8007dd6:	e0ef      	b.n	8007fb8 <Scope_Sample_Process_Sub+0x824>
            // 选取最佳触发位置：最居中的触发位置
            uint16_t min_diff = UINT16_MAX, min_diff_p = 0;
 8007dd8:	23e3      	movs	r3, #227	; 0xe3
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	18fb      	adds	r3, r7, r3
 8007dde:	2201      	movs	r2, #1
 8007de0:	4252      	negs	r2, r2
 8007de2:	801a      	strh	r2, [r3, #0]
 8007de4:	23e2      	movs	r3, #226	; 0xe2
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	18fb      	adds	r3, r7, r3
 8007dea:	2200      	movs	r2, #0
 8007dec:	801a      	strh	r2, [r3, #0]
            for (uint16_t i = 0; i < edges_cnt[!scope_tri_edge]; i++) { // 因输入反相，输入上升沿是数据下降沿
 8007dee:	23e1      	movs	r3, #225	; 0xe1
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	18fb      	adds	r3, r7, r3
 8007df4:	2200      	movs	r2, #0
 8007df6:	801a      	strh	r2, [r3, #0]
 8007df8:	e047      	b.n	8007e8a <Scope_Sample_Process_Sub+0x6f6>
                int diff = abs((int) edges[!scope_tri_edge][i] * 2 - SCOPE_SAMPLE_NUM);
 8007dfa:	4b5c      	ldr	r3, [pc, #368]	; (8007f6c <Scope_Sample_Process_Sub+0x7d8>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	425a      	negs	r2, r3
 8007e00:	4153      	adcs	r3, r2
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	0018      	movs	r0, r3
 8007e06:	25e1      	movs	r5, #225	; 0xe1
 8007e08:	006d      	lsls	r5, r5, #1
 8007e0a:	197b      	adds	r3, r7, r5
 8007e0c:	881a      	ldrh	r2, [r3, #0]
 8007e0e:	4b55      	ldr	r3, [pc, #340]	; (8007f64 <Scope_Sample_Process_Sub+0x7d0>)
 8007e10:	21f0      	movs	r1, #240	; 0xf0
 8007e12:	0049      	lsls	r1, r1, #1
 8007e14:	468c      	mov	ip, r1
 8007e16:	44bc      	add	ip, r7
 8007e18:	4463      	add	r3, ip
 8007e1a:	2164      	movs	r1, #100	; 0x64
 8007e1c:	4341      	muls	r1, r0
 8007e1e:	188a      	adds	r2, r1, r2
 8007e20:	0052      	lsls	r2, r2, #1
 8007e22:	5ad3      	ldrh	r3, [r2, r3]
 8007e24:	3b7f      	subs	r3, #127	; 0x7f
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	17da      	asrs	r2, r3, #31
 8007e2a:	189b      	adds	r3, r3, r2
 8007e2c:	4053      	eors	r3, r2
 8007e2e:	21d0      	movs	r1, #208	; 0xd0
 8007e30:	0049      	lsls	r1, r1, #1
 8007e32:	187a      	adds	r2, r7, r1
 8007e34:	6013      	str	r3, [r2, #0]
                if (diff < min_diff) {
 8007e36:	20e3      	movs	r0, #227	; 0xe3
 8007e38:	0040      	lsls	r0, r0, #1
 8007e3a:	183b      	adds	r3, r7, r0
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	187a      	adds	r2, r7, r1
 8007e40:	6812      	ldr	r2, [r2, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	da1a      	bge.n	8007e7c <Scope_Sample_Process_Sub+0x6e8>
                    min_diff = diff;
 8007e46:	183b      	adds	r3, r7, r0
 8007e48:	187a      	adds	r2, r7, r1
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	801a      	strh	r2, [r3, #0]
                    min_diff_p = edges[!scope_tri_edge][i];
 8007e4e:	4b47      	ldr	r3, [pc, #284]	; (8007f6c <Scope_Sample_Process_Sub+0x7d8>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	425a      	negs	r2, r3
 8007e54:	4153      	adcs	r3, r2
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	001c      	movs	r4, r3
 8007e5a:	197b      	adds	r3, r7, r5
 8007e5c:	8819      	ldrh	r1, [r3, #0]
 8007e5e:	23e2      	movs	r3, #226	; 0xe2
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	18fb      	adds	r3, r7, r3
 8007e64:	4a3f      	ldr	r2, [pc, #252]	; (8007f64 <Scope_Sample_Process_Sub+0x7d0>)
 8007e66:	20f0      	movs	r0, #240	; 0xf0
 8007e68:	0040      	lsls	r0, r0, #1
 8007e6a:	4684      	mov	ip, r0
 8007e6c:	44bc      	add	ip, r7
 8007e6e:	4462      	add	r2, ip
 8007e70:	2064      	movs	r0, #100	; 0x64
 8007e72:	4360      	muls	r0, r4
 8007e74:	1841      	adds	r1, r0, r1
 8007e76:	0049      	lsls	r1, r1, #1
 8007e78:	5a8a      	ldrh	r2, [r1, r2]
 8007e7a:	801a      	strh	r2, [r3, #0]
            for (uint16_t i = 0; i < edges_cnt[!scope_tri_edge]; i++) { // 因输入反相，输入上升沿是数据下降沿
 8007e7c:	21e1      	movs	r1, #225	; 0xe1
 8007e7e:	0049      	lsls	r1, r1, #1
 8007e80:	187b      	adds	r3, r7, r1
 8007e82:	881a      	ldrh	r2, [r3, #0]
 8007e84:	187b      	adds	r3, r7, r1
 8007e86:	3201      	adds	r2, #1
 8007e88:	801a      	strh	r2, [r3, #0]
 8007e8a:	4b38      	ldr	r3, [pc, #224]	; (8007f6c <Scope_Sample_Process_Sub+0x7d8>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	425a      	negs	r2, r3
 8007e90:	4153      	adcs	r3, r2
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	001a      	movs	r2, r3
 8007e96:	23ce      	movs	r3, #206	; 0xce
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	18fb      	adds	r3, r7, r3
 8007e9c:	0052      	lsls	r2, r2, #1
 8007e9e:	5ad3      	ldrh	r3, [r2, r3]
 8007ea0:	22e1      	movs	r2, #225	; 0xe1
 8007ea2:	0052      	lsls	r2, r2, #1
 8007ea4:	18ba      	adds	r2, r7, r2
 8007ea6:	8812      	ldrh	r2, [r2, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d3a6      	bcc.n	8007dfa <Scope_Sample_Process_Sub+0x666>
                }
            }
            uint16_t tri_p = min_diff_p;
 8007eac:	21e0      	movs	r1, #224	; 0xe0
 8007eae:	0049      	lsls	r1, r1, #1
 8007eb0:	187b      	adds	r3, r7, r1
 8007eb2:	25e2      	movs	r5, #226	; 0xe2
 8007eb4:	006d      	lsls	r5, r5, #1
 8007eb6:	197a      	adds	r2, r7, r5
 8007eb8:	8812      	ldrh	r2, [r2, #0]
 8007eba:	801a      	strh	r2, [r3, #0]

            // 检查是否有足够的数据用于绘图
            uint16_t max_len = Min(tri_p, SCOPE_SAMPLE_NUM - tri_p) * 2;
 8007ebc:	187b      	adds	r3, r7, r1
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	22fe      	movs	r2, #254	; 0xfe
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	187b      	adds	r3, r7, r1
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	0011      	movs	r1, r2
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f7ff fc17 	bl	8007700 <Min>
 8007ed2:	0003      	movs	r3, r0
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	26d3      	movs	r6, #211	; 0xd3
 8007ed8:	0076      	lsls	r6, r6, #1
 8007eda:	19ba      	adds	r2, r7, r6
 8007edc:	18db      	adds	r3, r3, r3
 8007ede:	8013      	strh	r3, [r2, #0]
            // 采样率 * 示波器横轴总时间 = 所需样本数
            uint16_t need_len = (uint16_t) (
                    scope_sample_rate / 1000.0f * (scope_ms_div[scope_ms_div_select] * SCOPE_X_GRID) + 0.5f);
 8007ee0:	4b23      	ldr	r3, [pc, #140]	; (8007f70 <Scope_Sample_Process_Sub+0x7dc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4923      	ldr	r1, [pc, #140]	; (8007f74 <Scope_Sample_Process_Sub+0x7e0>)
 8007ee6:	1c18      	adds	r0, r3, #0
 8007ee8:	f7f8 fc78 	bl	80007dc <__aeabi_fdiv>
 8007eec:	1c03      	adds	r3, r0, #0
 8007eee:	1c1c      	adds	r4, r3, #0
 8007ef0:	4b21      	ldr	r3, [pc, #132]	; (8007f78 <Scope_Sample_Process_Sub+0x7e4>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	001a      	movs	r2, r3
 8007ef6:	4b21      	ldr	r3, [pc, #132]	; (8007f7c <Scope_Sample_Process_Sub+0x7e8>)
 8007ef8:	0092      	lsls	r2, r2, #2
 8007efa:	58d3      	ldr	r3, [r2, r3]
 8007efc:	4920      	ldr	r1, [pc, #128]	; (8007f80 <Scope_Sample_Process_Sub+0x7ec>)
 8007efe:	1c18      	adds	r0, r3, #0
 8007f00:	f7f8 fe36 	bl	8000b70 <__aeabi_fmul>
 8007f04:	1c03      	adds	r3, r0, #0
 8007f06:	1c19      	adds	r1, r3, #0
 8007f08:	1c20      	adds	r0, r4, #0
 8007f0a:	f7f8 fe31 	bl	8000b70 <__aeabi_fmul>
 8007f0e:	1c03      	adds	r3, r0, #0
 8007f10:	21fc      	movs	r1, #252	; 0xfc
 8007f12:	0589      	lsls	r1, r1, #22
 8007f14:	1c18      	adds	r0, r3, #0
 8007f16:	f7f8 fac5 	bl	80004a4 <__aeabi_fadd>
 8007f1a:	1c03      	adds	r3, r0, #0
            uint16_t need_len = (uint16_t) (
 8007f1c:	22d2      	movs	r2, #210	; 0xd2
 8007f1e:	0052      	lsls	r2, r2, #1
 8007f20:	18bc      	adds	r4, r7, r2
 8007f22:	1c18      	adds	r0, r3, #0
 8007f24:	f7f8 faa6 	bl	8000474 <__aeabi_f2uiz>
 8007f28:	0003      	movs	r3, r0
 8007f2a:	8023      	strh	r3, [r4, #0]
            if (max_len < need_len || min_diff_p == 0) { // min_diff_p == 0 说明边沿数为0（也有可能是因为超出上限而被置为0）
 8007f2c:	19ba      	adds	r2, r7, r6
 8007f2e:	23d2      	movs	r3, #210	; 0xd2
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	18fb      	adds	r3, r7, r3
 8007f34:	8812      	ldrh	r2, [r2, #0]
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d303      	bcc.n	8007f44 <Scope_Sample_Process_Sub+0x7b0>
 8007f3c:	197b      	adds	r3, r7, r5
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d11f      	bne.n	8007f84 <Scope_Sample_Process_Sub+0x7f0>
                tri_p = need_len / 2;
 8007f44:	23e0      	movs	r3, #224	; 0xe0
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	18fb      	adds	r3, r7, r3
 8007f4a:	22d2      	movs	r2, #210	; 0xd2
 8007f4c:	0052      	lsls	r2, r2, #1
 8007f4e:	18ba      	adds	r2, r7, r2
 8007f50:	8812      	ldrh	r2, [r2, #0]
 8007f52:	0852      	lsrs	r2, r2, #1
 8007f54:	801a      	strh	r2, [r3, #0]
                rst = 0;
 8007f56:	23e0      	movs	r3, #224	; 0xe0
 8007f58:	33ff      	adds	r3, #255	; 0xff
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
 8007f60:	e015      	b.n	8007f8e <Scope_Sample_Process_Sub+0x7fa>
 8007f62:	46c0      	nop			; (mov r8, r8)
 8007f64:	fffffe2c 	.word	0xfffffe2c
 8007f68:	20000190 	.word	0x20000190
 8007f6c:	2000018f 	.word	0x2000018f
 8007f70:	20000470 	.word	0x20000470
 8007f74:	447a0000 	.word	0x447a0000
 8007f78:	2000001c 	.word	0x2000001c
 8007f7c:	0800c0f0 	.word	0x0800c0f0
 8007f80:	41200000 	.word	0x41200000
            } else {
                rst = 1;
 8007f84:	23e0      	movs	r3, #224	; 0xe0
 8007f86:	33ff      	adds	r3, #255	; 0xff
 8007f88:	18fb      	adds	r3, r7, r3
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	701a      	strb	r2, [r3, #0]
            }

            // 标记有效绘图数据在原数组中的位置
            sample->sp = tri_p - need_len / 2;
 8007f8e:	20d2      	movs	r0, #210	; 0xd2
 8007f90:	0040      	lsls	r0, r0, #1
 8007f92:	183b      	adds	r3, r7, r0
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	085b      	lsrs	r3, r3, #1
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	22e0      	movs	r2, #224	; 0xe0
 8007f9c:	0052      	lsls	r2, r2, #1
 8007f9e:	18ba      	adds	r2, r7, r2
 8007fa0:	8812      	ldrh	r2, [r2, #0]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	b299      	uxth	r1, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a0f      	ldr	r2, [pc, #60]	; (8007fe8 <Scope_Sample_Process_Sub+0x854>)
 8007faa:	5299      	strh	r1, [r3, r2]
            sample->len = need_len;
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	1839      	adds	r1, r7, r0
 8007fb0:	23ff      	movs	r3, #255	; 0xff
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	8809      	ldrh	r1, [r1, #0]
 8007fb6:	52d1      	strh	r1, [r2, r3]
    for (uint8_t k = 0; k < SCOPE_CHANNEL_NUM; k++) {
 8007fb8:	21ef      	movs	r1, #239	; 0xef
 8007fba:	0049      	lsls	r1, r1, #1
 8007fbc:	187b      	adds	r3, r7, r1
 8007fbe:	781a      	ldrb	r2, [r3, #0]
 8007fc0:	187b      	adds	r3, r7, r1
 8007fc2:	3201      	adds	r2, #1
 8007fc4:	701a      	strb	r2, [r3, #0]
 8007fc6:	23ef      	movs	r3, #239	; 0xef
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	18fb      	adds	r3, r7, r3
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d801      	bhi.n	8007fd6 <Scope_Sample_Process_Sub+0x842>
 8007fd2:	f7ff fbea 	bl	80077aa <Scope_Sample_Process_Sub+0x16>
        }

    }

    return rst;
 8007fd6:	23e0      	movs	r3, #224	; 0xe0
 8007fd8:	33ff      	adds	r3, #255	; 0xff
 8007fda:	18fb      	adds	r3, r7, r3
 8007fdc:	781b      	ldrb	r3, [r3, #0]
}
 8007fde:	0018      	movs	r0, r3
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b079      	add	sp, #484	; 0x1e4
 8007fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	000003fa 	.word	0x000003fa

08007fec <Scope_Sample_Init>:

/*-----------------------------------------------------接口函数-----------------------------------------------------*/

void Scope_Sample_Init(void) {
 8007fec:	b590      	push	{r4, r7, lr}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
    // 申请变量空间
    for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 8007ff2:	1dfb      	adds	r3, r7, #7
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	701a      	strb	r2, [r3, #0]
 8007ff8:	e017      	b.n	800802a <Scope_Sample_Init+0x3e>
        scope_sample_arr[i] = (Scope_Sample *) malloc(sizeof(Scope_Sample));
 8007ffa:	1dfb      	adds	r3, r7, #7
 8007ffc:	781c      	ldrb	r4, [r3, #0]
 8007ffe:	2383      	movs	r3, #131	; 0x83
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	0018      	movs	r0, r3
 8008004:	f003 fdf4 	bl	800bbf0 <malloc>
 8008008:	0003      	movs	r3, r0
 800800a:	0019      	movs	r1, r3
 800800c:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <Scope_Sample_Init+0x58>)
 800800e:	00a2      	lsls	r2, r4, #2
 8008010:	50d1      	str	r1, [r2, r3]
        if (scope_sample_arr[i] == NULL)
 8008012:	1dfb      	adds	r3, r7, #7
 8008014:	781a      	ldrb	r2, [r3, #0]
 8008016:	4b0b      	ldr	r3, [pc, #44]	; (8008044 <Scope_Sample_Init+0x58>)
 8008018:	0092      	lsls	r2, r2, #2
 800801a:	58d3      	ldr	r3, [r2, r3]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d009      	beq.n	8008034 <Scope_Sample_Init+0x48>
    for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 8008020:	1dfb      	adds	r3, r7, #7
 8008022:	781a      	ldrb	r2, [r3, #0]
 8008024:	1dfb      	adds	r3, r7, #7
 8008026:	3201      	adds	r2, #1
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	1dfb      	adds	r3, r7, #7
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0e3      	beq.n	8007ffa <Scope_Sample_Init+0xe>
 8008032:	e000      	b.n	8008036 <Scope_Sample_Init+0x4a>
            break;
 8008034:	46c0      	nop			; (mov r8, r8)
    }

    Scope_Sample_Refresh_Sample_Rate();
 8008036:	f000 f841 	bl	80080bc <Scope_Sample_Refresh_Sample_Rate>
}
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	46bd      	mov	sp, r7
 800803e:	b003      	add	sp, #12
 8008040:	bd90      	pop	{r4, r7, pc}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	2000046c 	.word	0x2000046c

08008048 <Scope_Sample_DeInit>:

void Scope_Sample_DeInit(void) {
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop(&SCOPE_htim);
 800804e:	4b18      	ldr	r3, [pc, #96]	; (80080b0 <Scope_Sample_DeInit+0x68>)
 8008050:	0018      	movs	r0, r3
 8008052:	f7fd fa3b 	bl	80054cc <HAL_TIM_Base_Stop>
    HAL_ADC_Stop_DMA(&SCOPE_hadc);
 8008056:	4b17      	ldr	r3, [pc, #92]	; (80080b4 <Scope_Sample_DeInit+0x6c>)
 8008058:	0018      	movs	r0, r3
 800805a:	f7fa fc3f 	bl	80028dc <HAL_ADC_Stop_DMA>

    // 释放变量空间
    for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 800805e:	1dfb      	adds	r3, r7, #7
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	e019      	b.n	800809a <Scope_Sample_DeInit+0x52>
        if (scope_sample_arr[i] == NULL)
 8008066:	1dfb      	adds	r3, r7, #7
 8008068:	781a      	ldrb	r2, [r3, #0]
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <Scope_Sample_DeInit+0x70>)
 800806c:	0092      	lsls	r2, r2, #2
 800806e:	58d3      	ldr	r3, [r2, r3]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d017      	beq.n	80080a4 <Scope_Sample_DeInit+0x5c>
            break;
        free(scope_sample_arr[i]);
 8008074:	1dfb      	adds	r3, r7, #7
 8008076:	781a      	ldrb	r2, [r3, #0]
 8008078:	4b0f      	ldr	r3, [pc, #60]	; (80080b8 <Scope_Sample_DeInit+0x70>)
 800807a:	0092      	lsls	r2, r2, #2
 800807c:	58d3      	ldr	r3, [r2, r3]
 800807e:	0018      	movs	r0, r3
 8008080:	f003 fdc0 	bl	800bc04 <free>
        scope_sample_arr[i] = NULL;
 8008084:	1dfb      	adds	r3, r7, #7
 8008086:	781a      	ldrb	r2, [r3, #0]
 8008088:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <Scope_Sample_DeInit+0x70>)
 800808a:	0092      	lsls	r2, r2, #2
 800808c:	2100      	movs	r1, #0
 800808e:	50d1      	str	r1, [r2, r3]
    for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 8008090:	1dfb      	adds	r3, r7, #7
 8008092:	781a      	ldrb	r2, [r3, #0]
 8008094:	1dfb      	adds	r3, r7, #7
 8008096:	3201      	adds	r2, #1
 8008098:	701a      	strb	r2, [r3, #0]
 800809a:	1dfb      	adds	r3, r7, #7
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0e1      	beq.n	8008066 <Scope_Sample_DeInit+0x1e>
    }
}
 80080a2:	e000      	b.n	80080a6 <Scope_Sample_DeInit+0x5e>
            break;
 80080a4:	46c0      	nop			; (mov r8, r8)
}
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	46bd      	mov	sp, r7
 80080aa:	b002      	add	sp, #8
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	20000338 	.word	0x20000338
 80080b4:	200001c8 	.word	0x200001c8
 80080b8:	2000046c 	.word	0x2000046c

080080bc <Scope_Sample_Refresh_Sample_Rate>:

// 自动计算并设置合适的采样率
void Scope_Sample_Refresh_Sample_Rate(void) {
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop(&SCOPE_htim);
 80080c0:	4b17      	ldr	r3, [pc, #92]	; (8008120 <Scope_Sample_Refresh_Sample_Rate+0x64>)
 80080c2:	0018      	movs	r0, r3
 80080c4:	f7fd fa02 	bl	80054cc <HAL_TIM_Base_Stop>
    HAL_ADC_Stop_DMA(&SCOPE_hadc);
 80080c8:	4b16      	ldr	r3, [pc, #88]	; (8008124 <Scope_Sample_Refresh_Sample_Rate+0x68>)
 80080ca:	0018      	movs	r0, r3
 80080cc:	f7fa fc06 	bl	80028dc <HAL_ADC_Stop_DMA>
    // sample_num = k * 绘图所需样本数
    // sample_rate * (ms_div * grid) * k = sample_num
    // sample_rate = sample_num / ms_div / grid / k
//    scope_sample_rate = 1000.0f * SCOPE_SAMPLE_NUM / scope_ms_div[scope_ms_div_select] / SCOPE_X_GRID / SCOPE_SAMPLE_K;
    scope_sample_rate =
            (1000.0f * SCOPE_SAMPLE_NUM / SCOPE_X_GRID / SCOPE_SAMPLE_K) / scope_ms_div[scope_ms_div_select];
 80080d0:	4b15      	ldr	r3, [pc, #84]	; (8008128 <Scope_Sample_Refresh_Sample_Rate+0x6c>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	001a      	movs	r2, r3
 80080d6:	4b15      	ldr	r3, [pc, #84]	; (800812c <Scope_Sample_Refresh_Sample_Rate+0x70>)
 80080d8:	0092      	lsls	r2, r2, #2
 80080da:	58d3      	ldr	r3, [r2, r3]
 80080dc:	1c19      	adds	r1, r3, #0
 80080de:	4814      	ldr	r0, [pc, #80]	; (8008130 <Scope_Sample_Refresh_Sample_Rate+0x74>)
 80080e0:	f7f8 fb7c 	bl	80007dc <__aeabi_fdiv>
 80080e4:	1c03      	adds	r3, r0, #0
 80080e6:	1c1a      	adds	r2, r3, #0
    scope_sample_rate =
 80080e8:	4b12      	ldr	r3, [pc, #72]	; (8008134 <Scope_Sample_Refresh_Sample_Rate+0x78>)
 80080ea:	601a      	str	r2, [r3, #0]
    if (scope_sample_rate > SCOPE_MAX_SAMPLE_RATE)
 80080ec:	4b11      	ldr	r3, [pc, #68]	; (8008134 <Scope_Sample_Refresh_Sample_Rate+0x78>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4911      	ldr	r1, [pc, #68]	; (8008138 <Scope_Sample_Refresh_Sample_Rate+0x7c>)
 80080f2:	1c18      	adds	r0, r3, #0
 80080f4:	f7f8 f9aa 	bl	800044c <__aeabi_fcmpgt>
 80080f8:	1e03      	subs	r3, r0, #0
 80080fa:	d002      	beq.n	8008102 <Scope_Sample_Refresh_Sample_Rate+0x46>
        scope_sample_rate = SCOPE_MAX_SAMPLE_RATE;
 80080fc:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <Scope_Sample_Refresh_Sample_Rate+0x78>)
 80080fe:	4a0e      	ldr	r2, [pc, #56]	; (8008138 <Scope_Sample_Refresh_Sample_Rate+0x7c>)
 8008100:	601a      	str	r2, [r3, #0]
    Set_TIM_Freq(&SCOPE_htim, scope_sample_rate);
 8008102:	4b0c      	ldr	r3, [pc, #48]	; (8008134 <Scope_Sample_Refresh_Sample_Rate+0x78>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	4b06      	ldr	r3, [pc, #24]	; (8008120 <Scope_Sample_Refresh_Sample_Rate+0x64>)
 8008108:	1c11      	adds	r1, r2, #0
 800810a:	0018      	movs	r0, r3
 800810c:	f001 f9da 	bl	80094c4 <Set_TIM_Freq>

    Clear_Flag();
 8008110:	f7ff fb0e 	bl	8007730 <Clear_Flag>
    Scope_Sample_Try_Start_New_ADC();
 8008114:	f000 f874 	bl	8008200 <Scope_Sample_Try_Start_New_ADC>
}
 8008118:	46c0      	nop			; (mov r8, r8)
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	20000338 	.word	0x20000338
 8008124:	200001c8 	.word	0x200001c8
 8008128:	2000001c 	.word	0x2000001c
 800812c:	0800c0f0 	.word	0x0800c0f0
 8008130:	46467000 	.word	0x46467000
 8008134:	20000470 	.word	0x20000470
 8008138:	49742400 	.word	0x49742400

0800813c <Scope_Sample_Try_Process>:

void Scope_Sample_Try_Process(void) {
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
    static uint32_t last_success_t = 0;

    for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 8008142:	1dfb      	adds	r3, r7, #7
 8008144:	2200      	movs	r2, #0
 8008146:	701a      	strb	r2, [r3, #0]
 8008148:	e04b      	b.n	80081e2 <Scope_Sample_Try_Process+0xa6>
        if (scope_sample_arr[i] == NULL)
 800814a:	1dfb      	adds	r3, r7, #7
 800814c:	781a      	ldrb	r2, [r3, #0]
 800814e:	4b2a      	ldr	r3, [pc, #168]	; (80081f8 <Scope_Sample_Try_Process+0xbc>)
 8008150:	0092      	lsls	r2, r2, #2
 8008152:	58d3      	ldr	r3, [r2, r3]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d049      	beq.n	80081ec <Scope_Sample_Try_Process+0xb0>
            break;
        if (scope_sample_arr[i]->sample_flag == Scope_Sample_Finished && scope_sample_arr[i]->is_handle == 0) {
 8008158:	1dfb      	adds	r3, r7, #7
 800815a:	781a      	ldrb	r2, [r3, #0]
 800815c:	4b26      	ldr	r3, [pc, #152]	; (80081f8 <Scope_Sample_Try_Process+0xbc>)
 800815e:	0092      	lsls	r2, r2, #2
 8008160:	58d3      	ldr	r3, [r2, r3]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d137      	bne.n	80081d8 <Scope_Sample_Try_Process+0x9c>
 8008168:	1dfb      	adds	r3, r7, #7
 800816a:	781a      	ldrb	r2, [r3, #0]
 800816c:	4b22      	ldr	r3, [pc, #136]	; (80081f8 <Scope_Sample_Try_Process+0xbc>)
 800816e:	0092      	lsls	r2, r2, #2
 8008170:	58d3      	ldr	r3, [r2, r3]
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d12f      	bne.n	80081d8 <Scope_Sample_Try_Process+0x9c>
            if (Scope_Sample_Process_Sub(scope_sample_arr[i])) {
 8008178:	1dfb      	adds	r3, r7, #7
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	4b1e      	ldr	r3, [pc, #120]	; (80081f8 <Scope_Sample_Try_Process+0xbc>)
 800817e:	0092      	lsls	r2, r2, #2
 8008180:	58d3      	ldr	r3, [r2, r3]
 8008182:	0018      	movs	r0, r3
 8008184:	f7ff fb06 	bl	8007794 <Scope_Sample_Process_Sub>
 8008188:	1e03      	subs	r3, r0, #0
 800818a:	d00c      	beq.n	80081a6 <Scope_Sample_Try_Process+0x6a>
                last_success_t = HAL_GetTick();
 800818c:	f7f9 ffae 	bl	80020ec <HAL_GetTick>
 8008190:	0002      	movs	r2, r0
 8008192:	4b1a      	ldr	r3, [pc, #104]	; (80081fc <Scope_Sample_Try_Process+0xc0>)
 8008194:	601a      	str	r2, [r3, #0]
                scope_sample_arr[i]->is_handle = 1;
 8008196:	1dfb      	adds	r3, r7, #7
 8008198:	781a      	ldrb	r2, [r3, #0]
 800819a:	4b17      	ldr	r3, [pc, #92]	; (80081f8 <Scope_Sample_Try_Process+0xbc>)
 800819c:	0092      	lsls	r2, r2, #2
 800819e:	58d3      	ldr	r3, [r2, r3]
 80081a0:	2201      	movs	r2, #1
 80081a2:	705a      	strb	r2, [r3, #1]
 80081a4:	e018      	b.n	80081d8 <Scope_Sample_Try_Process+0x9c>
            } else {
                if (HAL_GetTick() - last_success_t <= SCOPE_MAX_FAIL_T) { // 偶尔几次采样不符合要求，就跳过
 80081a6:	f7f9 ffa1 	bl	80020ec <HAL_GetTick>
 80081aa:	0002      	movs	r2, r0
 80081ac:	4b13      	ldr	r3, [pc, #76]	; (80081fc <Scope_Sample_Try_Process+0xc0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2bc8      	cmp	r3, #200	; 0xc8
 80081b4:	d809      	bhi.n	80081ca <Scope_Sample_Try_Process+0x8e>
                    scope_sample_arr[i]->sample_flag = Scope_Sample_Not;
 80081b6:	1dfb      	adds	r3, r7, #7
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <Scope_Sample_Try_Process+0xbc>)
 80081bc:	0092      	lsls	r2, r2, #2
 80081be:	58d3      	ldr	r3, [r2, r3]
 80081c0:	2200      	movs	r2, #0
 80081c2:	701a      	strb	r2, [r3, #0]
                    Scope_Sample_Try_Start_New_ADC();
 80081c4:	f000 f81c 	bl	8008200 <Scope_Sample_Try_Start_New_ADC>
 80081c8:	e006      	b.n	80081d8 <Scope_Sample_Try_Process+0x9c>
                } else { // 连续多次采样不符合要求，进入滚动模式
                    scope_sample_arr[i]->is_handle = 1;
 80081ca:	1dfb      	adds	r3, r7, #7
 80081cc:	781a      	ldrb	r2, [r3, #0]
 80081ce:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <Scope_Sample_Try_Process+0xbc>)
 80081d0:	0092      	lsls	r2, r2, #2
 80081d2:	58d3      	ldr	r3, [r2, r3]
 80081d4:	2201      	movs	r2, #1
 80081d6:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 80081d8:	1dfb      	adds	r3, r7, #7
 80081da:	781a      	ldrb	r2, [r3, #0]
 80081dc:	1dfb      	adds	r3, r7, #7
 80081de:	3201      	adds	r2, #1
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	1dfb      	adds	r3, r7, #7
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0af      	beq.n	800814a <Scope_Sample_Try_Process+0xe>
                }
            }
        }
    }
}
 80081ea:	e000      	b.n	80081ee <Scope_Sample_Try_Process+0xb2>
            break;
 80081ec:	46c0      	nop			; (mov r8, r8)
}
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	46bd      	mov	sp, r7
 80081f2:	b002      	add	sp, #8
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	46c0      	nop			; (mov r8, r8)
 80081f8:	2000046c 	.word	0x2000046c
 80081fc:	2000019c 	.word	0x2000019c

08008200 <Scope_Sample_Try_Start_New_ADC>:

// 在以下几个位置被调用：
// DMA全传输完成中断
// UI绘图消耗掉一组数据
// 重新设置采样率
void Scope_Sample_Try_Start_New_ADC(void) {
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
    static uint8_t busy;
    if (busy == 1)
 8008206:	4b26      	ldr	r3, [pc, #152]	; (80082a0 <Scope_Sample_Try_Start_New_ADC+0xa0>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d043      	beq.n	8008296 <Scope_Sample_Try_Start_New_ADC+0x96>
        return;
    busy = 1;
 800820e:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <Scope_Sample_Try_Start_New_ADC+0xa0>)
 8008210:	2201      	movs	r2, #1
 8008212:	701a      	strb	r2, [r3, #0]

    if (!dma_busy) {
 8008214:	4b23      	ldr	r3, [pc, #140]	; (80082a4 <Scope_Sample_Try_Start_New_ADC+0xa4>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d138      	bne.n	800828e <Scope_Sample_Try_Start_New_ADC+0x8e>
        for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 800821c:	1dfb      	adds	r3, r7, #7
 800821e:	2200      	movs	r2, #0
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	e02e      	b.n	8008282 <Scope_Sample_Try_Start_New_ADC+0x82>
            if (scope_sample_arr[i] == NULL)
 8008224:	1dfb      	adds	r3, r7, #7
 8008226:	781a      	ldrb	r2, [r3, #0]
 8008228:	4b1f      	ldr	r3, [pc, #124]	; (80082a8 <Scope_Sample_Try_Start_New_ADC+0xa8>)
 800822a:	0092      	lsls	r2, r2, #2
 800822c:	58d3      	ldr	r3, [r2, r3]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d02c      	beq.n	800828c <Scope_Sample_Try_Start_New_ADC+0x8c>
                break;
            if (scope_sample_arr[i]->sample_flag == Scope_Sample_Not) {
 8008232:	1dfb      	adds	r3, r7, #7
 8008234:	781a      	ldrb	r2, [r3, #0]
 8008236:	4b1c      	ldr	r3, [pc, #112]	; (80082a8 <Scope_Sample_Try_Start_New_ADC+0xa8>)
 8008238:	0092      	lsls	r2, r2, #2
 800823a:	58d3      	ldr	r3, [r2, r3]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d11a      	bne.n	8008278 <Scope_Sample_Try_Start_New_ADC+0x78>
                dma_busy = 1;
 8008242:	4b18      	ldr	r3, [pc, #96]	; (80082a4 <Scope_Sample_Try_Start_New_ADC+0xa4>)
 8008244:	2201      	movs	r2, #1
 8008246:	701a      	strb	r2, [r3, #0]
                scope_sample_arr[i]->sample_flag = Scope_Sample_Doing;
 8008248:	1dfb      	adds	r3, r7, #7
 800824a:	781a      	ldrb	r2, [r3, #0]
 800824c:	4b16      	ldr	r3, [pc, #88]	; (80082a8 <Scope_Sample_Try_Start_New_ADC+0xa8>)
 800824e:	0092      	lsls	r2, r2, #2
 8008250:	58d3      	ldr	r3, [r2, r3]
 8008252:	2201      	movs	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]
                HAL_ADC_Start_DMA(&SCOPE_hadc, (uint32_t *) scope_sample_arr[i]->data, SCOPE_SAMPLE_NUM * SCOPE_CHANNEL_NUM);
 8008256:	1dfb      	adds	r3, r7, #7
 8008258:	781a      	ldrb	r2, [r3, #0]
 800825a:	4b13      	ldr	r3, [pc, #76]	; (80082a8 <Scope_Sample_Try_Start_New_ADC+0xa8>)
 800825c:	0092      	lsls	r2, r2, #2
 800825e:	58d3      	ldr	r3, [r2, r3]
 8008260:	1c99      	adds	r1, r3, #2
 8008262:	23fe      	movs	r3, #254	; 0xfe
 8008264:	005a      	lsls	r2, r3, #1
 8008266:	4b11      	ldr	r3, [pc, #68]	; (80082ac <Scope_Sample_Try_Start_New_ADC+0xac>)
 8008268:	0018      	movs	r0, r3
 800826a:	f7fa faa9 	bl	80027c0 <HAL_ADC_Start_DMA>
                HAL_TIM_Base_Start(&SCOPE_htim);
 800826e:	4b10      	ldr	r3, [pc, #64]	; (80082b0 <Scope_Sample_Try_Start_New_ADC+0xb0>)
 8008270:	0018      	movs	r0, r3
 8008272:	f7fd f8df 	bl	8005434 <HAL_TIM_Base_Start>
                break;
 8008276:	e00a      	b.n	800828e <Scope_Sample_Try_Start_New_ADC+0x8e>
        for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 8008278:	1dfb      	adds	r3, r7, #7
 800827a:	781a      	ldrb	r2, [r3, #0]
 800827c:	1dfb      	adds	r3, r7, #7
 800827e:	3201      	adds	r2, #1
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	1dfb      	adds	r3, r7, #7
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0cc      	beq.n	8008224 <Scope_Sample_Try_Start_New_ADC+0x24>
 800828a:	e000      	b.n	800828e <Scope_Sample_Try_Start_New_ADC+0x8e>
                break;
 800828c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    busy = 0;
 800828e:	4b04      	ldr	r3, [pc, #16]	; (80082a0 <Scope_Sample_Try_Start_New_ADC+0xa0>)
 8008290:	2200      	movs	r2, #0
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e000      	b.n	8008298 <Scope_Sample_Try_Start_New_ADC+0x98>
        return;
 8008296:	46c0      	nop			; (mov r8, r8)
}
 8008298:	46bd      	mov	sp, r7
 800829a:	b002      	add	sp, #8
 800829c:	bd80      	pop	{r7, pc}
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	200001a0 	.word	0x200001a0
 80082a4:	20000198 	.word	0x20000198
 80082a8:	2000046c 	.word	0x2000046c
 80082ac:	200001c8 	.word	0x200001c8
 80082b0:	20000338 	.word	0x20000338

080082b4 <Scope_Sample_ADC_ConvCpltCallback>:

/*-----------------------------------------------------回调函数-----------------------------------------------------*/

void Scope_Sample_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);
    HAL_TIM_Base_Stop(&SCOPE_htim);
 80082bc:	4b18      	ldr	r3, [pc, #96]	; (8008320 <Scope_Sample_ADC_ConvCpltCallback+0x6c>)
 80082be:	0018      	movs	r0, r3
 80082c0:	f7fd f904 	bl	80054cc <HAL_TIM_Base_Stop>
    HAL_ADC_Stop_DMA(&SCOPE_hadc);
 80082c4:	4b17      	ldr	r3, [pc, #92]	; (8008324 <Scope_Sample_ADC_ConvCpltCallback+0x70>)
 80082c6:	0018      	movs	r0, r3
 80082c8:	f7fa fb08 	bl	80028dc <HAL_ADC_Stop_DMA>
    dma_busy = 0;
 80082cc:	4b16      	ldr	r3, [pc, #88]	; (8008328 <Scope_Sample_ADC_ConvCpltCallback+0x74>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 80082d2:	230f      	movs	r3, #15
 80082d4:	18fb      	adds	r3, r7, r3
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	e016      	b.n	800830a <Scope_Sample_ADC_ConvCpltCallback+0x56>
        if (scope_sample_arr[i]->sample_flag == Scope_Sample_Doing) {
 80082dc:	210f      	movs	r1, #15
 80082de:	187b      	adds	r3, r7, r1
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	4b12      	ldr	r3, [pc, #72]	; (800832c <Scope_Sample_ADC_ConvCpltCallback+0x78>)
 80082e4:	0092      	lsls	r2, r2, #2
 80082e6:	58d3      	ldr	r3, [r2, r3]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d107      	bne.n	80082fe <Scope_Sample_ADC_ConvCpltCallback+0x4a>
            scope_sample_arr[i]->sample_flag = Scope_Sample_Finished;
 80082ee:	187b      	adds	r3, r7, r1
 80082f0:	781a      	ldrb	r2, [r3, #0]
 80082f2:	4b0e      	ldr	r3, [pc, #56]	; (800832c <Scope_Sample_ADC_ConvCpltCallback+0x78>)
 80082f4:	0092      	lsls	r2, r2, #2
 80082f6:	58d3      	ldr	r3, [r2, r3]
 80082f8:	2202      	movs	r2, #2
 80082fa:	701a      	strb	r2, [r3, #0]
            break;
 80082fc:	e00a      	b.n	8008314 <Scope_Sample_ADC_ConvCpltCallback+0x60>
    for (uint8_t i = 0; i < SCOPE_MAX_CACHE; i++) {
 80082fe:	210f      	movs	r1, #15
 8008300:	187b      	adds	r3, r7, r1
 8008302:	781a      	ldrb	r2, [r3, #0]
 8008304:	187b      	adds	r3, r7, r1
 8008306:	3201      	adds	r2, #1
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	230f      	movs	r3, #15
 800830c:	18fb      	adds	r3, r7, r3
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0e3      	beq.n	80082dc <Scope_Sample_ADC_ConvCpltCallback+0x28>
        }
    }
    Scope_Sample_Try_Start_New_ADC();
 8008314:	f7ff ff74 	bl	8008200 <Scope_Sample_Try_Start_New_ADC>
}
 8008318:	46c0      	nop			; (mov r8, r8)
 800831a:	46bd      	mov	sp, r7
 800831c:	b004      	add	sp, #16
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20000338 	.word	0x20000338
 8008324:	200001c8 	.word	0x200001c8
 8008328:	20000198 	.word	0x20000198
 800832c:	2000046c 	.word	0x2000046c

08008330 <Spectrum_Init>:
#include "app1.h"

void Spectrum_Init(void) {
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
    spectrum_exit = 0;
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <Spectrum_Init+0x1c>)
 8008336:	2200      	movs	r2, #0
 8008338:	701a      	strb	r2, [r3, #0]
    Spectrum_Sample_Init();
 800833a:	f000 feb7 	bl	80090ac <Spectrum_Sample_Init>
    Spectrum_UI_Init();
 800833e:	f000 fb45 	bl	80089cc <Spectrum_UI_Init>
    Spectrum_Operate_Init();
 8008342:	f000 fbbd 	bl	8008ac0 <Spectrum_Operate_Init>
}
 8008346:	46c0      	nop			; (mov r8, r8)
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	200001a1 	.word	0x200001a1

08008350 <Spectrum_DeInit>:

void Spectrum_DeInit(void) {
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0
    Spectrum_Sample_DeInit();
 8008354:	f000 fed8 	bl	8009108 <Spectrum_Sample_DeInit>
    Spectrum_UI_DeInit();
 8008358:	f000 fb43 	bl	80089e2 <Spectrum_UI_DeInit>
    Spectrum_Operate_DeInit();
 800835c:	f000 fbbc 	bl	8008ad8 <Spectrum_Operate_DeInit>
}
 8008360:	46c0      	nop			; (mov r8, r8)
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <Spectrum_Loop>:

uint8_t Spectrum_Loop(void) {
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
    Spectrum_Sample_Try_Process();
 800836c:	f000 ff32 	bl	80091d4 <Spectrum_Sample_Try_Process>
    Spectrum_UI_Try_Refresh(0);
 8008370:	2000      	movs	r0, #0
 8008372:	f000 fb3f 	bl	80089f4 <Spectrum_UI_Try_Refresh>
    Spectrum_Operate_Try_Process();
 8008376:	f000 fbb7 	bl	8008ae8 <Spectrum_Operate_Try_Process>
    return spectrum_exit;
 800837a:	4b02      	ldr	r3, [pc, #8]	; (8008384 <Spectrum_Loop+0x1c>)
 800837c:	781b      	ldrb	r3, [r3, #0]
}
 800837e:	0018      	movs	r0, r3
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	200001a1 	.word	0x200001a1

08008388 <Draw_Dotted_Line_X>:
#include <string.h> // strlen

/*-----------------------------------------------------静态函数-----------------------------------------------------*/

// 画和y轴平行的虚线，space为间隔的像素点数
static void Draw_Dotted_Line_X(uint8_t y, uint8_t x1, uint8_t x2, uint8_t space) {
 8008388:	b5b0      	push	{r4, r5, r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	0005      	movs	r5, r0
 8008390:	000c      	movs	r4, r1
 8008392:	0010      	movs	r0, r2
 8008394:	0019      	movs	r1, r3
 8008396:	1dfb      	adds	r3, r7, #7
 8008398:	1c2a      	adds	r2, r5, #0
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	1dbb      	adds	r3, r7, #6
 800839e:	1c22      	adds	r2, r4, #0
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	1d7b      	adds	r3, r7, #5
 80083a4:	1c02      	adds	r2, r0, #0
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	1d3b      	adds	r3, r7, #4
 80083aa:	1c0a      	adds	r2, r1, #0
 80083ac:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = x1; i < x2; i += space)
 80083ae:	230f      	movs	r3, #15
 80083b0:	18fb      	adds	r3, r7, r3
 80083b2:	1dba      	adds	r2, r7, #6
 80083b4:	7812      	ldrb	r2, [r2, #0]
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	e00f      	b.n	80083da <Draw_Dotted_Line_X+0x52>
        OLED_DrawPoint(i, y, 1);
 80083ba:	1dfb      	adds	r3, r7, #7
 80083bc:	7819      	ldrb	r1, [r3, #0]
 80083be:	240f      	movs	r4, #15
 80083c0:	193b      	adds	r3, r7, r4
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2201      	movs	r2, #1
 80083c6:	0018      	movs	r0, r3
 80083c8:	f001 fc00 	bl	8009bcc <OLED_DrawPoint>
    for (uint8_t i = x1; i < x2; i += space)
 80083cc:	193b      	adds	r3, r7, r4
 80083ce:	1939      	adds	r1, r7, r4
 80083d0:	1d3a      	adds	r2, r7, #4
 80083d2:	7809      	ldrb	r1, [r1, #0]
 80083d4:	7812      	ldrb	r2, [r2, #0]
 80083d6:	188a      	adds	r2, r1, r2
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	230f      	movs	r3, #15
 80083dc:	18fa      	adds	r2, r7, r3
 80083de:	1d7b      	adds	r3, r7, #5
 80083e0:	7812      	ldrb	r2, [r2, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d3e8      	bcc.n	80083ba <Draw_Dotted_Line_X+0x32>
}
 80083e8:	46c0      	nop			; (mov r8, r8)
 80083ea:	46c0      	nop			; (mov r8, r8)
 80083ec:	46bd      	mov	sp, r7
 80083ee:	b004      	add	sp, #16
 80083f0:	bdb0      	pop	{r4, r5, r7, pc}

080083f2 <Draw_Dotted_Line_Y>:

// 画和y轴平行的虚线，space为间隔的像素点数
static void Draw_Dotted_Line_Y(uint8_t x, uint8_t y1, uint8_t y2, uint8_t space) {
 80083f2:	b5b0      	push	{r4, r5, r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	0005      	movs	r5, r0
 80083fa:	000c      	movs	r4, r1
 80083fc:	0010      	movs	r0, r2
 80083fe:	0019      	movs	r1, r3
 8008400:	1dfb      	adds	r3, r7, #7
 8008402:	1c2a      	adds	r2, r5, #0
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	1dbb      	adds	r3, r7, #6
 8008408:	1c22      	adds	r2, r4, #0
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	1d7b      	adds	r3, r7, #5
 800840e:	1c02      	adds	r2, r0, #0
 8008410:	701a      	strb	r2, [r3, #0]
 8008412:	1d3b      	adds	r3, r7, #4
 8008414:	1c0a      	adds	r2, r1, #0
 8008416:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = y1; i < y2; i += space)
 8008418:	230f      	movs	r3, #15
 800841a:	18fb      	adds	r3, r7, r3
 800841c:	1dba      	adds	r2, r7, #6
 800841e:	7812      	ldrb	r2, [r2, #0]
 8008420:	701a      	strb	r2, [r3, #0]
 8008422:	e00f      	b.n	8008444 <Draw_Dotted_Line_Y+0x52>
        OLED_DrawPoint(x, i, 1);
 8008424:	240f      	movs	r4, #15
 8008426:	193b      	adds	r3, r7, r4
 8008428:	7819      	ldrb	r1, [r3, #0]
 800842a:	1dfb      	adds	r3, r7, #7
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2201      	movs	r2, #1
 8008430:	0018      	movs	r0, r3
 8008432:	f001 fbcb 	bl	8009bcc <OLED_DrawPoint>
    for (uint8_t i = y1; i < y2; i += space)
 8008436:	193b      	adds	r3, r7, r4
 8008438:	1939      	adds	r1, r7, r4
 800843a:	1d3a      	adds	r2, r7, #4
 800843c:	7809      	ldrb	r1, [r1, #0]
 800843e:	7812      	ldrb	r2, [r2, #0]
 8008440:	188a      	adds	r2, r1, r2
 8008442:	701a      	strb	r2, [r3, #0]
 8008444:	230f      	movs	r3, #15
 8008446:	18fa      	adds	r2, r7, r3
 8008448:	1d7b      	adds	r3, r7, #5
 800844a:	7812      	ldrb	r2, [r2, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d3e8      	bcc.n	8008424 <Draw_Dotted_Line_Y+0x32>
}
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	46c0      	nop			; (mov r8, r8)
 8008456:	46bd      	mov	sp, r7
 8008458:	b004      	add	sp, #16
 800845a:	bdb0      	pop	{r4, r5, r7, pc}

0800845c <Show_Framework>:

static void Show_Framework() {
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af02      	add	r7, sp, #8
    // 绘制边框
    OLED_DrawLine(SPECTRUM_X_MIN, SPECTRUM_Y_MIN, SPECTRUM_X_MIN, SPECTRUM_Y_MAX, 1);
 8008462:	2301      	movs	r3, #1
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	2364      	movs	r3, #100	; 0x64
 8008468:	2200      	movs	r2, #0
 800846a:	210a      	movs	r1, #10
 800846c:	2000      	movs	r0, #0
 800846e:	f001 fc39 	bl	8009ce4 <OLED_DrawLine>
    OLED_DrawLine(SPECTRUM_X_MIN, SPECTRUM_Y_MIN, SPECTRUM_X_MAX, SPECTRUM_Y_MIN, 1);
 8008472:	2301      	movs	r3, #1
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	230a      	movs	r3, #10
 8008478:	227f      	movs	r2, #127	; 0x7f
 800847a:	210a      	movs	r1, #10
 800847c:	2000      	movs	r0, #0
 800847e:	f001 fc31 	bl	8009ce4 <OLED_DrawLine>
    OLED_DrawLine(SPECTRUM_X_MAX, SPECTRUM_Y_MAX, SPECTRUM_X_MIN, SPECTRUM_Y_MAX, 1);
 8008482:	2301      	movs	r3, #1
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	2364      	movs	r3, #100	; 0x64
 8008488:	2200      	movs	r2, #0
 800848a:	2164      	movs	r1, #100	; 0x64
 800848c:	207f      	movs	r0, #127	; 0x7f
 800848e:	f001 fc29 	bl	8009ce4 <OLED_DrawLine>
    OLED_DrawLine(SPECTRUM_X_MAX, SPECTRUM_Y_MAX, SPECTRUM_X_MAX, SPECTRUM_Y_MIN, 1);
 8008492:	2301      	movs	r3, #1
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	230a      	movs	r3, #10
 8008498:	227f      	movs	r2, #127	; 0x7f
 800849a:	2164      	movs	r1, #100	; 0x64
 800849c:	207f      	movs	r0, #127	; 0x7f
 800849e:	f001 fc21 	bl	8009ce4 <OLED_DrawLine>

#pragma clang diagnostic push
#pragma ide diagnostic ignored "cert-flp30-c"
    // 绘制刻度线
    // 和x轴平行的线
    for (float i = SPECTRUM_Y_MAX; i > SPECTRUM_Y_MIN; i -= SPECTRUM_Y_POINTS_DIV)
 80084a2:	4b42      	ldr	r3, [pc, #264]	; (80085ac <Show_Framework+0x150>)
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	e015      	b.n	80084d4 <Show_Framework+0x78>
        Draw_Dotted_Line_X((uint8_t) (i + 0.5f), SPECTRUM_X_MIN, SPECTRUM_X_MAX, 3);
 80084a8:	21fc      	movs	r1, #252	; 0xfc
 80084aa:	0589      	lsls	r1, r1, #22
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7f7 fff9 	bl	80004a4 <__aeabi_fadd>
 80084b2:	1c03      	adds	r3, r0, #0
 80084b4:	1c18      	adds	r0, r3, #0
 80084b6:	f7f7 ffdd 	bl	8000474 <__aeabi_f2uiz>
 80084ba:	0003      	movs	r3, r0
 80084bc:	b2d8      	uxtb	r0, r3
 80084be:	2303      	movs	r3, #3
 80084c0:	227f      	movs	r2, #127	; 0x7f
 80084c2:	2100      	movs	r1, #0
 80084c4:	f7ff ff60 	bl	8008388 <Draw_Dotted_Line_X>
    for (float i = SPECTRUM_Y_MAX; i > SPECTRUM_Y_MIN; i -= SPECTRUM_Y_POINTS_DIV)
 80084c8:	4939      	ldr	r1, [pc, #228]	; (80085b0 <Show_Framework+0x154>)
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7f8 fc6a 	bl	8000da4 <__aeabi_fsub>
 80084d0:	1c03      	adds	r3, r0, #0
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	4937      	ldr	r1, [pc, #220]	; (80085b4 <Show_Framework+0x158>)
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f7f7 ffb8 	bl	800044c <__aeabi_fcmpgt>
 80084dc:	1e03      	subs	r3, r0, #0
 80084de:	d1e3      	bne.n	80084a8 <Show_Framework+0x4c>
//        OLED_DrawLine(SPECTRUM_X_MIN, (uint8_t) (i + 0.5f), SPECTRUM_X_MAX, (uint8_t) (i + 0.5f), 1);

    // 和y轴平行的线
    for (float i = SPECTRUM_X_MIN; i < SPECTRUM_X_MAX; i += SPECTRUM_X_POINTS_DIV)
 80084e0:	2300      	movs	r3, #0
 80084e2:	60bb      	str	r3, [r7, #8]
 80084e4:	e015      	b.n	8008512 <Show_Framework+0xb6>
        Draw_Dotted_Line_Y((uint8_t) (i + 0.5f), SPECTRUM_Y_MIN, SPECTRUM_Y_MAX, 3);
 80084e6:	21fc      	movs	r1, #252	; 0xfc
 80084e8:	0589      	lsls	r1, r1, #22
 80084ea:	68b8      	ldr	r0, [r7, #8]
 80084ec:	f7f7 ffda 	bl	80004a4 <__aeabi_fadd>
 80084f0:	1c03      	adds	r3, r0, #0
 80084f2:	1c18      	adds	r0, r3, #0
 80084f4:	f7f7 ffbe 	bl	8000474 <__aeabi_f2uiz>
 80084f8:	0003      	movs	r3, r0
 80084fa:	b2d8      	uxtb	r0, r3
 80084fc:	2303      	movs	r3, #3
 80084fe:	2264      	movs	r2, #100	; 0x64
 8008500:	210a      	movs	r1, #10
 8008502:	f7ff ff76 	bl	80083f2 <Draw_Dotted_Line_Y>
    for (float i = SPECTRUM_X_MIN; i < SPECTRUM_X_MAX; i += SPECTRUM_X_POINTS_DIV)
 8008506:	492c      	ldr	r1, [pc, #176]	; (80085b8 <Show_Framework+0x15c>)
 8008508:	68b8      	ldr	r0, [r7, #8]
 800850a:	f7f7 ffcb 	bl	80004a4 <__aeabi_fadd>
 800850e:	1c03      	adds	r3, r0, #0
 8008510:	60bb      	str	r3, [r7, #8]
 8008512:	492a      	ldr	r1, [pc, #168]	; (80085bc <Show_Framework+0x160>)
 8008514:	68b8      	ldr	r0, [r7, #8]
 8008516:	f7f7 ff85 	bl	8000424 <__aeabi_fcmplt>
 800851a:	1e03      	subs	r3, r0, #0
 800851c:	d1e3      	bne.n	80084e6 <Show_Framework+0x8a>
//        OLED_DrawLine((uint8_t) (i + 0.5f),SPECTRUM_Y_MIN, (uint8_t) (i + 0.5f), SPECTRUM_Y_MAX, 1);
#pragma clang diagnostic pop

    OLED_ShowString(39, 0, "Spectrum", 8, 1);
 800851e:	4a28      	ldr	r2, [pc, #160]	; (80085c0 <Show_Framework+0x164>)
 8008520:	2301      	movs	r3, #1
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	2308      	movs	r3, #8
 8008526:	2100      	movs	r1, #0
 8008528:	2027      	movs	r0, #39	; 0x27
 800852a:	f001 fd55 	bl	8009fd8 <OLED_ShowString>

    // 显示刻度选择
    OLED_ShowString(0, 0, spectrum_KHz_max_label[spectrum_KHz_max_select], 8, spectrum_key_l_r_func);
 800852e:	4b25      	ldr	r3, [pc, #148]	; (80085c4 <Show_Framework+0x168>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	001a      	movs	r2, r3
 8008534:	0013      	movs	r3, r2
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	1a9b      	subs	r3, r3, r2
 800853a:	4a23      	ldr	r2, [pc, #140]	; (80085c8 <Show_Framework+0x16c>)
 800853c:	189a      	adds	r2, r3, r2
 800853e:	4b23      	ldr	r3, [pc, #140]	; (80085cc <Show_Framework+0x170>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	2308      	movs	r3, #8
 8008546:	2100      	movs	r1, #0
 8008548:	2000      	movs	r0, #0
 800854a:	f001 fd45 	bl	8009fd8 <OLED_ShowString>
    uint8_t len = strlen(spectrum_voltage_div_label[spectrum_voltage_div_select]);
 800854e:	4b20      	ldr	r3, [pc, #128]	; (80085d0 <Show_Framework+0x174>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	001a      	movs	r2, r3
 8008554:	0013      	movs	r3, r2
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	189b      	adds	r3, r3, r2
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	4a1d      	ldr	r2, [pc, #116]	; (80085d4 <Show_Framework+0x178>)
 800855e:	189b      	adds	r3, r3, r2
 8008560:	0018      	movs	r0, r3
 8008562:	f7f7 fdcf 	bl	8000104 <strlen>
 8008566:	0002      	movs	r2, r0
 8008568:	1dfb      	adds	r3, r7, #7
 800856a:	701a      	strb	r2, [r3, #0]
    OLED_ShowString(127 - len * 6, 0, spectrum_voltage_div_label[spectrum_voltage_div_select], 8,
 800856c:	1dfb      	adds	r3, r7, #7
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	1c1a      	adds	r2, r3, #0
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	18db      	adds	r3, r3, r3
 8008578:	b2db      	uxtb	r3, r3
 800857a:	337f      	adds	r3, #127	; 0x7f
 800857c:	b2d8      	uxtb	r0, r3
 800857e:	4b14      	ldr	r3, [pc, #80]	; (80085d0 <Show_Framework+0x174>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	001a      	movs	r2, r3
 8008584:	0013      	movs	r3, r2
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	189b      	adds	r3, r3, r2
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	4a11      	ldr	r2, [pc, #68]	; (80085d4 <Show_Framework+0x178>)
 800858e:	189a      	adds	r2, r3, r2
 8008590:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <Show_Framework+0x170>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	4259      	negs	r1, r3
 8008596:	414b      	adcs	r3, r1
 8008598:	b2db      	uxtb	r3, r3
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	2308      	movs	r3, #8
 800859e:	2100      	movs	r1, #0
 80085a0:	f001 fd1a 	bl	8009fd8 <OLED_ShowString>
                    !spectrum_key_l_r_func);
}
 80085a4:	46c0      	nop			; (mov r8, r8)
 80085a6:	46bd      	mov	sp, r7
 80085a8:	b004      	add	sp, #16
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	42c80000 	.word	0x42c80000
 80085b0:	41900000 	.word	0x41900000
 80085b4:	41200000 	.word	0x41200000
 80085b8:	414b3333 	.word	0x414b3333
 80085bc:	42fe0000 	.word	0x42fe0000
 80085c0:	0800bf58 	.word	0x0800bf58
 80085c4:	20000030 	.word	0x20000030
 80085c8:	20000068 	.word	0x20000068
 80085cc:	200001a3 	.word	0x200001a3
 80085d0:	200000c3 	.word	0x200000c3
 80085d4:	200000dc 	.word	0x200000dc

080085d8 <Show_Wave>:

static void Show_Wave(Spectrum_Sample *sample) {
 80085d8:	b5b0      	push	{r4, r5, r7, lr}
 80085da:	b08c      	sub	sp, #48	; 0x30
 80085dc:	af02      	add	r7, sp, #8
 80085de:	6078      	str	r0, [r7, #4]
    float ratio = (float) (SPECTRUM_SAMPLE_NUM / 2.0f - 1.0f) / (float) (SPECTRUM_X_NUM - 1);
 80085e0:	23fc      	movs	r3, #252	; 0xfc
 80085e2:	059b      	lsls	r3, r3, #22
 80085e4:	61bb      	str	r3, [r7, #24]
    float j = 0; // 循环附元，表示原数据数组的下标
 80085e6:	2300      	movs	r3, #0
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t j_int = UINT16_MAX; // 第一个点一定有数据，这样便于绘制第一个点，+1后变为0
 80085ea:	2322      	movs	r3, #34	; 0x22
 80085ec:	18fb      	adds	r3, r7, r3
 80085ee:	2201      	movs	r2, #1
 80085f0:	4252      	negs	r2, r2
 80085f2:	801a      	strh	r2, [r3, #0]
    uint16_t last_i[SPECTRUM_CHANNEL_NUM] = {0}, last_val[SPECTRUM_CHANNEL_NUM];
 80085f4:	2310      	movs	r3, #16
 80085f6:	18fb      	adds	r3, r7, r3
 80085f8:	2200      	movs	r2, #0
 80085fa:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < SPECTRUM_X_NUM; i++) { // 以示波器的横轴每个像素点为循环主元
 80085fc:	2320      	movs	r3, #32
 80085fe:	18fb      	adds	r3, r7, r3
 8008600:	2200      	movs	r2, #0
 8008602:	801a      	strh	r2, [r3, #0]
 8008604:	e09f      	b.n	8008746 <Show_Wave+0x16e>
        if ((uint16_t) j != j_int) { // j累计到一个新整数
 8008606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008608:	f7f7 ff34 	bl	8000474 <__aeabi_f2uiz>
 800860c:	0003      	movs	r3, r0
 800860e:	b29b      	uxth	r3, r3
 8008610:	2122      	movs	r1, #34	; 0x22
 8008612:	187a      	adds	r2, r7, r1
 8008614:	8812      	ldrh	r2, [r2, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d100      	bne.n	800861c <Show_Wave+0x44>
 800861a:	e088      	b.n	800872e <Show_Wave+0x156>
            j_int++;
 800861c:	187b      	adds	r3, r7, r1
 800861e:	881a      	ldrh	r2, [r3, #0]
 8008620:	187b      	adds	r3, r7, r1
 8008622:	3201      	adds	r2, #1
 8008624:	801a      	strh	r2, [r3, #0]

            for (uint8_t k = 0; k < SPECTRUM_CHANNEL_NUM; k++) {
 8008626:	231f      	movs	r3, #31
 8008628:	18fb      	adds	r3, r7, r3
 800862a:	2200      	movs	r2, #0
 800862c:	701a      	strb	r2, [r3, #0]
 800862e:	e078      	b.n	8008722 <Show_Wave+0x14a>
                float voltage = sample->data[k][j_int] / (SPECTRUM_SAMPLE_NUM / 2.0f); // FFT把数据放大了(n/2)倍，n为FFT长度
 8008630:	231f      	movs	r3, #31
 8008632:	18fb      	adds	r3, r7, r3
 8008634:	7819      	ldrb	r1, [r3, #0]
 8008636:	2322      	movs	r3, #34	; 0x22
 8008638:	18fb      	adds	r3, r7, r3
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	0209      	lsls	r1, r1, #8
 8008640:	18cb      	adds	r3, r1, r3
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	18d3      	adds	r3, r2, r3
 8008646:	3304      	adds	r3, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2185      	movs	r1, #133	; 0x85
 800864c:	05c9      	lsls	r1, r1, #23
 800864e:	1c18      	adds	r0, r3, #0
 8008650:	f7f8 f8c4 	bl	80007dc <__aeabi_fdiv>
 8008654:	1c03      	adds	r3, r0, #0
 8008656:	617b      	str	r3, [r7, #20]
                int16_t val = (int16_t) (SPECTRUM_Y_MAX - (voltage / spectrum_voltage_div[spectrum_voltage_div_select] *
 8008658:	4b40      	ldr	r3, [pc, #256]	; (800875c <Show_Wave+0x184>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	001a      	movs	r2, r3
 800865e:	4b40      	ldr	r3, [pc, #256]	; (8008760 <Show_Wave+0x188>)
 8008660:	0092      	lsls	r2, r2, #2
 8008662:	58d3      	ldr	r3, [r2, r3]
 8008664:	1c19      	adds	r1, r3, #0
 8008666:	6978      	ldr	r0, [r7, #20]
 8008668:	f7f8 f8b8 	bl	80007dc <__aeabi_fdiv>
 800866c:	1c03      	adds	r3, r0, #0
 800866e:	493d      	ldr	r1, [pc, #244]	; (8008764 <Show_Wave+0x18c>)
 8008670:	1c18      	adds	r0, r3, #0
 8008672:	f7f8 fa7d 	bl	8000b70 <__aeabi_fmul>
 8008676:	1c03      	adds	r3, r0, #0
 8008678:	1c19      	adds	r1, r3, #0
 800867a:	483b      	ldr	r0, [pc, #236]	; (8008768 <Show_Wave+0x190>)
 800867c:	f7f8 fb92 	bl	8000da4 <__aeabi_fsub>
 8008680:	1c03      	adds	r3, r0, #0
 8008682:	251c      	movs	r5, #28
 8008684:	197c      	adds	r4, r7, r5
 8008686:	1c18      	adds	r0, r3, #0
 8008688:	f7f8 fd6a 	bl	8001160 <__aeabi_f2iz>
 800868c:	0003      	movs	r3, r0
 800868e:	8023      	strh	r3, [r4, #0]
                                                           SPECTRUM_Y_POINTS_DIV));
                // 限值：上限与下限
                if (val < SPECTRUM_Y_MIN) val = SPECTRUM_Y_MIN;
 8008690:	197b      	adds	r3, r7, r5
 8008692:	2200      	movs	r2, #0
 8008694:	5e9b      	ldrsh	r3, [r3, r2]
 8008696:	2b09      	cmp	r3, #9
 8008698:	dc02      	bgt.n	80086a0 <Show_Wave+0xc8>
 800869a:	197b      	adds	r3, r7, r5
 800869c:	220a      	movs	r2, #10
 800869e:	801a      	strh	r2, [r3, #0]
                if (val > SPECTRUM_Y_MAX) val = SPECTRUM_Y_MAX;
 80086a0:	221c      	movs	r2, #28
 80086a2:	18bb      	adds	r3, r7, r2
 80086a4:	2100      	movs	r1, #0
 80086a6:	5e5b      	ldrsh	r3, [r3, r1]
 80086a8:	2b64      	cmp	r3, #100	; 0x64
 80086aa:	dd02      	ble.n	80086b2 <Show_Wave+0xda>
 80086ac:	18bb      	adds	r3, r7, r2
 80086ae:	2264      	movs	r2, #100	; 0x64
 80086b0:	801a      	strh	r2, [r3, #0]

                if (j_int != 0)
 80086b2:	2322      	movs	r3, #34	; 0x22
 80086b4:	18fb      	adds	r3, r7, r3
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01a      	beq.n	80086f2 <Show_Wave+0x11a>
                    OLED_DrawLine(SPECTRUM_X_MIN + last_i[k], last_val[k], SPECTRUM_X_MIN + i, val, 1);
 80086bc:	211f      	movs	r1, #31
 80086be:	187b      	adds	r3, r7, r1
 80086c0:	781a      	ldrb	r2, [r3, #0]
 80086c2:	2310      	movs	r3, #16
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	0052      	lsls	r2, r2, #1
 80086c8:	5ad3      	ldrh	r3, [r2, r3]
 80086ca:	b2d8      	uxtb	r0, r3
 80086cc:	187b      	adds	r3, r7, r1
 80086ce:	781a      	ldrb	r2, [r3, #0]
 80086d0:	230c      	movs	r3, #12
 80086d2:	18fb      	adds	r3, r7, r3
 80086d4:	0052      	lsls	r2, r2, #1
 80086d6:	5ad3      	ldrh	r3, [r2, r3]
 80086d8:	b2d9      	uxtb	r1, r3
 80086da:	2320      	movs	r3, #32
 80086dc:	18fb      	adds	r3, r7, r3
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	231c      	movs	r3, #28
 80086e4:	18fb      	adds	r3, r7, r3
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2401      	movs	r4, #1
 80086ec:	9400      	str	r4, [sp, #0]
 80086ee:	f001 faf9 	bl	8009ce4 <OLED_DrawLine>
                last_i[k] = i;
 80086f2:	201f      	movs	r0, #31
 80086f4:	183b      	adds	r3, r7, r0
 80086f6:	781a      	ldrb	r2, [r3, #0]
 80086f8:	2310      	movs	r3, #16
 80086fa:	18fb      	adds	r3, r7, r3
 80086fc:	0052      	lsls	r2, r2, #1
 80086fe:	2120      	movs	r1, #32
 8008700:	1879      	adds	r1, r7, r1
 8008702:	8809      	ldrh	r1, [r1, #0]
 8008704:	52d1      	strh	r1, [r2, r3]
                last_val[k] = val;
 8008706:	183b      	adds	r3, r7, r0
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	231c      	movs	r3, #28
 800870c:	18fb      	adds	r3, r7, r3
 800870e:	8819      	ldrh	r1, [r3, #0]
 8008710:	230c      	movs	r3, #12
 8008712:	18fb      	adds	r3, r7, r3
 8008714:	0052      	lsls	r2, r2, #1
 8008716:	52d1      	strh	r1, [r2, r3]
            for (uint8_t k = 0; k < SPECTRUM_CHANNEL_NUM; k++) {
 8008718:	183b      	adds	r3, r7, r0
 800871a:	781a      	ldrb	r2, [r3, #0]
 800871c:	183b      	adds	r3, r7, r0
 800871e:	3201      	adds	r2, #1
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	231f      	movs	r3, #31
 8008724:	18fb      	adds	r3, r7, r3
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d800      	bhi.n	800872e <Show_Wave+0x156>
 800872c:	e780      	b.n	8008630 <Show_Wave+0x58>
            }
        }
        j += ratio;
 800872e:	69b9      	ldr	r1, [r7, #24]
 8008730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008732:	f7f7 feb7 	bl	80004a4 <__aeabi_fadd>
 8008736:	1c03      	adds	r3, r0, #0
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
    for (uint16_t i = 0; i < SPECTRUM_X_NUM; i++) { // 以示波器的横轴每个像素点为循环主元
 800873a:	2120      	movs	r1, #32
 800873c:	187b      	adds	r3, r7, r1
 800873e:	881a      	ldrh	r2, [r3, #0]
 8008740:	187b      	adds	r3, r7, r1
 8008742:	3201      	adds	r2, #1
 8008744:	801a      	strh	r2, [r3, #0]
 8008746:	2320      	movs	r3, #32
 8008748:	18fb      	adds	r3, r7, r3
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	2b7e      	cmp	r3, #126	; 0x7e
 800874e:	d800      	bhi.n	8008752 <Show_Wave+0x17a>
 8008750:	e759      	b.n	8008606 <Show_Wave+0x2e>
    }
}
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	46c0      	nop			; (mov r8, r8)
 8008756:	46bd      	mov	sp, r7
 8008758:	b00a      	add	sp, #40	; 0x28
 800875a:	bdb0      	pop	{r4, r5, r7, pc}
 800875c:	200000c3 	.word	0x200000c3
 8008760:	200000c4 	.word	0x200000c4
 8008764:	41900000 	.word	0x41900000
 8008768:	42c80000 	.word	0x42c80000

0800876c <Show_Information>:

static void Show_Information(Spectrum_Sample *sample) {
 800876c:	b5b0      	push	{r4, r5, r7, lr}
 800876e:	b088      	sub	sp, #32
 8008770:	af02      	add	r7, sp, #8
 8008772:	6078      	str	r0, [r7, #4]
    char str_buf[10]; // 字符串缓冲区
    uint8_t len;

    // 显示测量参数
    // Channel1
    OLED_ShowString(0, 104, "CH1", 8, 1);
 8008774:	4a81      	ldr	r2, [pc, #516]	; (800897c <Show_Information+0x210>)
 8008776:	2301      	movs	r3, #1
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	2308      	movs	r3, #8
 800877c:	2168      	movs	r1, #104	; 0x68
 800877e:	2000      	movs	r0, #0
 8008780:	f001 fc2a 	bl	8009fd8 <OLED_ShowString>
    floatToStr(str_buf, sample->bias[0], 1);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a7e      	ldr	r2, [pc, #504]	; (8008980 <Show_Information+0x214>)
 8008788:	5899      	ldr	r1, [r3, r2]
 800878a:	240c      	movs	r4, #12
 800878c:	193b      	adds	r3, r7, r4
 800878e:	2201      	movs	r2, #1
 8008790:	0018      	movs	r0, r3
 8008792:	f000 ff35 	bl	8009600 <floatToStr>
    strcat(str_buf, "V");
 8008796:	193b      	adds	r3, r7, r4
 8008798:	0018      	movs	r0, r3
 800879a:	f7f7 fcb3 	bl	8000104 <strlen>
 800879e:	0003      	movs	r3, r0
 80087a0:	001a      	movs	r2, r3
 80087a2:	193b      	adds	r3, r7, r4
 80087a4:	189a      	adds	r2, r3, r2
 80087a6:	4b77      	ldr	r3, [pc, #476]	; (8008984 <Show_Information+0x218>)
 80087a8:	0010      	movs	r0, r2
 80087aa:	0019      	movs	r1, r3
 80087ac:	2302      	movs	r3, #2
 80087ae:	001a      	movs	r2, r3
 80087b0:	f003 fa32 	bl	800bc18 <memcpy>
    OLED_ShowString(22, 104, str_buf, 8, 1);
 80087b4:	193a      	adds	r2, r7, r4
 80087b6:	2301      	movs	r3, #1
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	2308      	movs	r3, #8
 80087bc:	2168      	movs	r1, #104	; 0x68
 80087be:	2016      	movs	r0, #22
 80087c0:	f001 fc0a 	bl	8009fd8 <OLED_ShowString>

    len = floatToStr(str_buf, sample->max[0], 1) + 1;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a70      	ldr	r2, [pc, #448]	; (8008988 <Show_Information+0x21c>)
 80087c8:	5899      	ldr	r1, [r3, r2]
 80087ca:	193b      	adds	r3, r7, r4
 80087cc:	2201      	movs	r2, #1
 80087ce:	0018      	movs	r0, r3
 80087d0:	f000 ff16 	bl	8009600 <floatToStr>
 80087d4:	0003      	movs	r3, r0
 80087d6:	001a      	movs	r2, r3
 80087d8:	2517      	movs	r5, #23
 80087da:	197b      	adds	r3, r7, r5
 80087dc:	3201      	adds	r2, #1
 80087de:	701a      	strb	r2, [r3, #0]
    strcat(str_buf, "V");
 80087e0:	193b      	adds	r3, r7, r4
 80087e2:	0018      	movs	r0, r3
 80087e4:	f7f7 fc8e 	bl	8000104 <strlen>
 80087e8:	0003      	movs	r3, r0
 80087ea:	001a      	movs	r2, r3
 80087ec:	193b      	adds	r3, r7, r4
 80087ee:	189a      	adds	r2, r3, r2
 80087f0:	4b64      	ldr	r3, [pc, #400]	; (8008984 <Show_Information+0x218>)
 80087f2:	0010      	movs	r0, r2
 80087f4:	0019      	movs	r1, r3
 80087f6:	2302      	movs	r3, #2
 80087f8:	001a      	movs	r2, r3
 80087fa:	f003 fa0d 	bl	800bc18 <memcpy>
    OLED_ShowString(64 - len * 3, 104, str_buf, 8, 1);
 80087fe:	197b      	adds	r3, r7, r5
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	1c1a      	adds	r2, r3, #0
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	b2db      	uxtb	r3, r3
 800880a:	3340      	adds	r3, #64	; 0x40
 800880c:	b2d8      	uxtb	r0, r3
 800880e:	193a      	adds	r2, r7, r4
 8008810:	2301      	movs	r3, #1
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	2308      	movs	r3, #8
 8008816:	2168      	movs	r1, #104	; 0x68
 8008818:	f001 fbde 	bl	8009fd8 <OLED_ShowString>

    len = floatToStr(str_buf, sample->freq[0], 0) + 2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a5b      	ldr	r2, [pc, #364]	; (800898c <Show_Information+0x220>)
 8008820:	5899      	ldr	r1, [r3, r2]
 8008822:	193b      	adds	r3, r7, r4
 8008824:	2200      	movs	r2, #0
 8008826:	0018      	movs	r0, r3
 8008828:	f000 feea 	bl	8009600 <floatToStr>
 800882c:	0003      	movs	r3, r0
 800882e:	001a      	movs	r2, r3
 8008830:	197b      	adds	r3, r7, r5
 8008832:	3202      	adds	r2, #2
 8008834:	701a      	strb	r2, [r3, #0]
    strcat(str_buf, "Hz");
 8008836:	193b      	adds	r3, r7, r4
 8008838:	0018      	movs	r0, r3
 800883a:	f7f7 fc63 	bl	8000104 <strlen>
 800883e:	0003      	movs	r3, r0
 8008840:	001a      	movs	r2, r3
 8008842:	193b      	adds	r3, r7, r4
 8008844:	189a      	adds	r2, r3, r2
 8008846:	4b52      	ldr	r3, [pc, #328]	; (8008990 <Show_Information+0x224>)
 8008848:	0010      	movs	r0, r2
 800884a:	0019      	movs	r1, r3
 800884c:	2303      	movs	r3, #3
 800884e:	001a      	movs	r2, r3
 8008850:	f003 f9e2 	bl	800bc18 <memcpy>
    OLED_ShowString(127 - len * 6, 104, str_buf, 8, 1);
 8008854:	197b      	adds	r3, r7, r5
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	1c1a      	adds	r2, r3, #0
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	18db      	adds	r3, r3, r3
 8008860:	b2db      	uxtb	r3, r3
 8008862:	337f      	adds	r3, #127	; 0x7f
 8008864:	b2d8      	uxtb	r0, r3
 8008866:	193a      	adds	r2, r7, r4
 8008868:	2301      	movs	r3, #1
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	2308      	movs	r3, #8
 800886e:	2168      	movs	r1, #104	; 0x68
 8008870:	f001 fbb2 	bl	8009fd8 <OLED_ShowString>

    // Channel2
    OLED_ShowString(0, 112, "CH2", 8, 1);
 8008874:	4a47      	ldr	r2, [pc, #284]	; (8008994 <Show_Information+0x228>)
 8008876:	2301      	movs	r3, #1
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	2308      	movs	r3, #8
 800887c:	2170      	movs	r1, #112	; 0x70
 800887e:	2000      	movs	r0, #0
 8008880:	f001 fbaa 	bl	8009fd8 <OLED_ShowString>
    floatToStr(str_buf, sample->bias[1], 1);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a44      	ldr	r2, [pc, #272]	; (8008998 <Show_Information+0x22c>)
 8008888:	5899      	ldr	r1, [r3, r2]
 800888a:	193b      	adds	r3, r7, r4
 800888c:	2201      	movs	r2, #1
 800888e:	0018      	movs	r0, r3
 8008890:	f000 feb6 	bl	8009600 <floatToStr>
    strcat(str_buf, "V");
 8008894:	193b      	adds	r3, r7, r4
 8008896:	0018      	movs	r0, r3
 8008898:	f7f7 fc34 	bl	8000104 <strlen>
 800889c:	0003      	movs	r3, r0
 800889e:	001a      	movs	r2, r3
 80088a0:	193b      	adds	r3, r7, r4
 80088a2:	189a      	adds	r2, r3, r2
 80088a4:	4b37      	ldr	r3, [pc, #220]	; (8008984 <Show_Information+0x218>)
 80088a6:	0010      	movs	r0, r2
 80088a8:	0019      	movs	r1, r3
 80088aa:	2302      	movs	r3, #2
 80088ac:	001a      	movs	r2, r3
 80088ae:	f003 f9b3 	bl	800bc18 <memcpy>
    OLED_ShowString(22, 112, str_buf, 8, 1);
 80088b2:	193a      	adds	r2, r7, r4
 80088b4:	2301      	movs	r3, #1
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	2308      	movs	r3, #8
 80088ba:	2170      	movs	r1, #112	; 0x70
 80088bc:	2016      	movs	r0, #22
 80088be:	f001 fb8b 	bl	8009fd8 <OLED_ShowString>

    len = floatToStr(str_buf, sample->max[1], 1) + 1;
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	2381      	movs	r3, #129	; 0x81
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	58d1      	ldr	r1, [r2, r3]
 80088ca:	193b      	adds	r3, r7, r4
 80088cc:	2201      	movs	r2, #1
 80088ce:	0018      	movs	r0, r3
 80088d0:	f000 fe96 	bl	8009600 <floatToStr>
 80088d4:	0003      	movs	r3, r0
 80088d6:	001a      	movs	r2, r3
 80088d8:	197b      	adds	r3, r7, r5
 80088da:	3201      	adds	r2, #1
 80088dc:	701a      	strb	r2, [r3, #0]
    strcat(str_buf, "V");
 80088de:	193b      	adds	r3, r7, r4
 80088e0:	0018      	movs	r0, r3
 80088e2:	f7f7 fc0f 	bl	8000104 <strlen>
 80088e6:	0003      	movs	r3, r0
 80088e8:	001a      	movs	r2, r3
 80088ea:	193b      	adds	r3, r7, r4
 80088ec:	189a      	adds	r2, r3, r2
 80088ee:	4b25      	ldr	r3, [pc, #148]	; (8008984 <Show_Information+0x218>)
 80088f0:	0010      	movs	r0, r2
 80088f2:	0019      	movs	r1, r3
 80088f4:	2302      	movs	r3, #2
 80088f6:	001a      	movs	r2, r3
 80088f8:	f003 f98e 	bl	800bc18 <memcpy>
    OLED_ShowString(64 - len * 3, 112, str_buf, 8, 1);
 80088fc:	197b      	adds	r3, r7, r5
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	1c1a      	adds	r2, r3, #0
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	b2db      	uxtb	r3, r3
 8008908:	3340      	adds	r3, #64	; 0x40
 800890a:	b2d8      	uxtb	r0, r3
 800890c:	193a      	adds	r2, r7, r4
 800890e:	2301      	movs	r3, #1
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	2308      	movs	r3, #8
 8008914:	2170      	movs	r1, #112	; 0x70
 8008916:	f001 fb5f 	bl	8009fd8 <OLED_ShowString>

    len = floatToStr(str_buf, sample->freq[1], 0) + 2;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a1f      	ldr	r2, [pc, #124]	; (800899c <Show_Information+0x230>)
 800891e:	5899      	ldr	r1, [r3, r2]
 8008920:	193b      	adds	r3, r7, r4
 8008922:	2200      	movs	r2, #0
 8008924:	0018      	movs	r0, r3
 8008926:	f000 fe6b 	bl	8009600 <floatToStr>
 800892a:	0003      	movs	r3, r0
 800892c:	001a      	movs	r2, r3
 800892e:	197b      	adds	r3, r7, r5
 8008930:	3202      	adds	r2, #2
 8008932:	701a      	strb	r2, [r3, #0]
    strcat(str_buf, "Hz");
 8008934:	193b      	adds	r3, r7, r4
 8008936:	0018      	movs	r0, r3
 8008938:	f7f7 fbe4 	bl	8000104 <strlen>
 800893c:	0003      	movs	r3, r0
 800893e:	001a      	movs	r2, r3
 8008940:	193b      	adds	r3, r7, r4
 8008942:	189a      	adds	r2, r3, r2
 8008944:	4b12      	ldr	r3, [pc, #72]	; (8008990 <Show_Information+0x224>)
 8008946:	0010      	movs	r0, r2
 8008948:	0019      	movs	r1, r3
 800894a:	2303      	movs	r3, #3
 800894c:	001a      	movs	r2, r3
 800894e:	f003 f963 	bl	800bc18 <memcpy>
    OLED_ShowString(127 - len * 6, 112, str_buf, 8, 1);
 8008952:	197b      	adds	r3, r7, r5
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	1c1a      	adds	r2, r3, #0
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	18db      	adds	r3, r3, r3
 800895e:	b2db      	uxtb	r3, r3
 8008960:	337f      	adds	r3, #127	; 0x7f
 8008962:	b2d8      	uxtb	r0, r3
 8008964:	193a      	adds	r2, r7, r4
 8008966:	2301      	movs	r3, #1
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	2308      	movs	r3, #8
 800896c:	2170      	movs	r1, #112	; 0x70
 800896e:	f001 fb33 	bl	8009fd8 <OLED_ShowString>
}
 8008972:	46c0      	nop			; (mov r8, r8)
 8008974:	46bd      	mov	sp, r7
 8008976:	b006      	add	sp, #24
 8008978:	bdb0      	pop	{r4, r5, r7, pc}
 800897a:	46c0      	nop			; (mov r8, r8)
 800897c:	0800bf64 	.word	0x0800bf64
 8008980:	00000814 	.word	0x00000814
 8008984:	0800bf68 	.word	0x0800bf68
 8008988:	0000080c 	.word	0x0000080c
 800898c:	00000804 	.word	0x00000804
 8008990:	0800bf6c 	.word	0x0800bf6c
 8008994:	0800bf70 	.word	0x0800bf70
 8008998:	00000818 	.word	0x00000818
 800899c:	00000808 	.word	0x00000808

080089a0 <Spectrum_UI_Refresh_Sub>:

static void Spectrum_UI_Refresh_Sub(Spectrum_Sample *sample) {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
    OLED_Clear();
 80089a8:	f001 f8e2 	bl	8009b70 <OLED_Clear>
    Show_Framework();
 80089ac:	f7ff fd56 	bl	800845c <Show_Framework>
    Show_Wave(sample);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	0018      	movs	r0, r3
 80089b4:	f7ff fe10 	bl	80085d8 <Show_Wave>
    Show_Information(sample);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	0018      	movs	r0, r3
 80089bc:	f7ff fed6 	bl	800876c <Show_Information>
    OLED_Refresh();
 80089c0:	f001 f894 	bl	8009aec <OLED_Refresh>
}
 80089c4:	46c0      	nop			; (mov r8, r8)
 80089c6:	46bd      	mov	sp, r7
 80089c8:	b002      	add	sp, #8
 80089ca:	bd80      	pop	{r7, pc}

080089cc <Spectrum_UI_Init>:

/*-----------------------------------------------------接口函数-----------------------------------------------------*/

void Spectrum_UI_Init(void) {
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
    OLED_Clear();
 80089d0:	f001 f8ce 	bl	8009b70 <OLED_Clear>
    Show_Framework();
 80089d4:	f7ff fd42 	bl	800845c <Show_Framework>
    OLED_Refresh();
 80089d8:	f001 f888 	bl	8009aec <OLED_Refresh>
}
 80089dc:	46c0      	nop			; (mov r8, r8)
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <Spectrum_UI_DeInit>:

void Spectrum_UI_DeInit(void) {
 80089e2:	b580      	push	{r7, lr}
 80089e4:	af00      	add	r7, sp, #0
    OLED_Clear();
 80089e6:	f001 f8c3 	bl	8009b70 <OLED_Clear>
    OLED_Refresh();
 80089ea:	f001 f87f 	bl	8009aec <OLED_Refresh>
}
 80089ee:	46c0      	nop			; (mov r8, r8)
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <Spectrum_UI_Try_Refresh>:

void Spectrum_UI_Try_Refresh(uint8_t force) {
 80089f4:	b590      	push	{r4, r7, lr}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	0002      	movs	r2, r0
 80089fc:	1dfb      	adds	r3, r7, #7
 80089fe:	701a      	strb	r2, [r3, #0]
    uint8_t success = 0;
 8008a00:	230f      	movs	r3, #15
 8008a02:	18fb      	adds	r3, r7, r3
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]
    if (!spectrum_hold) {
 8008a08:	4b2b      	ldr	r3, [pc, #172]	; (8008ab8 <Spectrum_UI_Try_Refresh+0xc4>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d140      	bne.n	8008a92 <Spectrum_UI_Try_Refresh+0x9e>
        for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 8008a10:	230e      	movs	r3, #14
 8008a12:	18fb      	adds	r3, r7, r3
 8008a14:	2200      	movs	r2, #0
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	e034      	b.n	8008a84 <Spectrum_UI_Try_Refresh+0x90>
            if (spectrum_sample_arr[i] == NULL)
 8008a1a:	210e      	movs	r1, #14
 8008a1c:	187b      	adds	r3, r7, r1
 8008a1e:	781a      	ldrb	r2, [r3, #0]
 8008a20:	4b26      	ldr	r3, [pc, #152]	; (8008abc <Spectrum_UI_Try_Refresh+0xc8>)
 8008a22:	0092      	lsls	r2, r2, #2
 8008a24:	58d3      	ldr	r3, [r2, r3]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d032      	beq.n	8008a90 <Spectrum_UI_Try_Refresh+0x9c>
                break;
            if (spectrum_sample_arr[i]->is_handle == 1) {
 8008a2a:	187b      	adds	r3, r7, r1
 8008a2c:	781a      	ldrb	r2, [r3, #0]
 8008a2e:	4b23      	ldr	r3, [pc, #140]	; (8008abc <Spectrum_UI_Try_Refresh+0xc8>)
 8008a30:	0092      	lsls	r2, r2, #2
 8008a32:	58d3      	ldr	r3, [r2, r3]
 8008a34:	785b      	ldrb	r3, [r3, #1]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d11e      	bne.n	8008a78 <Spectrum_UI_Try_Refresh+0x84>
                Spectrum_UI_Refresh_Sub(spectrum_sample_arr[i]);
 8008a3a:	000c      	movs	r4, r1
 8008a3c:	187b      	adds	r3, r7, r1
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	4b1e      	ldr	r3, [pc, #120]	; (8008abc <Spectrum_UI_Try_Refresh+0xc8>)
 8008a42:	0092      	lsls	r2, r2, #2
 8008a44:	58d3      	ldr	r3, [r2, r3]
 8008a46:	0018      	movs	r0, r3
 8008a48:	f7ff ffaa 	bl	80089a0 <Spectrum_UI_Refresh_Sub>
                spectrum_sample_arr[i]->sample_flag = Spectrum_Sample_Not;
 8008a4c:	0021      	movs	r1, r4
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	4b1a      	ldr	r3, [pc, #104]	; (8008abc <Spectrum_UI_Try_Refresh+0xc8>)
 8008a54:	0092      	lsls	r2, r2, #2
 8008a56:	58d3      	ldr	r3, [r2, r3]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	701a      	strb	r2, [r3, #0]
                spectrum_sample_arr[i]->is_handle = 0;
 8008a5c:	187b      	adds	r3, r7, r1
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	4b16      	ldr	r3, [pc, #88]	; (8008abc <Spectrum_UI_Try_Refresh+0xc8>)
 8008a62:	0092      	lsls	r2, r2, #2
 8008a64:	58d3      	ldr	r3, [r2, r3]
 8008a66:	2200      	movs	r2, #0
 8008a68:	705a      	strb	r2, [r3, #1]
                Spectrum_Sample_Try_Start_New_ADC();
 8008a6a:	f000 fbf1 	bl	8009250 <Spectrum_Sample_Try_Start_New_ADC>
                success = 1;
 8008a6e:	230f      	movs	r3, #15
 8008a70:	18fb      	adds	r3, r7, r3
 8008a72:	2201      	movs	r2, #1
 8008a74:	701a      	strb	r2, [r3, #0]
                break; // 只渲染一帧
 8008a76:	e00c      	b.n	8008a92 <Spectrum_UI_Try_Refresh+0x9e>
        for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 8008a78:	210e      	movs	r1, #14
 8008a7a:	187b      	adds	r3, r7, r1
 8008a7c:	781a      	ldrb	r2, [r3, #0]
 8008a7e:	187b      	adds	r3, r7, r1
 8008a80:	3201      	adds	r2, #1
 8008a82:	701a      	strb	r2, [r3, #0]
 8008a84:	230e      	movs	r3, #14
 8008a86:	18fb      	adds	r3, r7, r3
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0c5      	beq.n	8008a1a <Spectrum_UI_Try_Refresh+0x26>
 8008a8e:	e000      	b.n	8008a92 <Spectrum_UI_Try_Refresh+0x9e>
                break;
 8008a90:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
    if (!success && force) {
 8008a92:	230f      	movs	r3, #15
 8008a94:	18fb      	adds	r3, r7, r3
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d109      	bne.n	8008ab0 <Spectrum_UI_Try_Refresh+0xbc>
 8008a9c:	1dfb      	adds	r3, r7, #7
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <Spectrum_UI_Try_Refresh+0xbc>
        OLED_Clear();
 8008aa4:	f001 f864 	bl	8009b70 <OLED_Clear>
        Show_Framework();
 8008aa8:	f7ff fcd8 	bl	800845c <Show_Framework>
        OLED_Refresh();
 8008aac:	f001 f81e 	bl	8009aec <OLED_Refresh>
    }
}
 8008ab0:	46c0      	nop			; (mov r8, r8)
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	b005      	add	sp, #20
 8008ab6:	bd90      	pop	{r4, r7, pc}
 8008ab8:	200001a2 	.word	0x200001a2
 8008abc:	20000474 	.word	0x20000474

08008ac0 <Spectrum_Operate_Init>:
#include "operate1.h"

void Spectrum_Operate_Init(void) {
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
    spectrum_hold = 0;
 8008ac4:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <Spectrum_Operate_Init+0x14>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	701a      	strb	r2, [r3, #0]
    Key_Clear();
 8008aca:	f000 fec7 	bl	800985c <Key_Clear>
}
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	200001a2 	.word	0x200001a2

08008ad8 <Spectrum_Operate_DeInit>:

void Spectrum_Operate_DeInit(void) {
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
    Key_Clear();
 8008adc:	f000 febe 	bl	800985c <Key_Clear>
}
 8008ae0:	46c0      	nop			; (mov r8, r8)
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <Spectrum_Operate_Try_Process>:

// 成功处理队列里的一个操作，就视为操作成功，返回1
void Spectrum_Operate_Try_Process(void) {
 8008ae8:	b590      	push	{r4, r7, lr}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
    if (!Key_Empty()) {
 8008aee:	f000 fec3 	bl	8009878 <Key_Empty>
 8008af2:	1e03      	subs	r3, r0, #0
 8008af4:	d000      	beq.n	8008af8 <Spectrum_Operate_Try_Process+0x10>
 8008af6:	e0a3      	b.n	8008c40 <Spectrum_Operate_Try_Process+0x158>
        Key key = Key_Pop();
 8008af8:	1dfc      	adds	r4, r7, #7
 8008afa:	f000 fe89 	bl	8009810 <Key_Pop>
 8008afe:	0003      	movs	r3, r0
 8008b00:	7023      	strb	r3, [r4, #0]
        switch (key) {
 8008b02:	1dfb      	adds	r3, r7, #7
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d900      	bls.n	8008b0c <Spectrum_Operate_Try_Process+0x24>
 8008b0a:	e09b      	b.n	8008c44 <Spectrum_Operate_Try_Process+0x15c>
 8008b0c:	009a      	lsls	r2, r3, #2
 8008b0e:	4b53      	ldr	r3, [pc, #332]	; (8008c5c <Spectrum_Operate_Try_Process+0x174>)
 8008b10:	18d3      	adds	r3, r2, r3
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	469f      	mov	pc, r3
            case Key_1: { // 功能切换
                spectrum_exit = 1;
 8008b16:	4b52      	ldr	r3, [pc, #328]	; (8008c60 <Spectrum_Operate_Try_Process+0x178>)
 8008b18:	2201      	movs	r2, #1
 8008b1a:	701a      	strb	r2, [r3, #0]
                Buzzer_Beep(1);
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	f000 fc57 	bl	80093d0 <Buzzer_Beep>
                break;
 8008b22:	e096      	b.n	8008c52 <Spectrum_Operate_Try_Process+0x16a>
            }

            case Key_2: {
                spectrum_hold = !spectrum_hold;
 8008b24:	4b4f      	ldr	r3, [pc, #316]	; (8008c64 <Spectrum_Operate_Try_Process+0x17c>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	425a      	negs	r2, r3
 8008b2a:	4153      	adcs	r3, r2
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	001a      	movs	r2, r3
 8008b30:	4b4c      	ldr	r3, [pc, #304]	; (8008c64 <Spectrum_Operate_Try_Process+0x17c>)
 8008b32:	701a      	strb	r2, [r3, #0]
                Buzzer_Beep(1);
 8008b34:	2001      	movs	r0, #1
 8008b36:	f000 fc4b 	bl	80093d0 <Buzzer_Beep>
                break;
 8008b3a:	e08a      	b.n	8008c52 <Spectrum_Operate_Try_Process+0x16a>
            }

            case Key_OK: {
                if (!spectrum_hold) {
 8008b3c:	4b49      	ldr	r3, [pc, #292]	; (8008c64 <Spectrum_Operate_Try_Process+0x17c>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d000      	beq.n	8008b46 <Spectrum_Operate_Try_Process+0x5e>
 8008b44:	e080      	b.n	8008c48 <Spectrum_Operate_Try_Process+0x160>
                    spectrum_key_l_r_func = !spectrum_key_l_r_func;
 8008b46:	4b48      	ldr	r3, [pc, #288]	; (8008c68 <Spectrum_Operate_Try_Process+0x180>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	425a      	negs	r2, r3
 8008b4c:	4153      	adcs	r3, r2
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	001a      	movs	r2, r3
 8008b52:	4b45      	ldr	r3, [pc, #276]	; (8008c68 <Spectrum_Operate_Try_Process+0x180>)
 8008b54:	701a      	strb	r2, [r3, #0]
                    Buzzer_Beep(1);
 8008b56:	2001      	movs	r0, #1
 8008b58:	f000 fc3a 	bl	80093d0 <Buzzer_Beep>
                }
                break;
 8008b5c:	e074      	b.n	8008c48 <Spectrum_Operate_Try_Process+0x160>
            }

            case Key_L: {
                if (!spectrum_hold) {
 8008b5e:	4b41      	ldr	r3, [pc, #260]	; (8008c64 <Spectrum_Operate_Try_Process+0x17c>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d000      	beq.n	8008b68 <Spectrum_Operate_Try_Process+0x80>
 8008b66:	e071      	b.n	8008c4c <Spectrum_Operate_Try_Process+0x164>
                    if (!spectrum_key_l_r_func && spectrum_KHz_max_select >= 1) {
 8008b68:	4b3f      	ldr	r3, [pc, #252]	; (8008c68 <Spectrum_Operate_Try_Process+0x180>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d112      	bne.n	8008b96 <Spectrum_Operate_Try_Process+0xae>
 8008b70:	4b3e      	ldr	r3, [pc, #248]	; (8008c6c <Spectrum_Operate_Try_Process+0x184>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00e      	beq.n	8008b96 <Spectrum_Operate_Try_Process+0xae>
                        spectrum_KHz_max_select--;
 8008b78:	4b3c      	ldr	r3, [pc, #240]	; (8008c6c <Spectrum_Operate_Try_Process+0x184>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	4b3a      	ldr	r3, [pc, #232]	; (8008c6c <Spectrum_Operate_Try_Process+0x184>)
 8008b82:	701a      	strb	r2, [r3, #0]
                        Spectrum_Sample_Refresh_Sample_Rate();
 8008b84:	f000 fafa 	bl	800917c <Spectrum_Sample_Refresh_Sample_Rate>
                        Spectrum_UI_Try_Refresh(1);
 8008b88:	2001      	movs	r0, #1
 8008b8a:	f7ff ff33 	bl	80089f4 <Spectrum_UI_Try_Refresh>
                        Buzzer_Beep(0);
 8008b8e:	2000      	movs	r0, #0
 8008b90:	f000 fc1e 	bl	80093d0 <Buzzer_Beep>
 8008b94:	e018      	b.n	8008bc8 <Spectrum_Operate_Try_Process+0xe0>
                    } else if (spectrum_key_l_r_func && spectrum_voltage_div_select >= 1) {
 8008b96:	4b34      	ldr	r3, [pc, #208]	; (8008c68 <Spectrum_Operate_Try_Process+0x180>)
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d010      	beq.n	8008bc0 <Spectrum_Operate_Try_Process+0xd8>
 8008b9e:	4b34      	ldr	r3, [pc, #208]	; (8008c70 <Spectrum_Operate_Try_Process+0x188>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00c      	beq.n	8008bc0 <Spectrum_Operate_Try_Process+0xd8>
                        spectrum_voltage_div_select--;
 8008ba6:	4b32      	ldr	r3, [pc, #200]	; (8008c70 <Spectrum_Operate_Try_Process+0x188>)
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	4b30      	ldr	r3, [pc, #192]	; (8008c70 <Spectrum_Operate_Try_Process+0x188>)
 8008bb0:	701a      	strb	r2, [r3, #0]
                        Spectrum_UI_Try_Refresh(1);
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	f7ff ff1e 	bl	80089f4 <Spectrum_UI_Try_Refresh>
                        Buzzer_Beep(0);
 8008bb8:	2000      	movs	r0, #0
 8008bba:	f000 fc09 	bl	80093d0 <Buzzer_Beep>
 8008bbe:	e003      	b.n	8008bc8 <Spectrum_Operate_Try_Process+0xe0>
                    } else {
                        Buzzer_Beep(1);
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	f000 fc05 	bl	80093d0 <Buzzer_Beep>
                    }
                }
                break;
 8008bc6:	e041      	b.n	8008c4c <Spectrum_Operate_Try_Process+0x164>
 8008bc8:	e040      	b.n	8008c4c <Spectrum_Operate_Try_Process+0x164>
            }

            case Key_R: {
                if (!spectrum_hold) {
 8008bca:	4b26      	ldr	r3, [pc, #152]	; (8008c64 <Spectrum_Operate_Try_Process+0x17c>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d13e      	bne.n	8008c50 <Spectrum_Operate_Try_Process+0x168>
                    if (!spectrum_key_l_r_func && spectrum_KHz_max_select <= spectrum_KHz_max_size - 2) {
 8008bd2:	4b25      	ldr	r3, [pc, #148]	; (8008c68 <Spectrum_Operate_Try_Process+0x180>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d115      	bne.n	8008c06 <Spectrum_Operate_Try_Process+0x11e>
 8008bda:	4b26      	ldr	r3, [pc, #152]	; (8008c74 <Spectrum_Operate_Try_Process+0x18c>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	3b01      	subs	r3, #1
 8008be0:	4a22      	ldr	r2, [pc, #136]	; (8008c6c <Spectrum_Operate_Try_Process+0x184>)
 8008be2:	7812      	ldrb	r2, [r2, #0]
 8008be4:	4293      	cmp	r3, r2
 8008be6:	dd0e      	ble.n	8008c06 <Spectrum_Operate_Try_Process+0x11e>
                        spectrum_KHz_max_select++;
 8008be8:	4b20      	ldr	r3, [pc, #128]	; (8008c6c <Spectrum_Operate_Try_Process+0x184>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	4b1e      	ldr	r3, [pc, #120]	; (8008c6c <Spectrum_Operate_Try_Process+0x184>)
 8008bf2:	701a      	strb	r2, [r3, #0]
                        Spectrum_Sample_Refresh_Sample_Rate();
 8008bf4:	f000 fac2 	bl	800917c <Spectrum_Sample_Refresh_Sample_Rate>
                        Spectrum_UI_Try_Refresh(1);
 8008bf8:	2001      	movs	r0, #1
 8008bfa:	f7ff fefb 	bl	80089f4 <Spectrum_UI_Try_Refresh>
                        Buzzer_Beep(0);
 8008bfe:	2000      	movs	r0, #0
 8008c00:	f000 fbe6 	bl	80093d0 <Buzzer_Beep>
 8008c04:	e01b      	b.n	8008c3e <Spectrum_Operate_Try_Process+0x156>
                    } else if (spectrum_key_l_r_func && spectrum_voltage_div_select <= spectrum_voltage_div_size - 2) {
 8008c06:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <Spectrum_Operate_Try_Process+0x180>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d013      	beq.n	8008c36 <Spectrum_Operate_Try_Process+0x14e>
 8008c0e:	4b1a      	ldr	r3, [pc, #104]	; (8008c78 <Spectrum_Operate_Try_Process+0x190>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	4a16      	ldr	r2, [pc, #88]	; (8008c70 <Spectrum_Operate_Try_Process+0x188>)
 8008c16:	7812      	ldrb	r2, [r2, #0]
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	dd0c      	ble.n	8008c36 <Spectrum_Operate_Try_Process+0x14e>
                        spectrum_voltage_div_select++;
 8008c1c:	4b14      	ldr	r3, [pc, #80]	; (8008c70 <Spectrum_Operate_Try_Process+0x188>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	3301      	adds	r3, #1
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	4b12      	ldr	r3, [pc, #72]	; (8008c70 <Spectrum_Operate_Try_Process+0x188>)
 8008c26:	701a      	strb	r2, [r3, #0]
                        Spectrum_UI_Try_Refresh(1);
 8008c28:	2001      	movs	r0, #1
 8008c2a:	f7ff fee3 	bl	80089f4 <Spectrum_UI_Try_Refresh>
                        Buzzer_Beep(0);
 8008c2e:	2000      	movs	r0, #0
 8008c30:	f000 fbce 	bl	80093d0 <Buzzer_Beep>
 8008c34:	e003      	b.n	8008c3e <Spectrum_Operate_Try_Process+0x156>
                    } else {
                        Buzzer_Beep(1);
 8008c36:	2001      	movs	r0, #1
 8008c38:	f000 fbca 	bl	80093d0 <Buzzer_Beep>
                    }
                }
                break;
 8008c3c:	e008      	b.n	8008c50 <Spectrum_Operate_Try_Process+0x168>
 8008c3e:	e007      	b.n	8008c50 <Spectrum_Operate_Try_Process+0x168>
            }

            default:
                break;
        }
    }
 8008c40:	46c0      	nop			; (mov r8, r8)
 8008c42:	e006      	b.n	8008c52 <Spectrum_Operate_Try_Process+0x16a>
                break;
 8008c44:	46c0      	nop			; (mov r8, r8)
 8008c46:	e004      	b.n	8008c52 <Spectrum_Operate_Try_Process+0x16a>
                break;
 8008c48:	46c0      	nop			; (mov r8, r8)
 8008c4a:	e002      	b.n	8008c52 <Spectrum_Operate_Try_Process+0x16a>
                break;
 8008c4c:	46c0      	nop			; (mov r8, r8)
 8008c4e:	e000      	b.n	8008c52 <Spectrum_Operate_Try_Process+0x16a>
                break;
 8008c50:	46c0      	nop			; (mov r8, r8)
}
 8008c52:	46c0      	nop			; (mov r8, r8)
 8008c54:	46bd      	mov	sp, r7
 8008c56:	b003      	add	sp, #12
 8008c58:	bd90      	pop	{r4, r7, pc}
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	0800c1ec 	.word	0x0800c1ec
 8008c60:	200001a1 	.word	0x200001a1
 8008c64:	200001a2 	.word	0x200001a2
 8008c68:	200001a3 	.word	0x200001a3
 8008c6c:	20000030 	.word	0x20000030
 8008c70:	200000c3 	.word	0x200000c3
 8008c74:	0800c1e8 	.word	0x0800c1e8
 8008c78:	0800c1e9 	.word	0x0800c1e9

08008c7c <Clear_Flag>:
static uint8_t dma_busy = 0;

/*-----------------------------------------------------静态函数-----------------------------------------------------*/

// 初始化所有采样相关的标志位
static void Clear_Flag() {
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
    dma_busy = 0;
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <Clear_Flag+0x5c>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 8008c88:	1dfb      	adds	r3, r7, #7
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	e019      	b.n	8008cc4 <Clear_Flag+0x48>
        if (spectrum_sample_arr[i] == NULL)
 8008c90:	1dfb      	adds	r3, r7, #7
 8008c92:	781a      	ldrb	r2, [r3, #0]
 8008c94:	4b11      	ldr	r3, [pc, #68]	; (8008cdc <Clear_Flag+0x60>)
 8008c96:	0092      	lsls	r2, r2, #2
 8008c98:	58d3      	ldr	r3, [r2, r3]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d017      	beq.n	8008cce <Clear_Flag+0x52>
            break;
        spectrum_sample_arr[i]->sample_flag = Spectrum_Sample_Not;
 8008c9e:	1dfb      	adds	r3, r7, #7
 8008ca0:	781a      	ldrb	r2, [r3, #0]
 8008ca2:	4b0e      	ldr	r3, [pc, #56]	; (8008cdc <Clear_Flag+0x60>)
 8008ca4:	0092      	lsls	r2, r2, #2
 8008ca6:	58d3      	ldr	r3, [r2, r3]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	701a      	strb	r2, [r3, #0]
        spectrum_sample_arr[i]->is_handle = 0;
 8008cac:	1dfb      	adds	r3, r7, #7
 8008cae:	781a      	ldrb	r2, [r3, #0]
 8008cb0:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <Clear_Flag+0x60>)
 8008cb2:	0092      	lsls	r2, r2, #2
 8008cb4:	58d3      	ldr	r3, [r2, r3]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 8008cba:	1dfb      	adds	r3, r7, #7
 8008cbc:	781a      	ldrb	r2, [r3, #0]
 8008cbe:	1dfb      	adds	r3, r7, #7
 8008cc0:	3201      	adds	r2, #1
 8008cc2:	701a      	strb	r2, [r3, #0]
 8008cc4:	1dfb      	adds	r3, r7, #7
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d0e1      	beq.n	8008c90 <Clear_Flag+0x14>
    }
}
 8008ccc:	e000      	b.n	8008cd0 <Clear_Flag+0x54>
            break;
 8008cce:	46c0      	nop			; (mov r8, r8)
}
 8008cd0:	46c0      	nop			; (mov r8, r8)
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	b002      	add	sp, #8
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	200001a4 	.word	0x200001a4
 8008cdc:	20000474 	.word	0x20000474

08008ce0 <Spectrum_Sample_Handle_Sub>:

// 处理采样数据：FFT
// 计算：最大峰频率、绘图数据
static void Spectrum_Sample_Handle_Sub(Spectrum_Sample *sample) {
 8008ce0:	b5b0      	push	{r4, r5, r7, lr}
 8008ce2:	b090      	sub	sp, #64	; 0x40
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
    uint16_t *p16 = (uint16_t *) sample->data;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	3304      	adds	r3, #4
 8008cec:	62bb      	str	r3, [r7, #40]	; 0x28
    uint64_t *p64 = (uint64_t *) sample->data;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24

    // uint16_t转uint64_t
    for (int16_t i = SPECTRUM_SAMPLE_NUM * SPECTRUM_CHANNEL_NUM - 1;
 8008cf4:	233e      	movs	r3, #62	; 0x3e
 8008cf6:	18fb      	adds	r3, r7, r3
 8008cf8:	22ff      	movs	r2, #255	; 0xff
 8008cfa:	801a      	strh	r2, [r3, #0]
 8008cfc:	e025      	b.n	8008d4a <Spectrum_Sample_Handle_Sub+0x6a>
         i >= 0; i--) { // 倒序循环，不可以用unsigned，否则0-1=MAX，永远无法退出循环
        float *tmp_p = (float *) &p64[i];
 8008cfe:	243e      	movs	r4, #62	; 0x3e
 8008d00:	193b      	adds	r3, r7, r4
 8008d02:	2200      	movs	r2, #0
 8008d04:	5e9b      	ldrsh	r3, [r3, r2]
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d0a:	18d3      	adds	r3, r2, r3
 8008d0c:	613b      	str	r3, [r7, #16]
        tmp_p[0] = toVoltage((float) p16[i]); // 实部放在前32位
 8008d0e:	193b      	adds	r3, r7, r4
 8008d10:	2200      	movs	r2, #0
 8008d12:	5e9b      	ldrsh	r3, [r3, r2]
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d18:	18d3      	adds	r3, r2, r3
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	f7f8 fa85 	bl	800122c <__aeabi_ui2f>
 8008d22:	1c03      	adds	r3, r0, #0
 8008d24:	1c18      	adds	r0, r3, #0
 8008d26:	f000 fb9b 	bl	8009460 <toVoltage>
 8008d2a:	1c02      	adds	r2, r0, #0
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	601a      	str	r2, [r3, #0]
        tmp_p[1] = 1; // 虚部为0；这里标为1，是为下一步行列转换做准备
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	3304      	adds	r3, #4
 8008d34:	22fe      	movs	r2, #254	; 0xfe
 8008d36:	0592      	lsls	r2, r2, #22
 8008d38:	601a      	str	r2, [r3, #0]
         i >= 0; i--) { // 倒序循环，不可以用unsigned，否则0-1=MAX，永远无法退出循环
 8008d3a:	193b      	adds	r3, r7, r4
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	5e9b      	ldrsh	r3, [r3, r2]
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	3b01      	subs	r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	193b      	adds	r3, r7, r4
 8008d48:	801a      	strh	r2, [r3, #0]
    for (int16_t i = SPECTRUM_SAMPLE_NUM * SPECTRUM_CHANNEL_NUM - 1;
 8008d4a:	233e      	movs	r3, #62	; 0x3e
 8008d4c:	18fb      	adds	r3, r7, r3
 8008d4e:	2200      	movs	r2, #0
 8008d50:	5e9b      	ldrsh	r3, [r3, r2]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dad3      	bge.n	8008cfe <Spectrum_Sample_Handle_Sub+0x1e>

    // 行列转置
#define REAL(x) (*((float *) &p64[x]))
#define IMAGE(x) (*((float *) &p64[x] + 1))
#define NEXT(x) ((p % SPECTRUM_CHANNEL_NUM) * SPECTRUM_SAMPLE_NUM + (p / SPECTRUM_CHANNEL_NUM))
    for (uint16_t i = 0; i < (uint16_t) (SPECTRUM_SAMPLE_NUM * SPECTRUM_CHANNEL_NUM); i++) {
 8008d56:	233c      	movs	r3, #60	; 0x3c
 8008d58:	18fb      	adds	r3, r7, r3
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	801a      	strh	r2, [r3, #0]
 8008d5e:	e065      	b.n	8008e2c <Spectrum_Sample_Handle_Sub+0x14c>
        if (IMAGE(i) == 0)
 8008d60:	243c      	movs	r4, #60	; 0x3c
 8008d62:	193b      	adds	r3, r7, r4
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6a:	18d3      	adds	r3, r2, r3
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2100      	movs	r1, #0
 8008d72:	1c18      	adds	r0, r3, #0
 8008d74:	f7f7 fb50 	bl	8000418 <__aeabi_fcmpeq>
 8008d78:	1e03      	subs	r3, r0, #0
 8008d7a:	d150      	bne.n	8008e1e <Spectrum_Sample_Handle_Sub+0x13e>
            continue;
        uint16_t first_p = i;
 8008d7c:	231a      	movs	r3, #26
 8008d7e:	18fb      	adds	r3, r7, r3
 8008d80:	193a      	adds	r2, r7, r4
 8008d82:	8812      	ldrh	r2, [r2, #0]
 8008d84:	801a      	strh	r2, [r3, #0]
        uint16_t p = i;
 8008d86:	233a      	movs	r3, #58	; 0x3a
 8008d88:	18fb      	adds	r3, r7, r3
 8008d8a:	193a      	adds	r2, r7, r4
 8008d8c:	8812      	ldrh	r2, [r2, #0]
 8008d8e:	801a      	strh	r2, [r3, #0]
        float val = REAL(i);
 8008d90:	193b      	adds	r3, r7, r4
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d98:	18d3      	adds	r3, r2, r3
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	637b      	str	r3, [r7, #52]	; 0x34
        IMAGE(i) = 0;
 8008d9e:	193b      	adds	r3, r7, r4
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da6:	18d3      	adds	r3, r2, r3
 8008da8:	3304      	adds	r3, #4
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
        while (1) {
            p = NEXT(p);
 8008dae:	203a      	movs	r0, #58	; 0x3a
 8008db0:	183b      	adds	r3, r7, r0
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	2201      	movs	r2, #1
 8008db6:	4013      	ands	r3, r2
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	01db      	lsls	r3, r3, #7
 8008dbc:	b299      	uxth	r1, r3
 8008dbe:	183b      	adds	r3, r7, r0
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	183b      	adds	r3, r7, r0
 8008dc8:	188a      	adds	r2, r1, r2
 8008dca:	801a      	strh	r2, [r3, #0]
            if (p == first_p) {
 8008dcc:	183a      	adds	r2, r7, r0
 8008dce:	231a      	movs	r3, #26
 8008dd0:	18fb      	adds	r3, r7, r3
 8008dd2:	8812      	ldrh	r2, [r2, #0]
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d107      	bne.n	8008dea <Spectrum_Sample_Handle_Sub+0x10a>
                REAL(p) = val;
 8008dda:	183b      	adds	r3, r7, r0
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de2:	18d3      	adds	r3, r2, r3
 8008de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008de6:	601a      	str	r2, [r3, #0]
                break;
 8008de8:	e01a      	b.n	8008e20 <Spectrum_Sample_Handle_Sub+0x140>
            }
            float tmp = REAL(p);
 8008dea:	213a      	movs	r1, #58	; 0x3a
 8008dec:	187b      	adds	r3, r7, r1
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df4:	18d3      	adds	r3, r2, r3
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	617b      	str	r3, [r7, #20]
            REAL(p) = val;
 8008dfa:	187b      	adds	r3, r7, r1
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e02:	18d3      	adds	r3, r2, r3
 8008e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e06:	601a      	str	r2, [r3, #0]
            val = tmp;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	637b      	str	r3, [r7, #52]	; 0x34
            IMAGE(p) = 0;
 8008e0c:	187b      	adds	r3, r7, r1
 8008e0e:	881b      	ldrh	r3, [r3, #0]
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e14:	18d3      	adds	r3, r2, r3
 8008e16:	3304      	adds	r3, #4
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
        while (1) {
 8008e1c:	e7c7      	b.n	8008dae <Spectrum_Sample_Handle_Sub+0xce>
            continue;
 8008e1e:	46c0      	nop			; (mov r8, r8)
    for (uint16_t i = 0; i < (uint16_t) (SPECTRUM_SAMPLE_NUM * SPECTRUM_CHANNEL_NUM); i++) {
 8008e20:	213c      	movs	r1, #60	; 0x3c
 8008e22:	187b      	adds	r3, r7, r1
 8008e24:	881a      	ldrh	r2, [r3, #0]
 8008e26:	187b      	adds	r3, r7, r1
 8008e28:	3201      	adds	r2, #1
 8008e2a:	801a      	strh	r2, [r3, #0]
 8008e2c:	233c      	movs	r3, #60	; 0x3c
 8008e2e:	18fb      	adds	r3, r7, r3
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	2bff      	cmp	r3, #255	; 0xff
 8008e34:	d994      	bls.n	8008d60 <Spectrum_Sample_Handle_Sub+0x80>
    }
#undef REAL
#undef IMAGE
#undef NEXT

    for (uint8_t k = 0; k < SPECTRUM_CHANNEL_NUM; k++) {
 8008e36:	2333      	movs	r3, #51	; 0x33
 8008e38:	18fb      	adds	r3, r7, r3
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	e11b      	b.n	8009078 <Spectrum_Sample_Handle_Sub+0x398>
        float *fft = sample->data[k];
 8008e40:	2333      	movs	r3, #51	; 0x33
 8008e42:	18fb      	adds	r3, r7, r3
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	029b      	lsls	r3, r3, #10
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	18d3      	adds	r3, r2, r3
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	623b      	str	r3, [r7, #32]

        arm_cfft_f32(&arm_cfft_sR_f32_len, fft, 0, 1);
 8008e50:	6a39      	ldr	r1, [r7, #32]
 8008e52:	488f      	ldr	r0, [pc, #572]	; (8009090 <Spectrum_Sample_Handle_Sub+0x3b0>)
 8008e54:	2301      	movs	r3, #1
 8008e56:	2200      	movs	r2, #0
 8008e58:	f002 f8a0 	bl	800af9c <arm_cfft_f32>
        arm_cmplx_mag_f32(fft, fft, SPECTRUM_SAMPLE_NUM); // magnitude为模长；fft前一半为正模长，后一半为负模长
 8008e5c:	6a39      	ldr	r1, [r7, #32]
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	2280      	movs	r2, #128	; 0x80
 8008e62:	0018      	movs	r0, r3
 8008e64:	f002 f93e 	bl	800b0e4 <arm_cmplx_mag_f32>

        // 计算最大峰
        float FFT_max;
        uint32_t FFT_max_index;
        float freq = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        arm_max_f32(fft + 1, SPECTRUM_SAMPLE_NUM / 2 - 1, &FFT_max, &FFT_max_index); // 只考虑正模长
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	1d18      	adds	r0, r3, #4
 8008e70:	2308      	movs	r3, #8
 8008e72:	18fb      	adds	r3, r7, r3
 8008e74:	220c      	movs	r2, #12
 8008e76:	18ba      	adds	r2, r7, r2
 8008e78:	213f      	movs	r1, #63	; 0x3f
 8008e7a:	f001 fb23 	bl	800a4c4 <arm_max_f32>
        FFT_max_index++; // 过滤掉直流分量
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	3301      	adds	r3, #1
 8008e82:	60bb      	str	r3, [r7, #8]
        if (FFT_max_index >= 2) {
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d800      	bhi.n	8008e8c <Spectrum_Sample_Handle_Sub+0x1ac>
 8008e8a:	e0b0      	b.n	8008fee <Spectrum_Sample_Handle_Sub+0x30e>
            float sum = fft[FFT_max_index - 2] +
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	4a81      	ldr	r2, [pc, #516]	; (8009094 <Spectrum_Sample_Handle_Sub+0x3b4>)
 8008e90:	4694      	mov	ip, r2
 8008e92:	4463      	add	r3, ip
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	6a3a      	ldr	r2, [r7, #32]
 8008e98:	18d3      	adds	r3, r2, r3
 8008e9a:	6818      	ldr	r0, [r3, #0]
                        fft[FFT_max_index - 1] +
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	4a7e      	ldr	r2, [pc, #504]	; (8009098 <Spectrum_Sample_Handle_Sub+0x3b8>)
 8008ea0:	4694      	mov	ip, r2
 8008ea2:	4463      	add	r3, ip
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	6a3a      	ldr	r2, [r7, #32]
 8008ea8:	18d3      	adds	r3, r2, r3
 8008eaa:	681b      	ldr	r3, [r3, #0]
            float sum = fft[FFT_max_index - 2] +
 8008eac:	1c19      	adds	r1, r3, #0
 8008eae:	f7f7 faf9 	bl	80004a4 <__aeabi_fadd>
 8008eb2:	1c03      	adds	r3, r0, #0
 8008eb4:	1c18      	adds	r0, r3, #0
                        fft[FFT_max_index] +
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	6a3a      	ldr	r2, [r7, #32]
 8008ebc:	18d3      	adds	r3, r2, r3
 8008ebe:	681b      	ldr	r3, [r3, #0]
                        fft[FFT_max_index - 1] +
 8008ec0:	1c19      	adds	r1, r3, #0
 8008ec2:	f7f7 faef 	bl	80004a4 <__aeabi_fadd>
 8008ec6:	1c03      	adds	r3, r0, #0
 8008ec8:	1c18      	adds	r0, r3, #0
                        fft[FFT_max_index + 1] +
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	6a3a      	ldr	r2, [r7, #32]
 8008ed2:	18d3      	adds	r3, r2, r3
 8008ed4:	681b      	ldr	r3, [r3, #0]
                        fft[FFT_max_index] +
 8008ed6:	1c19      	adds	r1, r3, #0
 8008ed8:	f7f7 fae4 	bl	80004a4 <__aeabi_fadd>
 8008edc:	1c03      	adds	r3, r0, #0
 8008ede:	1c18      	adds	r0, r3, #0
                        fft[FFT_max_index + 2];
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	6a3a      	ldr	r2, [r7, #32]
 8008ee8:	18d3      	adds	r3, r2, r3
 8008eea:	681b      	ldr	r3, [r3, #0]
            float sum = fft[FFT_max_index - 2] +
 8008eec:	1c19      	adds	r1, r3, #0
 8008eee:	f7f7 fad9 	bl	80004a4 <__aeabi_fadd>
 8008ef2:	1c03      	adds	r3, r0, #0
 8008ef4:	61fb      	str	r3, [r7, #28]
            freq = (((float) (FFT_max_index - 2) * fft[FFT_max_index - 2]) +
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	3b02      	subs	r3, #2
 8008efa:	0018      	movs	r0, r3
 8008efc:	f7f8 f996 	bl	800122c <__aeabi_ui2f>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	4a64      	ldr	r2, [pc, #400]	; (8009094 <Spectrum_Sample_Handle_Sub+0x3b4>)
 8008f04:	4694      	mov	ip, r2
 8008f06:	4463      	add	r3, ip
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	6a3a      	ldr	r2, [r7, #32]
 8008f0c:	18d3      	adds	r3, r2, r3
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	1c19      	adds	r1, r3, #0
 8008f12:	f7f7 fe2d 	bl	8000b70 <__aeabi_fmul>
 8008f16:	1c03      	adds	r3, r0, #0
 8008f18:	1c1c      	adds	r4, r3, #0
                    ((float) (FFT_max_index - 1) * fft[FFT_max_index - 1]) +
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f7f8 f984 	bl	800122c <__aeabi_ui2f>
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4a5c      	ldr	r2, [pc, #368]	; (8009098 <Spectrum_Sample_Handle_Sub+0x3b8>)
 8008f28:	4694      	mov	ip, r2
 8008f2a:	4463      	add	r3, ip
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	6a3a      	ldr	r2, [r7, #32]
 8008f30:	18d3      	adds	r3, r2, r3
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	1c19      	adds	r1, r3, #0
 8008f36:	f7f7 fe1b 	bl	8000b70 <__aeabi_fmul>
 8008f3a:	1c03      	adds	r3, r0, #0
            freq = (((float) (FFT_max_index - 2) * fft[FFT_max_index - 2]) +
 8008f3c:	1c19      	adds	r1, r3, #0
 8008f3e:	1c20      	adds	r0, r4, #0
 8008f40:	f7f7 fab0 	bl	80004a4 <__aeabi_fadd>
 8008f44:	1c03      	adds	r3, r0, #0
 8008f46:	1c1c      	adds	r4, r3, #0
                    ((float) (FFT_max_index) * fft[FFT_max_index]) +
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f7f8 f96e 	bl	800122c <__aeabi_ui2f>
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	6a3a      	ldr	r2, [r7, #32]
 8008f56:	18d3      	adds	r3, r2, r3
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	1c19      	adds	r1, r3, #0
 8008f5c:	f7f7 fe08 	bl	8000b70 <__aeabi_fmul>
 8008f60:	1c03      	adds	r3, r0, #0
                    ((float) (FFT_max_index - 1) * fft[FFT_max_index - 1]) +
 8008f62:	1c19      	adds	r1, r3, #0
 8008f64:	1c20      	adds	r0, r4, #0
 8008f66:	f7f7 fa9d 	bl	80004a4 <__aeabi_fadd>
 8008f6a:	1c03      	adds	r3, r0, #0
 8008f6c:	1c1c      	adds	r4, r3, #0
                    ((float) (FFT_max_index + 2) * fft[FFT_max_index + 2]) +
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	3302      	adds	r3, #2
 8008f72:	0018      	movs	r0, r3
 8008f74:	f7f8 f95a 	bl	800122c <__aeabi_ui2f>
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3302      	adds	r3, #2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	6a3a      	ldr	r2, [r7, #32]
 8008f80:	18d3      	adds	r3, r2, r3
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	1c19      	adds	r1, r3, #0
 8008f86:	f7f7 fdf3 	bl	8000b70 <__aeabi_fmul>
 8008f8a:	1c03      	adds	r3, r0, #0
                    ((float) (FFT_max_index) * fft[FFT_max_index]) +
 8008f8c:	1c19      	adds	r1, r3, #0
 8008f8e:	1c20      	adds	r0, r4, #0
 8008f90:	f7f7 fa88 	bl	80004a4 <__aeabi_fadd>
 8008f94:	1c03      	adds	r3, r0, #0
 8008f96:	1c1c      	adds	r4, r3, #0
                    ((float) (FFT_max_index + 1) * fft[FFT_max_index + 1])) / sum;
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f7f8 f945 	bl	800122c <__aeabi_ui2f>
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	6a3a      	ldr	r2, [r7, #32]
 8008faa:	18d3      	adds	r3, r2, r3
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	1c19      	adds	r1, r3, #0
 8008fb0:	f7f7 fdde 	bl	8000b70 <__aeabi_fmul>
 8008fb4:	1c03      	adds	r3, r0, #0
                    ((float) (FFT_max_index + 2) * fft[FFT_max_index + 2]) +
 8008fb6:	1c19      	adds	r1, r3, #0
 8008fb8:	1c20      	adds	r0, r4, #0
 8008fba:	f7f7 fa73 	bl	80004a4 <__aeabi_fadd>
 8008fbe:	1c03      	adds	r3, r0, #0
            freq = (((float) (FFT_max_index - 2) * fft[FFT_max_index - 2]) +
 8008fc0:	69f9      	ldr	r1, [r7, #28]
 8008fc2:	1c18      	adds	r0, r3, #0
 8008fc4:	f7f7 fc0a 	bl	80007dc <__aeabi_fdiv>
 8008fc8:	1c03      	adds	r3, r0, #0
 8008fca:	62fb      	str	r3, [r7, #44]	; 0x2c
            freq *= (spectrum_KHz_max[spectrum_KHz_max_select] * (1000.0f / (SPECTRUM_SAMPLE_NUM / 2.0f))); // 比例算法
 8008fcc:	4b33      	ldr	r3, [pc, #204]	; (800909c <Spectrum_Sample_Handle_Sub+0x3bc>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	001a      	movs	r2, r3
 8008fd2:	4b33      	ldr	r3, [pc, #204]	; (80090a0 <Spectrum_Sample_Handle_Sub+0x3c0>)
 8008fd4:	0092      	lsls	r2, r2, #2
 8008fd6:	58d3      	ldr	r3, [r2, r3]
 8008fd8:	4932      	ldr	r1, [pc, #200]	; (80090a4 <Spectrum_Sample_Handle_Sub+0x3c4>)
 8008fda:	1c18      	adds	r0, r3, #0
 8008fdc:	f7f7 fdc8 	bl	8000b70 <__aeabi_fmul>
 8008fe0:	1c03      	adds	r3, r0, #0
 8008fe2:	1c19      	adds	r1, r3, #0
 8008fe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fe6:	f7f7 fdc3 	bl	8000b70 <__aeabi_fmul>
 8008fea:	1c03      	adds	r3, r0, #0
 8008fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        sample->freq[k] = freq; // 最大峰频率
 8008fee:	2533      	movs	r5, #51	; 0x33
 8008ff0:	197b      	adds	r3, r7, r5
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	2180      	movs	r1, #128	; 0x80
 8008ff8:	0089      	lsls	r1, r1, #2
 8008ffa:	468c      	mov	ip, r1
 8008ffc:	4463      	add	r3, ip
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	18d3      	adds	r3, r2, r3
 8009002:	3304      	adds	r3, #4
 8009004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009006:	601a      	str	r2, [r3, #0]
        sample->max[k] = fft[FFT_max_index] / (SPECTRUM_SAMPLE_NUM / 2.0f); // 最大峰电压
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	6a3a      	ldr	r2, [r7, #32]
 800900e:	18d3      	adds	r3, r2, r3
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	197b      	adds	r3, r7, r5
 8009014:	781c      	ldrb	r4, [r3, #0]
 8009016:	2185      	movs	r1, #133	; 0x85
 8009018:	05c9      	lsls	r1, r1, #23
 800901a:	1c10      	adds	r0, r2, #0
 800901c:	f7f7 fbde 	bl	80007dc <__aeabi_fdiv>
 8009020:	1c03      	adds	r3, r0, #0
 8009022:	1c19      	adds	r1, r3, #0
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	4b20      	ldr	r3, [pc, #128]	; (80090a8 <Spectrum_Sample_Handle_Sub+0x3c8>)
 8009028:	18e3      	adds	r3, r4, r3
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	18d3      	adds	r3, r2, r3
 800902e:	3304      	adds	r3, #4
 8009030:	6019      	str	r1, [r3, #0]

        // 计算直流分量
        fft[0] /= 2; // 除直流分量外，其他分量被镜像了一份；所以从数值上看，应该把直流分量/2
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2180      	movs	r1, #128	; 0x80
 8009038:	05c9      	lsls	r1, r1, #23
 800903a:	1c18      	adds	r0, r3, #0
 800903c:	f7f7 fbce 	bl	80007dc <__aeabi_fdiv>
 8009040:	1c03      	adds	r3, r0, #0
 8009042:	1c1a      	adds	r2, r3, #0
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	601a      	str	r2, [r3, #0]
        sample->bias[k] = fft[0] / (SPECTRUM_SAMPLE_NUM / 2.0f);
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	197b      	adds	r3, r7, r5
 800904e:	781c      	ldrb	r4, [r3, #0]
 8009050:	2185      	movs	r1, #133	; 0x85
 8009052:	05c9      	lsls	r1, r1, #23
 8009054:	1c10      	adds	r0, r2, #0
 8009056:	f7f7 fbc1 	bl	80007dc <__aeabi_fdiv>
 800905a:	1c03      	adds	r3, r0, #0
 800905c:	1c19      	adds	r1, r3, #0
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	2381      	movs	r3, #129	; 0x81
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	18e3      	adds	r3, r4, r3
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	18d3      	adds	r3, r2, r3
 800906a:	3304      	adds	r3, #4
 800906c:	6019      	str	r1, [r3, #0]
    for (uint8_t k = 0; k < SPECTRUM_CHANNEL_NUM; k++) {
 800906e:	197b      	adds	r3, r7, r5
 8009070:	781a      	ldrb	r2, [r3, #0]
 8009072:	197b      	adds	r3, r7, r5
 8009074:	3201      	adds	r2, #1
 8009076:	701a      	strb	r2, [r3, #0]
 8009078:	2333      	movs	r3, #51	; 0x33
 800907a:	18fb      	adds	r3, r7, r3
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d800      	bhi.n	8009084 <Spectrum_Sample_Handle_Sub+0x3a4>
 8009082:	e6dd      	b.n	8008e40 <Spectrum_Sample_Handle_Sub+0x160>
    }
}
 8009084:	46c0      	nop			; (mov r8, r8)
 8009086:	46c0      	nop			; (mov r8, r8)
 8009088:	46bd      	mov	sp, r7
 800908a:	b010      	add	sp, #64	; 0x40
 800908c:	bdb0      	pop	{r4, r5, r7, pc}
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	0800c9e4 	.word	0x0800c9e4
 8009094:	3ffffffe 	.word	0x3ffffffe
 8009098:	3fffffff 	.word	0x3fffffff
 800909c:	20000030 	.word	0x20000030
 80090a0:	20000034 	.word	0x20000034
 80090a4:	417a0000 	.word	0x417a0000
 80090a8:	00000202 	.word	0x00000202

080090ac <Spectrum_Sample_Init>:

/*-----------------------------------------------------接口函数-----------------------------------------------------*/

void Spectrum_Sample_Init(void) {
 80090ac:	b590      	push	{r4, r7, lr}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 80090b2:	1dfb      	adds	r3, r7, #7
 80090b4:	2200      	movs	r2, #0
 80090b6:	701a      	strb	r2, [r3, #0]
 80090b8:	e016      	b.n	80090e8 <Spectrum_Sample_Init+0x3c>
        spectrum_sample_arr[i] = (Spectrum_Sample *) malloc(sizeof(Spectrum_Sample));
 80090ba:	1dfb      	adds	r3, r7, #7
 80090bc:	781c      	ldrb	r4, [r3, #0]
 80090be:	4b10      	ldr	r3, [pc, #64]	; (8009100 <Spectrum_Sample_Init+0x54>)
 80090c0:	0018      	movs	r0, r3
 80090c2:	f002 fd95 	bl	800bbf0 <malloc>
 80090c6:	0003      	movs	r3, r0
 80090c8:	0019      	movs	r1, r3
 80090ca:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <Spectrum_Sample_Init+0x58>)
 80090cc:	00a2      	lsls	r2, r4, #2
 80090ce:	50d1      	str	r1, [r2, r3]
        if (spectrum_sample_arr[i] == NULL)
 80090d0:	1dfb      	adds	r3, r7, #7
 80090d2:	781a      	ldrb	r2, [r3, #0]
 80090d4:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <Spectrum_Sample_Init+0x58>)
 80090d6:	0092      	lsls	r2, r2, #2
 80090d8:	58d3      	ldr	r3, [r2, r3]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d009      	beq.n	80090f2 <Spectrum_Sample_Init+0x46>
    for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 80090de:	1dfb      	adds	r3, r7, #7
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	1dfb      	adds	r3, r7, #7
 80090e4:	3201      	adds	r2, #1
 80090e6:	701a      	strb	r2, [r3, #0]
 80090e8:	1dfb      	adds	r3, r7, #7
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d0e4      	beq.n	80090ba <Spectrum_Sample_Init+0xe>
 80090f0:	e000      	b.n	80090f4 <Spectrum_Sample_Init+0x48>
            break;
 80090f2:	46c0      	nop			; (mov r8, r8)
    }

    Spectrum_Sample_Refresh_Sample_Rate();
 80090f4:	f000 f842 	bl	800917c <Spectrum_Sample_Refresh_Sample_Rate>
}
 80090f8:	46c0      	nop			; (mov r8, r8)
 80090fa:	46bd      	mov	sp, r7
 80090fc:	b003      	add	sp, #12
 80090fe:	bd90      	pop	{r4, r7, pc}
 8009100:	0000081c 	.word	0x0000081c
 8009104:	20000474 	.word	0x20000474

08009108 <Spectrum_Sample_DeInit>:

void Spectrum_Sample_DeInit(void) {
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
    HAL_ADC_Stop_DMA(&hadc1);
 800910e:	4b18      	ldr	r3, [pc, #96]	; (8009170 <Spectrum_Sample_DeInit+0x68>)
 8009110:	0018      	movs	r0, r3
 8009112:	f7f9 fbe3 	bl	80028dc <HAL_ADC_Stop_DMA>
    HAL_TIM_Base_Stop(&htim3);
 8009116:	4b17      	ldr	r3, [pc, #92]	; (8009174 <Spectrum_Sample_DeInit+0x6c>)
 8009118:	0018      	movs	r0, r3
 800911a:	f7fc f9d7 	bl	80054cc <HAL_TIM_Base_Stop>

    // 释放变量空间
    for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 800911e:	1dfb      	adds	r3, r7, #7
 8009120:	2200      	movs	r2, #0
 8009122:	701a      	strb	r2, [r3, #0]
 8009124:	e019      	b.n	800915a <Spectrum_Sample_DeInit+0x52>
        if (spectrum_sample_arr[i] == NULL)
 8009126:	1dfb      	adds	r3, r7, #7
 8009128:	781a      	ldrb	r2, [r3, #0]
 800912a:	4b13      	ldr	r3, [pc, #76]	; (8009178 <Spectrum_Sample_DeInit+0x70>)
 800912c:	0092      	lsls	r2, r2, #2
 800912e:	58d3      	ldr	r3, [r2, r3]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d017      	beq.n	8009164 <Spectrum_Sample_DeInit+0x5c>
            break;
        free(spectrum_sample_arr[i]);
 8009134:	1dfb      	adds	r3, r7, #7
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <Spectrum_Sample_DeInit+0x70>)
 800913a:	0092      	lsls	r2, r2, #2
 800913c:	58d3      	ldr	r3, [r2, r3]
 800913e:	0018      	movs	r0, r3
 8009140:	f002 fd60 	bl	800bc04 <free>
        spectrum_sample_arr[i] = NULL;
 8009144:	1dfb      	adds	r3, r7, #7
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <Spectrum_Sample_DeInit+0x70>)
 800914a:	0092      	lsls	r2, r2, #2
 800914c:	2100      	movs	r1, #0
 800914e:	50d1      	str	r1, [r2, r3]
    for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 8009150:	1dfb      	adds	r3, r7, #7
 8009152:	781a      	ldrb	r2, [r3, #0]
 8009154:	1dfb      	adds	r3, r7, #7
 8009156:	3201      	adds	r2, #1
 8009158:	701a      	strb	r2, [r3, #0]
 800915a:	1dfb      	adds	r3, r7, #7
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0e1      	beq.n	8009126 <Spectrum_Sample_DeInit+0x1e>
    }
}
 8009162:	e000      	b.n	8009166 <Spectrum_Sample_DeInit+0x5e>
            break;
 8009164:	46c0      	nop			; (mov r8, r8)
}
 8009166:	46c0      	nop			; (mov r8, r8)
 8009168:	46bd      	mov	sp, r7
 800916a:	b002      	add	sp, #8
 800916c:	bd80      	pop	{r7, pc}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	200001c8 	.word	0x200001c8
 8009174:	20000338 	.word	0x20000338
 8009178:	20000474 	.word	0x20000474

0800917c <Spectrum_Sample_Refresh_Sample_Rate>:

// 根据时间刻度选择设置采样率
void Spectrum_Sample_Refresh_Sample_Rate(void) {
 800917c:	b580      	push	{r7, lr}
 800917e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop(&SPECTRUM_htim);
 8009180:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <Spectrum_Sample_Refresh_Sample_Rate+0x44>)
 8009182:	0018      	movs	r0, r3
 8009184:	f7fc f9a2 	bl	80054cc <HAL_TIM_Base_Stop>
    HAL_ADC_Stop_DMA(&SPECTRUM_hadc);
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <Spectrum_Sample_Refresh_Sample_Rate+0x48>)
 800918a:	0018      	movs	r0, r3
 800918c:	f7f9 fba6 	bl	80028dc <HAL_ADC_Stop_DMA>

    // 根据采样定理，采样频率必须是被采样信号最高频率的2倍
    Set_TIM_Freq(&SPECTRUM_htim, spectrum_KHz_max[spectrum_KHz_max_select] * (1000.0f * 2.0f));
 8009190:	4b0d      	ldr	r3, [pc, #52]	; (80091c8 <Spectrum_Sample_Refresh_Sample_Rate+0x4c>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	001a      	movs	r2, r3
 8009196:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <Spectrum_Sample_Refresh_Sample_Rate+0x50>)
 8009198:	0092      	lsls	r2, r2, #2
 800919a:	58d3      	ldr	r3, [r2, r3]
 800919c:	490c      	ldr	r1, [pc, #48]	; (80091d0 <Spectrum_Sample_Refresh_Sample_Rate+0x54>)
 800919e:	1c18      	adds	r0, r3, #0
 80091a0:	f7f7 fce6 	bl	8000b70 <__aeabi_fmul>
 80091a4:	1c03      	adds	r3, r0, #0
 80091a6:	1c1a      	adds	r2, r3, #0
 80091a8:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <Spectrum_Sample_Refresh_Sample_Rate+0x44>)
 80091aa:	1c11      	adds	r1, r2, #0
 80091ac:	0018      	movs	r0, r3
 80091ae:	f000 f989 	bl	80094c4 <Set_TIM_Freq>

    Clear_Flag();
 80091b2:	f7ff fd63 	bl	8008c7c <Clear_Flag>
    Spectrum_Sample_Try_Start_New_ADC();
 80091b6:	f000 f84b 	bl	8009250 <Spectrum_Sample_Try_Start_New_ADC>
}
 80091ba:	46c0      	nop			; (mov r8, r8)
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	20000338 	.word	0x20000338
 80091c4:	200001c8 	.word	0x200001c8
 80091c8:	20000030 	.word	0x20000030
 80091cc:	20000034 	.word	0x20000034
 80091d0:	44fa0000 	.word	0x44fa0000

080091d4 <Spectrum_Sample_Try_Process>:

void Spectrum_Sample_Try_Process(void) {
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 80091da:	1dfb      	adds	r3, r7, #7
 80091dc:	2200      	movs	r2, #0
 80091de:	701a      	strb	r2, [r3, #0]
 80091e0:	e02a      	b.n	8009238 <Spectrum_Sample_Try_Process+0x64>
        if (spectrum_sample_arr[i] == NULL)
 80091e2:	1dfb      	adds	r3, r7, #7
 80091e4:	781a      	ldrb	r2, [r3, #0]
 80091e6:	4b19      	ldr	r3, [pc, #100]	; (800924c <Spectrum_Sample_Try_Process+0x78>)
 80091e8:	0092      	lsls	r2, r2, #2
 80091ea:	58d3      	ldr	r3, [r2, r3]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d028      	beq.n	8009242 <Spectrum_Sample_Try_Process+0x6e>
            break;
        if (spectrum_sample_arr[i]->sample_flag == Spectrum_Sample_Finished && spectrum_sample_arr[i]->is_handle == 0) {
 80091f0:	1dfb      	adds	r3, r7, #7
 80091f2:	781a      	ldrb	r2, [r3, #0]
 80091f4:	4b15      	ldr	r3, [pc, #84]	; (800924c <Spectrum_Sample_Try_Process+0x78>)
 80091f6:	0092      	lsls	r2, r2, #2
 80091f8:	58d3      	ldr	r3, [r2, r3]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d116      	bne.n	800922e <Spectrum_Sample_Try_Process+0x5a>
 8009200:	1dfb      	adds	r3, r7, #7
 8009202:	781a      	ldrb	r2, [r3, #0]
 8009204:	4b11      	ldr	r3, [pc, #68]	; (800924c <Spectrum_Sample_Try_Process+0x78>)
 8009206:	0092      	lsls	r2, r2, #2
 8009208:	58d3      	ldr	r3, [r2, r3]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10e      	bne.n	800922e <Spectrum_Sample_Try_Process+0x5a>
            Spectrum_Sample_Handle_Sub(spectrum_sample_arr[i]);
 8009210:	1dfb      	adds	r3, r7, #7
 8009212:	781a      	ldrb	r2, [r3, #0]
 8009214:	4b0d      	ldr	r3, [pc, #52]	; (800924c <Spectrum_Sample_Try_Process+0x78>)
 8009216:	0092      	lsls	r2, r2, #2
 8009218:	58d3      	ldr	r3, [r2, r3]
 800921a:	0018      	movs	r0, r3
 800921c:	f7ff fd60 	bl	8008ce0 <Spectrum_Sample_Handle_Sub>
            spectrum_sample_arr[i]->is_handle = 1;
 8009220:	1dfb      	adds	r3, r7, #7
 8009222:	781a      	ldrb	r2, [r3, #0]
 8009224:	4b09      	ldr	r3, [pc, #36]	; (800924c <Spectrum_Sample_Try_Process+0x78>)
 8009226:	0092      	lsls	r2, r2, #2
 8009228:	58d3      	ldr	r3, [r2, r3]
 800922a:	2201      	movs	r2, #1
 800922c:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 800922e:	1dfb      	adds	r3, r7, #7
 8009230:	781a      	ldrb	r2, [r3, #0]
 8009232:	1dfb      	adds	r3, r7, #7
 8009234:	3201      	adds	r2, #1
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	1dfb      	adds	r3, r7, #7
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0d0      	beq.n	80091e2 <Spectrum_Sample_Try_Process+0xe>
        }
    }
}
 8009240:	e000      	b.n	8009244 <Spectrum_Sample_Try_Process+0x70>
            break;
 8009242:	46c0      	nop			; (mov r8, r8)
}
 8009244:	46c0      	nop			; (mov r8, r8)
 8009246:	46bd      	mov	sp, r7
 8009248:	b002      	add	sp, #8
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20000474 	.word	0x20000474

08009250 <Spectrum_Sample_Try_Start_New_ADC>:

// 在以下几个位置被调用：
// DMA全传输完成中断
// UI绘图消耗掉一组数据
// 重新设置采样率
void Spectrum_Sample_Try_Start_New_ADC(void) {
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
    static uint8_t busy;
    if (busy)
 8009256:	4b26      	ldr	r3, [pc, #152]	; (80092f0 <Spectrum_Sample_Try_Start_New_ADC+0xa0>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d143      	bne.n	80092e6 <Spectrum_Sample_Try_Start_New_ADC+0x96>
        return;
    busy = 1;
 800925e:	4b24      	ldr	r3, [pc, #144]	; (80092f0 <Spectrum_Sample_Try_Start_New_ADC+0xa0>)
 8009260:	2201      	movs	r2, #1
 8009262:	701a      	strb	r2, [r3, #0]

    if (!dma_busy) {
 8009264:	4b23      	ldr	r3, [pc, #140]	; (80092f4 <Spectrum_Sample_Try_Start_New_ADC+0xa4>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d138      	bne.n	80092de <Spectrum_Sample_Try_Start_New_ADC+0x8e>
        for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 800926c:	1dfb      	adds	r3, r7, #7
 800926e:	2200      	movs	r2, #0
 8009270:	701a      	strb	r2, [r3, #0]
 8009272:	e02e      	b.n	80092d2 <Spectrum_Sample_Try_Start_New_ADC+0x82>
            if (spectrum_sample_arr[i] == NULL)
 8009274:	1dfb      	adds	r3, r7, #7
 8009276:	781a      	ldrb	r2, [r3, #0]
 8009278:	4b1f      	ldr	r3, [pc, #124]	; (80092f8 <Spectrum_Sample_Try_Start_New_ADC+0xa8>)
 800927a:	0092      	lsls	r2, r2, #2
 800927c:	58d3      	ldr	r3, [r2, r3]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d02c      	beq.n	80092dc <Spectrum_Sample_Try_Start_New_ADC+0x8c>
                break;
            if (spectrum_sample_arr[i]->sample_flag == Spectrum_Sample_Not) {
 8009282:	1dfb      	adds	r3, r7, #7
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	4b1c      	ldr	r3, [pc, #112]	; (80092f8 <Spectrum_Sample_Try_Start_New_ADC+0xa8>)
 8009288:	0092      	lsls	r2, r2, #2
 800928a:	58d3      	ldr	r3, [r2, r3]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d11a      	bne.n	80092c8 <Spectrum_Sample_Try_Start_New_ADC+0x78>
                dma_busy = 1;
 8009292:	4b18      	ldr	r3, [pc, #96]	; (80092f4 <Spectrum_Sample_Try_Start_New_ADC+0xa4>)
 8009294:	2201      	movs	r2, #1
 8009296:	701a      	strb	r2, [r3, #0]
                spectrum_sample_arr[i]->sample_flag = Spectrum_Sample_Doing;
 8009298:	1dfb      	adds	r3, r7, #7
 800929a:	781a      	ldrb	r2, [r3, #0]
 800929c:	4b16      	ldr	r3, [pc, #88]	; (80092f8 <Spectrum_Sample_Try_Start_New_ADC+0xa8>)
 800929e:	0092      	lsls	r2, r2, #2
 80092a0:	58d3      	ldr	r3, [r2, r3]
 80092a2:	2201      	movs	r2, #1
 80092a4:	701a      	strb	r2, [r3, #0]
                HAL_ADC_Start_DMA(&SPECTRUM_hadc, (uint32_t *) spectrum_sample_arr[i]->data,
 80092a6:	1dfb      	adds	r3, r7, #7
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	4b13      	ldr	r3, [pc, #76]	; (80092f8 <Spectrum_Sample_Try_Start_New_ADC+0xa8>)
 80092ac:	0092      	lsls	r2, r2, #2
 80092ae:	58d3      	ldr	r3, [r2, r3]
 80092b0:	1d19      	adds	r1, r3, #4
 80092b2:	2380      	movs	r3, #128	; 0x80
 80092b4:	005a      	lsls	r2, r3, #1
 80092b6:	4b11      	ldr	r3, [pc, #68]	; (80092fc <Spectrum_Sample_Try_Start_New_ADC+0xac>)
 80092b8:	0018      	movs	r0, r3
 80092ba:	f7f9 fa81 	bl	80027c0 <HAL_ADC_Start_DMA>
                                  SPECTRUM_SAMPLE_NUM * SPECTRUM_CHANNEL_NUM);
                HAL_TIM_Base_Start(&SPECTRUM_htim);
 80092be:	4b10      	ldr	r3, [pc, #64]	; (8009300 <Spectrum_Sample_Try_Start_New_ADC+0xb0>)
 80092c0:	0018      	movs	r0, r3
 80092c2:	f7fc f8b7 	bl	8005434 <HAL_TIM_Base_Start>
                break;
 80092c6:	e00a      	b.n	80092de <Spectrum_Sample_Try_Start_New_ADC+0x8e>
        for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 80092c8:	1dfb      	adds	r3, r7, #7
 80092ca:	781a      	ldrb	r2, [r3, #0]
 80092cc:	1dfb      	adds	r3, r7, #7
 80092ce:	3201      	adds	r2, #1
 80092d0:	701a      	strb	r2, [r3, #0]
 80092d2:	1dfb      	adds	r3, r7, #7
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0cc      	beq.n	8009274 <Spectrum_Sample_Try_Start_New_ADC+0x24>
 80092da:	e000      	b.n	80092de <Spectrum_Sample_Try_Start_New_ADC+0x8e>
                break;
 80092dc:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    busy = 0;
 80092de:	4b04      	ldr	r3, [pc, #16]	; (80092f0 <Spectrum_Sample_Try_Start_New_ADC+0xa0>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	701a      	strb	r2, [r3, #0]
 80092e4:	e000      	b.n	80092e8 <Spectrum_Sample_Try_Start_New_ADC+0x98>
        return;
 80092e6:	46c0      	nop			; (mov r8, r8)
}
 80092e8:	46bd      	mov	sp, r7
 80092ea:	b002      	add	sp, #8
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	46c0      	nop			; (mov r8, r8)
 80092f0:	200001a5 	.word	0x200001a5
 80092f4:	200001a4 	.word	0x200001a4
 80092f8:	20000474 	.word	0x20000474
 80092fc:	200001c8 	.word	0x200001c8
 8009300:	20000338 	.word	0x20000338

08009304 <Spectrum_Sample_ADC_ConvCpltCallback>:

/*-----------------------------------------------------回调函数-----------------------------------------------------*/

void Spectrum_Sample_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);
    HAL_TIM_Base_Stop(&SPECTRUM_htim);
 800930c:	4b18      	ldr	r3, [pc, #96]	; (8009370 <Spectrum_Sample_ADC_ConvCpltCallback+0x6c>)
 800930e:	0018      	movs	r0, r3
 8009310:	f7fc f8dc 	bl	80054cc <HAL_TIM_Base_Stop>
    HAL_ADC_Stop_DMA(&SPECTRUM_hadc);
 8009314:	4b17      	ldr	r3, [pc, #92]	; (8009374 <Spectrum_Sample_ADC_ConvCpltCallback+0x70>)
 8009316:	0018      	movs	r0, r3
 8009318:	f7f9 fae0 	bl	80028dc <HAL_ADC_Stop_DMA>
    dma_busy = 0;
 800931c:	4b16      	ldr	r3, [pc, #88]	; (8009378 <Spectrum_Sample_ADC_ConvCpltCallback+0x74>)
 800931e:	2200      	movs	r2, #0
 8009320:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 8009322:	230f      	movs	r3, #15
 8009324:	18fb      	adds	r3, r7, r3
 8009326:	2200      	movs	r2, #0
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	e016      	b.n	800935a <Spectrum_Sample_ADC_ConvCpltCallback+0x56>
        if (spectrum_sample_arr[i]->sample_flag == Spectrum_Sample_Doing) {
 800932c:	210f      	movs	r1, #15
 800932e:	187b      	adds	r3, r7, r1
 8009330:	781a      	ldrb	r2, [r3, #0]
 8009332:	4b12      	ldr	r3, [pc, #72]	; (800937c <Spectrum_Sample_ADC_ConvCpltCallback+0x78>)
 8009334:	0092      	lsls	r2, r2, #2
 8009336:	58d3      	ldr	r3, [r2, r3]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d107      	bne.n	800934e <Spectrum_Sample_ADC_ConvCpltCallback+0x4a>
            spectrum_sample_arr[i]->sample_flag = Spectrum_Sample_Finished;
 800933e:	187b      	adds	r3, r7, r1
 8009340:	781a      	ldrb	r2, [r3, #0]
 8009342:	4b0e      	ldr	r3, [pc, #56]	; (800937c <Spectrum_Sample_ADC_ConvCpltCallback+0x78>)
 8009344:	0092      	lsls	r2, r2, #2
 8009346:	58d3      	ldr	r3, [r2, r3]
 8009348:	2202      	movs	r2, #2
 800934a:	701a      	strb	r2, [r3, #0]
            break;
 800934c:	e00a      	b.n	8009364 <Spectrum_Sample_ADC_ConvCpltCallback+0x60>
    for (uint8_t i = 0; i < SPECTRUM_MAX_CACHE; i++) {
 800934e:	210f      	movs	r1, #15
 8009350:	187b      	adds	r3, r7, r1
 8009352:	781a      	ldrb	r2, [r3, #0]
 8009354:	187b      	adds	r3, r7, r1
 8009356:	3201      	adds	r2, #1
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	230f      	movs	r3, #15
 800935c:	18fb      	adds	r3, r7, r3
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0e3      	beq.n	800932c <Spectrum_Sample_ADC_ConvCpltCallback+0x28>
        }
    }
    Spectrum_Sample_Try_Start_New_ADC();
 8009364:	f7ff ff74 	bl	8009250 <Spectrum_Sample_Try_Start_New_ADC>
}
 8009368:	46c0      	nop			; (mov r8, r8)
 800936a:	46bd      	mov	sp, r7
 800936c:	b004      	add	sp, #16
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20000338 	.word	0x20000338
 8009374:	200001c8 	.word	0x200001c8
 8009378:	200001a4 	.word	0x200001a4
 800937c:	20000474 	.word	0x20000474

08009380 <Buzzer_Play>:
#include "buzzer.h"

static uint32_t t;

void Buzzer_Play(float freq, uint8_t duration) {
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	000a      	movs	r2, r1
 800938a:	1cfb      	adds	r3, r7, #3
 800938c:	701a      	strb	r2, [r3, #0]
    t = HAL_GetTick() + duration;
 800938e:	f7f8 fead 	bl	80020ec <HAL_GetTick>
 8009392:	0002      	movs	r2, r0
 8009394:	1cfb      	adds	r3, r7, #3
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	18d2      	adds	r2, r2, r3
 800939a:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <Buzzer_Play+0x48>)
 800939c:	601a      	str	r2, [r3, #0]
    Set_TIM_Freq(&BUZZER_HTIM, freq * 2);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	1c19      	adds	r1, r3, #0
 80093a2:	1c18      	adds	r0, r3, #0
 80093a4:	f7f7 f87e 	bl	80004a4 <__aeabi_fadd>
 80093a8:	1c03      	adds	r3, r0, #0
 80093aa:	1c1a      	adds	r2, r3, #0
 80093ac:	4b07      	ldr	r3, [pc, #28]	; (80093cc <Buzzer_Play+0x4c>)
 80093ae:	1c11      	adds	r1, r2, #0
 80093b0:	0018      	movs	r0, r3
 80093b2:	f000 f887 	bl	80094c4 <Set_TIM_Freq>
    HAL_TIM_Base_Start_IT(&BUZZER_HTIM);
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <Buzzer_Play+0x4c>)
 80093b8:	0018      	movs	r0, r3
 80093ba:	f7fc f8ad 	bl	8005518 <HAL_TIM_Base_Start_IT>
}
 80093be:	46c0      	nop			; (mov r8, r8)
 80093c0:	46bd      	mov	sp, r7
 80093c2:	b002      	add	sp, #8
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	46c0      	nop			; (mov r8, r8)
 80093c8:	200001a8 	.word	0x200001a8
 80093cc:	20000384 	.word	0x20000384

080093d0 <Buzzer_Beep>:

void Buzzer_Beep(uint8_t kind) {
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	0002      	movs	r2, r0
 80093d8:	1dfb      	adds	r3, r7, #7
 80093da:	701a      	strb	r2, [r3, #0]
    switch (kind) {
 80093dc:	1dfb      	adds	r3, r7, #7
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <Buzzer_Beep+0x1a>
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d006      	beq.n	80093f6 <Buzzer_Beep+0x26>
            break;
        case 1:
            Buzzer_Play(4600, 100);
            break;
        default:
            break;
 80093e8:	e00b      	b.n	8009402 <Buzzer_Beep+0x32>
            Buzzer_Play(2300, 20);
 80093ea:	4b08      	ldr	r3, [pc, #32]	; (800940c <Buzzer_Beep+0x3c>)
 80093ec:	2114      	movs	r1, #20
 80093ee:	1c18      	adds	r0, r3, #0
 80093f0:	f7ff ffc6 	bl	8009380 <Buzzer_Play>
            break;
 80093f4:	e005      	b.n	8009402 <Buzzer_Beep+0x32>
            Buzzer_Play(4600, 100);
 80093f6:	4b06      	ldr	r3, [pc, #24]	; (8009410 <Buzzer_Beep+0x40>)
 80093f8:	2164      	movs	r1, #100	; 0x64
 80093fa:	1c18      	adds	r0, r3, #0
 80093fc:	f7ff ffc0 	bl	8009380 <Buzzer_Play>
            break;
 8009400:	46c0      	nop			; (mov r8, r8)
    }
}
 8009402:	46c0      	nop			; (mov r8, r8)
 8009404:	46bd      	mov	sp, r7
 8009406:	b002      	add	sp, #8
 8009408:	bd80      	pop	{r7, pc}
 800940a:	46c0      	nop			; (mov r8, r8)
 800940c:	450fc000 	.word	0x450fc000
 8009410:	458fc000 	.word	0x458fc000

08009414 <Buzzeer_TIM_PeriodElapsedCallback>:

void Buzzeer_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
    if (htim == &BUZZER_HTIM) {
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	4b0d      	ldr	r3, [pc, #52]	; (8009454 <Buzzeer_TIM_PeriodElapsedCallback+0x40>)
 8009420:	429a      	cmp	r2, r3
 8009422:	d112      	bne.n	800944a <Buzzeer_TIM_PeriodElapsedCallback+0x36>
        if (HAL_GetTick() < t) {
 8009424:	f7f8 fe62 	bl	80020ec <HAL_GetTick>
 8009428:	0002      	movs	r2, r0
 800942a:	4b0b      	ldr	r3, [pc, #44]	; (8009458 <Buzzeer_TIM_PeriodElapsedCallback+0x44>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	d207      	bcs.n	8009442 <Buzzeer_TIM_PeriodElapsedCallback+0x2e>
            HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8009432:	2380      	movs	r3, #128	; 0x80
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	4a09      	ldr	r2, [pc, #36]	; (800945c <Buzzeer_TIM_PeriodElapsedCallback+0x48>)
 8009438:	0019      	movs	r1, r3
 800943a:	0010      	movs	r0, r2
 800943c:	f7fa fd72 	bl	8003f24 <HAL_GPIO_TogglePin>
        } else {
            HAL_TIM_Base_Stop_IT(&BUZZER_HTIM);
        }
    }
}
 8009440:	e003      	b.n	800944a <Buzzeer_TIM_PeriodElapsedCallback+0x36>
            HAL_TIM_Base_Stop_IT(&BUZZER_HTIM);
 8009442:	4b04      	ldr	r3, [pc, #16]	; (8009454 <Buzzeer_TIM_PeriodElapsedCallback+0x40>)
 8009444:	0018      	movs	r0, r3
 8009446:	f7fc f8bb 	bl	80055c0 <HAL_TIM_Base_Stop_IT>
}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	46bd      	mov	sp, r7
 800944e:	b002      	add	sp, #8
 8009450:	bd80      	pop	{r7, pc}
 8009452:	46c0      	nop			; (mov r8, r8)
 8009454:	20000384 	.word	0x20000384
 8009458:	200001a8 	.word	0x200001a8
 800945c:	50000800 	.word	0x50000800

08009460 <toVoltage>:
output = 0    | input = 3B
output = 3.3V | input = 3B - 6.6V
avg = 3B - 3.3V | let avg = 0 | B = 1.1V
=> input = 3.3V - 2 * output
*/
float toVoltage(float data) {
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
    return 3.3f - 2.0f * ((float) data * (3.3f / 4096.0f));
 8009468:	4909      	ldr	r1, [pc, #36]	; (8009490 <toVoltage+0x30>)
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7f7 fb80 	bl	8000b70 <__aeabi_fmul>
 8009470:	1c03      	adds	r3, r0, #0
 8009472:	1c19      	adds	r1, r3, #0
 8009474:	1c18      	adds	r0, r3, #0
 8009476:	f7f7 f815 	bl	80004a4 <__aeabi_fadd>
 800947a:	1c03      	adds	r3, r0, #0
 800947c:	1c19      	adds	r1, r3, #0
 800947e:	4805      	ldr	r0, [pc, #20]	; (8009494 <toVoltage+0x34>)
 8009480:	f7f7 fc90 	bl	8000da4 <__aeabi_fsub>
 8009484:	1c03      	adds	r3, r0, #0
}
 8009486:	1c18      	adds	r0, r3, #0
 8009488:	46bd      	mov	sp, r7
 800948a:	b002      	add	sp, #8
 800948c:	bd80      	pop	{r7, pc}
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	3a533333 	.word	0x3a533333
 8009494:	40533333 	.word	0x40533333

08009498 <toData>:

float toData(float voltage) {
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
    return (3.3f - voltage) / (2.0f * 3.3f / 4096.0f);
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4806      	ldr	r0, [pc, #24]	; (80094bc <toData+0x24>)
 80094a4:	f7f7 fc7e 	bl	8000da4 <__aeabi_fsub>
 80094a8:	1c03      	adds	r3, r0, #0
 80094aa:	4905      	ldr	r1, [pc, #20]	; (80094c0 <toData+0x28>)
 80094ac:	1c18      	adds	r0, r3, #0
 80094ae:	f7f7 f995 	bl	80007dc <__aeabi_fdiv>
 80094b2:	1c03      	adds	r3, r0, #0
}
 80094b4:	1c18      	adds	r0, r3, #0
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b002      	add	sp, #8
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	40533333 	.word	0x40533333
 80094c0:	3ad33333 	.word	0x3ad33333

080094c4 <Set_TIM_Freq>:

void Set_TIM_Freq(TIM_HandleTypeDef *htim, float freq) {
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
    uint32_t prescaler = 1;
 80094ce:	2301      	movs	r3, #1
 80094d0:	60fb      	str	r3, [r7, #12]

    while ((float) HCLK / (float) prescaler / freq > 65535) {
 80094d2:	e009      	b.n	80094e8 <Set_TIM_Freq+0x24>
        do {
            prescaler++;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3301      	adds	r3, #1
 80094d8:	60fb      	str	r3, [r7, #12]
        } while (HCLK % prescaler);
 80094da:	4b1d      	ldr	r3, [pc, #116]	; (8009550 <Set_TIM_Freq+0x8c>)
 80094dc:	68f9      	ldr	r1, [r7, #12]
 80094de:	0018      	movs	r0, r3
 80094e0:	f7f6 fe9e 	bl	8000220 <__aeabi_uidivmod>
 80094e4:	1e0b      	subs	r3, r1, #0
 80094e6:	d1f5      	bne.n	80094d4 <Set_TIM_Freq+0x10>
    while ((float) HCLK / (float) prescaler / freq > 65535) {
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f7f7 fe9f 	bl	800122c <__aeabi_ui2f>
 80094ee:	1c03      	adds	r3, r0, #0
 80094f0:	1c19      	adds	r1, r3, #0
 80094f2:	4818      	ldr	r0, [pc, #96]	; (8009554 <Set_TIM_Freq+0x90>)
 80094f4:	f7f7 f972 	bl	80007dc <__aeabi_fdiv>
 80094f8:	1c03      	adds	r3, r0, #0
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	1c18      	adds	r0, r3, #0
 80094fe:	f7f7 f96d 	bl	80007dc <__aeabi_fdiv>
 8009502:	1c03      	adds	r3, r0, #0
 8009504:	4914      	ldr	r1, [pc, #80]	; (8009558 <Set_TIM_Freq+0x94>)
 8009506:	1c18      	adds	r0, r3, #0
 8009508:	f7f6 ffa0 	bl	800044c <__aeabi_fcmpgt>
 800950c:	1e03      	subs	r3, r0, #0
 800950e:	d1e1      	bne.n	80094d4 <Set_TIM_Freq+0x10>
    }
    htim->Instance->PSC = prescaler - 1;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	3a01      	subs	r2, #1
 8009518:	629a      	str	r2, [r3, #40]	; 0x28
    htim->Instance->ARR = (uint16_t) ((float) HCLK / (float) prescaler / freq) - 1;
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7f7 fe86 	bl	800122c <__aeabi_ui2f>
 8009520:	1c03      	adds	r3, r0, #0
 8009522:	1c19      	adds	r1, r3, #0
 8009524:	480b      	ldr	r0, [pc, #44]	; (8009554 <Set_TIM_Freq+0x90>)
 8009526:	f7f7 f959 	bl	80007dc <__aeabi_fdiv>
 800952a:	1c03      	adds	r3, r0, #0
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	1c18      	adds	r0, r3, #0
 8009530:	f7f7 f954 	bl	80007dc <__aeabi_fdiv>
 8009534:	1c03      	adds	r3, r0, #0
 8009536:	1c18      	adds	r0, r3, #0
 8009538:	f7f6 ff9c 	bl	8000474 <__aeabi_f2uiz>
 800953c:	0003      	movs	r3, r0
 800953e:	b29b      	uxth	r3, r3
 8009540:	1e5a      	subs	r2, r3, #1
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009548:	46c0      	nop			; (mov r8, r8)
 800954a:	46bd      	mov	sp, r7
 800954c:	b004      	add	sp, #16
 800954e:	bd80      	pop	{r7, pc}
 8009550:	03d09000 	.word	0x03d09000
 8009554:	4c742400 	.word	0x4c742400
 8009558:	477fff00 	.word	0x477fff00

0800955c <invert>:

// 倒序数组，用于floatToStr()
static inline void invert(char str[], uint8_t st, uint8_t ed) {
 800955c:	b590      	push	{r4, r7, lr}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	0008      	movs	r0, r1
 8009566:	0011      	movs	r1, r2
 8009568:	1cfb      	adds	r3, r7, #3
 800956a:	1c02      	adds	r2, r0, #0
 800956c:	701a      	strb	r2, [r3, #0]
 800956e:	1cbb      	adds	r3, r7, #2
 8009570:	1c0a      	adds	r2, r1, #0
 8009572:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i <= (uint8_t) (ed - st) / 2; i++) {
 8009574:	230f      	movs	r3, #15
 8009576:	18fb      	adds	r3, r7, r3
 8009578:	2200      	movs	r2, #0
 800957a:	701a      	strb	r2, [r3, #0]
 800957c:	e02e      	b.n	80095dc <invert+0x80>
        char tmp = str[st + i];
 800957e:	1cfb      	adds	r3, r7, #3
 8009580:	781a      	ldrb	r2, [r3, #0]
 8009582:	200f      	movs	r0, #15
 8009584:	183b      	adds	r3, r7, r0
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	18d3      	adds	r3, r2, r3
 800958a:	001a      	movs	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	189a      	adds	r2, r3, r2
 8009590:	240e      	movs	r4, #14
 8009592:	193b      	adds	r3, r7, r4
 8009594:	7812      	ldrb	r2, [r2, #0]
 8009596:	701a      	strb	r2, [r3, #0]
        str[st + i] = str[ed - i];
 8009598:	1cbb      	adds	r3, r7, #2
 800959a:	781a      	ldrb	r2, [r3, #0]
 800959c:	183b      	adds	r3, r7, r0
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	001a      	movs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	189a      	adds	r2, r3, r2
 80095a8:	1cfb      	adds	r3, r7, #3
 80095aa:	7819      	ldrb	r1, [r3, #0]
 80095ac:	183b      	adds	r3, r7, r0
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	18cb      	adds	r3, r1, r3
 80095b2:	0019      	movs	r1, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	185b      	adds	r3, r3, r1
 80095b8:	7812      	ldrb	r2, [r2, #0]
 80095ba:	701a      	strb	r2, [r3, #0]
        str[ed - i] = tmp;
 80095bc:	1cbb      	adds	r3, r7, #2
 80095be:	781a      	ldrb	r2, [r3, #0]
 80095c0:	183b      	adds	r3, r7, r0
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	001a      	movs	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	189b      	adds	r3, r3, r2
 80095cc:	193a      	adds	r2, r7, r4
 80095ce:	7812      	ldrb	r2, [r2, #0]
 80095d0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i <= (uint8_t) (ed - st) / 2; i++) {
 80095d2:	183b      	adds	r3, r7, r0
 80095d4:	781a      	ldrb	r2, [r3, #0]
 80095d6:	183b      	adds	r3, r7, r0
 80095d8:	3201      	adds	r2, #1
 80095da:	701a      	strb	r2, [r3, #0]
 80095dc:	1cba      	adds	r2, r7, #2
 80095de:	1cfb      	adds	r3, r7, #3
 80095e0:	7812      	ldrb	r2, [r2, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	220f      	movs	r2, #15
 80095ee:	18ba      	adds	r2, r7, r2
 80095f0:	7812      	ldrb	r2, [r2, #0]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d9c3      	bls.n	800957e <invert+0x22>
    }
}
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	46c0      	nop			; (mov r8, r8)
 80095fa:	46bd      	mov	sp, r7
 80095fc:	b005      	add	sp, #20
 80095fe:	bd90      	pop	{r4, r7, pc}

08009600 <floatToStr>:

// 浮点数转字符串，size为小数位数
uint8_t floatToStr(char str[], float num, uint8_t size) {
 8009600:	b5b0      	push	{r4, r5, r7, lr}
 8009602:	b08a      	sub	sp, #40	; 0x28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	1dfb      	adds	r3, r7, #7
 800960c:	701a      	strb	r2, [r3, #0]
    if (__isinff(num)) {
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	1c18      	adds	r0, r3, #0
 8009612:	f002 fbcd 	bl	800bdb0 <__isinff>
 8009616:	1e03      	subs	r3, r0, #0
 8009618:	d00c      	beq.n	8009634 <floatToStr+0x34>
        str[0] = '-';
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	222d      	movs	r2, #45	; 0x2d
 800961e:	701a      	strb	r2, [r3, #0]
        str[1] = '-';
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3301      	adds	r3, #1
 8009624:	222d      	movs	r2, #45	; 0x2d
 8009626:	701a      	strb	r2, [r3, #0]
        str[2] = 0;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3302      	adds	r3, #2
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
        return 2;
 8009630:	2302      	movs	r3, #2
 8009632:	e0c1      	b.n	80097b8 <floatToStr+0x1b8>
    }

    uint8_t p = 0; // str待写入的位置
 8009634:	2427      	movs	r4, #39	; 0x27
 8009636:	193b      	adds	r3, r7, r4
 8009638:	2200      	movs	r2, #0
 800963a:	701a      	strb	r2, [r3, #0]

    // 负号处理
    uint8_t is_negative = 0; // 负数标志
 800963c:	2526      	movs	r5, #38	; 0x26
 800963e:	197b      	adds	r3, r7, r5
 8009640:	2200      	movs	r2, #0
 8009642:	701a      	strb	r2, [r3, #0]
    if (num < 0) {
 8009644:	2100      	movs	r1, #0
 8009646:	68b8      	ldr	r0, [r7, #8]
 8009648:	f7f6 feec 	bl	8000424 <__aeabi_fcmplt>
 800964c:	1e03      	subs	r3, r0, #0
 800964e:	d011      	beq.n	8009674 <floatToStr+0x74>
        is_negative = 1;
 8009650:	197b      	adds	r3, r7, r5
 8009652:	2201      	movs	r2, #1
 8009654:	701a      	strb	r2, [r3, #0]
        str[p++] = '-';
 8009656:	193b      	adds	r3, r7, r4
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	193a      	adds	r2, r7, r4
 800965c:	1c59      	adds	r1, r3, #1
 800965e:	7011      	strb	r1, [r2, #0]
 8009660:	001a      	movs	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	189b      	adds	r3, r3, r2
 8009666:	222d      	movs	r2, #45	; 0x2d
 8009668:	701a      	strb	r2, [r3, #0]
        num = -num;
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2280      	movs	r2, #128	; 0x80
 800966e:	0612      	lsls	r2, r2, #24
 8009670:	4053      	eors	r3, r2
 8009672:	60bb      	str	r3, [r7, #8]
    }

    uint32_t integer = (uint32_t) num;
 8009674:	68b8      	ldr	r0, [r7, #8]
 8009676:	f7f6 fefd 	bl	8000474 <__aeabi_f2uiz>
 800967a:	0003      	movs	r3, r0
 800967c:	623b      	str	r3, [r7, #32]
    float decimal = num - (float) integer;
 800967e:	6a38      	ldr	r0, [r7, #32]
 8009680:	f7f7 fdd4 	bl	800122c <__aeabi_ui2f>
 8009684:	1c03      	adds	r3, r0, #0
 8009686:	1c19      	adds	r1, r3, #0
 8009688:	68b8      	ldr	r0, [r7, #8]
 800968a:	f7f7 fb8b 	bl	8000da4 <__aeabi_fsub>
 800968e:	1c03      	adds	r3, r0, #0
 8009690:	61fb      	str	r3, [r7, #28]

    // 整数部分处理
    if (integer == 0)
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d125      	bne.n	80096e4 <floatToStr+0xe4>
        str[p++] = '0';
 8009698:	2227      	movs	r2, #39	; 0x27
 800969a:	18bb      	adds	r3, r7, r2
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	18ba      	adds	r2, r7, r2
 80096a0:	1c59      	adds	r1, r3, #1
 80096a2:	7011      	strb	r1, [r2, #0]
 80096a4:	001a      	movs	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	189b      	adds	r3, r3, r2
 80096aa:	2230      	movs	r2, #48	; 0x30
 80096ac:	701a      	strb	r2, [r3, #0]
 80096ae:	e036      	b.n	800971e <floatToStr+0x11e>
    else {
        while (integer) {
            str[p++] = integer % 10 + '0';
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	210a      	movs	r1, #10
 80096b4:	0018      	movs	r0, r3
 80096b6:	f7f6 fdb3 	bl	8000220 <__aeabi_uidivmod>
 80096ba:	000b      	movs	r3, r1
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	2127      	movs	r1, #39	; 0x27
 80096c0:	187b      	adds	r3, r7, r1
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	1879      	adds	r1, r7, r1
 80096c6:	1c58      	adds	r0, r3, #1
 80096c8:	7008      	strb	r0, [r1, #0]
 80096ca:	0019      	movs	r1, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	185b      	adds	r3, r3, r1
 80096d0:	3230      	adds	r2, #48	; 0x30
 80096d2:	b2d2      	uxtb	r2, r2
 80096d4:	701a      	strb	r2, [r3, #0]
            integer /= 10;
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	210a      	movs	r1, #10
 80096da:	0018      	movs	r0, r3
 80096dc:	f7f6 fd1a 	bl	8000114 <__udivsi3>
 80096e0:	0003      	movs	r3, r0
 80096e2:	623b      	str	r3, [r7, #32]
        while (integer) {
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e2      	bne.n	80096b0 <floatToStr+0xb0>
        }
        // 倒序
        if (is_negative)
 80096ea:	2326      	movs	r3, #38	; 0x26
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <floatToStr+0x10a>
            invert(str, 1, p - 1);
 80096f4:	2327      	movs	r3, #39	; 0x27
 80096f6:	18fb      	adds	r3, r7, r3
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2101      	movs	r1, #1
 8009702:	0018      	movs	r0, r3
 8009704:	f7ff ff2a 	bl	800955c <invert>
 8009708:	e009      	b.n	800971e <floatToStr+0x11e>
        else
            invert(str, 0, p - 1);
 800970a:	2327      	movs	r3, #39	; 0x27
 800970c:	18fb      	adds	r3, r7, r3
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	3b01      	subs	r3, #1
 8009712:	b2da      	uxtb	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2100      	movs	r1, #0
 8009718:	0018      	movs	r0, r3
 800971a:	f7ff ff1f 	bl	800955c <invert>
    }

    // 小数部分处理
    if (size > 0)
 800971e:	1dfb      	adds	r3, r7, #7
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <floatToStr+0x13c>
        str[p++] = '.';
 8009726:	2227      	movs	r2, #39	; 0x27
 8009728:	18bb      	adds	r3, r7, r2
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	18ba      	adds	r2, r7, r2
 800972e:	1c59      	adds	r1, r3, #1
 8009730:	7011      	strb	r1, [r2, #0]
 8009732:	001a      	movs	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	189b      	adds	r3, r3, r2
 8009738:	222e      	movs	r2, #46	; 0x2e
 800973a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < size; i++) {
 800973c:	231b      	movs	r3, #27
 800973e:	18fb      	adds	r3, r7, r3
 8009740:	2200      	movs	r2, #0
 8009742:	701a      	strb	r2, [r3, #0]
 8009744:	e028      	b.n	8009798 <floatToStr+0x198>
        decimal *= 10;
 8009746:	491e      	ldr	r1, [pc, #120]	; (80097c0 <floatToStr+0x1c0>)
 8009748:	69f8      	ldr	r0, [r7, #28]
 800974a:	f7f7 fa11 	bl	8000b70 <__aeabi_fmul>
 800974e:	1c03      	adds	r3, r0, #0
 8009750:	61fb      	str	r3, [r7, #28]
        uint32_t tmp = (uint32_t) decimal;
 8009752:	69f8      	ldr	r0, [r7, #28]
 8009754:	f7f6 fe8e 	bl	8000474 <__aeabi_f2uiz>
 8009758:	0003      	movs	r3, r0
 800975a:	617b      	str	r3, [r7, #20]
        decimal -= (float) tmp;
 800975c:	6978      	ldr	r0, [r7, #20]
 800975e:	f7f7 fd65 	bl	800122c <__aeabi_ui2f>
 8009762:	1c03      	adds	r3, r0, #0
 8009764:	1c19      	adds	r1, r3, #0
 8009766:	69f8      	ldr	r0, [r7, #28]
 8009768:	f7f7 fb1c 	bl	8000da4 <__aeabi_fsub>
 800976c:	1c03      	adds	r3, r0, #0
 800976e:	61fb      	str	r3, [r7, #28]
        str[p++] = tmp + '0';
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	b2da      	uxtb	r2, r3
 8009774:	2127      	movs	r1, #39	; 0x27
 8009776:	187b      	adds	r3, r7, r1
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	1879      	adds	r1, r7, r1
 800977c:	1c58      	adds	r0, r3, #1
 800977e:	7008      	strb	r0, [r1, #0]
 8009780:	0019      	movs	r1, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	185b      	adds	r3, r3, r1
 8009786:	3230      	adds	r2, #48	; 0x30
 8009788:	b2d2      	uxtb	r2, r2
 800978a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < size; i++) {
 800978c:	211b      	movs	r1, #27
 800978e:	187b      	adds	r3, r7, r1
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	187b      	adds	r3, r7, r1
 8009794:	3201      	adds	r2, #1
 8009796:	701a      	strb	r2, [r3, #0]
 8009798:	231b      	movs	r3, #27
 800979a:	18fa      	adds	r2, r7, r3
 800979c:	1dfb      	adds	r3, r7, #7
 800979e:	7812      	ldrb	r2, [r2, #0]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d3cf      	bcc.n	8009746 <floatToStr+0x146>
    }

    // 结尾补0，表示字符串结束
    str[p] = 0;
 80097a6:	2127      	movs	r1, #39	; 0x27
 80097a8:	187b      	adds	r3, r7, r1
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	18d3      	adds	r3, r2, r3
 80097b0:	2200      	movs	r2, #0
 80097b2:	701a      	strb	r2, [r3, #0]
    return p;
 80097b4:	187b      	adds	r3, r7, r1
 80097b6:	781b      	ldrb	r3, [r3, #0]
}
 80097b8:	0018      	movs	r0, r3
 80097ba:	46bd      	mov	sp, r7
 80097bc:	b00a      	add	sp, #40	; 0x28
 80097be:	bdb0      	pop	{r4, r5, r7, pc}
 80097c0:	41200000 	.word	0x41200000

080097c4 <Key_Push>:

static uint8_t queue[KEY_QUEUE_SIZE];
static uint8_t head = 0; // 指向队列第一个元素
static uint8_t tail = 0; // 指向队列最后一个元素的后一个

void Key_Push(Key key) {
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	0002      	movs	r2, r0
 80097cc:	1dfb      	adds	r3, r7, #7
 80097ce:	701a      	strb	r2, [r3, #0]
    if (Key_Size() < KEY_QUEUE_SIZE) {
 80097d0:	f000 f864 	bl	800989c <Key_Size>
 80097d4:	0003      	movs	r3, r0
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	d811      	bhi.n	80097fe <Key_Push+0x3a>
        queue[tail] = key;
 80097da:	4b0b      	ldr	r3, [pc, #44]	; (8009808 <Key_Push+0x44>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	0019      	movs	r1, r3
 80097e0:	4b0a      	ldr	r3, [pc, #40]	; (800980c <Key_Push+0x48>)
 80097e2:	1dfa      	adds	r2, r7, #7
 80097e4:	7812      	ldrb	r2, [r2, #0]
 80097e6:	545a      	strb	r2, [r3, r1]
        tail = (tail + 1) % KEY_QUEUE_SIZE;
 80097e8:	4b07      	ldr	r3, [pc, #28]	; (8009808 <Key_Push+0x44>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	3301      	adds	r3, #1
 80097ee:	2105      	movs	r1, #5
 80097f0:	0018      	movs	r0, r3
 80097f2:	f7f6 fdff 	bl	80003f4 <__aeabi_idivmod>
 80097f6:	000b      	movs	r3, r1
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	4b03      	ldr	r3, [pc, #12]	; (8009808 <Key_Push+0x44>)
 80097fc:	701a      	strb	r2, [r3, #0]
    }
}
 80097fe:	46c0      	nop			; (mov r8, r8)
 8009800:	46bd      	mov	sp, r7
 8009802:	b002      	add	sp, #8
 8009804:	bd80      	pop	{r7, pc}
 8009806:	46c0      	nop			; (mov r8, r8)
 8009808:	200001b2 	.word	0x200001b2
 800980c:	200001ac 	.word	0x200001ac

08009810 <Key_Pop>:

Key Key_Pop(void) {
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
    if (!Key_Empty()) {
 8009816:	f000 f82f 	bl	8009878 <Key_Empty>
 800981a:	1e03      	subs	r3, r0, #0
 800981c:	d114      	bne.n	8009848 <Key_Pop+0x38>
        Key key = queue[head];
 800981e:	4b0d      	ldr	r3, [pc, #52]	; (8009854 <Key_Pop+0x44>)
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	0019      	movs	r1, r3
 8009824:	1dfb      	adds	r3, r7, #7
 8009826:	4a0c      	ldr	r2, [pc, #48]	; (8009858 <Key_Pop+0x48>)
 8009828:	5c52      	ldrb	r2, [r2, r1]
 800982a:	701a      	strb	r2, [r3, #0]
        head = (head + 1) % KEY_QUEUE_SIZE;
 800982c:	4b09      	ldr	r3, [pc, #36]	; (8009854 <Key_Pop+0x44>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	3301      	adds	r3, #1
 8009832:	2105      	movs	r1, #5
 8009834:	0018      	movs	r0, r3
 8009836:	f7f6 fddd 	bl	80003f4 <__aeabi_idivmod>
 800983a:	000b      	movs	r3, r1
 800983c:	b2da      	uxtb	r2, r3
 800983e:	4b05      	ldr	r3, [pc, #20]	; (8009854 <Key_Pop+0x44>)
 8009840:	701a      	strb	r2, [r3, #0]
        return key;
 8009842:	1dfb      	adds	r3, r7, #7
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	e000      	b.n	800984a <Key_Pop+0x3a>
    } else {
        return -1;
 8009848:	23ff      	movs	r3, #255	; 0xff
    }
}
 800984a:	0018      	movs	r0, r3
 800984c:	46bd      	mov	sp, r7
 800984e:	b002      	add	sp, #8
 8009850:	bd80      	pop	{r7, pc}
 8009852:	46c0      	nop			; (mov r8, r8)
 8009854:	200001b1 	.word	0x200001b1
 8009858:	200001ac 	.word	0x200001ac

0800985c <Key_Clear>:

void Key_Clear(void) {
 800985c:	b580      	push	{r7, lr}
 800985e:	af00      	add	r7, sp, #0
    head = tail;
 8009860:	4b03      	ldr	r3, [pc, #12]	; (8009870 <Key_Clear+0x14>)
 8009862:	781a      	ldrb	r2, [r3, #0]
 8009864:	4b03      	ldr	r3, [pc, #12]	; (8009874 <Key_Clear+0x18>)
 8009866:	701a      	strb	r2, [r3, #0]
}
 8009868:	46c0      	nop			; (mov r8, r8)
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	200001b2 	.word	0x200001b2
 8009874:	200001b1 	.word	0x200001b1

08009878 <Key_Empty>:

uint8_t Key_Empty(void) {
 8009878:	b580      	push	{r7, lr}
 800987a:	af00      	add	r7, sp, #0
    return head == tail;
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <Key_Empty+0x1c>)
 800987e:	781a      	ldrb	r2, [r3, #0]
 8009880:	4b05      	ldr	r3, [pc, #20]	; (8009898 <Key_Empty+0x20>)
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	425a      	negs	r2, r3
 8009888:	4153      	adcs	r3, r2
 800988a:	b2db      	uxtb	r3, r3
}
 800988c:	0018      	movs	r0, r3
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	46c0      	nop			; (mov r8, r8)
 8009894:	200001b1 	.word	0x200001b1
 8009898:	200001b2 	.word	0x200001b2

0800989c <Key_Size>:

uint8_t Key_Size(void) {
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
    if (head >= tail)
 80098a0:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <Key_Size+0x34>)
 80098a2:	781a      	ldrb	r2, [r3, #0]
 80098a4:	4b0b      	ldr	r3, [pc, #44]	; (80098d4 <Key_Size+0x38>)
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d306      	bcc.n	80098ba <Key_Size+0x1e>
        return head - tail;
 80098ac:	4b08      	ldr	r3, [pc, #32]	; (80098d0 <Key_Size+0x34>)
 80098ae:	781a      	ldrb	r2, [r3, #0]
 80098b0:	4b08      	ldr	r3, [pc, #32]	; (80098d4 <Key_Size+0x38>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	e007      	b.n	80098ca <Key_Size+0x2e>
    else
        return KEY_QUEUE_SIZE - tail + head;
 80098ba:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <Key_Size+0x34>)
 80098bc:	781a      	ldrb	r2, [r3, #0]
 80098be:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <Key_Size+0x38>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	3305      	adds	r3, #5
 80098c8:	b2db      	uxtb	r3, r3
}
 80098ca:	0018      	movs	r0, r3
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	200001b1 	.word	0x200001b1
 80098d4:	200001b2 	.word	0x200001b2

080098d8 <Key_Scan>:

/*-----------------------------------------------------检测-----------------------------------------------------*/

static uint32_t t1, t2; // 去抖动

static void Key_Scan(void) {
 80098d8:	b590      	push	{r4, r7, lr}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
    }; // 需要与枚举结构体的顺序保持一致
    static const uint8_t gpio_size = sizeof(gpio) / sizeof(gpio[0]);

    static uint8_t status[] = {1, 1, 1}; // 按键初始值为高电平

    for (uint8_t i = 0; i < gpio_size; i++) {
 80098de:	1dfb      	adds	r3, r7, #7
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	e02d      	b.n	8009942 <Key_Scan+0x6a>
        uint8_t now_status = HAL_GPIO_ReadPin(gpio[i].port, gpio[i].pin);
 80098e6:	1dfb      	adds	r3, r7, #7
 80098e8:	781a      	ldrb	r2, [r3, #0]
 80098ea:	4b1b      	ldr	r3, [pc, #108]	; (8009958 <Key_Scan+0x80>)
 80098ec:	00d2      	lsls	r2, r2, #3
 80098ee:	58d0      	ldr	r0, [r2, r3]
 80098f0:	1dfb      	adds	r3, r7, #7
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	4a18      	ldr	r2, [pc, #96]	; (8009958 <Key_Scan+0x80>)
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	18d3      	adds	r3, r2, r3
 80098fa:	3304      	adds	r3, #4
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	1dbc      	adds	r4, r7, #6
 8009900:	0019      	movs	r1, r3
 8009902:	f7fa fad5 	bl	8003eb0 <HAL_GPIO_ReadPin>
 8009906:	0003      	movs	r3, r0
 8009908:	7023      	strb	r3, [r4, #0]
        if (now_status != status[i]) { // 按键状态发生变化
 800990a:	1dfb      	adds	r3, r7, #7
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	4a13      	ldr	r2, [pc, #76]	; (800995c <Key_Scan+0x84>)
 8009910:	5cd3      	ldrb	r3, [r2, r3]
 8009912:	1dba      	adds	r2, r7, #6
 8009914:	7812      	ldrb	r2, [r2, #0]
 8009916:	429a      	cmp	r2, r3
 8009918:	d00e      	beq.n	8009938 <Key_Scan+0x60>
            if (now_status) // 目前为高电平 -> 松开
 800991a:	1dbb      	adds	r3, r7, #6
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d004      	beq.n	800992c <Key_Scan+0x54>
                Key_Push(i);
 8009922:	1dfb      	adds	r3, r7, #7
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	0018      	movs	r0, r3
 8009928:	f7ff ff4c 	bl	80097c4 <Key_Push>
            status[i] = now_status;
 800992c:	1dfb      	adds	r3, r7, #7
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	4a0a      	ldr	r2, [pc, #40]	; (800995c <Key_Scan+0x84>)
 8009932:	1db9      	adds	r1, r7, #6
 8009934:	7809      	ldrb	r1, [r1, #0]
 8009936:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < gpio_size; i++) {
 8009938:	1dfb      	adds	r3, r7, #7
 800993a:	781a      	ldrb	r2, [r3, #0]
 800993c:	1dfb      	adds	r3, r7, #7
 800993e:	3201      	adds	r2, #1
 8009940:	701a      	strb	r2, [r3, #0]
 8009942:	4b07      	ldr	r3, [pc, #28]	; (8009960 <Key_Scan+0x88>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	1dfa      	adds	r2, r7, #7
 8009948:	7812      	ldrb	r2, [r2, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d3cb      	bcc.n	80098e6 <Key_Scan+0xe>
        }
    }
}
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	46c0      	nop			; (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	b003      	add	sp, #12
 8009956:	bd90      	pop	{r4, r7, pc}
 8009958:	0800c200 	.word	0x0800c200
 800995c:	20000100 	.word	0x20000100
 8009960:	0800c218 	.word	0x0800c218

08009964 <Encoder_Scan>:

static void Encoder_Scan(void) {
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
    static uint8_t status = 1; // 初始值为高电平

    uint8_t now_status = HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port, ENCODER_A_Pin);
 800996a:	1dfc      	adds	r4, r7, #7
 800996c:	2380      	movs	r3, #128	; 0x80
 800996e:	021a      	lsls	r2, r3, #8
 8009970:	23a0      	movs	r3, #160	; 0xa0
 8009972:	05db      	lsls	r3, r3, #23
 8009974:	0011      	movs	r1, r2
 8009976:	0018      	movs	r0, r3
 8009978:	f7fa fa9a 	bl	8003eb0 <HAL_GPIO_ReadPin>
 800997c:	0003      	movs	r3, r0
 800997e:	7023      	strb	r3, [r4, #0]
    if (now_status != status) { // 按键状态发生变化
 8009980:	4b0f      	ldr	r3, [pc, #60]	; (80099c0 <Encoder_Scan+0x5c>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	1dfa      	adds	r2, r7, #7
 8009986:	7812      	ldrb	r2, [r2, #0]
 8009988:	429a      	cmp	r2, r3
 800998a:	d015      	beq.n	80099b8 <Encoder_Scan+0x54>
        if (!now_status) { // 目前为低电平，开始拨动，“按下”
 800998c:	1dfb      	adds	r3, r7, #7
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10d      	bne.n	80099b0 <Encoder_Scan+0x4c>
            if (HAL_GPIO_ReadPin(ENCODER_B_GPIO_Port, ENCODER_B_Pin))
 8009994:	4b0b      	ldr	r3, [pc, #44]	; (80099c4 <Encoder_Scan+0x60>)
 8009996:	2110      	movs	r1, #16
 8009998:	0018      	movs	r0, r3
 800999a:	f7fa fa89 	bl	8003eb0 <HAL_GPIO_ReadPin>
 800999e:	1e03      	subs	r3, r0, #0
 80099a0:	d003      	beq.n	80099aa <Encoder_Scan+0x46>
                Key_Push(Key_R);
 80099a2:	2004      	movs	r0, #4
 80099a4:	f7ff ff0e 	bl	80097c4 <Key_Push>
 80099a8:	e002      	b.n	80099b0 <Encoder_Scan+0x4c>
            else
                Key_Push(Key_L);
 80099aa:	2003      	movs	r0, #3
 80099ac:	f7ff ff0a 	bl	80097c4 <Key_Push>
        }
        status = now_status;
 80099b0:	4b03      	ldr	r3, [pc, #12]	; (80099c0 <Encoder_Scan+0x5c>)
 80099b2:	1dfa      	adds	r2, r7, #7
 80099b4:	7812      	ldrb	r2, [r2, #0]
 80099b6:	701a      	strb	r2, [r3, #0]
    }
}
 80099b8:	46c0      	nop			; (mov r8, r8)
 80099ba:	46bd      	mov	sp, r7
 80099bc:	b003      	add	sp, #12
 80099be:	bd90      	pop	{r4, r7, pc}
 80099c0:	20000103 	.word	0x20000103
 80099c4:	50000400 	.word	0x50000400

080099c8 <Key_Init>:

void Key_Init(void) {
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
    Set_TIM_Freq(&KEY_HTIM, 1000);
 80099cc:	4a04      	ldr	r2, [pc, #16]	; (80099e0 <Key_Init+0x18>)
 80099ce:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <Key_Init+0x1c>)
 80099d0:	1c11      	adds	r1, r2, #0
 80099d2:	0018      	movs	r0, r3
 80099d4:	f7ff fd76 	bl	80094c4 <Set_TIM_Freq>
}
 80099d8:	46c0      	nop			; (mov r8, r8)
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	46c0      	nop			; (mov r8, r8)
 80099e0:	447a0000 	.word	0x447a0000
 80099e4:	200002ec 	.word	0x200002ec

080099e8 <Key_GPIO_EXTI_Callback>:

void Key_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	0002      	movs	r2, r0
 80099f0:	1dbb      	adds	r3, r7, #6
 80099f2:	801a      	strh	r2, [r3, #0]
    UNUSED(GPIO_Pin);
    t1 = HAL_GetTick() + KEY_DEBOUNCE_T1;
 80099f4:	f7f8 fb7a 	bl	80020ec <HAL_GetTick>
 80099f8:	0003      	movs	r3, r0
 80099fa:	1c5a      	adds	r2, r3, #1
 80099fc:	4b08      	ldr	r3, [pc, #32]	; (8009a20 <Key_GPIO_EXTI_Callback+0x38>)
 80099fe:	601a      	str	r2, [r3, #0]
    t2 = HAL_GetTick() + KEY_DEBOUNCE_T2;
 8009a00:	f7f8 fb74 	bl	80020ec <HAL_GetTick>
 8009a04:	0003      	movs	r3, r0
 8009a06:	3314      	adds	r3, #20
 8009a08:	001a      	movs	r2, r3
 8009a0a:	4b06      	ldr	r3, [pc, #24]	; (8009a24 <Key_GPIO_EXTI_Callback+0x3c>)
 8009a0c:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&KEY_HTIM);
 8009a0e:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <Key_GPIO_EXTI_Callback+0x40>)
 8009a10:	0018      	movs	r0, r3
 8009a12:	f7fb fd81 	bl	8005518 <HAL_TIM_Base_Start_IT>
}
 8009a16:	46c0      	nop			; (mov r8, r8)
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	b002      	add	sp, #8
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	46c0      	nop			; (mov r8, r8)
 8009a20:	200001b4 	.word	0x200001b4
 8009a24:	200001b8 	.word	0x200001b8
 8009a28:	200002ec 	.word	0x200002ec

08009a2c <Key_TIM_PeriodElapsedCallback>:

void Key_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
    if (htim == &KEY_HTIM) {
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	4b12      	ldr	r3, [pc, #72]	; (8009a80 <Key_TIM_PeriodElapsedCallback+0x54>)
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d11d      	bne.n	8009a78 <Key_TIM_PeriodElapsedCallback+0x4c>
        if (t1 != 0 && HAL_GetTick() >= t1) {
 8009a3c:	4b11      	ldr	r3, [pc, #68]	; (8009a84 <Key_TIM_PeriodElapsedCallback+0x58>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00c      	beq.n	8009a5e <Key_TIM_PeriodElapsedCallback+0x32>
 8009a44:	f7f8 fb52 	bl	80020ec <HAL_GetTick>
 8009a48:	0002      	movs	r2, r0
 8009a4a:	4b0e      	ldr	r3, [pc, #56]	; (8009a84 <Key_TIM_PeriodElapsedCallback+0x58>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d305      	bcc.n	8009a5e <Key_TIM_PeriodElapsedCallback+0x32>
            t1 = 0;
 8009a52:	4b0c      	ldr	r3, [pc, #48]	; (8009a84 <Key_TIM_PeriodElapsedCallback+0x58>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
            Encoder_Scan();
 8009a58:	f7ff ff84 	bl	8009964 <Encoder_Scan>
        } else if (HAL_GetTick() >= t2) {
            Key_Scan();
            HAL_TIM_Base_Stop_IT(&KEY_HTIM);
        }
    }
}
 8009a5c:	e00c      	b.n	8009a78 <Key_TIM_PeriodElapsedCallback+0x4c>
        } else if (HAL_GetTick() >= t2) {
 8009a5e:	f7f8 fb45 	bl	80020ec <HAL_GetTick>
 8009a62:	0002      	movs	r2, r0
 8009a64:	4b08      	ldr	r3, [pc, #32]	; (8009a88 <Key_TIM_PeriodElapsedCallback+0x5c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d305      	bcc.n	8009a78 <Key_TIM_PeriodElapsedCallback+0x4c>
            Key_Scan();
 8009a6c:	f7ff ff34 	bl	80098d8 <Key_Scan>
            HAL_TIM_Base_Stop_IT(&KEY_HTIM);
 8009a70:	4b03      	ldr	r3, [pc, #12]	; (8009a80 <Key_TIM_PeriodElapsedCallback+0x54>)
 8009a72:	0018      	movs	r0, r3
 8009a74:	f7fb fda4 	bl	80055c0 <HAL_TIM_Base_Stop_IT>
}
 8009a78:	46c0      	nop			; (mov r8, r8)
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	b002      	add	sp, #8
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	200002ec 	.word	0x200002ec
 8009a84:	200001b4 	.word	0x200001b4
 8009a88:	200001b8 	.word	0x200001b8

08009a8c <OLED_WR_Byte>:
    if (i == 1) {
        OLED_WR_Byte(0xA7, OLED_CMD);//反色显示
    }
}

void OLED_WR_Byte(u8 dat, u8 cmd) {
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	0002      	movs	r2, r0
 8009a94:	1dfb      	adds	r3, r7, #7
 8009a96:	701a      	strb	r2, [r3, #0]
 8009a98:	1dbb      	adds	r3, r7, #6
 8009a9a:	1c0a      	adds	r2, r1, #0
 8009a9c:	701a      	strb	r2, [r3, #0]
   // u8 i;
    if (cmd)
 8009a9e:	1dbb      	adds	r3, r7, #6
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d006      	beq.n	8009ab4 <OLED_WR_Byte+0x28>
        OLED_DC_Set();
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <OLED_WR_Byte+0x58>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	2120      	movs	r1, #32
 8009aac:	0018      	movs	r0, r3
 8009aae:	f7fa fa1c 	bl	8003eea <HAL_GPIO_WritePin>
 8009ab2:	e005      	b.n	8009ac0 <OLED_WR_Byte+0x34>
    else
        OLED_DC_Clr();
 8009ab4:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <OLED_WR_Byte+0x58>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2120      	movs	r1, #32
 8009aba:	0018      	movs	r0, r3
 8009abc:	f7fa fa15 	bl	8003eea <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &dat, 1, HAL_MAX_DELAY);
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	425b      	negs	r3, r3
 8009ac4:	1df9      	adds	r1, r7, #7
 8009ac6:	4808      	ldr	r0, [pc, #32]	; (8009ae8 <OLED_WR_Byte+0x5c>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f7fb f98d 	bl	8004de8 <HAL_SPI_Transmit>

    OLED_DC_Set();
 8009ace:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <OLED_WR_Byte+0x58>)
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	2120      	movs	r1, #32
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f7fa fa08 	bl	8003eea <HAL_GPIO_WritePin>
}
 8009ada:	46c0      	nop			; (mov r8, r8)
 8009adc:	46bd      	mov	sp, r7
 8009ade:	b002      	add	sp, #8
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	50000400 	.word	0x50000400
 8009ae8:	20000288 	.word	0x20000288

08009aec <OLED_Refresh>:
    OLED_WR_Byte(0x10, OLED_CMD);//关闭电荷泵
    OLED_WR_Byte(0xAE, OLED_CMD);//关闭屏幕
}

//更新显存到OLED
void OLED_Refresh(void) {
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
    u8 i, n;
    for (i = 0; i < 16; i++) {
 8009af2:	1dfb      	adds	r3, r7, #7
 8009af4:	2200      	movs	r2, #0
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	e02e      	b.n	8009b58 <OLED_Refresh+0x6c>
        OLED_WR_Byte(0xb0 + i, OLED_CMD); //设置行起始地址
 8009afa:	1dfb      	adds	r3, r7, #7
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	3b50      	subs	r3, #80	; 0x50
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2100      	movs	r1, #0
 8009b04:	0018      	movs	r0, r3
 8009b06:	f7ff ffc1 	bl	8009a8c <OLED_WR_Byte>
        OLED_WR_Byte(0x00, OLED_CMD);   //设置低列起始地址
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f7ff ffbd 	bl	8009a8c <OLED_WR_Byte>
        OLED_WR_Byte(0x10, OLED_CMD);   //设置高列起始地址
 8009b12:	2100      	movs	r1, #0
 8009b14:	2010      	movs	r0, #16
 8009b16:	f7ff ffb9 	bl	8009a8c <OLED_WR_Byte>
        for (n = 0; n < 128; n++)
 8009b1a:	1dbb      	adds	r3, r7, #6
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	e010      	b.n	8009b44 <OLED_Refresh+0x58>
            OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8009b22:	1dbb      	adds	r3, r7, #6
 8009b24:	781a      	ldrb	r2, [r3, #0]
 8009b26:	1dfb      	adds	r3, r7, #7
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	4910      	ldr	r1, [pc, #64]	; (8009b6c <OLED_Refresh+0x80>)
 8009b2c:	0112      	lsls	r2, r2, #4
 8009b2e:	188a      	adds	r2, r1, r2
 8009b30:	5cd3      	ldrb	r3, [r2, r3]
 8009b32:	2101      	movs	r1, #1
 8009b34:	0018      	movs	r0, r3
 8009b36:	f7ff ffa9 	bl	8009a8c <OLED_WR_Byte>
        for (n = 0; n < 128; n++)
 8009b3a:	1dbb      	adds	r3, r7, #6
 8009b3c:	781a      	ldrb	r2, [r3, #0]
 8009b3e:	1dbb      	adds	r3, r7, #6
 8009b40:	3201      	adds	r2, #1
 8009b42:	701a      	strb	r2, [r3, #0]
 8009b44:	1dbb      	adds	r3, r7, #6
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	b25b      	sxtb	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dae9      	bge.n	8009b22 <OLED_Refresh+0x36>
    for (i = 0; i < 16; i++) {
 8009b4e:	1dfb      	adds	r3, r7, #7
 8009b50:	781a      	ldrb	r2, [r3, #0]
 8009b52:	1dfb      	adds	r3, r7, #7
 8009b54:	3201      	adds	r2, #1
 8009b56:	701a      	strb	r2, [r3, #0]
 8009b58:	1dfb      	adds	r3, r7, #7
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b0f      	cmp	r3, #15
 8009b5e:	d9cc      	bls.n	8009afa <OLED_Refresh+0xe>
    }
}
 8009b60:	46c0      	nop			; (mov r8, r8)
 8009b62:	46c0      	nop			; (mov r8, r8)
 8009b64:	46bd      	mov	sp, r7
 8009b66:	b002      	add	sp, #8
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	46c0      	nop			; (mov r8, r8)
 8009b6c:	20000478 	.word	0x20000478

08009b70 <OLED_Clear>:

//清屏函数
void OLED_Clear(void) {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
    u8 i, n;
    for (i = 0; i < 16; i++) {
 8009b76:	1dfb      	adds	r3, r7, #7
 8009b78:	2200      	movs	r2, #0
 8009b7a:	701a      	strb	r2, [r3, #0]
 8009b7c:	e01b      	b.n	8009bb6 <OLED_Clear+0x46>
        for (n = 0; n < 128; n++) {
 8009b7e:	1dbb      	adds	r3, r7, #6
 8009b80:	2200      	movs	r2, #0
 8009b82:	701a      	strb	r2, [r3, #0]
 8009b84:	e00d      	b.n	8009ba2 <OLED_Clear+0x32>
            OLED_GRAM[n][i] = 0;//清除所有数据
 8009b86:	1dbb      	adds	r3, r7, #6
 8009b88:	781a      	ldrb	r2, [r3, #0]
 8009b8a:	1dfb      	adds	r3, r7, #7
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	490e      	ldr	r1, [pc, #56]	; (8009bc8 <OLED_Clear+0x58>)
 8009b90:	0112      	lsls	r2, r2, #4
 8009b92:	188a      	adds	r2, r1, r2
 8009b94:	2100      	movs	r1, #0
 8009b96:	54d1      	strb	r1, [r2, r3]
        for (n = 0; n < 128; n++) {
 8009b98:	1dbb      	adds	r3, r7, #6
 8009b9a:	781a      	ldrb	r2, [r3, #0]
 8009b9c:	1dbb      	adds	r3, r7, #6
 8009b9e:	3201      	adds	r2, #1
 8009ba0:	701a      	strb	r2, [r3, #0]
 8009ba2:	1dbb      	adds	r3, r7, #6
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	b25b      	sxtb	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	daec      	bge.n	8009b86 <OLED_Clear+0x16>
    for (i = 0; i < 16; i++) {
 8009bac:	1dfb      	adds	r3, r7, #7
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	1dfb      	adds	r3, r7, #7
 8009bb2:	3201      	adds	r2, #1
 8009bb4:	701a      	strb	r2, [r3, #0]
 8009bb6:	1dfb      	adds	r3, r7, #7
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	2b0f      	cmp	r3, #15
 8009bbc:	d9df      	bls.n	8009b7e <OLED_Clear+0xe>
        }
    }
    //OLED_Refresh();//更新显示
}
 8009bbe:	46c0      	nop			; (mov r8, r8)
 8009bc0:	46c0      	nop			; (mov r8, r8)
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	b002      	add	sp, #8
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	20000478 	.word	0x20000478

08009bcc <OLED_DrawPoint>:

//画点
//x:横坐标
//y:纵坐标
//t:1 填充 0,清空
void OLED_DrawPoint(u8 x, u8 y, u8 t) {
 8009bcc:	b5b0      	push	{r4, r5, r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	0004      	movs	r4, r0
 8009bd4:	0008      	movs	r0, r1
 8009bd6:	0011      	movs	r1, r2
 8009bd8:	1dfb      	adds	r3, r7, #7
 8009bda:	1c22      	adds	r2, r4, #0
 8009bdc:	701a      	strb	r2, [r3, #0]
 8009bde:	1dbb      	adds	r3, r7, #6
 8009be0:	1c02      	adds	r2, r0, #0
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	1d7b      	adds	r3, r7, #5
 8009be6:	1c0a      	adds	r2, r1, #0
 8009be8:	701a      	strb	r2, [r3, #0]
    u8 i, m, n;
    u8 x0 = x, y0 = y;
 8009bea:	230f      	movs	r3, #15
 8009bec:	18fb      	adds	r3, r7, r3
 8009bee:	1dfa      	adds	r2, r7, #7
 8009bf0:	7812      	ldrb	r2, [r2, #0]
 8009bf2:	701a      	strb	r2, [r3, #0]
 8009bf4:	230e      	movs	r3, #14
 8009bf6:	18fb      	adds	r3, r7, r3
 8009bf8:	1dba      	adds	r2, r7, #6
 8009bfa:	7812      	ldrb	r2, [r2, #0]
 8009bfc:	701a      	strb	r2, [r3, #0]
        y = x0;
    } else if (USE_HORIZONTAL == 270) {
        x = y0;
        y = 127 - x0;
    }
    i = y / 8;
 8009bfe:	200d      	movs	r0, #13
 8009c00:	183b      	adds	r3, r7, r0
 8009c02:	1dba      	adds	r2, r7, #6
 8009c04:	7812      	ldrb	r2, [r2, #0]
 8009c06:	08d2      	lsrs	r2, r2, #3
 8009c08:	701a      	strb	r2, [r3, #0]
    m = y % 8;
 8009c0a:	240c      	movs	r4, #12
 8009c0c:	193b      	adds	r3, r7, r4
 8009c0e:	1dba      	adds	r2, r7, #6
 8009c10:	7812      	ldrb	r2, [r2, #0]
 8009c12:	2107      	movs	r1, #7
 8009c14:	400a      	ands	r2, r1
 8009c16:	701a      	strb	r2, [r3, #0]
    n = 1 << m;
 8009c18:	193b      	adds	r3, r7, r4
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	409a      	lsls	r2, r3
 8009c20:	250b      	movs	r5, #11
 8009c22:	197b      	adds	r3, r7, r5
 8009c24:	701a      	strb	r2, [r3, #0]
    if (t) { OLED_GRAM[x][i] |= n; }
 8009c26:	1d7b      	adds	r3, r7, #5
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d016      	beq.n	8009c5c <OLED_DrawPoint+0x90>
 8009c2e:	1dfb      	adds	r3, r7, #7
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	0004      	movs	r4, r0
 8009c34:	183b      	adds	r3, r7, r0
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	4929      	ldr	r1, [pc, #164]	; (8009ce0 <OLED_DrawPoint+0x114>)
 8009c3a:	0112      	lsls	r2, r2, #4
 8009c3c:	188a      	adds	r2, r1, r2
 8009c3e:	5cd0      	ldrb	r0, [r2, r3]
 8009c40:	1dfb      	adds	r3, r7, #7
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	193b      	adds	r3, r7, r4
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	1979      	adds	r1, r7, r5
 8009c4a:	7809      	ldrb	r1, [r1, #0]
 8009c4c:	4301      	orrs	r1, r0
 8009c4e:	b2c8      	uxtb	r0, r1
 8009c50:	4923      	ldr	r1, [pc, #140]	; (8009ce0 <OLED_DrawPoint+0x114>)
 8009c52:	0112      	lsls	r2, r2, #4
 8009c54:	188a      	adds	r2, r1, r2
 8009c56:	1c01      	adds	r1, r0, #0
 8009c58:	54d1      	strb	r1, [r2, r3]
    else {
        OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
        OLED_GRAM[x][i] |= n;
        OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
    }
}
 8009c5a:	e03c      	b.n	8009cd6 <OLED_DrawPoint+0x10a>
        OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8009c5c:	1dfb      	adds	r3, r7, #7
 8009c5e:	781a      	ldrb	r2, [r3, #0]
 8009c60:	240d      	movs	r4, #13
 8009c62:	193b      	adds	r3, r7, r4
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	491e      	ldr	r1, [pc, #120]	; (8009ce0 <OLED_DrawPoint+0x114>)
 8009c68:	0112      	lsls	r2, r2, #4
 8009c6a:	188a      	adds	r2, r1, r2
 8009c6c:	5cd1      	ldrb	r1, [r2, r3]
 8009c6e:	1dfb      	adds	r3, r7, #7
 8009c70:	781a      	ldrb	r2, [r3, #0]
 8009c72:	193b      	adds	r3, r7, r4
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	43c9      	mvns	r1, r1
 8009c78:	b2c8      	uxtb	r0, r1
 8009c7a:	4919      	ldr	r1, [pc, #100]	; (8009ce0 <OLED_DrawPoint+0x114>)
 8009c7c:	0112      	lsls	r2, r2, #4
 8009c7e:	188a      	adds	r2, r1, r2
 8009c80:	1c01      	adds	r1, r0, #0
 8009c82:	54d1      	strb	r1, [r2, r3]
        OLED_GRAM[x][i] |= n;
 8009c84:	1dfb      	adds	r3, r7, #7
 8009c86:	781a      	ldrb	r2, [r3, #0]
 8009c88:	193b      	adds	r3, r7, r4
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	4914      	ldr	r1, [pc, #80]	; (8009ce0 <OLED_DrawPoint+0x114>)
 8009c8e:	0112      	lsls	r2, r2, #4
 8009c90:	188a      	adds	r2, r1, r2
 8009c92:	5cd0      	ldrb	r0, [r2, r3]
 8009c94:	1dfb      	adds	r3, r7, #7
 8009c96:	781a      	ldrb	r2, [r3, #0]
 8009c98:	193b      	adds	r3, r7, r4
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	210b      	movs	r1, #11
 8009c9e:	1879      	adds	r1, r7, r1
 8009ca0:	7809      	ldrb	r1, [r1, #0]
 8009ca2:	4301      	orrs	r1, r0
 8009ca4:	b2c8      	uxtb	r0, r1
 8009ca6:	490e      	ldr	r1, [pc, #56]	; (8009ce0 <OLED_DrawPoint+0x114>)
 8009ca8:	0112      	lsls	r2, r2, #4
 8009caa:	188a      	adds	r2, r1, r2
 8009cac:	1c01      	adds	r1, r0, #0
 8009cae:	54d1      	strb	r1, [r2, r3]
        OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8009cb0:	1dfb      	adds	r3, r7, #7
 8009cb2:	781a      	ldrb	r2, [r3, #0]
 8009cb4:	193b      	adds	r3, r7, r4
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	4909      	ldr	r1, [pc, #36]	; (8009ce0 <OLED_DrawPoint+0x114>)
 8009cba:	0112      	lsls	r2, r2, #4
 8009cbc:	188a      	adds	r2, r1, r2
 8009cbe:	5cd1      	ldrb	r1, [r2, r3]
 8009cc0:	1dfb      	adds	r3, r7, #7
 8009cc2:	781a      	ldrb	r2, [r3, #0]
 8009cc4:	193b      	adds	r3, r7, r4
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	43c9      	mvns	r1, r1
 8009cca:	b2c8      	uxtb	r0, r1
 8009ccc:	4904      	ldr	r1, [pc, #16]	; (8009ce0 <OLED_DrawPoint+0x114>)
 8009cce:	0112      	lsls	r2, r2, #4
 8009cd0:	188a      	adds	r2, r1, r2
 8009cd2:	1c01      	adds	r1, r0, #0
 8009cd4:	54d1      	strb	r1, [r2, r3]
}
 8009cd6:	46c0      	nop			; (mov r8, r8)
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	b004      	add	sp, #16
 8009cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8009cde:	46c0      	nop			; (mov r8, r8)
 8009ce0:	20000478 	.word	0x20000478

08009ce4 <OLED_DrawLine>:

//画线
//x1,y1:起点坐标
//x2,y2:结束坐标
void OLED_DrawLine(u8 x1, u8 y1, u8 x2, u8 y2, u8 mode) {
 8009ce4:	b5b0      	push	{r4, r5, r7, lr}
 8009ce6:	b08c      	sub	sp, #48	; 0x30
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	0005      	movs	r5, r0
 8009cec:	000c      	movs	r4, r1
 8009cee:	0010      	movs	r0, r2
 8009cf0:	0019      	movs	r1, r3
 8009cf2:	1dfb      	adds	r3, r7, #7
 8009cf4:	1c2a      	adds	r2, r5, #0
 8009cf6:	701a      	strb	r2, [r3, #0]
 8009cf8:	1dbb      	adds	r3, r7, #6
 8009cfa:	1c22      	adds	r2, r4, #0
 8009cfc:	701a      	strb	r2, [r3, #0]
 8009cfe:	1d7b      	adds	r3, r7, #5
 8009d00:	1c02      	adds	r2, r0, #0
 8009d02:	701a      	strb	r2, [r3, #0]
 8009d04:	1d3b      	adds	r3, r7, #4
 8009d06:	1c0a      	adds	r2, r1, #0
 8009d08:	701a      	strb	r2, [r3, #0]
    u16 t;
    int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d0e:	2300      	movs	r3, #0
 8009d10:	627b      	str	r3, [r7, #36]	; 0x24
    int incx, incy, uRow, uCol;
    delta_x = x2 - x1; //计算坐标增量
 8009d12:	1d7b      	adds	r3, r7, #5
 8009d14:	781a      	ldrb	r2, [r3, #0]
 8009d16:	1dfb      	adds	r3, r7, #7
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	623b      	str	r3, [r7, #32]
    delta_y = y2 - y1;
 8009d1e:	1d3b      	adds	r3, r7, #4
 8009d20:	781a      	ldrb	r2, [r3, #0]
 8009d22:	1dbb      	adds	r3, r7, #6
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	61fb      	str	r3, [r7, #28]
    uRow = x1;//画线起点坐标
 8009d2a:	1dfb      	adds	r3, r7, #7
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	60fb      	str	r3, [r7, #12]
    uCol = y1;
 8009d30:	1dbb      	adds	r3, r7, #6
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	60bb      	str	r3, [r7, #8]
    if (delta_x > 0)incx = 1; //设置单步方向
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	dd02      	ble.n	8009d42 <OLED_DrawLine+0x5e>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	617b      	str	r3, [r7, #20]
 8009d40:	e00b      	b.n	8009d5a <OLED_DrawLine+0x76>
    else if (delta_x == 0)incx = 0;//垂直线
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <OLED_DrawLine+0x6a>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	e005      	b.n	8009d5a <OLED_DrawLine+0x76>
    else {
        incx = -1;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	425b      	negs	r3, r3
 8009d52:	617b      	str	r3, [r7, #20]
        delta_x = -delta_x;
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	425b      	negs	r3, r3
 8009d58:	623b      	str	r3, [r7, #32]
    }
    if (delta_y > 0)incy = 1;
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	dd02      	ble.n	8009d66 <OLED_DrawLine+0x82>
 8009d60:	2301      	movs	r3, #1
 8009d62:	613b      	str	r3, [r7, #16]
 8009d64:	e00b      	b.n	8009d7e <OLED_DrawLine+0x9a>
    else if (delta_y == 0)incy = 0;//水平线
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d102      	bne.n	8009d72 <OLED_DrawLine+0x8e>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	613b      	str	r3, [r7, #16]
 8009d70:	e005      	b.n	8009d7e <OLED_DrawLine+0x9a>
    else {
        incy = -1;
 8009d72:	2301      	movs	r3, #1
 8009d74:	425b      	negs	r3, r3
 8009d76:	613b      	str	r3, [r7, #16]
        delta_y = -delta_y;
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	425b      	negs	r3, r3
 8009d7c:	61fb      	str	r3, [r7, #28]
    }
    if (delta_x > delta_y)distance = delta_x; //选取基本增量坐标轴
 8009d7e:	6a3a      	ldr	r2, [r7, #32]
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	dd02      	ble.n	8009d8c <OLED_DrawLine+0xa8>
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	61bb      	str	r3, [r7, #24]
 8009d8a:	e001      	b.n	8009d90 <OLED_DrawLine+0xac>
    else distance = delta_y;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	61bb      	str	r3, [r7, #24]
    for (t = 0; t < distance + 1; t++) {
 8009d90:	2300      	movs	r3, #0
 8009d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d94:	e02c      	b.n	8009df0 <OLED_DrawLine+0x10c>
        OLED_DrawPoint(uRow, uCol, mode);//画点
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	b2d8      	uxtb	r0, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	b2d9      	uxtb	r1, r3
 8009d9e:	2340      	movs	r3, #64	; 0x40
 8009da0:	18fb      	adds	r3, r7, r3
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	001a      	movs	r2, r3
 8009da6:	f7ff ff11 	bl	8009bcc <OLED_DrawPoint>
        xerr += delta_x;
 8009daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	18d3      	adds	r3, r2, r3
 8009db0:	62bb      	str	r3, [r7, #40]	; 0x28
        yerr += delta_y;
 8009db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	18d3      	adds	r3, r2, r3
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
        if (xerr > distance) {
 8009dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	dd07      	ble.n	8009dd2 <OLED_DrawLine+0xee>
            xerr -= distance;
 8009dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	62bb      	str	r3, [r7, #40]	; 0x28
            uRow += incx;
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	18d3      	adds	r3, r2, r3
 8009dd0:	60fb      	str	r3, [r7, #12]
        }
        if (yerr > distance) {
 8009dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	dd07      	ble.n	8009dea <OLED_DrawLine+0x106>
            yerr -= distance;
 8009dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
            uCol += incy;
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	18d3      	adds	r3, r2, r3
 8009de8:	60bb      	str	r3, [r7, #8]
    for (t = 0; t < distance + 1; t++) {
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	3301      	adds	r3, #1
 8009dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	3301      	adds	r3, #1
 8009df4:	001a      	movs	r2, r3
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d3cc      	bcc.n	8009d96 <OLED_DrawLine+0xb2>
        }
    }
}
 8009dfc:	46c0      	nop			; (mov r8, r8)
 8009dfe:	46c0      	nop			; (mov r8, r8)
 8009e00:	46bd      	mov	sp, r7
 8009e02:	b00c      	add	sp, #48	; 0x30
 8009e04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009e08 <OLED_ShowChar>:
//在指定位置显示一个字符,包括部分字符
//x:0~127
//y:0~63
//size1:选择字体 6x8/6x12/8x16/12x24
//mode:0,反色显示;1,正常显示
void OLED_ShowChar(u8 x, u8 y, u8 chr, u8 size1, u8 mode) {
 8009e08:	b5b0      	push	{r4, r5, r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	0005      	movs	r5, r0
 8009e10:	000c      	movs	r4, r1
 8009e12:	0010      	movs	r0, r2
 8009e14:	0019      	movs	r1, r3
 8009e16:	1dfb      	adds	r3, r7, #7
 8009e18:	1c2a      	adds	r2, r5, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
 8009e1c:	1dbb      	adds	r3, r7, #6
 8009e1e:	1c22      	adds	r2, r4, #0
 8009e20:	701a      	strb	r2, [r3, #0]
 8009e22:	1d7b      	adds	r3, r7, #5
 8009e24:	1c02      	adds	r2, r0, #0
 8009e26:	701a      	strb	r2, [r3, #0]
 8009e28:	1d3b      	adds	r3, r7, #4
 8009e2a:	1c0a      	adds	r2, r1, #0
 8009e2c:	701a      	strb	r2, [r3, #0]
    u8 i, m, temp, size2, chr1;
    u8 x0 = x, y0 = y;
 8009e2e:	230a      	movs	r3, #10
 8009e30:	18fb      	adds	r3, r7, r3
 8009e32:	1dfa      	adds	r2, r7, #7
 8009e34:	7812      	ldrb	r2, [r2, #0]
 8009e36:	701a      	strb	r2, [r3, #0]
 8009e38:	230b      	movs	r3, #11
 8009e3a:	18fb      	adds	r3, r7, r3
 8009e3c:	1dba      	adds	r2, r7, #6
 8009e3e:	7812      	ldrb	r2, [r2, #0]
 8009e40:	701a      	strb	r2, [r3, #0]
    if (size1 == 8)size2 = 6;
 8009e42:	1d3b      	adds	r3, r7, #4
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d104      	bne.n	8009e54 <OLED_ShowChar+0x4c>
 8009e4a:	230c      	movs	r3, #12
 8009e4c:	18fb      	adds	r3, r7, r3
 8009e4e:	2206      	movs	r2, #6
 8009e50:	701a      	strb	r2, [r3, #0]
 8009e52:	e016      	b.n	8009e82 <OLED_ShowChar+0x7a>
    else size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2);  //得到字体一个字符对应点阵集所占的字节数
 8009e54:	1d3b      	adds	r3, r7, #4
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	08db      	lsrs	r3, r3, #3
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	0019      	movs	r1, r3
 8009e5e:	1d3b      	adds	r3, r7, #4
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	2207      	movs	r2, #7
 8009e64:	4013      	ands	r3, r2
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	1e5a      	subs	r2, r3, #1
 8009e6a:	4193      	sbcs	r3, r2
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	18cb      	adds	r3, r1, r3
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	1d3b      	adds	r3, r7, #4
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	085b      	lsrs	r3, r3, #1
 8009e78:	b2d9      	uxtb	r1, r3
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	18fb      	adds	r3, r7, r3
 8009e7e:	434a      	muls	r2, r1
 8009e80:	701a      	strb	r2, [r3, #0]
    chr1 = chr - ' ';  //计算偏移后的值
 8009e82:	2309      	movs	r3, #9
 8009e84:	18fb      	adds	r3, r7, r3
 8009e86:	1d7a      	adds	r2, r7, #5
 8009e88:	7812      	ldrb	r2, [r2, #0]
 8009e8a:	3a20      	subs	r2, #32
 8009e8c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size2; i++) {
 8009e8e:	230f      	movs	r3, #15
 8009e90:	18fb      	adds	r3, r7, r3
 8009e92:	2200      	movs	r2, #0
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	e08d      	b.n	8009fb4 <OLED_ShowChar+0x1ac>
        if (size1 == 8) { temp = asc2_0806[chr1][i]; } //调用0806字体
 8009e98:	1d3b      	adds	r3, r7, #4
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b08      	cmp	r3, #8
 8009e9e:	d110      	bne.n	8009ec2 <OLED_ShowChar+0xba>
 8009ea0:	2309      	movs	r3, #9
 8009ea2:	18fb      	adds	r3, r7, r3
 8009ea4:	781a      	ldrb	r2, [r3, #0]
 8009ea6:	230f      	movs	r3, #15
 8009ea8:	18fb      	adds	r3, r7, r3
 8009eaa:	7818      	ldrb	r0, [r3, #0]
 8009eac:	230d      	movs	r3, #13
 8009eae:	18f9      	adds	r1, r7, r3
 8009eb0:	4c47      	ldr	r4, [pc, #284]	; (8009fd0 <OLED_ShowChar+0x1c8>)
 8009eb2:	0013      	movs	r3, r2
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	189b      	adds	r3, r3, r2
 8009eb8:	005b      	lsls	r3, r3, #1
 8009eba:	18e3      	adds	r3, r4, r3
 8009ebc:	5c1b      	ldrb	r3, [r3, r0]
 8009ebe:	700b      	strb	r3, [r1, #0]
 8009ec0:	e014      	b.n	8009eec <OLED_ShowChar+0xe4>
        else if (size1 == 12) { temp = asc2_1206[chr1][i]; } //调用1206字体
 8009ec2:	1d3b      	adds	r3, r7, #4
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	2b0c      	cmp	r3, #12
 8009ec8:	d000      	beq.n	8009ecc <OLED_ShowChar+0xc4>
 8009eca:	e07d      	b.n	8009fc8 <OLED_ShowChar+0x1c0>
 8009ecc:	2309      	movs	r3, #9
 8009ece:	18fb      	adds	r3, r7, r3
 8009ed0:	781a      	ldrb	r2, [r3, #0]
 8009ed2:	230f      	movs	r3, #15
 8009ed4:	18fb      	adds	r3, r7, r3
 8009ed6:	7818      	ldrb	r0, [r3, #0]
 8009ed8:	230d      	movs	r3, #13
 8009eda:	18f9      	adds	r1, r7, r3
 8009edc:	4c3d      	ldr	r4, [pc, #244]	; (8009fd4 <OLED_ShowChar+0x1cc>)
 8009ede:	0013      	movs	r3, r2
 8009ee0:	005b      	lsls	r3, r3, #1
 8009ee2:	189b      	adds	r3, r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	18e3      	adds	r3, r4, r3
 8009ee8:	5c1b      	ldrb	r3, [r3, r0]
 8009eea:	700b      	strb	r3, [r1, #0]
        else return;
        for (m = 0; m < 8; m++) {
 8009eec:	230e      	movs	r3, #14
 8009eee:	18fb      	adds	r3, r7, r3
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	701a      	strb	r2, [r3, #0]
 8009ef4:	e02f      	b.n	8009f56 <OLED_ShowChar+0x14e>
            if (temp & 0x01)OLED_DrawPoint(x, y, mode);
 8009ef6:	230d      	movs	r3, #13
 8009ef8:	18fb      	adds	r3, r7, r3
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	2201      	movs	r2, #1
 8009efe:	4013      	ands	r3, r2
 8009f00:	d00a      	beq.n	8009f18 <OLED_ShowChar+0x110>
 8009f02:	2320      	movs	r3, #32
 8009f04:	18fb      	adds	r3, r7, r3
 8009f06:	781a      	ldrb	r2, [r3, #0]
 8009f08:	1dbb      	adds	r3, r7, #6
 8009f0a:	7819      	ldrb	r1, [r3, #0]
 8009f0c:	1dfb      	adds	r3, r7, #7
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	0018      	movs	r0, r3
 8009f12:	f7ff fe5b 	bl	8009bcc <OLED_DrawPoint>
 8009f16:	e00d      	b.n	8009f34 <OLED_ShowChar+0x12c>
            else OLED_DrawPoint(x, y, !mode);
 8009f18:	2320      	movs	r3, #32
 8009f1a:	18fb      	adds	r3, r7, r3
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	425a      	negs	r2, r3
 8009f20:	4153      	adcs	r3, r2
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	001a      	movs	r2, r3
 8009f26:	1dbb      	adds	r3, r7, #6
 8009f28:	7819      	ldrb	r1, [r3, #0]
 8009f2a:	1dfb      	adds	r3, r7, #7
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	0018      	movs	r0, r3
 8009f30:	f7ff fe4c 	bl	8009bcc <OLED_DrawPoint>
            temp >>= 1;
 8009f34:	220d      	movs	r2, #13
 8009f36:	18bb      	adds	r3, r7, r2
 8009f38:	18ba      	adds	r2, r7, r2
 8009f3a:	7812      	ldrb	r2, [r2, #0]
 8009f3c:	0852      	lsrs	r2, r2, #1
 8009f3e:	701a      	strb	r2, [r3, #0]
            y++;
 8009f40:	1dbb      	adds	r3, r7, #6
 8009f42:	781a      	ldrb	r2, [r3, #0]
 8009f44:	1dbb      	adds	r3, r7, #6
 8009f46:	3201      	adds	r2, #1
 8009f48:	701a      	strb	r2, [r3, #0]
        for (m = 0; m < 8; m++) {
 8009f4a:	210e      	movs	r1, #14
 8009f4c:	187b      	adds	r3, r7, r1
 8009f4e:	781a      	ldrb	r2, [r3, #0]
 8009f50:	187b      	adds	r3, r7, r1
 8009f52:	3201      	adds	r2, #1
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	230e      	movs	r3, #14
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b07      	cmp	r3, #7
 8009f5e:	d9ca      	bls.n	8009ef6 <OLED_ShowChar+0xee>
        }
        x++;
 8009f60:	1dfb      	adds	r3, r7, #7
 8009f62:	781a      	ldrb	r2, [r3, #0]
 8009f64:	1dfb      	adds	r3, r7, #7
 8009f66:	3201      	adds	r2, #1
 8009f68:	701a      	strb	r2, [r3, #0]
        if ((size1 != 8) && ((x - x0) == size1 / 2)) {
 8009f6a:	1d3b      	adds	r3, r7, #4
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b08      	cmp	r3, #8
 8009f70:	d015      	beq.n	8009f9e <OLED_ShowChar+0x196>
 8009f72:	1dfb      	adds	r3, r7, #7
 8009f74:	781a      	ldrb	r2, [r3, #0]
 8009f76:	210a      	movs	r1, #10
 8009f78:	187b      	adds	r3, r7, r1
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	1d3a      	adds	r2, r7, #4
 8009f80:	7812      	ldrb	r2, [r2, #0]
 8009f82:	0852      	lsrs	r2, r2, #1
 8009f84:	b2d2      	uxtb	r2, r2
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d109      	bne.n	8009f9e <OLED_ShowChar+0x196>
            x = x0;
 8009f8a:	1dfb      	adds	r3, r7, #7
 8009f8c:	187a      	adds	r2, r7, r1
 8009f8e:	7812      	ldrb	r2, [r2, #0]
 8009f90:	701a      	strb	r2, [r3, #0]
            y0 = y0 + 8;
 8009f92:	220b      	movs	r2, #11
 8009f94:	18bb      	adds	r3, r7, r2
 8009f96:	18ba      	adds	r2, r7, r2
 8009f98:	7812      	ldrb	r2, [r2, #0]
 8009f9a:	3208      	adds	r2, #8
 8009f9c:	701a      	strb	r2, [r3, #0]
        }
        y = y0;
 8009f9e:	1dbb      	adds	r3, r7, #6
 8009fa0:	220b      	movs	r2, #11
 8009fa2:	18ba      	adds	r2, r7, r2
 8009fa4:	7812      	ldrb	r2, [r2, #0]
 8009fa6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size2; i++) {
 8009fa8:	210f      	movs	r1, #15
 8009faa:	187b      	adds	r3, r7, r1
 8009fac:	781a      	ldrb	r2, [r3, #0]
 8009fae:	187b      	adds	r3, r7, r1
 8009fb0:	3201      	adds	r2, #1
 8009fb2:	701a      	strb	r2, [r3, #0]
 8009fb4:	230f      	movs	r3, #15
 8009fb6:	18fa      	adds	r2, r7, r3
 8009fb8:	230c      	movs	r3, #12
 8009fba:	18fb      	adds	r3, r7, r3
 8009fbc:	7812      	ldrb	r2, [r2, #0]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d200      	bcs.n	8009fc6 <OLED_ShowChar+0x1be>
 8009fc4:	e768      	b.n	8009e98 <OLED_ShowChar+0x90>
 8009fc6:	e000      	b.n	8009fca <OLED_ShowChar+0x1c2>
        else return;
 8009fc8:	46c0      	nop			; (mov r8, r8)
    }
}
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	b004      	add	sp, #16
 8009fce:	bdb0      	pop	{r4, r5, r7, pc}
 8009fd0:	0800c21c 	.word	0x0800c21c
 8009fd4:	0800c450 	.word	0x0800c450

08009fd8 <OLED_ShowString>:
//显示字符串
//x,y:起点坐标
//size1:字体大小
//*chr:字符串起始地址
//mode:0,反色显示;1,正常显示
void OLED_ShowString(u8 x, u8 y, const char *chr, u8 size1, u8 mode) {
 8009fd8:	b590      	push	{r4, r7, lr}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af02      	add	r7, sp, #8
 8009fde:	0004      	movs	r4, r0
 8009fe0:	0008      	movs	r0, r1
 8009fe2:	603a      	str	r2, [r7, #0]
 8009fe4:	0019      	movs	r1, r3
 8009fe6:	1dfb      	adds	r3, r7, #7
 8009fe8:	1c22      	adds	r2, r4, #0
 8009fea:	701a      	strb	r2, [r3, #0]
 8009fec:	1dbb      	adds	r3, r7, #6
 8009fee:	1c02      	adds	r2, r0, #0
 8009ff0:	701a      	strb	r2, [r3, #0]
 8009ff2:	1d7b      	adds	r3, r7, #5
 8009ff4:	1c0a      	adds	r2, r1, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
    while ((*chr >= ' ') && (*chr <= '~'))//判断是不是非法字符!
 8009ff8:	e024      	b.n	800a044 <OLED_ShowString+0x6c>
    {
        OLED_ShowChar(x, y, *chr, size1, mode);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	781a      	ldrb	r2, [r3, #0]
 8009ffe:	1d7b      	adds	r3, r7, #5
 800a000:	781c      	ldrb	r4, [r3, #0]
 800a002:	1dbb      	adds	r3, r7, #6
 800a004:	7819      	ldrb	r1, [r3, #0]
 800a006:	1dfb      	adds	r3, r7, #7
 800a008:	7818      	ldrb	r0, [r3, #0]
 800a00a:	2318      	movs	r3, #24
 800a00c:	18fb      	adds	r3, r7, r3
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	0023      	movs	r3, r4
 800a014:	f7ff fef8 	bl	8009e08 <OLED_ShowChar>
        if (size1 == 8)x += 6;
 800a018:	1d7b      	adds	r3, r7, #5
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b08      	cmp	r3, #8
 800a01e:	d105      	bne.n	800a02c <OLED_ShowString+0x54>
 800a020:	1dfb      	adds	r3, r7, #7
 800a022:	1dfa      	adds	r2, r7, #7
 800a024:	7812      	ldrb	r2, [r2, #0]
 800a026:	3206      	adds	r2, #6
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	e008      	b.n	800a03e <OLED_ShowString+0x66>
        else x += size1 / 2;
 800a02c:	1d7b      	adds	r3, r7, #5
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	085b      	lsrs	r3, r3, #1
 800a032:	b2d9      	uxtb	r1, r3
 800a034:	1dfb      	adds	r3, r7, #7
 800a036:	1dfa      	adds	r2, r7, #7
 800a038:	7812      	ldrb	r2, [r2, #0]
 800a03a:	188a      	adds	r2, r1, r2
 800a03c:	701a      	strb	r2, [r3, #0]
        chr++;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	3301      	adds	r3, #1
 800a042:	603b      	str	r3, [r7, #0]
    while ((*chr >= ' ') && (*chr <= '~'))//判断是不是非法字符!
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	2b1f      	cmp	r3, #31
 800a04a:	d903      	bls.n	800a054 <OLED_ShowString+0x7c>
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b7e      	cmp	r3, #126	; 0x7e
 800a052:	d9d2      	bls.n	8009ffa <OLED_ShowString+0x22>
    }
}
 800a054:	46c0      	nop			; (mov r8, r8)
 800a056:	46bd      	mov	sp, r7
 800a058:	b003      	add	sp, #12
 800a05a:	bd90      	pop	{r4, r7, pc}

0800a05c <OLED_ShowChinese>:
//显示汉字
//x,y:起点坐标
//num:汉字对应的序号
//mode:0,反色显示;1,正常显示
void OLED_ShowChinese(u8 x,u8 y,u8 num,u8 size1,u8 mode)
{
 800a05c:	b5b0      	push	{r4, r5, r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	0005      	movs	r5, r0
 800a064:	000c      	movs	r4, r1
 800a066:	0010      	movs	r0, r2
 800a068:	0019      	movs	r1, r3
 800a06a:	1dfb      	adds	r3, r7, #7
 800a06c:	1c2a      	adds	r2, r5, #0
 800a06e:	701a      	strb	r2, [r3, #0]
 800a070:	1dbb      	adds	r3, r7, #6
 800a072:	1c22      	adds	r2, r4, #0
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	1d7b      	adds	r3, r7, #5
 800a078:	1c02      	adds	r2, r0, #0
 800a07a:	701a      	strb	r2, [r3, #0]
 800a07c:	1d3b      	adds	r3, r7, #4
 800a07e:	1c0a      	adds	r2, r1, #0
 800a080:	701a      	strb	r2, [r3, #0]
	u8 m,temp;
	u8 x0=x,y0=y;
 800a082:	230f      	movs	r3, #15
 800a084:	18fb      	adds	r3, r7, r3
 800a086:	1dfa      	adds	r2, r7, #7
 800a088:	7812      	ldrb	r2, [r2, #0]
 800a08a:	701a      	strb	r2, [r3, #0]
 800a08c:	2315      	movs	r3, #21
 800a08e:	18fb      	adds	r3, r7, r3
 800a090:	1dba      	adds	r2, r7, #6
 800a092:	7812      	ldrb	r2, [r2, #0]
 800a094:	701a      	strb	r2, [r3, #0]
	u16 i,size3=(size1/8+((size1%8)?1:0))*size1;  //得到字体一个字符对应点阵集所占的字节数
 800a096:	1d3b      	adds	r3, r7, #4
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	08db      	lsrs	r3, r3, #3
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	0019      	movs	r1, r3
 800a0a0:	1d3b      	adds	r3, r7, #4
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2207      	movs	r2, #7
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	1e5a      	subs	r2, r3, #1
 800a0ac:	4193      	sbcs	r3, r2
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	18cb      	adds	r3, r1, r3
 800a0b2:	1d3a      	adds	r2, r7, #4
 800a0b4:	7812      	ldrb	r2, [r2, #0]
 800a0b6:	4353      	muls	r3, r2
 800a0b8:	60bb      	str	r3, [r7, #8]
	for(i=0;i<size3;i++)
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	613b      	str	r3, [r7, #16]
 800a0be:	e069      	b.n	800a194 <OLED_ShowChinese+0x138>
	{
		if(size1==16)
 800a0c0:	1d3b      	adds	r3, r7, #4
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b10      	cmp	r3, #16
 800a0c6:	d16a      	bne.n	800a19e <OLED_ShowChinese+0x142>
				{temp=Hzk1[num][i];}//调用16*16字体
 800a0c8:	1d7b      	adds	r3, r7, #5
 800a0ca:	781a      	ldrb	r2, [r3, #0]
 800a0cc:	2316      	movs	r3, #22
 800a0ce:	18fb      	adds	r3, r7, r3
 800a0d0:	4935      	ldr	r1, [pc, #212]	; (800a1a8 <OLED_ShowChinese+0x14c>)
 800a0d2:	0152      	lsls	r2, r2, #5
 800a0d4:	1889      	adds	r1, r1, r2
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	188a      	adds	r2, r1, r2
 800a0da:	7812      	ldrb	r2, [r2, #0]
 800a0dc:	701a      	strb	r2, [r3, #0]
//		else if(size1==32)
//				{temp=Hzk3[num][i];}//调用32*32字体
//		else if(size1==64)
//				{temp=Hzk4[num][i];}//调用64*64字体
		else return;
		for(m=0;m<8;m++)
 800a0de:	2317      	movs	r3, #23
 800a0e0:	18fb      	adds	r3, r7, r3
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	701a      	strb	r2, [r3, #0]
 800a0e6:	e02f      	b.n	800a148 <OLED_ShowChinese+0xec>
		{
			if(temp&0x01)OLED_DrawPoint(x,y,mode);
 800a0e8:	2316      	movs	r3, #22
 800a0ea:	18fb      	adds	r3, r7, r3
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	d00a      	beq.n	800a10a <OLED_ShowChinese+0xae>
 800a0f4:	2328      	movs	r3, #40	; 0x28
 800a0f6:	18fb      	adds	r3, r7, r3
 800a0f8:	781a      	ldrb	r2, [r3, #0]
 800a0fa:	1dbb      	adds	r3, r7, #6
 800a0fc:	7819      	ldrb	r1, [r3, #0]
 800a0fe:	1dfb      	adds	r3, r7, #7
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	0018      	movs	r0, r3
 800a104:	f7ff fd62 	bl	8009bcc <OLED_DrawPoint>
 800a108:	e00d      	b.n	800a126 <OLED_ShowChinese+0xca>
			else OLED_DrawPoint(x,y,!mode);
 800a10a:	2328      	movs	r3, #40	; 0x28
 800a10c:	18fb      	adds	r3, r7, r3
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	425a      	negs	r2, r3
 800a112:	4153      	adcs	r3, r2
 800a114:	b2db      	uxtb	r3, r3
 800a116:	001a      	movs	r2, r3
 800a118:	1dbb      	adds	r3, r7, #6
 800a11a:	7819      	ldrb	r1, [r3, #0]
 800a11c:	1dfb      	adds	r3, r7, #7
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	0018      	movs	r0, r3
 800a122:	f7ff fd53 	bl	8009bcc <OLED_DrawPoint>
			temp>>=1;
 800a126:	2216      	movs	r2, #22
 800a128:	18bb      	adds	r3, r7, r2
 800a12a:	18ba      	adds	r2, r7, r2
 800a12c:	7812      	ldrb	r2, [r2, #0]
 800a12e:	0852      	lsrs	r2, r2, #1
 800a130:	701a      	strb	r2, [r3, #0]
			y++;
 800a132:	1dbb      	adds	r3, r7, #6
 800a134:	781a      	ldrb	r2, [r3, #0]
 800a136:	1dbb      	adds	r3, r7, #6
 800a138:	3201      	adds	r2, #1
 800a13a:	701a      	strb	r2, [r3, #0]
		for(m=0;m<8;m++)
 800a13c:	2117      	movs	r1, #23
 800a13e:	187b      	adds	r3, r7, r1
 800a140:	781a      	ldrb	r2, [r3, #0]
 800a142:	187b      	adds	r3, r7, r1
 800a144:	3201      	adds	r2, #1
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	2317      	movs	r3, #23
 800a14a:	18fb      	adds	r3, r7, r3
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b07      	cmp	r3, #7
 800a150:	d9ca      	bls.n	800a0e8 <OLED_ShowChinese+0x8c>
		}
		x++;
 800a152:	1dfb      	adds	r3, r7, #7
 800a154:	781a      	ldrb	r2, [r3, #0]
 800a156:	1dfb      	adds	r3, r7, #7
 800a158:	3201      	adds	r2, #1
 800a15a:	701a      	strb	r2, [r3, #0]
		if((x-x0)==size1)
 800a15c:	1dfb      	adds	r3, r7, #7
 800a15e:	781a      	ldrb	r2, [r3, #0]
 800a160:	210f      	movs	r1, #15
 800a162:	187b      	adds	r3, r7, r1
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	1ad2      	subs	r2, r2, r3
 800a168:	1d3b      	adds	r3, r7, #4
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d109      	bne.n	800a184 <OLED_ShowChinese+0x128>
		{x=x0;y0=y0+8;}
 800a170:	1dfb      	adds	r3, r7, #7
 800a172:	187a      	adds	r2, r7, r1
 800a174:	7812      	ldrb	r2, [r2, #0]
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	2215      	movs	r2, #21
 800a17a:	18bb      	adds	r3, r7, r2
 800a17c:	18ba      	adds	r2, r7, r2
 800a17e:	7812      	ldrb	r2, [r2, #0]
 800a180:	3208      	adds	r2, #8
 800a182:	701a      	strb	r2, [r3, #0]
		y=y0;
 800a184:	1dbb      	adds	r3, r7, #6
 800a186:	2215      	movs	r2, #21
 800a188:	18ba      	adds	r2, r7, r2
 800a18a:	7812      	ldrb	r2, [r2, #0]
 800a18c:	701a      	strb	r2, [r3, #0]
	for(i=0;i<size3;i++)
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3301      	adds	r3, #1
 800a192:	613b      	str	r3, [r7, #16]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d391      	bcc.n	800a0c0 <OLED_ShowChinese+0x64>
 800a19c:	e000      	b.n	800a1a0 <OLED_ShowChinese+0x144>
		else return;
 800a19e:	46c0      	nop			; (mov r8, r8)
	}
}
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	b006      	add	sp, #24
 800a1a4:	bdb0      	pop	{r4, r5, r7, pc}
 800a1a6:	46c0      	nop			; (mov r8, r8)
 800a1a8:	0800c8c4 	.word	0x0800c8c4

0800a1ac <OLED_Init>:
        }
    }
}

//OLED的初始化
void OLED_Init(void) {
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
    OLED_RES_Clr();
 800a1b0:	4b37      	ldr	r3, [pc, #220]	; (800a290 <OLED_Init+0xe4>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2140      	movs	r1, #64	; 0x40
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f7f9 fe97 	bl	8003eea <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800a1bc:	2064      	movs	r0, #100	; 0x64
 800a1be:	f7f7 ff9f 	bl	8002100 <HAL_Delay>
    OLED_RES_Set();
 800a1c2:	4b33      	ldr	r3, [pc, #204]	; (800a290 <OLED_Init+0xe4>)
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	2140      	movs	r1, #64	; 0x40
 800a1c8:	0018      	movs	r0, r3
 800a1ca:	f7f9 fe8e 	bl	8003eea <HAL_GPIO_WritePin>

    OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	20ae      	movs	r0, #174	; 0xae
 800a1d2:	f7ff fc5b 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0xa8, OLED_CMD); // Set Multiplex Ration
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	20a8      	movs	r0, #168	; 0xa8
 800a1da:	f7ff fc57 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0x7f, OLED_CMD);
 800a1de:	2100      	movs	r1, #0
 800a1e0:	207f      	movs	r0, #127	; 0x7f
 800a1e2:	f7ff fc53 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0xd5, OLED_CMD); // Set Frame Frequency
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	20d5      	movs	r0, #213	; 0xd5
 800a1ea:	f7ff fc4f 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0x50, OLED_CMD); // 104Hz
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	2050      	movs	r0, #80	; 0x50
 800a1f2:	f7ff fc4b 	bl	8009a8c <OLED_WR_Byte>
    if (USE_HORIZONTAL == 180) {
        OLED_WR_Byte(0xC8, OLED_CMD);
        OLED_WR_Byte(0xA1, OLED_CMD);
    } else {
        OLED_WR_Byte(0xC0, OLED_CMD);
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	20c0      	movs	r0, #192	; 0xc0
 800a1fa:	f7ff fc47 	bl	8009a8c <OLED_WR_Byte>
        OLED_WR_Byte(0xA0, OLED_CMD);
 800a1fe:	2100      	movs	r1, #0
 800a200:	20a0      	movs	r0, #160	; 0xa0
 800a202:	f7ff fc43 	bl	8009a8c <OLED_WR_Byte>
    }
    OLED_WR_Byte(0xd3, OLED_CMD); // Set Display Offset
 800a206:	2100      	movs	r1, #0
 800a208:	20d3      	movs	r0, #211	; 0xd3
 800a20a:	f7ff fc3f 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0x00, OLED_CMD);
 800a20e:	2100      	movs	r1, #0
 800a210:	2000      	movs	r0, #0
 800a212:	f7ff fc3b 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0xdc, OLED_CMD); // Set Display Start Line
 800a216:	2100      	movs	r1, #0
 800a218:	20dc      	movs	r0, #220	; 0xdc
 800a21a:	f7ff fc37 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0x00, OLED_CMD);
 800a21e:	2100      	movs	r1, #0
 800a220:	2000      	movs	r0, #0
 800a222:	f7ff fc33 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0x20, OLED_CMD); // Set Page Addressing Mode
 800a226:	2100      	movs	r1, #0
 800a228:	2020      	movs	r0, #32
 800a22a:	f7ff fc2f 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0x81, OLED_CMD); // Set Contrast Control
 800a22e:	2100      	movs	r1, #0
 800a230:	2081      	movs	r0, #129	; 0x81
 800a232:	f7ff fc2b 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0xdf, OLED_CMD);
 800a236:	2100      	movs	r1, #0
 800a238:	20df      	movs	r0, #223	; 0xdf
 800a23a:	f7ff fc27 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0xa4, OLED_CMD); // Set Entire Display OFF/ON
 800a23e:	2100      	movs	r1, #0
 800a240:	20a4      	movs	r0, #164	; 0xa4
 800a242:	f7ff fc23 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0xa6, OLED_CMD); // Set Normal/Reverse Display
 800a246:	2100      	movs	r1, #0
 800a248:	20a6      	movs	r0, #166	; 0xa6
 800a24a:	f7ff fc1f 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0xad, OLED_CMD); // Set External VPP
 800a24e:	2100      	movs	r1, #0
 800a250:	20ad      	movs	r0, #173	; 0xad
 800a252:	f7ff fc1b 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0x8a, OLED_CMD);
 800a256:	2100      	movs	r1, #0
 800a258:	208a      	movs	r0, #138	; 0x8a
 800a25a:	f7ff fc17 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0xd9, OLED_CMD); // Set Phase Leghth
 800a25e:	2100      	movs	r1, #0
 800a260:	20d9      	movs	r0, #217	; 0xd9
 800a262:	f7ff fc13 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0x22, OLED_CMD);
 800a266:	2100      	movs	r1, #0
 800a268:	2022      	movs	r0, #34	; 0x22
 800a26a:	f7ff fc0f 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0xdb, OLED_CMD); // Set Vcomh voltage
 800a26e:	2100      	movs	r1, #0
 800a270:	20db      	movs	r0, #219	; 0xdb
 800a272:	f7ff fc0b 	bl	8009a8c <OLED_WR_Byte>
    OLED_WR_Byte(0x35, OLED_CMD);
 800a276:	2100      	movs	r1, #0
 800a278:	2035      	movs	r0, #53	; 0x35
 800a27a:	f7ff fc07 	bl	8009a8c <OLED_WR_Byte>
    OLED_Clear();
 800a27e:	f7ff fc77 	bl	8009b70 <OLED_Clear>
    OLED_WR_Byte(0xAF, OLED_CMD); // Display ON
 800a282:	2100      	movs	r1, #0
 800a284:	20af      	movs	r0, #175	; 0xaf
 800a286:	f7ff fc01 	bl	8009a8c <OLED_WR_Byte>
}
 800a28a:	46c0      	nop			; (mov r8, r8)
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	50000400 	.word	0x50000400

0800a294 <ShowLogo>:
#define APP_SIZE 2

App *app[APP_SIZE];
uint8_t app_p = 0;

static void ShowLogo(void) {
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af02      	add	r7, sp, #8
    OLED_Clear();
 800a29a:	f7ff fc69 	bl	8009b70 <OLED_Clear>
	OLED_ShowChinese(40,20,0,16,1);//硬
 800a29e:	2301      	movs	r3, #1
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	2310      	movs	r3, #16
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2114      	movs	r1, #20
 800a2a8:	2028      	movs	r0, #40	; 0x28
 800a2aa:	f7ff fed7 	bl	800a05c <OLED_ShowChinese>
	OLED_ShowChinese(56,20,1,16,1);//禾
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	2310      	movs	r3, #16
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	2114      	movs	r1, #20
 800a2b8:	2038      	movs	r0, #56	; 0x38
 800a2ba:	f7ff fecf 	bl	800a05c <OLED_ShowChinese>
	OLED_ShowChinese(72,20,2,16,1);//学
 800a2be:	2301      	movs	r3, #1
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	2310      	movs	r3, #16
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	2114      	movs	r1, #20
 800a2c8:	2048      	movs	r0, #72	; 0x48
 800a2ca:	f7ff fec7 	bl	800a05c <OLED_ShowChinese>
	OLED_ShowChinese(88,20,3,16,1);//堂
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	2310      	movs	r3, #16
 800a2d4:	2203      	movs	r2, #3
 800a2d6:	2114      	movs	r1, #20
 800a2d8:	2058      	movs	r0, #88	; 0x58
 800a2da:	f7ff febf 	bl	800a05c <OLED_ShowChinese>


	OLED_ShowChinese(32,40,4,16,1);//寒
 800a2de:	2301      	movs	r3, #1
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	2310      	movs	r3, #16
 800a2e4:	2204      	movs	r2, #4
 800a2e6:	2128      	movs	r1, #40	; 0x28
 800a2e8:	2020      	movs	r0, #32
 800a2ea:	f7ff feb7 	bl	800a05c <OLED_ShowChinese>
	OLED_ShowChinese(48,40,5,16,1);//假
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	2310      	movs	r3, #16
 800a2f4:	2205      	movs	r2, #5
 800a2f6:	2128      	movs	r1, #40	; 0x28
 800a2f8:	2030      	movs	r0, #48	; 0x30
 800a2fa:	f7ff feaf 	bl	800a05c <OLED_ShowChinese>
	OLED_ShowChinese(64,40,6,16,1);//一
 800a2fe:	2301      	movs	r3, #1
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	2310      	movs	r3, #16
 800a304:	2206      	movs	r2, #6
 800a306:	2128      	movs	r1, #40	; 0x28
 800a308:	2040      	movs	r0, #64	; 0x40
 800a30a:	f7ff fea7 	bl	800a05c <OLED_ShowChinese>
	OLED_ShowChinese(80,40,7,16,1);//起
 800a30e:	2301      	movs	r3, #1
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	2310      	movs	r3, #16
 800a314:	2207      	movs	r2, #7
 800a316:	2128      	movs	r1, #40	; 0x28
 800a318:	2050      	movs	r0, #80	; 0x50
 800a31a:	f7ff fe9f 	bl	800a05c <OLED_ShowChinese>
	OLED_ShowChinese(96,40,8,16,1);//练
 800a31e:	2301      	movs	r3, #1
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	2310      	movs	r3, #16
 800a324:	2208      	movs	r2, #8
 800a326:	2128      	movs	r1, #40	; 0x28
 800a328:	2060      	movs	r0, #96	; 0x60
 800a32a:	f7ff fe97 	bl	800a05c <OLED_ShowChinese>

    OLED_ShowString(10, 70, "Dual channel scope", 12, 1);
 800a32e:	4a0a      	ldr	r2, [pc, #40]	; (800a358 <ShowLogo+0xc4>)
 800a330:	2301      	movs	r3, #1
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	230c      	movs	r3, #12
 800a336:	2146      	movs	r1, #70	; 0x46
 800a338:	200a      	movs	r0, #10
 800a33a:	f7ff fe4d 	bl	8009fd8 <OLED_ShowString>
    OLED_ShowString(10, 90, "Design by Beilever", 12, 1);
 800a33e:	4a07      	ldr	r2, [pc, #28]	; (800a35c <ShowLogo+0xc8>)
 800a340:	2301      	movs	r3, #1
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	230c      	movs	r3, #12
 800a346:	215a      	movs	r1, #90	; 0x5a
 800a348:	200a      	movs	r0, #10
 800a34a:	f7ff fe45 	bl	8009fd8 <OLED_ShowString>
    //OLED_ShowString(45, 73, "Vvvvv.4", 8, 1);
    OLED_Refresh();
 800a34e:	f7ff fbcd 	bl	8009aec <OLED_Refresh>
}
 800a352:	46c0      	nop			; (mov r8, r8)
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	0800bf74 	.word	0x0800bf74
 800a35c:	0800bf88 	.word	0x0800bf88

0800a360 <Start_Init>:

void Start_Init(void) {
 800a360:	b580      	push	{r7, lr}
 800a362:	af00      	add	r7, sp, #0
    HAL_ADCEx_Calibration_Start(&hadc1); // 校准ADC
 800a364:	4b14      	ldr	r3, [pc, #80]	; (800a3b8 <Start_Init+0x58>)
 800a366:	0018      	movs	r0, r3
 800a368:	f7f9 f80a 	bl	8003380 <HAL_ADCEx_Calibration_Start>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Bias1 = 1.1V
 800a36c:	4b13      	ldr	r3, [pc, #76]	; (800a3bc <Start_Init+0x5c>)
 800a36e:	2100      	movs	r1, #0
 800a370:	0018      	movs	r0, r3
 800a372:	f7fb f9b3 	bl	80056dc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1); // Bias2 = 1.1V
 800a376:	4b12      	ldr	r3, [pc, #72]	; (800a3c0 <Start_Init+0x60>)
 800a378:	2100      	movs	r1, #0
 800a37a:	0018      	movs	r0, r3
 800a37c:	f7fb f9ae 	bl	80056dc <HAL_TIM_PWM_Start>

    OLED_Init();
 800a380:	f7ff ff14 	bl	800a1ac <OLED_Init>
    Key_Init();
 800a384:	f7ff fb20 	bl	80099c8 <Key_Init>

    ShowLogo();
 800a388:	f7ff ff84 	bl	800a294 <ShowLogo>
    HAL_Delay(2000);
 800a38c:	23fa      	movs	r3, #250	; 0xfa
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	0018      	movs	r0, r3
 800a392:	f7f7 feb5 	bl	8002100 <HAL_Delay>


    app[0] = &Scope;
 800a396:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <Start_Init+0x64>)
 800a398:	4a0b      	ldr	r2, [pc, #44]	; (800a3c8 <Start_Init+0x68>)
 800a39a:	601a      	str	r2, [r3, #0]
    app[1] = &Spectrum;
 800a39c:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <Start_Init+0x64>)
 800a39e:	4a0b      	ldr	r2, [pc, #44]	; (800a3cc <Start_Init+0x6c>)
 800a3a0:	605a      	str	r2, [r3, #4]
    app[app_p]->Init();
 800a3a2:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <Start_Init+0x70>)
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	001a      	movs	r2, r3
 800a3a8:	4b06      	ldr	r3, [pc, #24]	; (800a3c4 <Start_Init+0x64>)
 800a3aa:	0092      	lsls	r2, r2, #2
 800a3ac:	58d3      	ldr	r3, [r2, r3]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4798      	blx	r3

    //Buzzer_Beep(1);
}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	200001c8 	.word	0x200001c8
 800a3bc:	2000041c 	.word	0x2000041c
 800a3c0:	200003d0 	.word	0x200003d0
 800a3c4:	20000c78 	.word	0x20000c78
 800a3c8:	2000000c 	.word	0x2000000c
 800a3cc:	20000020 	.word	0x20000020
 800a3d0:	200001bc 	.word	0x200001bc

0800a3d4 <Main_Loop>:

void Main_Loop(void) {
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0
    if (app[app_p]->Loop())
 800a3d8:	4b15      	ldr	r3, [pc, #84]	; (800a430 <Main_Loop+0x5c>)
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	001a      	movs	r2, r3
 800a3de:	4b15      	ldr	r3, [pc, #84]	; (800a434 <Main_Loop+0x60>)
 800a3e0:	0092      	lsls	r2, r2, #2
 800a3e2:	58d3      	ldr	r3, [r2, r3]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	4798      	blx	r3
 800a3e8:	1e03      	subs	r3, r0, #0
 800a3ea:	d01d      	beq.n	800a428 <Main_Loop+0x54>
    {
        app[app_p]->DeInit();
 800a3ec:	4b10      	ldr	r3, [pc, #64]	; (800a430 <Main_Loop+0x5c>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	001a      	movs	r2, r3
 800a3f2:	4b10      	ldr	r3, [pc, #64]	; (800a434 <Main_Loop+0x60>)
 800a3f4:	0092      	lsls	r2, r2, #2
 800a3f6:	58d3      	ldr	r3, [r2, r3]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	4798      	blx	r3
        app_p = (app_p + 1) % APP_SIZE;
 800a3fc:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <Main_Loop+0x5c>)
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	3301      	adds	r3, #1
 800a402:	4a0d      	ldr	r2, [pc, #52]	; (800a438 <Main_Loop+0x64>)
 800a404:	4013      	ands	r3, r2
 800a406:	d504      	bpl.n	800a412 <Main_Loop+0x3e>
 800a408:	3b01      	subs	r3, #1
 800a40a:	2202      	movs	r2, #2
 800a40c:	4252      	negs	r2, r2
 800a40e:	4313      	orrs	r3, r2
 800a410:	3301      	adds	r3, #1
 800a412:	b2da      	uxtb	r2, r3
 800a414:	4b06      	ldr	r3, [pc, #24]	; (800a430 <Main_Loop+0x5c>)
 800a416:	701a      	strb	r2, [r3, #0]
        app[app_p]->Init();
 800a418:	4b05      	ldr	r3, [pc, #20]	; (800a430 <Main_Loop+0x5c>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	001a      	movs	r2, r3
 800a41e:	4b05      	ldr	r3, [pc, #20]	; (800a434 <Main_Loop+0x60>)
 800a420:	0092      	lsls	r2, r2, #2
 800a422:	58d3      	ldr	r3, [r2, r3]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4798      	blx	r3
    }
}
 800a428:	46c0      	nop			; (mov r8, r8)
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	46c0      	nop			; (mov r8, r8)
 800a430:	200001bc 	.word	0x200001bc
 800a434:	20000c78 	.word	0x20000c78
 800a438:	80000001 	.word	0x80000001

0800a43c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
    app[app_p]->ADC_ConvCpltCallback(hadc);
 800a444:	4b06      	ldr	r3, [pc, #24]	; (800a460 <HAL_ADC_ConvCpltCallback+0x24>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	001a      	movs	r2, r3
 800a44a:	4b06      	ldr	r3, [pc, #24]	; (800a464 <HAL_ADC_ConvCpltCallback+0x28>)
 800a44c:	0092      	lsls	r2, r2, #2
 800a44e:	58d3      	ldr	r3, [r2, r3]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	0010      	movs	r0, r2
 800a456:	4798      	blx	r3
}
 800a458:	46c0      	nop			; (mov r8, r8)
 800a45a:	46bd      	mov	sp, r7
 800a45c:	b002      	add	sp, #8
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	200001bc 	.word	0x200001bc
 800a464:	20000c78 	.word	0x20000c78

0800a468 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
    Buzzeer_TIM_PeriodElapsedCallback(htim);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	0018      	movs	r0, r3
 800a474:	f7fe ffce 	bl	8009414 <Buzzeer_TIM_PeriodElapsedCallback>
    Key_TIM_PeriodElapsedCallback(htim);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	0018      	movs	r0, r3
 800a47c:	f7ff fad6 	bl	8009a2c <Key_TIM_PeriodElapsedCallback>
}
 800a480:	46c0      	nop			; (mov r8, r8)
 800a482:	46bd      	mov	sp, r7
 800a484:	b002      	add	sp, #8
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	0002      	movs	r2, r0
 800a490:	1dbb      	adds	r3, r7, #6
 800a492:	801a      	strh	r2, [r3, #0]
    Key_GPIO_EXTI_Callback(GPIO_Pin);
 800a494:	1dbb      	adds	r3, r7, #6
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	0018      	movs	r0, r3
 800a49a:	f7ff faa5 	bl	80099e8 <Key_GPIO_EXTI_Callback>
}
 800a49e:	46c0      	nop			; (mov r8, r8)
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	b002      	add	sp, #8
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b082      	sub	sp, #8
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	0002      	movs	r2, r0
 800a4ae:	1dbb      	adds	r3, r7, #6
 800a4b0:	801a      	strh	r2, [r3, #0]
    Key_GPIO_EXTI_Callback(GPIO_Pin);
 800a4b2:	1dbb      	adds	r3, r7, #6
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f7ff fa96 	bl	80099e8 <Key_GPIO_EXTI_Callback>
}
 800a4bc:	46c0      	nop			; (mov r8, r8)
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	b002      	add	sp, #8
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <arm_max_f32>:
 800a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c6:	46de      	mov	lr, fp
 800a4c8:	464e      	mov	r6, r9
 800a4ca:	4657      	mov	r7, sl
 800a4cc:	4645      	mov	r5, r8
 800a4ce:	469b      	mov	fp, r3
 800a4d0:	0003      	movs	r3, r0
 800a4d2:	b5e0      	push	{r5, r6, r7, lr}
 800a4d4:	cb10      	ldmia	r3!, {r4}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	4699      	mov	r9, r3
 800a4da:	000b      	movs	r3, r1
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	089b      	lsrs	r3, r3, #2
 800a4e2:	9103      	str	r1, [sp, #12]
 800a4e4:	9201      	str	r2, [sp, #4]
 800a4e6:	9302      	str	r3, [sp, #8]
 800a4e8:	d06c      	beq.n	800a5c4 <arm_max_f32+0x100>
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	469a      	mov	sl, r3
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	464d      	mov	r5, r9
 800a4f2:	2600      	movs	r6, #0
 800a4f4:	4698      	mov	r8, r3
 800a4f6:	682f      	ldr	r7, [r5, #0]
 800a4f8:	1c20      	adds	r0, r4, #0
 800a4fa:	1c39      	adds	r1, r7, #0
 800a4fc:	f7f5 ff92 	bl	8000424 <__aeabi_fcmplt>
 800a500:	2800      	cmp	r0, #0
 800a502:	d002      	beq.n	800a50a <arm_max_f32+0x46>
 800a504:	1c73      	adds	r3, r6, #1
 800a506:	4698      	mov	r8, r3
 800a508:	1c3c      	adds	r4, r7, #0
 800a50a:	686f      	ldr	r7, [r5, #4]
 800a50c:	1c20      	adds	r0, r4, #0
 800a50e:	1c39      	adds	r1, r7, #0
 800a510:	f7f5 ff88 	bl	8000424 <__aeabi_fcmplt>
 800a514:	2800      	cmp	r0, #0
 800a516:	d002      	beq.n	800a51e <arm_max_f32+0x5a>
 800a518:	1cb3      	adds	r3, r6, #2
 800a51a:	4698      	mov	r8, r3
 800a51c:	1c3c      	adds	r4, r7, #0
 800a51e:	68af      	ldr	r7, [r5, #8]
 800a520:	1c20      	adds	r0, r4, #0
 800a522:	1c39      	adds	r1, r7, #0
 800a524:	f7f5 ff7e 	bl	8000424 <__aeabi_fcmplt>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d002      	beq.n	800a532 <arm_max_f32+0x6e>
 800a52c:	1cf3      	adds	r3, r6, #3
 800a52e:	4698      	mov	r8, r3
 800a530:	1c3c      	adds	r4, r7, #0
 800a532:	68ef      	ldr	r7, [r5, #12]
 800a534:	1c20      	adds	r0, r4, #0
 800a536:	1c39      	adds	r1, r7, #0
 800a538:	3604      	adds	r6, #4
 800a53a:	f7f5 ff73 	bl	8000424 <__aeabi_fcmplt>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d001      	beq.n	800a546 <arm_max_f32+0x82>
 800a542:	46b0      	mov	r8, r6
 800a544:	1c3c      	adds	r4, r7, #0
 800a546:	3510      	adds	r5, #16
 800a548:	45b2      	cmp	sl, r6
 800a54a:	d1d4      	bne.n	800a4f6 <arm_max_f32+0x32>
 800a54c:	9b02      	ldr	r3, [sp, #8]
 800a54e:	011b      	lsls	r3, r3, #4
 800a550:	4499      	add	r9, r3
 800a552:	2503      	movs	r5, #3
 800a554:	9b00      	ldr	r3, [sp, #0]
 800a556:	401d      	ands	r5, r3
 800a558:	d023      	beq.n	800a5a2 <arm_max_f32+0xde>
 800a55a:	464b      	mov	r3, r9
 800a55c:	681e      	ldr	r6, [r3, #0]
 800a55e:	1c21      	adds	r1, r4, #0
 800a560:	1c30      	adds	r0, r6, #0
 800a562:	f7f5 ff73 	bl	800044c <__aeabi_fcmpgt>
 800a566:	2800      	cmp	r0, #0
 800a568:	d127      	bne.n	800a5ba <arm_max_f32+0xf6>
 800a56a:	3d01      	subs	r5, #1
 800a56c:	2d00      	cmp	r5, #0
 800a56e:	d018      	beq.n	800a5a2 <arm_max_f32+0xde>
 800a570:	464b      	mov	r3, r9
 800a572:	685e      	ldr	r6, [r3, #4]
 800a574:	1c20      	adds	r0, r4, #0
 800a576:	1c31      	adds	r1, r6, #0
 800a578:	f7f5 ff54 	bl	8000424 <__aeabi_fcmplt>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d003      	beq.n	800a588 <arm_max_f32+0xc4>
 800a580:	9b03      	ldr	r3, [sp, #12]
 800a582:	1c34      	adds	r4, r6, #0
 800a584:	1b5b      	subs	r3, r3, r5
 800a586:	4698      	mov	r8, r3
 800a588:	2d01      	cmp	r5, #1
 800a58a:	d00a      	beq.n	800a5a2 <arm_max_f32+0xde>
 800a58c:	464b      	mov	r3, r9
 800a58e:	689d      	ldr	r5, [r3, #8]
 800a590:	1c21      	adds	r1, r4, #0
 800a592:	1c28      	adds	r0, r5, #0
 800a594:	f7f5 ff5a 	bl	800044c <__aeabi_fcmpgt>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d002      	beq.n	800a5a2 <arm_max_f32+0xde>
 800a59c:	9b00      	ldr	r3, [sp, #0]
 800a59e:	1c2c      	adds	r4, r5, #0
 800a5a0:	4698      	mov	r8, r3
 800a5a2:	9b01      	ldr	r3, [sp, #4]
 800a5a4:	4642      	mov	r2, r8
 800a5a6:	601c      	str	r4, [r3, #0]
 800a5a8:	465b      	mov	r3, fp
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	b005      	add	sp, #20
 800a5ae:	bc3c      	pop	{r2, r3, r4, r5}
 800a5b0:	4690      	mov	r8, r2
 800a5b2:	4699      	mov	r9, r3
 800a5b4:	46a2      	mov	sl, r4
 800a5b6:	46ab      	mov	fp, r5
 800a5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	1c34      	adds	r4, r6, #0
 800a5be:	1b5b      	subs	r3, r3, r5
 800a5c0:	4698      	mov	r8, r3
 800a5c2:	e7d2      	b.n	800a56a <arm_max_f32+0xa6>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4698      	mov	r8, r3
 800a5c8:	e7c3      	b.n	800a552 <arm_max_f32+0x8e>
 800a5ca:	46c0      	nop			; (mov r8, r8)

0800a5cc <arm_cfft_radix8by2_f32>:
 800a5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ce:	464e      	mov	r6, r9
 800a5d0:	46de      	mov	lr, fp
 800a5d2:	4657      	mov	r7, sl
 800a5d4:	4645      	mov	r5, r8
 800a5d6:	b5e0      	push	{r5, r6, r7, lr}
 800a5d8:	8803      	ldrh	r3, [r0, #0]
 800a5da:	468c      	mov	ip, r1
 800a5dc:	009a      	lsls	r2, r3, #2
 800a5de:	0016      	movs	r6, r2
 800a5e0:	b093      	sub	sp, #76	; 0x4c
 800a5e2:	4466      	add	r6, ip
 800a5e4:	0004      	movs	r4, r0
 800a5e6:	900e      	str	r0, [sp, #56]	; 0x38
 800a5e8:	46b4      	mov	ip, r6
 800a5ea:	0008      	movs	r0, r1
 800a5ec:	9111      	str	r1, [sp, #68]	; 0x44
 800a5ee:	0859      	lsrs	r1, r3, #1
 800a5f0:	9110      	str	r1, [sp, #64]	; 0x40
 800a5f2:	0089      	lsls	r1, r1, #2
 800a5f4:	6862      	ldr	r2, [r4, #4]
 800a5f6:	960f      	str	r6, [sp, #60]	; 0x3c
 800a5f8:	0004      	movs	r4, r0
 800a5fa:	08db      	lsrs	r3, r3, #3
 800a5fc:	1840      	adds	r0, r0, r1
 800a5fe:	4461      	add	r1, ip
 800a600:	2b00      	cmp	r3, #0
 800a602:	d100      	bne.n	800a606 <arm_cfft_radix8by2_f32+0x3a>
 800a604:	e112      	b.n	800a82c <arm_cfft_radix8by2_f32+0x260>
 800a606:	46a2      	mov	sl, r4
 800a608:	011b      	lsls	r3, r3, #4
 800a60a:	4453      	add	r3, sl
 800a60c:	4680      	mov	r8, r0
 800a60e:	4691      	mov	r9, r2
 800a610:	468b      	mov	fp, r1
 800a612:	46b2      	mov	sl, r6
 800a614:	930d      	str	r3, [sp, #52]	; 0x34
 800a616:	6862      	ldr	r2, [r4, #4]
 800a618:	4655      	mov	r5, sl
 800a61a:	9200      	str	r2, [sp, #0]
 800a61c:	4652      	mov	r2, sl
 800a61e:	68e1      	ldr	r1, [r4, #12]
 800a620:	686d      	ldr	r5, [r5, #4]
 800a622:	9101      	str	r1, [sp, #4]
 800a624:	4641      	mov	r1, r8
 800a626:	9502      	str	r5, [sp, #8]
 800a628:	68d5      	ldr	r5, [r2, #12]
 800a62a:	4642      	mov	r2, r8
 800a62c:	6849      	ldr	r1, [r1, #4]
 800a62e:	6812      	ldr	r2, [r2, #0]
 800a630:	910a      	str	r1, [sp, #40]	; 0x28
 800a632:	4641      	mov	r1, r8
 800a634:	9203      	str	r2, [sp, #12]
 800a636:	4642      	mov	r2, r8
 800a638:	68c9      	ldr	r1, [r1, #12]
 800a63a:	6892      	ldr	r2, [r2, #8]
 800a63c:	910b      	str	r1, [sp, #44]	; 0x2c
 800a63e:	4659      	mov	r1, fp
 800a640:	9204      	str	r2, [sp, #16]
 800a642:	465a      	mov	r2, fp
 800a644:	6849      	ldr	r1, [r1, #4]
 800a646:	6812      	ldr	r2, [r2, #0]
 800a648:	4650      	mov	r0, sl
 800a64a:	9106      	str	r1, [sp, #24]
 800a64c:	4659      	mov	r1, fp
 800a64e:	9205      	str	r2, [sp, #20]
 800a650:	465a      	mov	r2, fp
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	6800      	ldr	r0, [r0, #0]
 800a656:	68c9      	ldr	r1, [r1, #12]
 800a658:	6892      	ldr	r2, [r2, #8]
 800a65a:	910c      	str	r1, [sp, #48]	; 0x30
 800a65c:	9009      	str	r0, [sp, #36]	; 0x24
 800a65e:	1c01      	adds	r1, r0, #0
 800a660:	1c18      	adds	r0, r3, #0
 800a662:	9207      	str	r2, [sp, #28]
 800a664:	9308      	str	r3, [sp, #32]
 800a666:	4657      	mov	r7, sl
 800a668:	f7f5 ff1c 	bl	80004a4 <__aeabi_fadd>
 800a66c:	68bf      	ldr	r7, [r7, #8]
 800a66e:	9902      	ldr	r1, [sp, #8]
 800a670:	6020      	str	r0, [r4, #0]
 800a672:	9800      	ldr	r0, [sp, #0]
 800a674:	f7f5 ff16 	bl	80004a4 <__aeabi_fadd>
 800a678:	68a6      	ldr	r6, [r4, #8]
 800a67a:	6060      	str	r0, [r4, #4]
 800a67c:	1c39      	adds	r1, r7, #0
 800a67e:	1c30      	adds	r0, r6, #0
 800a680:	f7f5 ff10 	bl	80004a4 <__aeabi_fadd>
 800a684:	1c29      	adds	r1, r5, #0
 800a686:	60a0      	str	r0, [r4, #8]
 800a688:	9801      	ldr	r0, [sp, #4]
 800a68a:	f7f5 ff0b 	bl	80004a4 <__aeabi_fadd>
 800a68e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a690:	60e0      	str	r0, [r4, #12]
 800a692:	9808      	ldr	r0, [sp, #32]
 800a694:	f7f6 fb86 	bl	8000da4 <__aeabi_fsub>
 800a698:	9902      	ldr	r1, [sp, #8]
 800a69a:	9008      	str	r0, [sp, #32]
 800a69c:	9800      	ldr	r0, [sp, #0]
 800a69e:	f7f6 fb81 	bl	8000da4 <__aeabi_fsub>
 800a6a2:	1c39      	adds	r1, r7, #0
 800a6a4:	9000      	str	r0, [sp, #0]
 800a6a6:	1c30      	adds	r0, r6, #0
 800a6a8:	f7f6 fb7c 	bl	8000da4 <__aeabi_fsub>
 800a6ac:	1c29      	adds	r1, r5, #0
 800a6ae:	9002      	str	r0, [sp, #8]
 800a6b0:	9801      	ldr	r0, [sp, #4]
 800a6b2:	f7f6 fb77 	bl	8000da4 <__aeabi_fsub>
 800a6b6:	9905      	ldr	r1, [sp, #20]
 800a6b8:	9001      	str	r0, [sp, #4]
 800a6ba:	9803      	ldr	r0, [sp, #12]
 800a6bc:	f7f5 fef2 	bl	80004a4 <__aeabi_fadd>
 800a6c0:	4643      	mov	r3, r8
 800a6c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a6c4:	9906      	ldr	r1, [sp, #24]
 800a6c6:	6018      	str	r0, [r3, #0]
 800a6c8:	1c38      	adds	r0, r7, #0
 800a6ca:	f7f5 feeb 	bl	80004a4 <__aeabi_fadd>
 800a6ce:	4643      	mov	r3, r8
 800a6d0:	9907      	ldr	r1, [sp, #28]
 800a6d2:	6058      	str	r0, [r3, #4]
 800a6d4:	9804      	ldr	r0, [sp, #16]
 800a6d6:	f7f5 fee5 	bl	80004a4 <__aeabi_fadd>
 800a6da:	4643      	mov	r3, r8
 800a6dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a6de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a6e0:	6098      	str	r0, [r3, #8]
 800a6e2:	1c31      	adds	r1, r6, #0
 800a6e4:	1c28      	adds	r0, r5, #0
 800a6e6:	f7f5 fedd 	bl	80004a4 <__aeabi_fadd>
 800a6ea:	4643      	mov	r3, r8
 800a6ec:	9903      	ldr	r1, [sp, #12]
 800a6ee:	60d8      	str	r0, [r3, #12]
 800a6f0:	9805      	ldr	r0, [sp, #20]
 800a6f2:	f7f6 fb57 	bl	8000da4 <__aeabi_fsub>
 800a6f6:	1c39      	adds	r1, r7, #0
 800a6f8:	9003      	str	r0, [sp, #12]
 800a6fa:	9806      	ldr	r0, [sp, #24]
 800a6fc:	f7f6 fb52 	bl	8000da4 <__aeabi_fsub>
 800a700:	9904      	ldr	r1, [sp, #16]
 800a702:	1c07      	adds	r7, r0, #0
 800a704:	9807      	ldr	r0, [sp, #28]
 800a706:	f7f6 fb4d 	bl	8000da4 <__aeabi_fsub>
 800a70a:	1c29      	adds	r1, r5, #0
 800a70c:	9004      	str	r0, [sp, #16]
 800a70e:	1c30      	adds	r0, r6, #0
 800a710:	f7f6 fb48 	bl	8000da4 <__aeabi_fsub>
 800a714:	464b      	mov	r3, r9
 800a716:	681d      	ldr	r5, [r3, #0]
 800a718:	9005      	str	r0, [sp, #20]
 800a71a:	1c29      	adds	r1, r5, #0
 800a71c:	9808      	ldr	r0, [sp, #32]
 800a71e:	685e      	ldr	r6, [r3, #4]
 800a720:	f7f6 fa26 	bl	8000b70 <__aeabi_fmul>
 800a724:	1c31      	adds	r1, r6, #0
 800a726:	9006      	str	r0, [sp, #24]
 800a728:	9800      	ldr	r0, [sp, #0]
 800a72a:	f7f6 fa21 	bl	8000b70 <__aeabi_fmul>
 800a72e:	1c01      	adds	r1, r0, #0
 800a730:	9806      	ldr	r0, [sp, #24]
 800a732:	f7f5 feb7 	bl	80004a4 <__aeabi_fadd>
 800a736:	4653      	mov	r3, sl
 800a738:	1c29      	adds	r1, r5, #0
 800a73a:	6018      	str	r0, [r3, #0]
 800a73c:	9800      	ldr	r0, [sp, #0]
 800a73e:	f7f6 fa17 	bl	8000b70 <__aeabi_fmul>
 800a742:	1c31      	adds	r1, r6, #0
 800a744:	9000      	str	r0, [sp, #0]
 800a746:	9808      	ldr	r0, [sp, #32]
 800a748:	f7f6 fa12 	bl	8000b70 <__aeabi_fmul>
 800a74c:	1c01      	adds	r1, r0, #0
 800a74e:	9800      	ldr	r0, [sp, #0]
 800a750:	f7f6 fb28 	bl	8000da4 <__aeabi_fsub>
 800a754:	4653      	mov	r3, sl
 800a756:	1c31      	adds	r1, r6, #0
 800a758:	6058      	str	r0, [r3, #4]
 800a75a:	9803      	ldr	r0, [sp, #12]
 800a75c:	f7f6 fa08 	bl	8000b70 <__aeabi_fmul>
 800a760:	1c29      	adds	r1, r5, #0
 800a762:	9000      	str	r0, [sp, #0]
 800a764:	1c38      	adds	r0, r7, #0
 800a766:	f7f6 fa03 	bl	8000b70 <__aeabi_fmul>
 800a76a:	1c01      	adds	r1, r0, #0
 800a76c:	9800      	ldr	r0, [sp, #0]
 800a76e:	f7f6 fb19 	bl	8000da4 <__aeabi_fsub>
 800a772:	465b      	mov	r3, fp
 800a774:	1c31      	adds	r1, r6, #0
 800a776:	6018      	str	r0, [r3, #0]
 800a778:	1c38      	adds	r0, r7, #0
 800a77a:	f7f6 f9f9 	bl	8000b70 <__aeabi_fmul>
 800a77e:	1c29      	adds	r1, r5, #0
 800a780:	1c06      	adds	r6, r0, #0
 800a782:	9803      	ldr	r0, [sp, #12]
 800a784:	f7f6 f9f4 	bl	8000b70 <__aeabi_fmul>
 800a788:	1c01      	adds	r1, r0, #0
 800a78a:	1c30      	adds	r0, r6, #0
 800a78c:	f7f5 fe8a 	bl	80004a4 <__aeabi_fadd>
 800a790:	465b      	mov	r3, fp
 800a792:	6058      	str	r0, [r3, #4]
 800a794:	464b      	mov	r3, r9
 800a796:	689d      	ldr	r5, [r3, #8]
 800a798:	9802      	ldr	r0, [sp, #8]
 800a79a:	1c29      	adds	r1, r5, #0
 800a79c:	68de      	ldr	r6, [r3, #12]
 800a79e:	f7f6 f9e7 	bl	8000b70 <__aeabi_fmul>
 800a7a2:	1c31      	adds	r1, r6, #0
 800a7a4:	1c07      	adds	r7, r0, #0
 800a7a6:	9801      	ldr	r0, [sp, #4]
 800a7a8:	f7f6 f9e2 	bl	8000b70 <__aeabi_fmul>
 800a7ac:	1c01      	adds	r1, r0, #0
 800a7ae:	1c38      	adds	r0, r7, #0
 800a7b0:	f7f5 fe78 	bl	80004a4 <__aeabi_fadd>
 800a7b4:	4653      	mov	r3, sl
 800a7b6:	1c29      	adds	r1, r5, #0
 800a7b8:	6098      	str	r0, [r3, #8]
 800a7ba:	9801      	ldr	r0, [sp, #4]
 800a7bc:	f7f6 f9d8 	bl	8000b70 <__aeabi_fmul>
 800a7c0:	1c31      	adds	r1, r6, #0
 800a7c2:	1c07      	adds	r7, r0, #0
 800a7c4:	9802      	ldr	r0, [sp, #8]
 800a7c6:	f7f6 f9d3 	bl	8000b70 <__aeabi_fmul>
 800a7ca:	1c01      	adds	r1, r0, #0
 800a7cc:	1c38      	adds	r0, r7, #0
 800a7ce:	f7f6 fae9 	bl	8000da4 <__aeabi_fsub>
 800a7d2:	4653      	mov	r3, sl
 800a7d4:	1c31      	adds	r1, r6, #0
 800a7d6:	60d8      	str	r0, [r3, #12]
 800a7d8:	9804      	ldr	r0, [sp, #16]
 800a7da:	f7f6 f9c9 	bl	8000b70 <__aeabi_fmul>
 800a7de:	1c29      	adds	r1, r5, #0
 800a7e0:	1c07      	adds	r7, r0, #0
 800a7e2:	9805      	ldr	r0, [sp, #20]
 800a7e4:	f7f6 f9c4 	bl	8000b70 <__aeabi_fmul>
 800a7e8:	1c01      	adds	r1, r0, #0
 800a7ea:	1c38      	adds	r0, r7, #0
 800a7ec:	f7f6 fada 	bl	8000da4 <__aeabi_fsub>
 800a7f0:	465b      	mov	r3, fp
 800a7f2:	1c31      	adds	r1, r6, #0
 800a7f4:	6098      	str	r0, [r3, #8]
 800a7f6:	9805      	ldr	r0, [sp, #20]
 800a7f8:	f7f6 f9ba 	bl	8000b70 <__aeabi_fmul>
 800a7fc:	1c29      	adds	r1, r5, #0
 800a7fe:	1c06      	adds	r6, r0, #0
 800a800:	9804      	ldr	r0, [sp, #16]
 800a802:	f7f6 f9b5 	bl	8000b70 <__aeabi_fmul>
 800a806:	1c01      	adds	r1, r0, #0
 800a808:	1c30      	adds	r0, r6, #0
 800a80a:	f7f5 fe4b 	bl	80004a4 <__aeabi_fadd>
 800a80e:	465b      	mov	r3, fp
 800a810:	60d8      	str	r0, [r3, #12]
 800a812:	2310      	movs	r3, #16
 800a814:	469c      	mov	ip, r3
 800a816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a818:	3410      	adds	r4, #16
 800a81a:	44e0      	add	r8, ip
 800a81c:	44e3      	add	fp, ip
 800a81e:	44e2      	add	sl, ip
 800a820:	44e1      	add	r9, ip
 800a822:	429c      	cmp	r4, r3
 800a824:	d000      	beq.n	800a828 <arm_cfft_radix8by2_f32+0x25c>
 800a826:	e6f6      	b.n	800a616 <arm_cfft_radix8by2_f32+0x4a>
 800a828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	466b      	mov	r3, sp
 800a82e:	2140      	movs	r1, #64	; 0x40
 800a830:	185b      	adds	r3, r3, r1
 800a832:	881c      	ldrh	r4, [r3, #0]
 800a834:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a836:	0021      	movs	r1, r4
 800a838:	2302      	movs	r3, #2
 800a83a:	f000 fd0d 	bl	800b258 <arm_radix8_butterfly_f32>
 800a83e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a840:	0021      	movs	r1, r4
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a846:	2302      	movs	r3, #2
 800a848:	f000 fd06 	bl	800b258 <arm_radix8_butterfly_f32>
 800a84c:	b013      	add	sp, #76	; 0x4c
 800a84e:	bc3c      	pop	{r2, r3, r4, r5}
 800a850:	4690      	mov	r8, r2
 800a852:	4699      	mov	r9, r3
 800a854:	46a2      	mov	sl, r4
 800a856:	46ab      	mov	fp, r5
 800a858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a85a:	46c0      	nop			; (mov r8, r8)

0800a85c <arm_cfft_radix8by4_f32>:
 800a85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a85e:	46de      	mov	lr, fp
 800a860:	4657      	mov	r7, sl
 800a862:	464e      	mov	r6, r9
 800a864:	4645      	mov	r5, r8
 800a866:	b5e0      	push	{r5, r6, r7, lr}
 800a868:	8803      	ldrh	r3, [r0, #0]
 800a86a:	b0a3      	sub	sp, #140	; 0x8c
 800a86c:	085b      	lsrs	r3, r3, #1
 800a86e:	009a      	lsls	r2, r3, #2
 800a870:	4690      	mov	r8, r2
 800a872:	000a      	movs	r2, r1
 800a874:	4442      	add	r2, r8
 800a876:	0005      	movs	r5, r0
 800a878:	9020      	str	r0, [sp, #128]	; 0x80
 800a87a:	0010      	movs	r0, r2
 800a87c:	000f      	movs	r7, r1
 800a87e:	4440      	add	r0, r8
 800a880:	4692      	mov	sl, r2
 800a882:	0002      	movs	r2, r0
 800a884:	683c      	ldr	r4, [r7, #0]
 800a886:	6869      	ldr	r1, [r5, #4]
 800a888:	6805      	ldr	r5, [r0, #0]
 800a88a:	085b      	lsrs	r3, r3, #1
 800a88c:	4442      	add	r2, r8
 800a88e:	0006      	movs	r6, r0
 800a890:	9117      	str	r1, [sp, #92]	; 0x5c
 800a892:	1c20      	adds	r0, r4, #0
 800a894:	1c29      	adds	r1, r5, #0
 800a896:	931f      	str	r3, [sp, #124]	; 0x7c
 800a898:	4691      	mov	r9, r2
 800a89a:	f7f5 fe03 	bl	80004a4 <__aeabi_fadd>
 800a89e:	1c29      	adds	r1, r5, #0
 800a8a0:	9001      	str	r0, [sp, #4]
 800a8a2:	1c20      	adds	r0, r4, #0
 800a8a4:	f7f6 fa7e 	bl	8000da4 <__aeabi_fsub>
 800a8a8:	687c      	ldr	r4, [r7, #4]
 800a8aa:	6875      	ldr	r5, [r6, #4]
 800a8ac:	9002      	str	r0, [sp, #8]
 800a8ae:	1c29      	adds	r1, r5, #0
 800a8b0:	1c20      	adds	r0, r4, #0
 800a8b2:	9704      	str	r7, [sp, #16]
 800a8b4:	9600      	str	r6, [sp, #0]
 800a8b6:	f7f5 fdf5 	bl	80004a4 <__aeabi_fadd>
 800a8ba:	9003      	str	r0, [sp, #12]
 800a8bc:	1c20      	adds	r0, r4, #0
 800a8be:	4654      	mov	r4, sl
 800a8c0:	1c29      	adds	r1, r5, #0
 800a8c2:	f7f6 fa6f 	bl	8000da4 <__aeabi_fsub>
 800a8c6:	6867      	ldr	r7, [r4, #4]
 800a8c8:	464c      	mov	r4, r9
 800a8ca:	6866      	ldr	r6, [r4, #4]
 800a8cc:	4654      	mov	r4, sl
 800a8ce:	6825      	ldr	r5, [r4, #0]
 800a8d0:	464c      	mov	r4, r9
 800a8d2:	6824      	ldr	r4, [r4, #0]
 800a8d4:	4683      	mov	fp, r0
 800a8d6:	9901      	ldr	r1, [sp, #4]
 800a8d8:	1c28      	adds	r0, r5, #0
 800a8da:	f7f5 fde3 	bl	80004a4 <__aeabi_fadd>
 800a8de:	1c21      	adds	r1, r4, #0
 800a8e0:	f7f5 fde0 	bl	80004a4 <__aeabi_fadd>
 800a8e4:	4651      	mov	r1, sl
 800a8e6:	9a04      	ldr	r2, [sp, #16]
 800a8e8:	6010      	str	r0, [r2, #0]
 800a8ea:	6849      	ldr	r1, [r1, #4]
 800a8ec:	3208      	adds	r2, #8
 800a8ee:	9803      	ldr	r0, [sp, #12]
 800a8f0:	921a      	str	r2, [sp, #104]	; 0x68
 800a8f2:	f7f5 fdd7 	bl	80004a4 <__aeabi_fadd>
 800a8f6:	4649      	mov	r1, r9
 800a8f8:	6849      	ldr	r1, [r1, #4]
 800a8fa:	f7f5 fdd3 	bl	80004a4 <__aeabi_fadd>
 800a8fe:	9a04      	ldr	r2, [sp, #16]
 800a900:	9902      	ldr	r1, [sp, #8]
 800a902:	6050      	str	r0, [r2, #4]
 800a904:	1c38      	adds	r0, r7, #0
 800a906:	f7f5 fdcd 	bl	80004a4 <__aeabi_fadd>
 800a90a:	1c31      	adds	r1, r6, #0
 800a90c:	f7f6 fa4a 	bl	8000da4 <__aeabi_fsub>
 800a910:	4652      	mov	r2, sl
 800a912:	6010      	str	r0, [r2, #0]
 800a914:	2208      	movs	r2, #8
 800a916:	1c29      	adds	r1, r5, #0
 800a918:	4452      	add	r2, sl
 800a91a:	4658      	mov	r0, fp
 800a91c:	9219      	str	r2, [sp, #100]	; 0x64
 800a91e:	f7f6 fa41 	bl	8000da4 <__aeabi_fsub>
 800a922:	1c21      	adds	r1, r4, #0
 800a924:	f7f5 fdbe 	bl	80004a4 <__aeabi_fadd>
 800a928:	4652      	mov	r2, sl
 800a92a:	1c29      	adds	r1, r5, #0
 800a92c:	6050      	str	r0, [r2, #4]
 800a92e:	9801      	ldr	r0, [sp, #4]
 800a930:	f7f6 fa38 	bl	8000da4 <__aeabi_fsub>
 800a934:	1c21      	adds	r1, r4, #0
 800a936:	f7f6 fa35 	bl	8000da4 <__aeabi_fsub>
 800a93a:	9b00      	ldr	r3, [sp, #0]
 800a93c:	1c39      	adds	r1, r7, #0
 800a93e:	001a      	movs	r2, r3
 800a940:	6018      	str	r0, [r3, #0]
 800a942:	3208      	adds	r2, #8
 800a944:	9803      	ldr	r0, [sp, #12]
 800a946:	921b      	str	r2, [sp, #108]	; 0x6c
 800a948:	f7f6 fa2c 	bl	8000da4 <__aeabi_fsub>
 800a94c:	1c31      	adds	r1, r6, #0
 800a94e:	f7f6 fa29 	bl	8000da4 <__aeabi_fsub>
 800a952:	9a00      	ldr	r2, [sp, #0]
 800a954:	1c39      	adds	r1, r7, #0
 800a956:	6050      	str	r0, [r2, #4]
 800a958:	9802      	ldr	r0, [sp, #8]
 800a95a:	f7f6 fa23 	bl	8000da4 <__aeabi_fsub>
 800a95e:	1c31      	adds	r1, r6, #0
 800a960:	f7f5 fda0 	bl	80004a4 <__aeabi_fadd>
 800a964:	464e      	mov	r6, r9
 800a966:	6030      	str	r0, [r6, #0]
 800a968:	2008      	movs	r0, #8
 800a96a:	4448      	add	r0, r9
 800a96c:	9018      	str	r0, [sp, #96]	; 0x60
 800a96e:	4659      	mov	r1, fp
 800a970:	1c28      	adds	r0, r5, #0
 800a972:	f7f5 fd97 	bl	80004a4 <__aeabi_fadd>
 800a976:	1c21      	adds	r1, r4, #0
 800a978:	f7f6 fa14 	bl	8000da4 <__aeabi_fsub>
 800a97c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800a97e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a980:	000a      	movs	r2, r1
 800a982:	3b02      	subs	r3, #2
 800a984:	3208      	adds	r2, #8
 800a986:	6070      	str	r0, [r6, #4]
 800a988:	921d      	str	r2, [sp, #116]	; 0x74
 800a98a:	3118      	adds	r1, #24
 800a98c:	3208      	adds	r2, #8
 800a98e:	0858      	lsrs	r0, r3, #1
 800a990:	921e      	str	r2, [sp, #120]	; 0x78
 800a992:	911c      	str	r1, [sp, #112]	; 0x70
 800a994:	9021      	str	r0, [sp, #132]	; 0x84
 800a996:	d100      	bne.n	800a99a <arm_cfft_radix8by4_f32+0x13e>
 800a998:	e205      	b.n	800ada6 <arm_cfft_radix8by4_f32+0x54a>
 800a99a:	4643      	mov	r3, r8
 800a99c:	3b0c      	subs	r3, #12
 800a99e:	444b      	add	r3, r9
 800a9a0:	4698      	mov	r8, r3
 800a9a2:	2308      	movs	r3, #8
 800a9a4:	425b      	negs	r3, r3
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	9303      	str	r3, [sp, #12]
 800a9ac:	330c      	adds	r3, #12
 800a9ae:	469b      	mov	fp, r3
 800a9b0:	260c      	movs	r6, #12
 800a9b2:	4653      	mov	r3, sl
 800a9b4:	46da      	mov	sl, fp
 800a9b6:	46cb      	mov	fp, r9
 800a9b8:	46b1      	mov	r9, r6
 800a9ba:	9015      	str	r0, [sp, #84]	; 0x54
 800a9bc:	9114      	str	r1, [sp, #80]	; 0x50
 800a9be:	9213      	str	r2, [sp, #76]	; 0x4c
 800a9c0:	9302      	str	r3, [sp, #8]
 800a9c2:	4653      	mov	r3, sl
 800a9c4:	9f04      	ldr	r7, [sp, #16]
 800a9c6:	9e00      	ldr	r6, [sp, #0]
 800a9c8:	58fc      	ldr	r4, [r7, r3]
 800a9ca:	58f5      	ldr	r5, [r6, r3]
 800a9cc:	1c20      	adds	r0, r4, #0
 800a9ce:	1c29      	adds	r1, r5, #0
 800a9d0:	f7f5 fd68 	bl	80004a4 <__aeabi_fadd>
 800a9d4:	1c29      	adds	r1, r5, #0
 800a9d6:	9005      	str	r0, [sp, #20]
 800a9d8:	1c20      	adds	r0, r4, #0
 800a9da:	f7f6 f9e3 	bl	8000da4 <__aeabi_fsub>
 800a9de:	464b      	mov	r3, r9
 800a9e0:	58fc      	ldr	r4, [r7, r3]
 800a9e2:	58f5      	ldr	r5, [r6, r3]
 800a9e4:	9006      	str	r0, [sp, #24]
 800a9e6:	1c29      	adds	r1, r5, #0
 800a9e8:	1c20      	adds	r0, r4, #0
 800a9ea:	9704      	str	r7, [sp, #16]
 800a9ec:	9600      	str	r6, [sp, #0]
 800a9ee:	f7f5 fd59 	bl	80004a4 <__aeabi_fadd>
 800a9f2:	1c29      	adds	r1, r5, #0
 800a9f4:	9007      	str	r0, [sp, #28]
 800a9f6:	1c20      	adds	r0, r4, #0
 800a9f8:	f7f6 f9d4 	bl	8000da4 <__aeabi_fsub>
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	9c02      	ldr	r4, [sp, #8]
 800aa00:	464a      	mov	r2, r9
 800aa02:	58e7      	ldr	r7, [r4, r3]
 800aa04:	465b      	mov	r3, fp
 800aa06:	589e      	ldr	r6, [r3, r2]
 800aa08:	9906      	ldr	r1, [sp, #24]
 800aa0a:	9008      	str	r0, [sp, #32]
 800aa0c:	1c38      	adds	r0, r7, #0
 800aa0e:	f7f5 fd49 	bl	80004a4 <__aeabi_fadd>
 800aa12:	1c31      	adds	r1, r6, #0
 800aa14:	f7f6 f9c6 	bl	8000da4 <__aeabi_fsub>
 800aa18:	4653      	mov	r3, sl
 800aa1a:	4652      	mov	r2, sl
 800aa1c:	58e5      	ldr	r5, [r4, r3]
 800aa1e:	465b      	mov	r3, fp
 800aa20:	9402      	str	r4, [sp, #8]
 800aa22:	589c      	ldr	r4, [r3, r2]
 800aa24:	1c29      	adds	r1, r5, #0
 800aa26:	9009      	str	r0, [sp, #36]	; 0x24
 800aa28:	9808      	ldr	r0, [sp, #32]
 800aa2a:	f7f6 f9bb 	bl	8000da4 <__aeabi_fsub>
 800aa2e:	1c21      	adds	r1, r4, #0
 800aa30:	f7f5 fd38 	bl	80004a4 <__aeabi_fadd>
 800aa34:	1c29      	adds	r1, r5, #0
 800aa36:	900a      	str	r0, [sp, #40]	; 0x28
 800aa38:	9805      	ldr	r0, [sp, #20]
 800aa3a:	f7f6 f9b3 	bl	8000da4 <__aeabi_fsub>
 800aa3e:	1c21      	adds	r1, r4, #0
 800aa40:	f7f6 f9b0 	bl	8000da4 <__aeabi_fsub>
 800aa44:	1c39      	adds	r1, r7, #0
 800aa46:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa48:	9807      	ldr	r0, [sp, #28]
 800aa4a:	f7f6 f9ab 	bl	8000da4 <__aeabi_fsub>
 800aa4e:	1c31      	adds	r1, r6, #0
 800aa50:	f7f6 f9a8 	bl	8000da4 <__aeabi_fsub>
 800aa54:	1c39      	adds	r1, r7, #0
 800aa56:	900c      	str	r0, [sp, #48]	; 0x30
 800aa58:	9806      	ldr	r0, [sp, #24]
 800aa5a:	f7f6 f9a3 	bl	8000da4 <__aeabi_fsub>
 800aa5e:	1c31      	adds	r1, r6, #0
 800aa60:	f7f5 fd20 	bl	80004a4 <__aeabi_fadd>
 800aa64:	9908      	ldr	r1, [sp, #32]
 800aa66:	9006      	str	r0, [sp, #24]
 800aa68:	1c28      	adds	r0, r5, #0
 800aa6a:	f7f5 fd1b 	bl	80004a4 <__aeabi_fadd>
 800aa6e:	1c21      	adds	r1, r4, #0
 800aa70:	f7f6 f998 	bl	8000da4 <__aeabi_fsub>
 800aa74:	9905      	ldr	r1, [sp, #20]
 800aa76:	9008      	str	r0, [sp, #32]
 800aa78:	1c28      	adds	r0, r5, #0
 800aa7a:	f7f5 fd13 	bl	80004a4 <__aeabi_fadd>
 800aa7e:	1c21      	adds	r1, r4, #0
 800aa80:	f7f5 fd10 	bl	80004a4 <__aeabi_fadd>
 800aa84:	4653      	mov	r3, sl
 800aa86:	9d04      	ldr	r5, [sp, #16]
 800aa88:	9f02      	ldr	r7, [sp, #8]
 800aa8a:	50e8      	str	r0, [r5, r3]
 800aa8c:	464b      	mov	r3, r9
 800aa8e:	9807      	ldr	r0, [sp, #28]
 800aa90:	58f9      	ldr	r1, [r7, r3]
 800aa92:	f7f5 fd07 	bl	80004a4 <__aeabi_fadd>
 800aa96:	464a      	mov	r2, r9
 800aa98:	465b      	mov	r3, fp
 800aa9a:	5899      	ldr	r1, [r3, r2]
 800aa9c:	f7f5 fd02 	bl	80004a4 <__aeabi_fadd>
 800aaa0:	464b      	mov	r3, r9
 800aaa2:	465a      	mov	r2, fp
 800aaa4:	50e8      	str	r0, [r5, r3]
 800aaa6:	9d01      	ldr	r5, [sp, #4]
 800aaa8:	597c      	ldr	r4, [r7, r5]
 800aaaa:	5955      	ldr	r5, [r2, r5]
 800aaac:	1c20      	adds	r0, r4, #0
 800aaae:	1c29      	adds	r1, r5, #0
 800aab0:	f7f5 fcf8 	bl	80004a4 <__aeabi_fadd>
 800aab4:	1c29      	adds	r1, r5, #0
 800aab6:	9005      	str	r0, [sp, #20]
 800aab8:	1c20      	adds	r0, r4, #0
 800aaba:	f7f6 f973 	bl	8000da4 <__aeabi_fsub>
 800aabe:	003c      	movs	r4, r7
 800aac0:	4659      	mov	r1, fp
 800aac2:	9702      	str	r7, [sp, #8]
 800aac4:	9f03      	ldr	r7, [sp, #12]
 800aac6:	9007      	str	r0, [sp, #28]
 800aac8:	59e4      	ldr	r4, [r4, r7]
 800aaca:	59cd      	ldr	r5, [r1, r7]
 800aacc:	1c20      	adds	r0, r4, #0
 800aace:	1c29      	adds	r1, r5, #0
 800aad0:	f7f5 fce8 	bl	80004a4 <__aeabi_fadd>
 800aad4:	1c29      	adds	r1, r5, #0
 800aad6:	900d      	str	r0, [sp, #52]	; 0x34
 800aad8:	1c20      	adds	r0, r4, #0
 800aada:	f7f6 f963 	bl	8000da4 <__aeabi_fsub>
 800aade:	4641      	mov	r1, r8
 800aae0:	9e00      	ldr	r6, [sp, #0]
 800aae2:	688c      	ldr	r4, [r1, #8]
 800aae4:	59f5      	ldr	r5, [r6, r7]
 800aae6:	1c21      	adds	r1, r4, #0
 800aae8:	900e      	str	r0, [sp, #56]	; 0x38
 800aaea:	1c28      	adds	r0, r5, #0
 800aaec:	9703      	str	r7, [sp, #12]
 800aaee:	f7f6 f959 	bl	8000da4 <__aeabi_fsub>
 800aaf2:	9907      	ldr	r1, [sp, #28]
 800aaf4:	9016      	str	r0, [sp, #88]	; 0x58
 800aaf6:	f7f5 fcd5 	bl	80004a4 <__aeabi_fadd>
 800aafa:	9b01      	ldr	r3, [sp, #4]
 800aafc:	900f      	str	r0, [sp, #60]	; 0x3c
 800aafe:	58f7      	ldr	r7, [r6, r3]
 800ab00:	4643      	mov	r3, r8
 800ab02:	9600      	str	r6, [sp, #0]
 800ab04:	685e      	ldr	r6, [r3, #4]
 800ab06:	1c39      	adds	r1, r7, #0
 800ab08:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ab0a:	f7f6 f94b 	bl	8000da4 <__aeabi_fsub>
 800ab0e:	1c31      	adds	r1, r6, #0
 800ab10:	f7f5 fcc8 	bl	80004a4 <__aeabi_fadd>
 800ab14:	1c39      	adds	r1, r7, #0
 800ab16:	9010      	str	r0, [sp, #64]	; 0x40
 800ab18:	9805      	ldr	r0, [sp, #20]
 800ab1a:	f7f6 f943 	bl	8000da4 <__aeabi_fsub>
 800ab1e:	1c31      	adds	r1, r6, #0
 800ab20:	f7f6 f940 	bl	8000da4 <__aeabi_fsub>
 800ab24:	1c29      	adds	r1, r5, #0
 800ab26:	9011      	str	r0, [sp, #68]	; 0x44
 800ab28:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ab2a:	f7f6 f93b 	bl	8000da4 <__aeabi_fsub>
 800ab2e:	1c21      	adds	r1, r4, #0
 800ab30:	f7f6 f938 	bl	8000da4 <__aeabi_fsub>
 800ab34:	9907      	ldr	r1, [sp, #28]
 800ab36:	9012      	str	r0, [sp, #72]	; 0x48
 800ab38:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ab3a:	f7f6 f933 	bl	8000da4 <__aeabi_fsub>
 800ab3e:	1c39      	adds	r1, r7, #0
 800ab40:	9007      	str	r0, [sp, #28]
 800ab42:	1c30      	adds	r0, r6, #0
 800ab44:	f7f6 f92e 	bl	8000da4 <__aeabi_fsub>
 800ab48:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ab4a:	f7f6 f92b 	bl	8000da4 <__aeabi_fsub>
 800ab4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab50:	1c07      	adds	r7, r0, #0
 800ab52:	1c28      	adds	r0, r5, #0
 800ab54:	f7f5 fca6 	bl	80004a4 <__aeabi_fadd>
 800ab58:	1c21      	adds	r1, r4, #0
 800ab5a:	f7f5 fca3 	bl	80004a4 <__aeabi_fadd>
 800ab5e:	9a03      	ldr	r2, [sp, #12]
 800ab60:	9c02      	ldr	r4, [sp, #8]
 800ab62:	9d01      	ldr	r5, [sp, #4]
 800ab64:	9e00      	ldr	r6, [sp, #0]
 800ab66:	50a0      	str	r0, [r4, r2]
 800ab68:	5971      	ldr	r1, [r6, r5]
 800ab6a:	9805      	ldr	r0, [sp, #20]
 800ab6c:	f7f5 fc9a 	bl	80004a4 <__aeabi_fadd>
 800ab70:	4643      	mov	r3, r8
 800ab72:	6859      	ldr	r1, [r3, #4]
 800ab74:	f7f5 fc96 	bl	80004a4 <__aeabi_fadd>
 800ab78:	4653      	mov	r3, sl
 800ab7a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800ab7c:	5160      	str	r0, [r4, r5]
 800ab7e:	9501      	str	r5, [sp, #4]
 800ab80:	9402      	str	r4, [sp, #8]
 800ab82:	58cc      	ldr	r4, [r1, r3]
 800ab84:	464b      	mov	r3, r9
 800ab86:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab88:	58cd      	ldr	r5, [r1, r3]
 800ab8a:	1c21      	adds	r1, r4, #0
 800ab8c:	f7f5 fff0 	bl	8000b70 <__aeabi_fmul>
 800ab90:	1c29      	adds	r1, r5, #0
 800ab92:	1c06      	adds	r6, r0, #0
 800ab94:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab96:	f7f5 ffeb 	bl	8000b70 <__aeabi_fmul>
 800ab9a:	1c01      	adds	r1, r0, #0
 800ab9c:	1c30      	adds	r0, r6, #0
 800ab9e:	f7f5 fc81 	bl	80004a4 <__aeabi_fadd>
 800aba2:	4651      	mov	r1, sl
 800aba4:	9b02      	ldr	r3, [sp, #8]
 800aba6:	5058      	str	r0, [r3, r1]
 800aba8:	1c21      	adds	r1, r4, #0
 800abaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abac:	f7f5 ffe0 	bl	8000b70 <__aeabi_fmul>
 800abb0:	1c29      	adds	r1, r5, #0
 800abb2:	1c06      	adds	r6, r0, #0
 800abb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abb6:	f7f5 ffdb 	bl	8000b70 <__aeabi_fmul>
 800abba:	1c01      	adds	r1, r0, #0
 800abbc:	1c30      	adds	r0, r6, #0
 800abbe:	f7f6 f8f1 	bl	8000da4 <__aeabi_fsub>
 800abc2:	4649      	mov	r1, r9
 800abc4:	9b02      	ldr	r3, [sp, #8]
 800abc6:	5058      	str	r0, [r3, r1]
 800abc8:	1c29      	adds	r1, r5, #0
 800abca:	9810      	ldr	r0, [sp, #64]	; 0x40
 800abcc:	f7f5 ffd0 	bl	8000b70 <__aeabi_fmul>
 800abd0:	1c21      	adds	r1, r4, #0
 800abd2:	1c06      	adds	r6, r0, #0
 800abd4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800abd6:	f7f5 ffcb 	bl	8000b70 <__aeabi_fmul>
 800abda:	1c01      	adds	r1, r0, #0
 800abdc:	1c30      	adds	r0, r6, #0
 800abde:	f7f6 f8e1 	bl	8000da4 <__aeabi_fsub>
 800abe2:	9a03      	ldr	r2, [sp, #12]
 800abe4:	9e00      	ldr	r6, [sp, #0]
 800abe6:	1c29      	adds	r1, r5, #0
 800abe8:	50b0      	str	r0, [r6, r2]
 800abea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800abec:	f7f5 ffc0 	bl	8000b70 <__aeabi_fmul>
 800abf0:	1c21      	adds	r1, r4, #0
 800abf2:	1c05      	adds	r5, r0, #0
 800abf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800abf6:	f7f5 ffbb 	bl	8000b70 <__aeabi_fmul>
 800abfa:	1c01      	adds	r1, r0, #0
 800abfc:	1c28      	adds	r0, r5, #0
 800abfe:	f7f5 fc51 	bl	80004a4 <__aeabi_fadd>
 800ac02:	9d01      	ldr	r5, [sp, #4]
 800ac04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac06:	5170      	str	r0, [r6, r5]
 800ac08:	681c      	ldr	r4, [r3, #0]
 800ac0a:	685d      	ldr	r5, [r3, #4]
 800ac0c:	3310      	adds	r3, #16
 800ac0e:	1c21      	adds	r1, r4, #0
 800ac10:	9600      	str	r6, [sp, #0]
 800ac12:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ac16:	f7f5 ffab 	bl	8000b70 <__aeabi_fmul>
 800ac1a:	1c29      	adds	r1, r5, #0
 800ac1c:	1c06      	adds	r6, r0, #0
 800ac1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac20:	f7f5 ffa6 	bl	8000b70 <__aeabi_fmul>
 800ac24:	1c01      	adds	r1, r0, #0
 800ac26:	1c30      	adds	r0, r6, #0
 800ac28:	f7f5 fc3c 	bl	80004a4 <__aeabi_fadd>
 800ac2c:	4653      	mov	r3, sl
 800ac2e:	9e00      	ldr	r6, [sp, #0]
 800ac30:	1c21      	adds	r1, r4, #0
 800ac32:	50f0      	str	r0, [r6, r3]
 800ac34:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac36:	f7f5 ff9b 	bl	8000b70 <__aeabi_fmul>
 800ac3a:	1c29      	adds	r1, r5, #0
 800ac3c:	1c06      	adds	r6, r0, #0
 800ac3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ac40:	f7f5 ff96 	bl	8000b70 <__aeabi_fmul>
 800ac44:	1c01      	adds	r1, r0, #0
 800ac46:	1c30      	adds	r0, r6, #0
 800ac48:	f7f6 f8ac 	bl	8000da4 <__aeabi_fsub>
 800ac4c:	2180      	movs	r1, #128	; 0x80
 800ac4e:	464b      	mov	r3, r9
 800ac50:	0609      	lsls	r1, r1, #24
 800ac52:	468c      	mov	ip, r1
 800ac54:	9e00      	ldr	r6, [sp, #0]
 800ac56:	1c21      	adds	r1, r4, #0
 800ac58:	50f0      	str	r0, [r6, r3]
 800ac5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac5c:	4463      	add	r3, ip
 800ac5e:	0018      	movs	r0, r3
 800ac60:	f7f5 ff86 	bl	8000b70 <__aeabi_fmul>
 800ac64:	1c29      	adds	r1, r5, #0
 800ac66:	1c06      	adds	r6, r0, #0
 800ac68:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ac6a:	f7f5 ff81 	bl	8000b70 <__aeabi_fmul>
 800ac6e:	1c01      	adds	r1, r0, #0
 800ac70:	1c30      	adds	r0, r6, #0
 800ac72:	f7f6 f897 	bl	8000da4 <__aeabi_fsub>
 800ac76:	465b      	mov	r3, fp
 800ac78:	9a03      	ldr	r2, [sp, #12]
 800ac7a:	1c29      	adds	r1, r5, #0
 800ac7c:	5098      	str	r0, [r3, r2]
 800ac7e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ac80:	f7f5 ff76 	bl	8000b70 <__aeabi_fmul>
 800ac84:	1c21      	adds	r1, r4, #0
 800ac86:	1c05      	adds	r5, r0, #0
 800ac88:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ac8a:	f7f5 ff71 	bl	8000b70 <__aeabi_fmul>
 800ac8e:	1c01      	adds	r1, r0, #0
 800ac90:	1c28      	adds	r0, r5, #0
 800ac92:	f7f6 f887 	bl	8000da4 <__aeabi_fsub>
 800ac96:	465b      	mov	r3, fp
 800ac98:	9d01      	ldr	r5, [sp, #4]
 800ac9a:	5158      	str	r0, [r3, r5]
 800ac9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac9e:	9806      	ldr	r0, [sp, #24]
 800aca0:	681c      	ldr	r4, [r3, #0]
 800aca2:	685d      	ldr	r5, [r3, #4]
 800aca4:	1c21      	adds	r1, r4, #0
 800aca6:	3318      	adds	r3, #24
 800aca8:	9314      	str	r3, [sp, #80]	; 0x50
 800acaa:	f7f5 ff61 	bl	8000b70 <__aeabi_fmul>
 800acae:	1c29      	adds	r1, r5, #0
 800acb0:	1c06      	adds	r6, r0, #0
 800acb2:	9808      	ldr	r0, [sp, #32]
 800acb4:	f7f5 ff5c 	bl	8000b70 <__aeabi_fmul>
 800acb8:	1c01      	adds	r1, r0, #0
 800acba:	1c30      	adds	r0, r6, #0
 800acbc:	f7f5 fbf2 	bl	80004a4 <__aeabi_fadd>
 800acc0:	465b      	mov	r3, fp
 800acc2:	4651      	mov	r1, sl
 800acc4:	5058      	str	r0, [r3, r1]
 800acc6:	1c21      	adds	r1, r4, #0
 800acc8:	9808      	ldr	r0, [sp, #32]
 800acca:	f7f5 ff51 	bl	8000b70 <__aeabi_fmul>
 800acce:	1c29      	adds	r1, r5, #0
 800acd0:	1c06      	adds	r6, r0, #0
 800acd2:	9806      	ldr	r0, [sp, #24]
 800acd4:	f7f5 ff4c 	bl	8000b70 <__aeabi_fmul>
 800acd8:	1c01      	adds	r1, r0, #0
 800acda:	1c30      	adds	r0, r6, #0
 800acdc:	f7f6 f862 	bl	8000da4 <__aeabi_fsub>
 800ace0:	465b      	mov	r3, fp
 800ace2:	4649      	mov	r1, r9
 800ace4:	5058      	str	r0, [r3, r1]
 800ace6:	1c29      	adds	r1, r5, #0
 800ace8:	1c38      	adds	r0, r7, #0
 800acea:	f7f5 ff41 	bl	8000b70 <__aeabi_fmul>
 800acee:	1c21      	adds	r1, r4, #0
 800acf0:	1c06      	adds	r6, r0, #0
 800acf2:	9807      	ldr	r0, [sp, #28]
 800acf4:	f7f5 ff3c 	bl	8000b70 <__aeabi_fmul>
 800acf8:	1c01      	adds	r1, r0, #0
 800acfa:	1c30      	adds	r0, r6, #0
 800acfc:	f7f6 f852 	bl	8000da4 <__aeabi_fsub>
 800ad00:	4643      	mov	r3, r8
 800ad02:	1c29      	adds	r1, r5, #0
 800ad04:	6098      	str	r0, [r3, #8]
 800ad06:	9807      	ldr	r0, [sp, #28]
 800ad08:	f7f5 ff32 	bl	8000b70 <__aeabi_fmul>
 800ad0c:	1c21      	adds	r1, r4, #0
 800ad0e:	1c05      	adds	r5, r0, #0
 800ad10:	1c38      	adds	r0, r7, #0
 800ad12:	f7f5 ff2d 	bl	8000b70 <__aeabi_fmul>
 800ad16:	1c01      	adds	r1, r0, #0
 800ad18:	1c28      	adds	r0, r5, #0
 800ad1a:	f7f5 fbc3 	bl	80004a4 <__aeabi_fadd>
 800ad1e:	2108      	movs	r1, #8
 800ad20:	4249      	negs	r1, r1
 800ad22:	468c      	mov	ip, r1
 800ad24:	4643      	mov	r3, r8
 800ad26:	3110      	adds	r1, #16
 800ad28:	44e0      	add	r8, ip
 800ad2a:	468c      	mov	ip, r1
 800ad2c:	9a03      	ldr	r2, [sp, #12]
 800ad2e:	9d01      	ldr	r5, [sp, #4]
 800ad30:	6058      	str	r0, [r3, #4]
 800ad32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad34:	3a08      	subs	r2, #8
 800ad36:	3b01      	subs	r3, #1
 800ad38:	3d08      	subs	r5, #8
 800ad3a:	9315      	str	r3, [sp, #84]	; 0x54
 800ad3c:	44e2      	add	sl, ip
 800ad3e:	44e1      	add	r9, ip
 800ad40:	9203      	str	r2, [sp, #12]
 800ad42:	9501      	str	r5, [sp, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d000      	beq.n	800ad4a <arm_cfft_radix8by4_f32+0x4ee>
 800ad48:	e63b      	b.n	800a9c2 <arm_cfft_radix8by4_f32+0x166>
 800ad4a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad4e:	468c      	mov	ip, r1
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	981e      	ldr	r0, [sp, #120]	; 0x78
 800ad54:	469a      	mov	sl, r3
 800ad56:	00d3      	lsls	r3, r2, #3
 800ad58:	449c      	add	ip, r3
 800ad5a:	4661      	mov	r1, ip
 800ad5c:	911a      	str	r1, [sp, #104]	; 0x68
 800ad5e:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ad60:	46d9      	mov	r9, fp
 800ad62:	468c      	mov	ip, r1
 800ad64:	449c      	add	ip, r3
 800ad66:	4661      	mov	r1, ip
 800ad68:	911d      	str	r1, [sp, #116]	; 0x74
 800ad6a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ad6c:	468c      	mov	ip, r1
 800ad6e:	449c      	add	ip, r3
 800ad70:	4661      	mov	r1, ip
 800ad72:	4684      	mov	ip, r0
 800ad74:	9119      	str	r1, [sp, #100]	; 0x64
 800ad76:	0011      	movs	r1, r2
 800ad78:	0112      	lsls	r2, r2, #4
 800ad7a:	4494      	add	ip, r2
 800ad7c:	4662      	mov	r2, ip
 800ad7e:	921e      	str	r2, [sp, #120]	; 0x78
 800ad80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ad82:	4694      	mov	ip, r2
 800ad84:	449c      	add	ip, r3
 800ad86:	4662      	mov	r2, ip
 800ad88:	468c      	mov	ip, r1
 800ad8a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad8c:	004a      	lsls	r2, r1, #1
 800ad8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad90:	4462      	add	r2, ip
 800ad92:	468c      	mov	ip, r1
 800ad94:	00d2      	lsls	r2, r2, #3
 800ad96:	4494      	add	ip, r2
 800ad98:	4662      	mov	r2, ip
 800ad9a:	921c      	str	r2, [sp, #112]	; 0x70
 800ad9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad9e:	4694      	mov	ip, r2
 800ada0:	449c      	add	ip, r3
 800ada2:	4663      	mov	r3, ip
 800ada4:	9318      	str	r3, [sp, #96]	; 0x60
 800ada6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ada8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800adaa:	6834      	ldr	r4, [r6, #0]
 800adac:	683d      	ldr	r5, [r7, #0]
 800adae:	1c20      	adds	r0, r4, #0
 800adb0:	1c29      	adds	r1, r5, #0
 800adb2:	f7f5 fb77 	bl	80004a4 <__aeabi_fadd>
 800adb6:	1c29      	adds	r1, r5, #0
 800adb8:	9001      	str	r0, [sp, #4]
 800adba:	1c20      	adds	r0, r4, #0
 800adbc:	f7f5 fff2 	bl	8000da4 <__aeabi_fsub>
 800adc0:	6874      	ldr	r4, [r6, #4]
 800adc2:	687d      	ldr	r5, [r7, #4]
 800adc4:	4683      	mov	fp, r0
 800adc6:	1c29      	adds	r1, r5, #0
 800adc8:	1c20      	adds	r0, r4, #0
 800adca:	961a      	str	r6, [sp, #104]	; 0x68
 800adcc:	971b      	str	r7, [sp, #108]	; 0x6c
 800adce:	f7f5 fb69 	bl	80004a4 <__aeabi_fadd>
 800add2:	1c29      	adds	r1, r5, #0
 800add4:	9002      	str	r0, [sp, #8]
 800add6:	1c20      	adds	r0, r4, #0
 800add8:	f7f5 ffe4 	bl	8000da4 <__aeabi_fsub>
 800addc:	465b      	mov	r3, fp
 800adde:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800ade0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ade2:	6867      	ldr	r7, [r4, #4]
 800ade4:	6876      	ldr	r6, [r6, #4]
 800ade6:	4680      	mov	r8, r0
 800ade8:	4659      	mov	r1, fp
 800adea:	1c38      	adds	r0, r7, #0
 800adec:	9303      	str	r3, [sp, #12]
 800adee:	f7f5 fb59 	bl	80004a4 <__aeabi_fadd>
 800adf2:	1c31      	adds	r1, r6, #0
 800adf4:	f7f5 ffd6 	bl	8000da4 <__aeabi_fsub>
 800adf8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800adfa:	6825      	ldr	r5, [r4, #0]
 800adfc:	9419      	str	r4, [sp, #100]	; 0x64
 800adfe:	681c      	ldr	r4, [r3, #0]
 800ae00:	9005      	str	r0, [sp, #20]
 800ae02:	1c29      	adds	r1, r5, #0
 800ae04:	4640      	mov	r0, r8
 800ae06:	f7f5 ffcd 	bl	8000da4 <__aeabi_fsub>
 800ae0a:	1c21      	adds	r1, r4, #0
 800ae0c:	f7f5 fb4a 	bl	80004a4 <__aeabi_fadd>
 800ae10:	1c29      	adds	r1, r5, #0
 800ae12:	4683      	mov	fp, r0
 800ae14:	9801      	ldr	r0, [sp, #4]
 800ae16:	f7f5 ffc5 	bl	8000da4 <__aeabi_fsub>
 800ae1a:	1c21      	adds	r1, r4, #0
 800ae1c:	f7f5 ffc2 	bl	8000da4 <__aeabi_fsub>
 800ae20:	1c39      	adds	r1, r7, #0
 800ae22:	9006      	str	r0, [sp, #24]
 800ae24:	9802      	ldr	r0, [sp, #8]
 800ae26:	f7f5 ffbd 	bl	8000da4 <__aeabi_fsub>
 800ae2a:	1c31      	adds	r1, r6, #0
 800ae2c:	f7f5 ffba 	bl	8000da4 <__aeabi_fsub>
 800ae30:	1c39      	adds	r1, r7, #0
 800ae32:	9007      	str	r0, [sp, #28]
 800ae34:	9803      	ldr	r0, [sp, #12]
 800ae36:	f7f5 ffb5 	bl	8000da4 <__aeabi_fsub>
 800ae3a:	1c31      	adds	r1, r6, #0
 800ae3c:	f7f5 fb32 	bl	80004a4 <__aeabi_fadd>
 800ae40:	4641      	mov	r1, r8
 800ae42:	9003      	str	r0, [sp, #12]
 800ae44:	1c28      	adds	r0, r5, #0
 800ae46:	f7f5 fb2d 	bl	80004a4 <__aeabi_fadd>
 800ae4a:	1c21      	adds	r1, r4, #0
 800ae4c:	f7f5 ffaa 	bl	8000da4 <__aeabi_fsub>
 800ae50:	9901      	ldr	r1, [sp, #4]
 800ae52:	1c07      	adds	r7, r0, #0
 800ae54:	1c28      	adds	r0, r5, #0
 800ae56:	f7f5 fb25 	bl	80004a4 <__aeabi_fadd>
 800ae5a:	1c21      	adds	r1, r4, #0
 800ae5c:	f7f5 fb22 	bl	80004a4 <__aeabi_fadd>
 800ae60:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ae62:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ae64:	6028      	str	r0, [r5, #0]
 800ae66:	6871      	ldr	r1, [r6, #4]
 800ae68:	9802      	ldr	r0, [sp, #8]
 800ae6a:	f7f5 fb1b 	bl	80004a4 <__aeabi_fadd>
 800ae6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ae70:	6859      	ldr	r1, [r3, #4]
 800ae72:	f7f5 fb17 	bl	80004a4 <__aeabi_fadd>
 800ae76:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ae78:	6068      	str	r0, [r5, #4]
 800ae7a:	6815      	ldr	r5, [r2, #0]
 800ae7c:	9b05      	ldr	r3, [sp, #20]
 800ae7e:	1c29      	adds	r1, r5, #0
 800ae80:	1c18      	adds	r0, r3, #0
 800ae82:	6854      	ldr	r4, [r2, #4]
 800ae84:	4698      	mov	r8, r3
 800ae86:	f7f5 fe73 	bl	8000b70 <__aeabi_fmul>
 800ae8a:	1c21      	adds	r1, r4, #0
 800ae8c:	1c06      	adds	r6, r0, #0
 800ae8e:	4658      	mov	r0, fp
 800ae90:	f7f5 fe6e 	bl	8000b70 <__aeabi_fmul>
 800ae94:	1c01      	adds	r1, r0, #0
 800ae96:	1c30      	adds	r0, r6, #0
 800ae98:	f7f5 fb04 	bl	80004a4 <__aeabi_fadd>
 800ae9c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ae9e:	1c29      	adds	r1, r5, #0
 800aea0:	6030      	str	r0, [r6, #0]
 800aea2:	4658      	mov	r0, fp
 800aea4:	f7f5 fe64 	bl	8000b70 <__aeabi_fmul>
 800aea8:	1c21      	adds	r1, r4, #0
 800aeaa:	1c05      	adds	r5, r0, #0
 800aeac:	4640      	mov	r0, r8
 800aeae:	f7f5 fe5f 	bl	8000b70 <__aeabi_fmul>
 800aeb2:	1c01      	adds	r1, r0, #0
 800aeb4:	1c28      	adds	r0, r5, #0
 800aeb6:	f7f5 ff75 	bl	8000da4 <__aeabi_fsub>
 800aeba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aebc:	6070      	str	r0, [r6, #4]
 800aebe:	6815      	ldr	r5, [r2, #0]
 800aec0:	9b06      	ldr	r3, [sp, #24]
 800aec2:	1c29      	adds	r1, r5, #0
 800aec4:	1c18      	adds	r0, r3, #0
 800aec6:	6854      	ldr	r4, [r2, #4]
 800aec8:	4698      	mov	r8, r3
 800aeca:	f7f5 fe51 	bl	8000b70 <__aeabi_fmul>
 800aece:	9b07      	ldr	r3, [sp, #28]
 800aed0:	1c06      	adds	r6, r0, #0
 800aed2:	1c21      	adds	r1, r4, #0
 800aed4:	1c18      	adds	r0, r3, #0
 800aed6:	469b      	mov	fp, r3
 800aed8:	f7f5 fe4a 	bl	8000b70 <__aeabi_fmul>
 800aedc:	1c01      	adds	r1, r0, #0
 800aede:	1c30      	adds	r0, r6, #0
 800aee0:	f7f5 fae0 	bl	80004a4 <__aeabi_fadd>
 800aee4:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800aee6:	1c29      	adds	r1, r5, #0
 800aee8:	6030      	str	r0, [r6, #0]
 800aeea:	4658      	mov	r0, fp
 800aeec:	f7f5 fe40 	bl	8000b70 <__aeabi_fmul>
 800aef0:	1c21      	adds	r1, r4, #0
 800aef2:	1c05      	adds	r5, r0, #0
 800aef4:	4640      	mov	r0, r8
 800aef6:	f7f5 fe3b 	bl	8000b70 <__aeabi_fmul>
 800aefa:	1c01      	adds	r1, r0, #0
 800aefc:	1c28      	adds	r0, r5, #0
 800aefe:	f7f5 ff51 	bl	8000da4 <__aeabi_fsub>
 800af02:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800af04:	6070      	str	r0, [r6, #4]
 800af06:	6815      	ldr	r5, [r2, #0]
 800af08:	9b03      	ldr	r3, [sp, #12]
 800af0a:	1c29      	adds	r1, r5, #0
 800af0c:	1c18      	adds	r0, r3, #0
 800af0e:	6854      	ldr	r4, [r2, #4]
 800af10:	4698      	mov	r8, r3
 800af12:	f7f5 fe2d 	bl	8000b70 <__aeabi_fmul>
 800af16:	1c21      	adds	r1, r4, #0
 800af18:	1c06      	adds	r6, r0, #0
 800af1a:	1c38      	adds	r0, r7, #0
 800af1c:	f7f5 fe28 	bl	8000b70 <__aeabi_fmul>
 800af20:	1c01      	adds	r1, r0, #0
 800af22:	1c30      	adds	r0, r6, #0
 800af24:	f7f5 fabe 	bl	80004a4 <__aeabi_fadd>
 800af28:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800af2a:	1c29      	adds	r1, r5, #0
 800af2c:	6030      	str	r0, [r6, #0]
 800af2e:	1c38      	adds	r0, r7, #0
 800af30:	f7f5 fe1e 	bl	8000b70 <__aeabi_fmul>
 800af34:	1c21      	adds	r1, r4, #0
 800af36:	1c05      	adds	r5, r0, #0
 800af38:	4640      	mov	r0, r8
 800af3a:	f7f5 fe19 	bl	8000b70 <__aeabi_fmul>
 800af3e:	1c01      	adds	r1, r0, #0
 800af40:	1c28      	adds	r0, r5, #0
 800af42:	f7f5 ff2f 	bl	8000da4 <__aeabi_fsub>
 800af46:	466b      	mov	r3, sp
 800af48:	227c      	movs	r2, #124	; 0x7c
 800af4a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800af4c:	6070      	str	r0, [r6, #4]
 800af4e:	189b      	adds	r3, r3, r2
 800af50:	881c      	ldrh	r4, [r3, #0]
 800af52:	686b      	ldr	r3, [r5, #4]
 800af54:	0021      	movs	r1, r4
 800af56:	9301      	str	r3, [sp, #4]
 800af58:	9a01      	ldr	r2, [sp, #4]
 800af5a:	9804      	ldr	r0, [sp, #16]
 800af5c:	2304      	movs	r3, #4
 800af5e:	f000 f97b 	bl	800b258 <arm_radix8_butterfly_f32>
 800af62:	686b      	ldr	r3, [r5, #4]
 800af64:	0021      	movs	r1, r4
 800af66:	9301      	str	r3, [sp, #4]
 800af68:	9a01      	ldr	r2, [sp, #4]
 800af6a:	4650      	mov	r0, sl
 800af6c:	2304      	movs	r3, #4
 800af6e:	f000 f973 	bl	800b258 <arm_radix8_butterfly_f32>
 800af72:	686b      	ldr	r3, [r5, #4]
 800af74:	0021      	movs	r1, r4
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	9a01      	ldr	r2, [sp, #4]
 800af7a:	9800      	ldr	r0, [sp, #0]
 800af7c:	2304      	movs	r3, #4
 800af7e:	f000 f96b 	bl	800b258 <arm_radix8_butterfly_f32>
 800af82:	686a      	ldr	r2, [r5, #4]
 800af84:	2304      	movs	r3, #4
 800af86:	0021      	movs	r1, r4
 800af88:	4648      	mov	r0, r9
 800af8a:	f000 f965 	bl	800b258 <arm_radix8_butterfly_f32>
 800af8e:	b023      	add	sp, #140	; 0x8c
 800af90:	bc3c      	pop	{r2, r3, r4, r5}
 800af92:	4690      	mov	r8, r2
 800af94:	4699      	mov	r9, r3
 800af96:	46a2      	mov	sl, r4
 800af98:	46ab      	mov	fp, r5
 800af9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af9c <arm_cfft_f32>:
 800af9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af9e:	46c6      	mov	lr, r8
 800afa0:	b500      	push	{lr}
 800afa2:	0006      	movs	r6, r0
 800afa4:	000d      	movs	r5, r1
 800afa6:	0017      	movs	r7, r2
 800afa8:	4698      	mov	r8, r3
 800afaa:	8804      	ldrh	r4, [r0, #0]
 800afac:	2a01      	cmp	r2, #1
 800afae:	d05c      	beq.n	800b06a <arm_cfft_f32+0xce>
 800afb0:	2380      	movs	r3, #128	; 0x80
 800afb2:	005b      	lsls	r3, r3, #1
 800afb4:	429c      	cmp	r4, r3
 800afb6:	d067      	beq.n	800b088 <arm_cfft_f32+0xec>
 800afb8:	d91a      	bls.n	800aff0 <arm_cfft_f32+0x54>
 800afba:	2380      	movs	r3, #128	; 0x80
 800afbc:	00db      	lsls	r3, r3, #3
 800afbe:	429c      	cmp	r4, r3
 800afc0:	d01d      	beq.n	800affe <arm_cfft_f32+0x62>
 800afc2:	d94a      	bls.n	800b05a <arm_cfft_f32+0xbe>
 800afc4:	2380      	movs	r3, #128	; 0x80
 800afc6:	011b      	lsls	r3, r3, #4
 800afc8:	429c      	cmp	r4, r3
 800afca:	d05d      	beq.n	800b088 <arm_cfft_f32+0xec>
 800afcc:	2380      	movs	r3, #128	; 0x80
 800afce:	015b      	lsls	r3, r3, #5
 800afd0:	429c      	cmp	r4, r3
 800afd2:	d105      	bne.n	800afe0 <arm_cfft_f32+0x44>
 800afd4:	2301      	movs	r3, #1
 800afd6:	6872      	ldr	r2, [r6, #4]
 800afd8:	0021      	movs	r1, r4
 800afda:	0028      	movs	r0, r5
 800afdc:	f000 f93c 	bl	800b258 <arm_radix8_butterfly_f32>
 800afe0:	4643      	mov	r3, r8
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d112      	bne.n	800b00c <arm_cfft_f32+0x70>
 800afe6:	2f01      	cmp	r7, #1
 800afe8:	d017      	beq.n	800b01a <arm_cfft_f32+0x7e>
 800afea:	bc04      	pop	{r2}
 800afec:	4690      	mov	r8, r2
 800afee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff0:	2c20      	cmp	r4, #32
 800aff2:	d049      	beq.n	800b088 <arm_cfft_f32+0xec>
 800aff4:	d936      	bls.n	800b064 <arm_cfft_f32+0xc8>
 800aff6:	2c40      	cmp	r4, #64	; 0x40
 800aff8:	d0ec      	beq.n	800afd4 <arm_cfft_f32+0x38>
 800affa:	2c80      	cmp	r4, #128	; 0x80
 800affc:	d1f0      	bne.n	800afe0 <arm_cfft_f32+0x44>
 800affe:	0029      	movs	r1, r5
 800b000:	0030      	movs	r0, r6
 800b002:	f7ff fae3 	bl	800a5cc <arm_cfft_radix8by2_f32>
 800b006:	4643      	mov	r3, r8
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0ec      	beq.n	800afe6 <arm_cfft_f32+0x4a>
 800b00c:	68b2      	ldr	r2, [r6, #8]
 800b00e:	89b1      	ldrh	r1, [r6, #12]
 800b010:	0028      	movs	r0, r5
 800b012:	f000 f843 	bl	800b09c <arm_bitreversal_32>
 800b016:	2f01      	cmp	r7, #1
 800b018:	d1e7      	bne.n	800afea <arm_cfft_f32+0x4e>
 800b01a:	0020      	movs	r0, r4
 800b01c:	f7f6 f906 	bl	800122c <__aeabi_ui2f>
 800b020:	1c01      	adds	r1, r0, #0
 800b022:	20fe      	movs	r0, #254	; 0xfe
 800b024:	0580      	lsls	r0, r0, #22
 800b026:	f7f5 fbd9 	bl	80007dc <__aeabi_fdiv>
 800b02a:	1c07      	adds	r7, r0, #0
 800b02c:	2c00      	cmp	r4, #0
 800b02e:	d0dc      	beq.n	800afea <arm_cfft_f32+0x4e>
 800b030:	2600      	movs	r6, #0
 800b032:	6828      	ldr	r0, [r5, #0]
 800b034:	1c39      	adds	r1, r7, #0
 800b036:	f7f5 fd9b 	bl	8000b70 <__aeabi_fmul>
 800b03a:	2280      	movs	r2, #128	; 0x80
 800b03c:	0612      	lsls	r2, r2, #24
 800b03e:	4694      	mov	ip, r2
 800b040:	686b      	ldr	r3, [r5, #4]
 800b042:	6028      	str	r0, [r5, #0]
 800b044:	4463      	add	r3, ip
 800b046:	0018      	movs	r0, r3
 800b048:	1c39      	adds	r1, r7, #0
 800b04a:	f7f5 fd91 	bl	8000b70 <__aeabi_fmul>
 800b04e:	3601      	adds	r6, #1
 800b050:	6068      	str	r0, [r5, #4]
 800b052:	3508      	adds	r5, #8
 800b054:	42b4      	cmp	r4, r6
 800b056:	d8ec      	bhi.n	800b032 <arm_cfft_f32+0x96>
 800b058:	e7c7      	b.n	800afea <arm_cfft_f32+0x4e>
 800b05a:	2380      	movs	r3, #128	; 0x80
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	429c      	cmp	r4, r3
 800b060:	d0b8      	beq.n	800afd4 <arm_cfft_f32+0x38>
 800b062:	e7bd      	b.n	800afe0 <arm_cfft_f32+0x44>
 800b064:	2c10      	cmp	r4, #16
 800b066:	d0ca      	beq.n	800affe <arm_cfft_f32+0x62>
 800b068:	e7ba      	b.n	800afe0 <arm_cfft_f32+0x44>
 800b06a:	1d0b      	adds	r3, r1, #4
 800b06c:	2c00      	cmp	r4, #0
 800b06e:	d010      	beq.n	800b092 <arm_cfft_f32+0xf6>
 800b070:	2100      	movs	r1, #0
 800b072:	2080      	movs	r0, #128	; 0x80
 800b074:	0600      	lsls	r0, r0, #24
 800b076:	4684      	mov	ip, r0
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	3101      	adds	r1, #1
 800b07c:	4462      	add	r2, ip
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	3308      	adds	r3, #8
 800b082:	428c      	cmp	r4, r1
 800b084:	d8f5      	bhi.n	800b072 <arm_cfft_f32+0xd6>
 800b086:	e793      	b.n	800afb0 <arm_cfft_f32+0x14>
 800b088:	0029      	movs	r1, r5
 800b08a:	0030      	movs	r0, r6
 800b08c:	f7ff fbe6 	bl	800a85c <arm_cfft_radix8by4_f32>
 800b090:	e7a6      	b.n	800afe0 <arm_cfft_f32+0x44>
 800b092:	4643      	mov	r3, r8
 800b094:	2b00      	cmp	r3, #0
 800b096:	d0a8      	beq.n	800afea <arm_cfft_f32+0x4e>
 800b098:	e7b8      	b.n	800b00c <arm_cfft_f32+0x70>
 800b09a:	46c0      	nop			; (mov r8, r8)

0800b09c <arm_bitreversal_32>:
 800b09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b09e:	46c6      	mov	lr, r8
 800b0a0:	4688      	mov	r8, r1
 800b0a2:	b500      	push	{lr}
 800b0a4:	2900      	cmp	r1, #0
 800b0a6:	d01a      	beq.n	800b0de <arm_bitreversal_32+0x42>
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	8814      	ldrh	r4, [r2, #0]
 800b0ac:	3502      	adds	r5, #2
 800b0ae:	08a4      	lsrs	r4, r4, #2
 800b0b0:	00a4      	lsls	r4, r4, #2
 800b0b2:	1907      	adds	r7, r0, r4
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	3404      	adds	r4, #4
 800b0b8:	469c      	mov	ip, r3
 800b0ba:	8853      	ldrh	r3, [r2, #2]
 800b0bc:	1904      	adds	r4, r0, r4
 800b0be:	089b      	lsrs	r3, r3, #2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	18c6      	adds	r6, r0, r3
 800b0c4:	6831      	ldr	r1, [r6, #0]
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	6039      	str	r1, [r7, #0]
 800b0ca:	4661      	mov	r1, ip
 800b0cc:	18c3      	adds	r3, r0, r3
 800b0ce:	6031      	str	r1, [r6, #0]
 800b0d0:	6826      	ldr	r6, [r4, #0]
 800b0d2:	6819      	ldr	r1, [r3, #0]
 800b0d4:	3204      	adds	r2, #4
 800b0d6:	6021      	str	r1, [r4, #0]
 800b0d8:	601e      	str	r6, [r3, #0]
 800b0da:	4545      	cmp	r5, r8
 800b0dc:	d3e5      	bcc.n	800b0aa <arm_bitreversal_32+0xe>
 800b0de:	bc04      	pop	{r2}
 800b0e0:	4690      	mov	r8, r2
 800b0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0e4 <arm_cmplx_mag_f32>:
 800b0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0e6:	4657      	mov	r7, sl
 800b0e8:	464e      	mov	r6, r9
 800b0ea:	4645      	mov	r5, r8
 800b0ec:	46de      	mov	lr, fp
 800b0ee:	b5e0      	push	{r5, r6, r7, lr}
 800b0f0:	0893      	lsrs	r3, r2, #2
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	4680      	mov	r8, r0
 800b0f6:	4689      	mov	r9, r1
 800b0f8:	9201      	str	r2, [sp, #4]
 800b0fa:	469a      	mov	sl, r3
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d06f      	beq.n	800b1e0 <arm_cmplx_mag_f32+0xfc>
 800b100:	0004      	movs	r4, r0
 800b102:	000d      	movs	r5, r1
 800b104:	001e      	movs	r6, r3
 800b106:	6821      	ldr	r1, [r4, #0]
 800b108:	6867      	ldr	r7, [r4, #4]
 800b10a:	1c08      	adds	r0, r1, #0
 800b10c:	f7f5 fd30 	bl	8000b70 <__aeabi_fmul>
 800b110:	1c39      	adds	r1, r7, #0
 800b112:	4683      	mov	fp, r0
 800b114:	1c38      	adds	r0, r7, #0
 800b116:	f7f5 fd2b 	bl	8000b70 <__aeabi_fmul>
 800b11a:	1c01      	adds	r1, r0, #0
 800b11c:	4658      	mov	r0, fp
 800b11e:	f7f5 f9c1 	bl	80004a4 <__aeabi_fadd>
 800b122:	2100      	movs	r1, #0
 800b124:	1c07      	adds	r7, r0, #0
 800b126:	f7f5 f99b 	bl	8000460 <__aeabi_fcmpge>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d100      	bne.n	800b130 <arm_cmplx_mag_f32+0x4c>
 800b12e:	e084      	b.n	800b23a <arm_cmplx_mag_f32+0x156>
 800b130:	1c38      	adds	r0, r7, #0
 800b132:	f000 fe7b 	bl	800be2c <sqrtf>
 800b136:	6028      	str	r0, [r5, #0]
 800b138:	68a1      	ldr	r1, [r4, #8]
 800b13a:	68e7      	ldr	r7, [r4, #12]
 800b13c:	1c08      	adds	r0, r1, #0
 800b13e:	f7f5 fd17 	bl	8000b70 <__aeabi_fmul>
 800b142:	1c39      	adds	r1, r7, #0
 800b144:	4683      	mov	fp, r0
 800b146:	1c38      	adds	r0, r7, #0
 800b148:	f7f5 fd12 	bl	8000b70 <__aeabi_fmul>
 800b14c:	1c01      	adds	r1, r0, #0
 800b14e:	4658      	mov	r0, fp
 800b150:	f7f5 f9a8 	bl	80004a4 <__aeabi_fadd>
 800b154:	2100      	movs	r1, #0
 800b156:	1c07      	adds	r7, r0, #0
 800b158:	f7f5 f982 	bl	8000460 <__aeabi_fcmpge>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d100      	bne.n	800b162 <arm_cmplx_mag_f32+0x7e>
 800b160:	e074      	b.n	800b24c <arm_cmplx_mag_f32+0x168>
 800b162:	1c38      	adds	r0, r7, #0
 800b164:	f000 fe62 	bl	800be2c <sqrtf>
 800b168:	6068      	str	r0, [r5, #4]
 800b16a:	6921      	ldr	r1, [r4, #16]
 800b16c:	6967      	ldr	r7, [r4, #20]
 800b16e:	1c08      	adds	r0, r1, #0
 800b170:	f7f5 fcfe 	bl	8000b70 <__aeabi_fmul>
 800b174:	1c39      	adds	r1, r7, #0
 800b176:	4683      	mov	fp, r0
 800b178:	1c38      	adds	r0, r7, #0
 800b17a:	f7f5 fcf9 	bl	8000b70 <__aeabi_fmul>
 800b17e:	1c01      	adds	r1, r0, #0
 800b180:	4658      	mov	r0, fp
 800b182:	f7f5 f98f 	bl	80004a4 <__aeabi_fadd>
 800b186:	2100      	movs	r1, #0
 800b188:	1c07      	adds	r7, r0, #0
 800b18a:	f7f5 f969 	bl	8000460 <__aeabi_fcmpge>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d059      	beq.n	800b246 <arm_cmplx_mag_f32+0x162>
 800b192:	1c38      	adds	r0, r7, #0
 800b194:	f000 fe4a 	bl	800be2c <sqrtf>
 800b198:	60a8      	str	r0, [r5, #8]
 800b19a:	69a1      	ldr	r1, [r4, #24]
 800b19c:	69e7      	ldr	r7, [r4, #28]
 800b19e:	1c08      	adds	r0, r1, #0
 800b1a0:	f7f5 fce6 	bl	8000b70 <__aeabi_fmul>
 800b1a4:	1c39      	adds	r1, r7, #0
 800b1a6:	4683      	mov	fp, r0
 800b1a8:	1c38      	adds	r0, r7, #0
 800b1aa:	f7f5 fce1 	bl	8000b70 <__aeabi_fmul>
 800b1ae:	1c01      	adds	r1, r0, #0
 800b1b0:	4658      	mov	r0, fp
 800b1b2:	f7f5 f977 	bl	80004a4 <__aeabi_fadd>
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	1c07      	adds	r7, r0, #0
 800b1ba:	f7f5 f951 	bl	8000460 <__aeabi_fcmpge>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d03e      	beq.n	800b240 <arm_cmplx_mag_f32+0x15c>
 800b1c2:	1c38      	adds	r0, r7, #0
 800b1c4:	f000 fe32 	bl	800be2c <sqrtf>
 800b1c8:	60e8      	str	r0, [r5, #12]
 800b1ca:	3e01      	subs	r6, #1
 800b1cc:	3420      	adds	r4, #32
 800b1ce:	3510      	adds	r5, #16
 800b1d0:	2e00      	cmp	r6, #0
 800b1d2:	d198      	bne.n	800b106 <arm_cmplx_mag_f32+0x22>
 800b1d4:	4653      	mov	r3, sl
 800b1d6:	015b      	lsls	r3, r3, #5
 800b1d8:	4498      	add	r8, r3
 800b1da:	4653      	mov	r3, sl
 800b1dc:	011b      	lsls	r3, r3, #4
 800b1de:	4499      	add	r9, r3
 800b1e0:	2503      	movs	r5, #3
 800b1e2:	9b01      	ldr	r3, [sp, #4]
 800b1e4:	401d      	ands	r5, r3
 800b1e6:	d021      	beq.n	800b22c <arm_cmplx_mag_f32+0x148>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4644      	mov	r4, r8
 800b1ec:	464f      	mov	r7, r9
 800b1ee:	4699      	mov	r9, r3
 800b1f0:	00ed      	lsls	r5, r5, #3
 800b1f2:	1965      	adds	r5, r4, r5
 800b1f4:	6821      	ldr	r1, [r4, #0]
 800b1f6:	6866      	ldr	r6, [r4, #4]
 800b1f8:	1c08      	adds	r0, r1, #0
 800b1fa:	f7f5 fcb9 	bl	8000b70 <__aeabi_fmul>
 800b1fe:	1c31      	adds	r1, r6, #0
 800b200:	4680      	mov	r8, r0
 800b202:	1c30      	adds	r0, r6, #0
 800b204:	f7f5 fcb4 	bl	8000b70 <__aeabi_fmul>
 800b208:	1c01      	adds	r1, r0, #0
 800b20a:	4640      	mov	r0, r8
 800b20c:	f7f5 f94a 	bl	80004a4 <__aeabi_fadd>
 800b210:	2100      	movs	r1, #0
 800b212:	1c06      	adds	r6, r0, #0
 800b214:	f7f5 f924 	bl	8000460 <__aeabi_fcmpge>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d01a      	beq.n	800b252 <arm_cmplx_mag_f32+0x16e>
 800b21c:	1c30      	adds	r0, r6, #0
 800b21e:	f000 fe05 	bl	800be2c <sqrtf>
 800b222:	6038      	str	r0, [r7, #0]
 800b224:	3408      	adds	r4, #8
 800b226:	3704      	adds	r7, #4
 800b228:	42a5      	cmp	r5, r4
 800b22a:	d1e3      	bne.n	800b1f4 <arm_cmplx_mag_f32+0x110>
 800b22c:	b003      	add	sp, #12
 800b22e:	bc3c      	pop	{r2, r3, r4, r5}
 800b230:	4690      	mov	r8, r2
 800b232:	4699      	mov	r9, r3
 800b234:	46a2      	mov	sl, r4
 800b236:	46ab      	mov	fp, r5
 800b238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b23a:	2300      	movs	r3, #0
 800b23c:	602b      	str	r3, [r5, #0]
 800b23e:	e77b      	b.n	800b138 <arm_cmplx_mag_f32+0x54>
 800b240:	2300      	movs	r3, #0
 800b242:	60eb      	str	r3, [r5, #12]
 800b244:	e7c1      	b.n	800b1ca <arm_cmplx_mag_f32+0xe6>
 800b246:	2300      	movs	r3, #0
 800b248:	60ab      	str	r3, [r5, #8]
 800b24a:	e7a6      	b.n	800b19a <arm_cmplx_mag_f32+0xb6>
 800b24c:	2300      	movs	r3, #0
 800b24e:	606b      	str	r3, [r5, #4]
 800b250:	e78b      	b.n	800b16a <arm_cmplx_mag_f32+0x86>
 800b252:	464b      	mov	r3, r9
 800b254:	603b      	str	r3, [r7, #0]
 800b256:	e7e5      	b.n	800b224 <arm_cmplx_mag_f32+0x140>

0800b258 <arm_radix8_butterfly_f32>:
 800b258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b25a:	46de      	mov	lr, fp
 800b25c:	4657      	mov	r7, sl
 800b25e:	464e      	mov	r6, r9
 800b260:	4645      	mov	r5, r8
 800b262:	b5e0      	push	{r5, r6, r7, lr}
 800b264:	b0b5      	sub	sp, #212	; 0xd4
 800b266:	9331      	str	r3, [sp, #196]	; 0xc4
 800b268:	0003      	movs	r3, r0
 800b26a:	3304      	adds	r3, #4
 800b26c:	9305      	str	r3, [sp, #20]
 800b26e:	0013      	movs	r3, r2
 800b270:	9118      	str	r1, [sp, #96]	; 0x60
 800b272:	3304      	adds	r3, #4
 800b274:	9333      	str	r3, [sp, #204]	; 0xcc
 800b276:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b278:	9002      	str	r0, [sp, #8]
 800b27a:	911a      	str	r1, [sp, #104]	; 0x68
 800b27c:	9232      	str	r2, [sp, #200]	; 0xc8
 800b27e:	08da      	lsrs	r2, r3, #3
 800b280:	4694      	mov	ip, r2
 800b282:	00db      	lsls	r3, r3, #3
 800b284:	9319      	str	r3, [sp, #100]	; 0x64
 800b286:	0053      	lsls	r3, r2, #1
 800b288:	4463      	add	r3, ip
 800b28a:	00db      	lsls	r3, r3, #3
 800b28c:	469c      	mov	ip, r3
 800b28e:	9902      	ldr	r1, [sp, #8]
 800b290:	9317      	str	r3, [sp, #92]	; 0x5c
 800b292:	4461      	add	r1, ip
 800b294:	000b      	movs	r3, r1
 800b296:	9100      	str	r1, [sp, #0]
 800b298:	0151      	lsls	r1, r2, #5
 800b29a:	468b      	mov	fp, r1
 800b29c:	445b      	add	r3, fp
 800b29e:	4698      	mov	r8, r3
 800b2a0:	0093      	lsls	r3, r2, #2
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	011b      	lsls	r3, r3, #4
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	00d1      	lsls	r1, r2, #3
 800b2aa:	4440      	add	r0, r8
 800b2ac:	0113      	lsls	r3, r2, #4
 800b2ae:	4684      	mov	ip, r0
 800b2b0:	9315      	str	r3, [sp, #84]	; 0x54
 800b2b2:	000b      	movs	r3, r1
 800b2b4:	4463      	add	r3, ip
 800b2b6:	9014      	str	r0, [sp, #80]	; 0x50
 800b2b8:	0018      	movs	r0, r3
 800b2ba:	468c      	mov	ip, r1
 800b2bc:	9313      	str	r3, [sp, #76]	; 0x4c
 800b2be:	424b      	negs	r3, r1
 800b2c0:	9230      	str	r2, [sp, #192]	; 0xc0
 800b2c2:	18c2      	adds	r2, r0, r3
 800b2c4:	1d10      	adds	r0, r2, #4
 800b2c6:	4462      	add	r2, ip
 800b2c8:	4694      	mov	ip, r2
 800b2ca:	2600      	movs	r6, #0
 800b2cc:	4463      	add	r3, ip
 800b2ce:	9308      	str	r3, [sp, #32]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	46da      	mov	sl, fp
 800b2d8:	46b3      	mov	fp, r6
 800b2da:	9116      	str	r1, [sp, #88]	; 0x58
 800b2dc:	1d11      	adds	r1, r2, #4
 800b2de:	9012      	str	r0, [sp, #72]	; 0x48
 800b2e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b2e2:	9101      	str	r1, [sp, #4]
 800b2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e6:	465b      	mov	r3, fp
 800b2e8:	9d02      	ldr	r5, [sp, #8]
 800b2ea:	58ec      	ldr	r4, [r5, r3]
 800b2ec:	4653      	mov	r3, sl
 800b2ee:	58ed      	ldr	r5, [r5, r3]
 800b2f0:	1c20      	adds	r0, r4, #0
 800b2f2:	1c29      	adds	r1, r5, #0
 800b2f4:	f7f5 f8d6 	bl	80004a4 <__aeabi_fadd>
 800b2f8:	1c29      	adds	r1, r5, #0
 800b2fa:	1c06      	adds	r6, r0, #0
 800b2fc:	1c20      	adds	r0, r4, #0
 800b2fe:	f7f5 fd51 	bl	8000da4 <__aeabi_fsub>
 800b302:	465a      	mov	r2, fp
 800b304:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b306:	900c      	str	r0, [sp, #48]	; 0x30
 800b308:	589d      	ldr	r5, [r3, r2]
 800b30a:	4652      	mov	r2, sl
 800b30c:	589f      	ldr	r7, [r3, r2]
 800b30e:	1c28      	adds	r0, r5, #0
 800b310:	1c39      	adds	r1, r7, #0
 800b312:	f7f5 f8c7 	bl	80004a4 <__aeabi_fadd>
 800b316:	1c39      	adds	r1, r7, #0
 800b318:	1c04      	adds	r4, r0, #0
 800b31a:	1c28      	adds	r0, r5, #0
 800b31c:	f7f5 fd42 	bl	8000da4 <__aeabi_fsub>
 800b320:	465a      	mov	r2, fp
 800b322:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b324:	900d      	str	r0, [sp, #52]	; 0x34
 800b326:	589d      	ldr	r5, [r3, r2]
 800b328:	4652      	mov	r2, sl
 800b32a:	589f      	ldr	r7, [r3, r2]
 800b32c:	1c28      	adds	r0, r5, #0
 800b32e:	1c39      	adds	r1, r7, #0
 800b330:	f7f5 f8b8 	bl	80004a4 <__aeabi_fadd>
 800b334:	1c39      	adds	r1, r7, #0
 800b336:	9003      	str	r0, [sp, #12]
 800b338:	1c28      	adds	r0, r5, #0
 800b33a:	f7f5 fd33 	bl	8000da4 <__aeabi_fsub>
 800b33e:	4642      	mov	r2, r8
 800b340:	9b00      	ldr	r3, [sp, #0]
 800b342:	6812      	ldr	r2, [r2, #0]
 800b344:	681f      	ldr	r7, [r3, #0]
 800b346:	1c11      	adds	r1, r2, #0
 800b348:	900e      	str	r0, [sp, #56]	; 0x38
 800b34a:	1c38      	adds	r0, r7, #0
 800b34c:	4691      	mov	r9, r2
 800b34e:	f7f5 f8a9 	bl	80004a4 <__aeabi_fadd>
 800b352:	4649      	mov	r1, r9
 800b354:	1c05      	adds	r5, r0, #0
 800b356:	1c38      	adds	r0, r7, #0
 800b358:	f7f5 fd24 	bl	8000da4 <__aeabi_fsub>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	900f      	str	r0, [sp, #60]	; 0x3c
 800b360:	1c19      	adds	r1, r3, #0
 800b362:	1c30      	adds	r0, r6, #0
 800b364:	4699      	mov	r9, r3
 800b366:	f7f5 fd1d 	bl	8000da4 <__aeabi_fsub>
 800b36a:	4649      	mov	r1, r9
 800b36c:	1c07      	adds	r7, r0, #0
 800b36e:	1c30      	adds	r0, r6, #0
 800b370:	f7f5 f898 	bl	80004a4 <__aeabi_fadd>
 800b374:	1c29      	adds	r1, r5, #0
 800b376:	1c06      	adds	r6, r0, #0
 800b378:	1c20      	adds	r0, r4, #0
 800b37a:	f7f5 fd13 	bl	8000da4 <__aeabi_fsub>
 800b37e:	1c29      	adds	r1, r5, #0
 800b380:	9010      	str	r0, [sp, #64]	; 0x40
 800b382:	1c20      	adds	r0, r4, #0
 800b384:	f7f5 f88e 	bl	80004a4 <__aeabi_fadd>
 800b388:	1c04      	adds	r4, r0, #0
 800b38a:	1c01      	adds	r1, r0, #0
 800b38c:	1c30      	adds	r0, r6, #0
 800b38e:	f7f5 f889 	bl	80004a4 <__aeabi_fadd>
 800b392:	465a      	mov	r2, fp
 800b394:	9d02      	ldr	r5, [sp, #8]
 800b396:	1c21      	adds	r1, r4, #0
 800b398:	50a8      	str	r0, [r5, r2]
 800b39a:	1c30      	adds	r0, r6, #0
 800b39c:	f7f5 fd02 	bl	8000da4 <__aeabi_fsub>
 800b3a0:	4652      	mov	r2, sl
 800b3a2:	4659      	mov	r1, fp
 800b3a4:	50a8      	str	r0, [r5, r2]
 800b3a6:	9a05      	ldr	r2, [sp, #20]
 800b3a8:	4656      	mov	r6, sl
 800b3aa:	5854      	ldr	r4, [r2, r1]
 800b3ac:	4651      	mov	r1, sl
 800b3ae:	5855      	ldr	r5, [r2, r1]
 800b3b0:	1c20      	adds	r0, r4, #0
 800b3b2:	1c29      	adds	r1, r5, #0
 800b3b4:	f7f5 f876 	bl	80004a4 <__aeabi_fadd>
 800b3b8:	1c29      	adds	r1, r5, #0
 800b3ba:	9003      	str	r0, [sp, #12]
 800b3bc:	4655      	mov	r5, sl
 800b3be:	1c20      	adds	r0, r4, #0
 800b3c0:	465c      	mov	r4, fp
 800b3c2:	f7f5 fcef 	bl	8000da4 <__aeabi_fsub>
 800b3c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b3c8:	9011      	str	r0, [sp, #68]	; 0x44
 800b3ca:	590c      	ldr	r4, [r1, r4]
 800b3cc:	594d      	ldr	r5, [r1, r5]
 800b3ce:	1c20      	adds	r0, r4, #0
 800b3d0:	1c29      	adds	r1, r5, #0
 800b3d2:	f7f5 f867 	bl	80004a4 <__aeabi_fadd>
 800b3d6:	1c29      	adds	r1, r5, #0
 800b3d8:	465d      	mov	r5, fp
 800b3da:	9004      	str	r0, [sp, #16]
 800b3dc:	1c20      	adds	r0, r4, #0
 800b3de:	f7f5 fce1 	bl	8000da4 <__aeabi_fsub>
 800b3e2:	9901      	ldr	r1, [sp, #4]
 800b3e4:	1c04      	adds	r4, r0, #0
 800b3e6:	594d      	ldr	r5, [r1, r5]
 800b3e8:	598e      	ldr	r6, [r1, r6]
 800b3ea:	1c28      	adds	r0, r5, #0
 800b3ec:	1c31      	adds	r1, r6, #0
 800b3ee:	f7f5 f859 	bl	80004a4 <__aeabi_fadd>
 800b3f2:	1c31      	adds	r1, r6, #0
 800b3f4:	4646      	mov	r6, r8
 800b3f6:	4681      	mov	r9, r0
 800b3f8:	1c28      	adds	r0, r5, #0
 800b3fa:	f7f5 fcd3 	bl	8000da4 <__aeabi_fsub>
 800b3fe:	9b00      	ldr	r3, [sp, #0]
 800b400:	6876      	ldr	r6, [r6, #4]
 800b402:	685d      	ldr	r5, [r3, #4]
 800b404:	1c31      	adds	r1, r6, #0
 800b406:	9006      	str	r0, [sp, #24]
 800b408:	1c28      	adds	r0, r5, #0
 800b40a:	f7f5 f84b 	bl	80004a4 <__aeabi_fadd>
 800b40e:	1c31      	adds	r1, r6, #0
 800b410:	9007      	str	r0, [sp, #28]
 800b412:	1c28      	adds	r0, r5, #0
 800b414:	f7f5 fcc6 	bl	8000da4 <__aeabi_fsub>
 800b418:	4649      	mov	r1, r9
 800b41a:	1c06      	adds	r6, r0, #0
 800b41c:	9803      	ldr	r0, [sp, #12]
 800b41e:	f7f5 fcc1 	bl	8000da4 <__aeabi_fsub>
 800b422:	4649      	mov	r1, r9
 800b424:	1c05      	adds	r5, r0, #0
 800b426:	9803      	ldr	r0, [sp, #12]
 800b428:	f7f5 f83c 	bl	80004a4 <__aeabi_fadd>
 800b42c:	9907      	ldr	r1, [sp, #28]
 800b42e:	4681      	mov	r9, r0
 800b430:	9804      	ldr	r0, [sp, #16]
 800b432:	f7f5 fcb7 	bl	8000da4 <__aeabi_fsub>
 800b436:	9907      	ldr	r1, [sp, #28]
 800b438:	9003      	str	r0, [sp, #12]
 800b43a:	9804      	ldr	r0, [sp, #16]
 800b43c:	f7f5 f832 	bl	80004a4 <__aeabi_fadd>
 800b440:	1c01      	adds	r1, r0, #0
 800b442:	9004      	str	r0, [sp, #16]
 800b444:	4648      	mov	r0, r9
 800b446:	f7f5 f82d 	bl	80004a4 <__aeabi_fadd>
 800b44a:	465b      	mov	r3, fp
 800b44c:	9a05      	ldr	r2, [sp, #20]
 800b44e:	9904      	ldr	r1, [sp, #16]
 800b450:	50d0      	str	r0, [r2, r3]
 800b452:	4648      	mov	r0, r9
 800b454:	f7f5 fca6 	bl	8000da4 <__aeabi_fsub>
 800b458:	4651      	mov	r1, sl
 800b45a:	9a05      	ldr	r2, [sp, #20]
 800b45c:	5050      	str	r0, [r2, r1]
 800b45e:	9b03      	ldr	r3, [sp, #12]
 800b460:	1c38      	adds	r0, r7, #0
 800b462:	1c19      	adds	r1, r3, #0
 800b464:	4699      	mov	r9, r3
 800b466:	f7f5 f81d 	bl	80004a4 <__aeabi_fadd>
 800b46a:	465b      	mov	r3, fp
 800b46c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b46e:	4649      	mov	r1, r9
 800b470:	50d0      	str	r0, [r2, r3]
 800b472:	1c38      	adds	r0, r7, #0
 800b474:	f7f5 fc96 	bl	8000da4 <__aeabi_fsub>
 800b478:	4657      	mov	r7, sl
 800b47a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b47c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47e:	1c19      	adds	r1, r3, #0
 800b480:	51d0      	str	r0, [r2, r7]
 800b482:	1c28      	adds	r0, r5, #0
 800b484:	4699      	mov	r9, r3
 800b486:	f7f5 fc8d 	bl	8000da4 <__aeabi_fsub>
 800b48a:	465a      	mov	r2, fp
 800b48c:	9f01      	ldr	r7, [sp, #4]
 800b48e:	1c29      	adds	r1, r5, #0
 800b490:	50b8      	str	r0, [r7, r2]
 800b492:	4648      	mov	r0, r9
 800b494:	f7f5 f806 	bl	80004a4 <__aeabi_fadd>
 800b498:	4652      	mov	r2, sl
 800b49a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b49c:	50b8      	str	r0, [r7, r2]
 800b49e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b4a0:	1c28      	adds	r0, r5, #0
 800b4a2:	1c39      	adds	r1, r7, #0
 800b4a4:	f7f5 fc7e 	bl	8000da4 <__aeabi_fsub>
 800b4a8:	497e      	ldr	r1, [pc, #504]	; (800b6a4 <arm_radix8_butterfly_f32+0x44c>)
 800b4aa:	f7f5 fb61 	bl	8000b70 <__aeabi_fmul>
 800b4ae:	1c39      	adds	r1, r7, #0
 800b4b0:	4681      	mov	r9, r0
 800b4b2:	1c28      	adds	r0, r5, #0
 800b4b4:	f7f4 fff6 	bl	80004a4 <__aeabi_fadd>
 800b4b8:	497a      	ldr	r1, [pc, #488]	; (800b6a4 <arm_radix8_butterfly_f32+0x44c>)
 800b4ba:	f7f5 fb59 	bl	8000b70 <__aeabi_fmul>
 800b4be:	1c31      	adds	r1, r6, #0
 800b4c0:	1c05      	adds	r5, r0, #0
 800b4c2:	1c20      	adds	r0, r4, #0
 800b4c4:	f7f5 fc6e 	bl	8000da4 <__aeabi_fsub>
 800b4c8:	4976      	ldr	r1, [pc, #472]	; (800b6a4 <arm_radix8_butterfly_f32+0x44c>)
 800b4ca:	f7f5 fb51 	bl	8000b70 <__aeabi_fmul>
 800b4ce:	1c31      	adds	r1, r6, #0
 800b4d0:	1c07      	adds	r7, r0, #0
 800b4d2:	1c20      	adds	r0, r4, #0
 800b4d4:	f7f4 ffe6 	bl	80004a4 <__aeabi_fadd>
 800b4d8:	4972      	ldr	r1, [pc, #456]	; (800b6a4 <arm_radix8_butterfly_f32+0x44c>)
 800b4da:	f7f5 fb49 	bl	8000b70 <__aeabi_fmul>
 800b4de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	9003      	str	r0, [sp, #12]
 800b4e4:	1c20      	adds	r0, r4, #0
 800b4e6:	f7f5 fc5d 	bl	8000da4 <__aeabi_fsub>
 800b4ea:	4649      	mov	r1, r9
 800b4ec:	9004      	str	r0, [sp, #16]
 800b4ee:	1c20      	adds	r0, r4, #0
 800b4f0:	f7f4 ffd8 	bl	80004a4 <__aeabi_fadd>
 800b4f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b4f6:	1c29      	adds	r1, r5, #0
 800b4f8:	9007      	str	r0, [sp, #28]
 800b4fa:	1c30      	adds	r0, r6, #0
 800b4fc:	f7f5 fc52 	bl	8000da4 <__aeabi_fsub>
 800b500:	1c29      	adds	r1, r5, #0
 800b502:	1c04      	adds	r4, r0, #0
 800b504:	1c30      	adds	r0, r6, #0
 800b506:	f7f4 ffcd 	bl	80004a4 <__aeabi_fadd>
 800b50a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b50c:	1c06      	adds	r6, r0, #0
 800b50e:	1c39      	adds	r1, r7, #0
 800b510:	1c18      	adds	r0, r3, #0
 800b512:	4699      	mov	r9, r3
 800b514:	f7f5 fc46 	bl	8000da4 <__aeabi_fsub>
 800b518:	1c39      	adds	r1, r7, #0
 800b51a:	1c05      	adds	r5, r0, #0
 800b51c:	4648      	mov	r0, r9
 800b51e:	f7f4 ffc1 	bl	80004a4 <__aeabi_fadd>
 800b522:	9903      	ldr	r1, [sp, #12]
 800b524:	1c07      	adds	r7, r0, #0
 800b526:	9806      	ldr	r0, [sp, #24]
 800b528:	f7f5 fc3c 	bl	8000da4 <__aeabi_fsub>
 800b52c:	9903      	ldr	r1, [sp, #12]
 800b52e:	4681      	mov	r9, r0
 800b530:	9806      	ldr	r0, [sp, #24]
 800b532:	f7f4 ffb7 	bl	80004a4 <__aeabi_fadd>
 800b536:	1c01      	adds	r1, r0, #0
 800b538:	9003      	str	r0, [sp, #12]
 800b53a:	9807      	ldr	r0, [sp, #28]
 800b53c:	f7f4 ffb2 	bl	80004a4 <__aeabi_fadd>
 800b540:	4659      	mov	r1, fp
 800b542:	9a08      	ldr	r2, [sp, #32]
 800b544:	5050      	str	r0, [r2, r1]
 800b546:	9903      	ldr	r1, [sp, #12]
 800b548:	9807      	ldr	r0, [sp, #28]
 800b54a:	f7f5 fc2b 	bl	8000da4 <__aeabi_fsub>
 800b54e:	4641      	mov	r1, r8
 800b550:	6008      	str	r0, [r1, #0]
 800b552:	4649      	mov	r1, r9
 800b554:	9804      	ldr	r0, [sp, #16]
 800b556:	f7f4 ffa5 	bl	80004a4 <__aeabi_fadd>
 800b55a:	4651      	mov	r1, sl
 800b55c:	9a08      	ldr	r2, [sp, #32]
 800b55e:	5050      	str	r0, [r2, r1]
 800b560:	4649      	mov	r1, r9
 800b562:	9804      	ldr	r0, [sp, #16]
 800b564:	f7f5 fc1e 	bl	8000da4 <__aeabi_fsub>
 800b568:	9b00      	ldr	r3, [sp, #0]
 800b56a:	1c31      	adds	r1, r6, #0
 800b56c:	6018      	str	r0, [r3, #0]
 800b56e:	1c38      	adds	r0, r7, #0
 800b570:	f7f5 fc18 	bl	8000da4 <__aeabi_fsub>
 800b574:	4659      	mov	r1, fp
 800b576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b578:	5050      	str	r0, [r2, r1]
 800b57a:	1c39      	adds	r1, r7, #0
 800b57c:	1c30      	adds	r0, r6, #0
 800b57e:	f7f4 ff91 	bl	80004a4 <__aeabi_fadd>
 800b582:	4641      	mov	r1, r8
 800b584:	6048      	str	r0, [r1, #4]
 800b586:	1c21      	adds	r1, r4, #0
 800b588:	1c28      	adds	r0, r5, #0
 800b58a:	f7f5 fc0b 	bl	8000da4 <__aeabi_fsub>
 800b58e:	4651      	mov	r1, sl
 800b590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b592:	5050      	str	r0, [r2, r1]
 800b594:	1c29      	adds	r1, r5, #0
 800b596:	1c20      	adds	r0, r4, #0
 800b598:	f7f4 ff84 	bl	80004a4 <__aeabi_fadd>
 800b59c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b59e:	9b00      	ldr	r3, [sp, #0]
 800b5a0:	4694      	mov	ip, r2
 800b5a2:	6058      	str	r0, [r3, #4]
 800b5a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b5a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5a8:	4460      	add	r0, ip
 800b5aa:	4694      	mov	ip, r2
 800b5ac:	4463      	add	r3, ip
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b5b2:	9009      	str	r0, [sp, #36]	; 0x24
 800b5b4:	44e0      	add	r8, ip
 800b5b6:	44e3      	add	fp, ip
 800b5b8:	44e2      	add	sl, ip
 800b5ba:	4283      	cmp	r3, r0
 800b5bc:	d900      	bls.n	800b5c0 <arm_radix8_butterfly_f32+0x368>
 800b5be:	e692      	b.n	800b2e6 <arm_radix8_butterfly_f32+0x8e>
 800b5c0:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800b5c2:	2807      	cmp	r0, #7
 800b5c4:	d800      	bhi.n	800b5c8 <arm_radix8_butterfly_f32+0x370>
 800b5c6:	e2df      	b.n	800bb88 <arm_radix8_butterfly_f32+0x930>
 800b5c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b5ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	932e      	str	r3, [sp, #184]	; 0xb8
 800b5d0:	000b      	movs	r3, r1
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	932d      	str	r3, [sp, #180]	; 0xb4
 800b5d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5d8:	001a      	movs	r2, r3
 800b5da:	469c      	mov	ip, r3
 800b5dc:	3208      	adds	r2, #8
 800b5de:	922c      	str	r2, [sp, #176]	; 0xb0
 800b5e0:	9a08      	ldr	r2, [sp, #32]
 800b5e2:	4462      	add	r2, ip
 800b5e4:	468c      	mov	ip, r1
 800b5e6:	1d13      	adds	r3, r2, #4
 800b5e8:	9311      	str	r3, [sp, #68]	; 0x44
 800b5ea:	0103      	lsls	r3, r0, #4
 800b5ec:	425b      	negs	r3, r3
 800b5ee:	9206      	str	r2, [sp, #24]
 800b5f0:	18d2      	adds	r2, r2, r3
 800b5f2:	1d10      	adds	r0, r2, #4
 800b5f4:	4462      	add	r2, ip
 800b5f6:	9029      	str	r0, [sp, #164]	; 0xa4
 800b5f8:	1d10      	adds	r0, r2, #4
 800b5fa:	18d2      	adds	r2, r2, r3
 800b5fc:	9028      	str	r0, [sp, #160]	; 0xa0
 800b5fe:	1d10      	adds	r0, r2, #4
 800b600:	4462      	add	r2, ip
 800b602:	9026      	str	r0, [sp, #152]	; 0x98
 800b604:	9225      	str	r2, [sp, #148]	; 0x94
 800b606:	1d10      	adds	r0, r2, #4
 800b608:	18d2      	adds	r2, r2, r3
 800b60a:	4494      	add	ip, r2
 800b60c:	3304      	adds	r3, #4
 800b60e:	4463      	add	r3, ip
 800b610:	9327      	str	r3, [sp, #156]	; 0x9c
 800b612:	2301      	movs	r3, #1
 800b614:	9010      	str	r0, [sp, #64]	; 0x40
 800b616:	1d10      	adds	r0, r2, #4
 800b618:	4662      	mov	r2, ip
 800b61a:	932b      	str	r3, [sp, #172]	; 0xac
 800b61c:	2300      	movs	r3, #0
 800b61e:	1d11      	adds	r1, r2, #4
 800b620:	902a      	str	r0, [sp, #168]	; 0xa8
 800b622:	9208      	str	r2, [sp, #32]
 800b624:	9107      	str	r1, [sp, #28]
 800b626:	932f      	str	r3, [sp, #188]	; 0xbc
 800b628:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800b62a:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800b62c:	469c      	mov	ip, r3
 800b62e:	4461      	add	r1, ip
 800b630:	468c      	mov	ip, r1
 800b632:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 800b634:	00c8      	lsls	r0, r1, #3
 800b636:	5823      	ldr	r3, [r4, r0]
 800b638:	010e      	lsls	r6, r1, #4
 800b63a:	0027      	movs	r7, r4
 800b63c:	930c      	str	r3, [sp, #48]	; 0x30
 800b63e:	59a3      	ldr	r3, [r4, r6]
 800b640:	912f      	str	r1, [sp, #188]	; 0xbc
 800b642:	931b      	str	r3, [sp, #108]	; 0x6c
 800b644:	004b      	lsls	r3, r1, #1
 800b646:	4463      	add	r3, ip
 800b648:	00dd      	lsls	r5, r3, #3
 800b64a:	5962      	ldr	r2, [r4, r5]
 800b64c:	011b      	lsls	r3, r3, #4
 800b64e:	921c      	str	r2, [sp, #112]	; 0x70
 800b650:	014a      	lsls	r2, r1, #5
 800b652:	4690      	mov	r8, r2
 800b654:	58a2      	ldr	r2, [r4, r2]
 800b656:	920d      	str	r2, [sp, #52]	; 0x34
 800b658:	008a      	lsls	r2, r1, #2
 800b65a:	4462      	add	r2, ip
 800b65c:	00d2      	lsls	r2, r2, #3
 800b65e:	58a4      	ldr	r4, [r4, r2]
 800b660:	1a41      	subs	r1, r0, r1
 800b662:	941d      	str	r4, [sp, #116]	; 0x74
 800b664:	58fc      	ldr	r4, [r7, r3]
 800b666:	00c9      	lsls	r1, r1, #3
 800b668:	941e      	str	r4, [sp, #120]	; 0x78
 800b66a:	587c      	ldr	r4, [r7, r1]
 800b66c:	9f33      	ldr	r7, [sp, #204]	; 0xcc
 800b66e:	940e      	str	r4, [sp, #56]	; 0x38
 800b670:	59bc      	ldr	r4, [r7, r6]
 800b672:	58fb      	ldr	r3, [r7, r3]
 800b674:	941f      	str	r4, [sp, #124]	; 0x7c
 800b676:	597c      	ldr	r4, [r7, r5]
 800b678:	58ba      	ldr	r2, [r7, r2]
 800b67a:	9420      	str	r4, [sp, #128]	; 0x80
 800b67c:	4644      	mov	r4, r8
 800b67e:	5838      	ldr	r0, [r7, r0]
 800b680:	593c      	ldr	r4, [r7, r4]
 800b682:	9323      	str	r3, [sp, #140]	; 0x8c
 800b684:	587b      	ldr	r3, [r7, r1]
 800b686:	9222      	str	r2, [sp, #136]	; 0x88
 800b688:	900f      	str	r0, [sp, #60]	; 0x3c
 800b68a:	9421      	str	r4, [sp, #132]	; 0x84
 800b68c:	9324      	str	r3, [sp, #144]	; 0x90
 800b68e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b690:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 800b692:	00da      	lsls	r2, r3, #3
 800b694:	9200      	str	r2, [sp, #0]
 800b696:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800b698:	930b      	str	r3, [sp, #44]	; 0x2c
 800b69a:	9204      	str	r2, [sp, #16]
 800b69c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800b69e:	9601      	str	r6, [sp, #4]
 800b6a0:	9203      	str	r2, [sp, #12]
 800b6a2:	e001      	b.n	800b6a8 <arm_radix8_butterfly_f32+0x450>
 800b6a4:	3f3504f3 	.word	0x3f3504f3
 800b6a8:	9b02      	ldr	r3, [sp, #8]
 800b6aa:	9f00      	ldr	r7, [sp, #0]
 800b6ac:	9906      	ldr	r1, [sp, #24]
 800b6ae:	59dd      	ldr	r5, [r3, r7]
 800b6b0:	59ce      	ldr	r6, [r1, r7]
 800b6b2:	1c28      	adds	r0, r5, #0
 800b6b4:	1c31      	adds	r1, r6, #0
 800b6b6:	f7f4 fef5 	bl	80004a4 <__aeabi_fadd>
 800b6ba:	1c31      	adds	r1, r6, #0
 800b6bc:	1c04      	adds	r4, r0, #0
 800b6be:	1c28      	adds	r0, r5, #0
 800b6c0:	f7f5 fb70 	bl	8000da4 <__aeabi_fsub>
 800b6c4:	9a02      	ldr	r2, [sp, #8]
 800b6c6:	9e01      	ldr	r6, [sp, #4]
 800b6c8:	9906      	ldr	r1, [sp, #24]
 800b6ca:	5995      	ldr	r5, [r2, r6]
 800b6cc:	598f      	ldr	r7, [r1, r6]
 800b6ce:	9012      	str	r0, [sp, #72]	; 0x48
 800b6d0:	1c39      	adds	r1, r7, #0
 800b6d2:	1c28      	adds	r0, r5, #0
 800b6d4:	f7f4 fee6 	bl	80004a4 <__aeabi_fadd>
 800b6d8:	1c39      	adds	r1, r7, #0
 800b6da:	1c06      	adds	r6, r0, #0
 800b6dc:	1c28      	adds	r0, r5, #0
 800b6de:	f7f5 fb61 	bl	8000da4 <__aeabi_fsub>
 800b6e2:	9a02      	ldr	r2, [sp, #8]
 800b6e4:	9b06      	ldr	r3, [sp, #24]
 800b6e6:	9903      	ldr	r1, [sp, #12]
 800b6e8:	9013      	str	r0, [sp, #76]	; 0x4c
 800b6ea:	5855      	ldr	r5, [r2, r1]
 800b6ec:	585f      	ldr	r7, [r3, r1]
 800b6ee:	1c28      	adds	r0, r5, #0
 800b6f0:	1c39      	adds	r1, r7, #0
 800b6f2:	f7f4 fed7 	bl	80004a4 <__aeabi_fadd>
 800b6f6:	1c39      	adds	r1, r7, #0
 800b6f8:	4680      	mov	r8, r0
 800b6fa:	1c28      	adds	r0, r5, #0
 800b6fc:	f7f5 fb52 	bl	8000da4 <__aeabi_fsub>
 800b700:	9b04      	ldr	r3, [sp, #16]
 800b702:	9a02      	ldr	r2, [sp, #8]
 800b704:	9906      	ldr	r1, [sp, #24]
 800b706:	58d5      	ldr	r5, [r2, r3]
 800b708:	58ca      	ldr	r2, [r1, r3]
 800b70a:	9014      	str	r0, [sp, #80]	; 0x50
 800b70c:	1c11      	adds	r1, r2, #0
 800b70e:	1c28      	adds	r0, r5, #0
 800b710:	4691      	mov	r9, r2
 800b712:	f7f4 fec7 	bl	80004a4 <__aeabi_fadd>
 800b716:	4649      	mov	r1, r9
 800b718:	1c07      	adds	r7, r0, #0
 800b71a:	1c28      	adds	r0, r5, #0
 800b71c:	f7f5 fb42 	bl	8000da4 <__aeabi_fsub>
 800b720:	4641      	mov	r1, r8
 800b722:	9015      	str	r0, [sp, #84]	; 0x54
 800b724:	1c20      	adds	r0, r4, #0
 800b726:	f7f5 fb3d 	bl	8000da4 <__aeabi_fsub>
 800b72a:	4641      	mov	r1, r8
 800b72c:	1c05      	adds	r5, r0, #0
 800b72e:	1c20      	adds	r0, r4, #0
 800b730:	f7f4 feb8 	bl	80004a4 <__aeabi_fadd>
 800b734:	1c39      	adds	r1, r7, #0
 800b736:	4680      	mov	r8, r0
 800b738:	1c30      	adds	r0, r6, #0
 800b73a:	f7f5 fb33 	bl	8000da4 <__aeabi_fsub>
 800b73e:	1c39      	adds	r1, r7, #0
 800b740:	1c04      	adds	r4, r0, #0
 800b742:	1c30      	adds	r0, r6, #0
 800b744:	f7f4 feae 	bl	80004a4 <__aeabi_fadd>
 800b748:	1c06      	adds	r6, r0, #0
 800b74a:	1c01      	adds	r1, r0, #0
 800b74c:	4640      	mov	r0, r8
 800b74e:	f7f4 fea9 	bl	80004a4 <__aeabi_fadd>
 800b752:	9f00      	ldr	r7, [sp, #0]
 800b754:	9a02      	ldr	r2, [sp, #8]
 800b756:	1c31      	adds	r1, r6, #0
 800b758:	51d0      	str	r0, [r2, r7]
 800b75a:	4640      	mov	r0, r8
 800b75c:	f7f5 fb22 	bl	8000da4 <__aeabi_fsub>
 800b760:	003b      	movs	r3, r7
 800b762:	9a05      	ldr	r2, [sp, #20]
 800b764:	9009      	str	r0, [sp, #36]	; 0x24
 800b766:	59d6      	ldr	r6, [r2, r7]
 800b768:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800b76a:	1c30      	adds	r0, r6, #0
 800b76c:	58ff      	ldr	r7, [r7, r3]
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	1c39      	adds	r1, r7, #0
 800b772:	f7f4 fe97 	bl	80004a4 <__aeabi_fadd>
 800b776:	1c39      	adds	r1, r7, #0
 800b778:	4680      	mov	r8, r0
 800b77a:	1c30      	adds	r0, r6, #0
 800b77c:	f7f5 fb12 	bl	8000da4 <__aeabi_fsub>
 800b780:	9e01      	ldr	r6, [sp, #4]
 800b782:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b784:	9f05      	ldr	r7, [sp, #20]
 800b786:	9016      	str	r0, [sp, #88]	; 0x58
 800b788:	59bf      	ldr	r7, [r7, r6]
 800b78a:	598e      	ldr	r6, [r1, r6]
 800b78c:	1c38      	adds	r0, r7, #0
 800b78e:	1c31      	adds	r1, r6, #0
 800b790:	f7f4 fe88 	bl	80004a4 <__aeabi_fadd>
 800b794:	46b1      	mov	r9, r6
 800b796:	1c06      	adds	r6, r0, #0
 800b798:	4649      	mov	r1, r9
 800b79a:	1c38      	adds	r0, r7, #0
 800b79c:	f7f5 fb02 	bl	8000da4 <__aeabi_fsub>
 800b7a0:	9b00      	ldr	r3, [sp, #0]
 800b7a2:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 800b7a4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800b7a6:	9903      	ldr	r1, [sp, #12]
 800b7a8:	58ff      	ldr	r7, [r7, r3]
 800b7aa:	5851      	ldr	r1, [r2, r1]
 800b7ac:	9017      	str	r0, [sp, #92]	; 0x5c
 800b7ae:	1c38      	adds	r0, r7, #0
 800b7b0:	468a      	mov	sl, r1
 800b7b2:	f7f4 fe77 	bl	80004a4 <__aeabi_fadd>
 800b7b6:	4651      	mov	r1, sl
 800b7b8:	4681      	mov	r9, r0
 800b7ba:	1c38      	adds	r0, r7, #0
 800b7bc:	f7f5 faf2 	bl	8000da4 <__aeabi_fsub>
 800b7c0:	9f01      	ldr	r7, [sp, #4]
 800b7c2:	9926      	ldr	r1, [sp, #152]	; 0x98
 800b7c4:	900a      	str	r0, [sp, #40]	; 0x28
 800b7c6:	59c9      	ldr	r1, [r1, r7]
 800b7c8:	9f04      	ldr	r7, [sp, #16]
 800b7ca:	468a      	mov	sl, r1
 800b7cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b7ce:	4650      	mov	r0, sl
 800b7d0:	59ca      	ldr	r2, [r1, r7]
 800b7d2:	1c11      	adds	r1, r2, #0
 800b7d4:	4693      	mov	fp, r2
 800b7d6:	f7f4 fe65 	bl	80004a4 <__aeabi_fadd>
 800b7da:	4659      	mov	r1, fp
 800b7dc:	1c07      	adds	r7, r0, #0
 800b7de:	4650      	mov	r0, sl
 800b7e0:	f7f5 fae0 	bl	8000da4 <__aeabi_fsub>
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	4683      	mov	fp, r0
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	f7f5 fadb 	bl	8000da4 <__aeabi_fsub>
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	4682      	mov	sl, r0
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	f7f4 fe56 	bl	80004a4 <__aeabi_fadd>
 800b7f8:	1c39      	adds	r1, r7, #0
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	1c30      	adds	r0, r6, #0
 800b7fe:	f7f5 fad1 	bl	8000da4 <__aeabi_fsub>
 800b802:	1c39      	adds	r1, r7, #0
 800b804:	4681      	mov	r9, r0
 800b806:	1c30      	adds	r0, r6, #0
 800b808:	f7f4 fe4c 	bl	80004a4 <__aeabi_fadd>
 800b80c:	4649      	mov	r1, r9
 800b80e:	1c07      	adds	r7, r0, #0
 800b810:	1c28      	adds	r0, r5, #0
 800b812:	f7f4 fe47 	bl	80004a4 <__aeabi_fadd>
 800b816:	4649      	mov	r1, r9
 800b818:	1c06      	adds	r6, r0, #0
 800b81a:	1c28      	adds	r0, r5, #0
 800b81c:	f7f5 fac2 	bl	8000da4 <__aeabi_fsub>
 800b820:	1c39      	adds	r1, r7, #0
 800b822:	1c05      	adds	r5, r0, #0
 800b824:	4640      	mov	r0, r8
 800b826:	f7f4 fe3d 	bl	80004a4 <__aeabi_fadd>
 800b82a:	9a05      	ldr	r2, [sp, #20]
 800b82c:	9b00      	ldr	r3, [sp, #0]
 800b82e:	1c39      	adds	r1, r7, #0
 800b830:	50d0      	str	r0, [r2, r3]
 800b832:	4640      	mov	r0, r8
 800b834:	f7f5 fab6 	bl	8000da4 <__aeabi_fsub>
 800b838:	1c21      	adds	r1, r4, #0
 800b83a:	4680      	mov	r8, r0
 800b83c:	4650      	mov	r0, sl
 800b83e:	f7f5 fab1 	bl	8000da4 <__aeabi_fsub>
 800b842:	4651      	mov	r1, sl
 800b844:	1c07      	adds	r7, r0, #0
 800b846:	1c20      	adds	r0, r4, #0
 800b848:	f7f4 fe2c 	bl	80004a4 <__aeabi_fadd>
 800b84c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b84e:	1c04      	adds	r4, r0, #0
 800b850:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b852:	f7f5 f98d 	bl	8000b70 <__aeabi_fmul>
 800b856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b858:	4681      	mov	r9, r0
 800b85a:	4641      	mov	r1, r8
 800b85c:	1c18      	adds	r0, r3, #0
 800b85e:	469a      	mov	sl, r3
 800b860:	f7f5 f986 	bl	8000b70 <__aeabi_fmul>
 800b864:	1c01      	adds	r1, r0, #0
 800b866:	4648      	mov	r0, r9
 800b868:	f7f4 fe1c 	bl	80004a4 <__aeabi_fadd>
 800b86c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b86e:	9b00      	ldr	r3, [sp, #0]
 800b870:	4641      	mov	r1, r8
 800b872:	50d0      	str	r0, [r2, r3]
 800b874:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b876:	f7f5 f97b 	bl	8000b70 <__aeabi_fmul>
 800b87a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b87c:	4680      	mov	r8, r0
 800b87e:	4650      	mov	r0, sl
 800b880:	f7f5 f976 	bl	8000b70 <__aeabi_fmul>
 800b884:	1c01      	adds	r1, r0, #0
 800b886:	4640      	mov	r0, r8
 800b888:	f7f5 fa8c 	bl	8000da4 <__aeabi_fsub>
 800b88c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b88e:	9b00      	ldr	r3, [sp, #0]
 800b890:	50c8      	str	r0, [r1, r3]
 800b892:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b894:	1c31      	adds	r1, r6, #0
 800b896:	1c18      	adds	r0, r3, #0
 800b898:	469a      	mov	sl, r3
 800b89a:	f7f5 f969 	bl	8000b70 <__aeabi_fmul>
 800b89e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b8a0:	4680      	mov	r8, r0
 800b8a2:	1c39      	adds	r1, r7, #0
 800b8a4:	1c18      	adds	r0, r3, #0
 800b8a6:	4699      	mov	r9, r3
 800b8a8:	f7f5 f962 	bl	8000b70 <__aeabi_fmul>
 800b8ac:	1c01      	adds	r1, r0, #0
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	f7f4 fdf8 	bl	80004a4 <__aeabi_fadd>
 800b8b4:	9a02      	ldr	r2, [sp, #8]
 800b8b6:	9903      	ldr	r1, [sp, #12]
 800b8b8:	5050      	str	r0, [r2, r1]
 800b8ba:	1c39      	adds	r1, r7, #0
 800b8bc:	4650      	mov	r0, sl
 800b8be:	f7f5 f957 	bl	8000b70 <__aeabi_fmul>
 800b8c2:	1c31      	adds	r1, r6, #0
 800b8c4:	1c07      	adds	r7, r0, #0
 800b8c6:	4648      	mov	r0, r9
 800b8c8:	f7f5 f952 	bl	8000b70 <__aeabi_fmul>
 800b8cc:	1c01      	adds	r1, r0, #0
 800b8ce:	1c38      	adds	r0, r7, #0
 800b8d0:	f7f5 fa68 	bl	8000da4 <__aeabi_fsub>
 800b8d4:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 800b8d6:	9b00      	ldr	r3, [sp, #0]
 800b8d8:	1c29      	adds	r1, r5, #0
 800b8da:	50f0      	str	r0, [r6, r3]
 800b8dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b8de:	1c18      	adds	r0, r3, #0
 800b8e0:	4699      	mov	r9, r3
 800b8e2:	f7f5 f945 	bl	8000b70 <__aeabi_fmul>
 800b8e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b8e8:	1c06      	adds	r6, r0, #0
 800b8ea:	1c21      	adds	r1, r4, #0
 800b8ec:	1c18      	adds	r0, r3, #0
 800b8ee:	4698      	mov	r8, r3
 800b8f0:	f7f5 f93e 	bl	8000b70 <__aeabi_fmul>
 800b8f4:	1c01      	adds	r1, r0, #0
 800b8f6:	1c30      	adds	r0, r6, #0
 800b8f8:	f7f4 fdd4 	bl	80004a4 <__aeabi_fadd>
 800b8fc:	9e03      	ldr	r6, [sp, #12]
 800b8fe:	9f08      	ldr	r7, [sp, #32]
 800b900:	1c21      	adds	r1, r4, #0
 800b902:	51b8      	str	r0, [r7, r6]
 800b904:	4648      	mov	r0, r9
 800b906:	f7f5 f933 	bl	8000b70 <__aeabi_fmul>
 800b90a:	1c29      	adds	r1, r5, #0
 800b90c:	1c04      	adds	r4, r0, #0
 800b90e:	4640      	mov	r0, r8
 800b910:	f7f5 f92e 	bl	8000b70 <__aeabi_fmul>
 800b914:	1c01      	adds	r1, r0, #0
 800b916:	1c20      	adds	r0, r4, #0
 800b918:	f7f5 fa44 	bl	8000da4 <__aeabi_fsub>
 800b91c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b91e:	9c07      	ldr	r4, [sp, #28]
 800b920:	469a      	mov	sl, r3
 800b922:	1c19      	adds	r1, r3, #0
 800b924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b926:	51a0      	str	r0, [r4, r6]
 800b928:	1c18      	adds	r0, r3, #0
 800b92a:	4698      	mov	r8, r3
 800b92c:	9603      	str	r6, [sp, #12]
 800b92e:	f7f5 fa39 	bl	8000da4 <__aeabi_fsub>
 800b932:	4999      	ldr	r1, [pc, #612]	; (800bb98 <arm_radix8_butterfly_f32+0x940>)
 800b934:	f7f5 f91c 	bl	8000b70 <__aeabi_fmul>
 800b938:	4651      	mov	r1, sl
 800b93a:	1c04      	adds	r4, r0, #0
 800b93c:	4640      	mov	r0, r8
 800b93e:	f7f4 fdb1 	bl	80004a4 <__aeabi_fadd>
 800b942:	4995      	ldr	r1, [pc, #596]	; (800bb98 <arm_radix8_butterfly_f32+0x940>)
 800b944:	f7f5 f914 	bl	8000b70 <__aeabi_fmul>
 800b948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b94a:	1c05      	adds	r5, r0, #0
 800b94c:	4659      	mov	r1, fp
 800b94e:	1c18      	adds	r0, r3, #0
 800b950:	4698      	mov	r8, r3
 800b952:	f7f5 fa27 	bl	8000da4 <__aeabi_fsub>
 800b956:	4990      	ldr	r1, [pc, #576]	; (800bb98 <arm_radix8_butterfly_f32+0x940>)
 800b958:	f7f5 f90a 	bl	8000b70 <__aeabi_fmul>
 800b95c:	4659      	mov	r1, fp
 800b95e:	1c07      	adds	r7, r0, #0
 800b960:	4640      	mov	r0, r8
 800b962:	f7f4 fd9f 	bl	80004a4 <__aeabi_fadd>
 800b966:	498c      	ldr	r1, [pc, #560]	; (800bb98 <arm_radix8_butterfly_f32+0x940>)
 800b968:	f7f5 f902 	bl	8000b70 <__aeabi_fmul>
 800b96c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b96e:	4683      	mov	fp, r0
 800b970:	1c21      	adds	r1, r4, #0
 800b972:	1c18      	adds	r0, r3, #0
 800b974:	469a      	mov	sl, r3
 800b976:	f7f5 fa15 	bl	8000da4 <__aeabi_fsub>
 800b97a:	1c21      	adds	r1, r4, #0
 800b97c:	4680      	mov	r8, r0
 800b97e:	4650      	mov	r0, sl
 800b980:	f7f4 fd90 	bl	80004a4 <__aeabi_fadd>
 800b984:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b986:	4682      	mov	sl, r0
 800b988:	1c29      	adds	r1, r5, #0
 800b98a:	1c18      	adds	r0, r3, #0
 800b98c:	4699      	mov	r9, r3
 800b98e:	f7f5 fa09 	bl	8000da4 <__aeabi_fsub>
 800b992:	1c29      	adds	r1, r5, #0
 800b994:	1c04      	adds	r4, r0, #0
 800b996:	4648      	mov	r0, r9
 800b998:	f7f4 fd84 	bl	80004a4 <__aeabi_fadd>
 800b99c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b99e:	1c06      	adds	r6, r0, #0
 800b9a0:	1c39      	adds	r1, r7, #0
 800b9a2:	1c18      	adds	r0, r3, #0
 800b9a4:	4699      	mov	r9, r3
 800b9a6:	f7f5 f9fd 	bl	8000da4 <__aeabi_fsub>
 800b9aa:	1c39      	adds	r1, r7, #0
 800b9ac:	1c05      	adds	r5, r0, #0
 800b9ae:	4648      	mov	r0, r9
 800b9b0:	f7f4 fd78 	bl	80004a4 <__aeabi_fadd>
 800b9b4:	4659      	mov	r1, fp
 800b9b6:	1c07      	adds	r7, r0, #0
 800b9b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b9ba:	f7f5 f9f3 	bl	8000da4 <__aeabi_fsub>
 800b9be:	4659      	mov	r1, fp
 800b9c0:	4681      	mov	r9, r0
 800b9c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b9c4:	f7f4 fd6e 	bl	80004a4 <__aeabi_fadd>
 800b9c8:	4683      	mov	fp, r0
 800b9ca:	1c01      	adds	r1, r0, #0
 800b9cc:	4650      	mov	r0, sl
 800b9ce:	f7f4 fd69 	bl	80004a4 <__aeabi_fadd>
 800b9d2:	4659      	mov	r1, fp
 800b9d4:	9009      	str	r0, [sp, #36]	; 0x24
 800b9d6:	4650      	mov	r0, sl
 800b9d8:	f7f5 f9e4 	bl	8000da4 <__aeabi_fsub>
 800b9dc:	4649      	mov	r1, r9
 800b9de:	4682      	mov	sl, r0
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	f7f4 fd5f 	bl	80004a4 <__aeabi_fadd>
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	4683      	mov	fp, r0
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	f7f5 f9da 	bl	8000da4 <__aeabi_fsub>
 800b9f0:	1c31      	adds	r1, r6, #0
 800b9f2:	4681      	mov	r9, r0
 800b9f4:	1c38      	adds	r0, r7, #0
 800b9f6:	f7f5 f9d5 	bl	8000da4 <__aeabi_fsub>
 800b9fa:	1c39      	adds	r1, r7, #0
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	1c30      	adds	r0, r6, #0
 800ba00:	f7f4 fd50 	bl	80004a4 <__aeabi_fadd>
 800ba04:	1c21      	adds	r1, r4, #0
 800ba06:	1c07      	adds	r7, r0, #0
 800ba08:	1c28      	adds	r0, r5, #0
 800ba0a:	f7f5 f9cb 	bl	8000da4 <__aeabi_fsub>
 800ba0e:	1c29      	adds	r1, r5, #0
 800ba10:	1c06      	adds	r6, r0, #0
 800ba12:	1c20      	adds	r0, r4, #0
 800ba14:	f7f4 fd46 	bl	80004a4 <__aeabi_fadd>
 800ba18:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba1a:	1c04      	adds	r4, r0, #0
 800ba1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba1e:	f7f5 f8a7 	bl	8000b70 <__aeabi_fmul>
 800ba22:	4641      	mov	r1, r8
 800ba24:	1c05      	adds	r5, r0, #0
 800ba26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ba28:	f7f5 f8a2 	bl	8000b70 <__aeabi_fmul>
 800ba2c:	1c01      	adds	r1, r0, #0
 800ba2e:	1c28      	adds	r0, r5, #0
 800ba30:	f7f4 fd38 	bl	80004a4 <__aeabi_fadd>
 800ba34:	9a01      	ldr	r2, [sp, #4]
 800ba36:	9d02      	ldr	r5, [sp, #8]
 800ba38:	4641      	mov	r1, r8
 800ba3a:	50a8      	str	r0, [r5, r2]
 800ba3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba3e:	f7f5 f897 	bl	8000b70 <__aeabi_fmul>
 800ba42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba44:	1c05      	adds	r5, r0, #0
 800ba46:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ba48:	f7f5 f892 	bl	8000b70 <__aeabi_fmul>
 800ba4c:	1c01      	adds	r1, r0, #0
 800ba4e:	1c28      	adds	r0, r5, #0
 800ba50:	f7f5 f9a8 	bl	8000da4 <__aeabi_fsub>
 800ba54:	9a01      	ldr	r2, [sp, #4]
 800ba56:	9905      	ldr	r1, [sp, #20]
 800ba58:	5088      	str	r0, [r1, r2]
 800ba5a:	4651      	mov	r1, sl
 800ba5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba5e:	f7f5 f887 	bl	8000b70 <__aeabi_fmul>
 800ba62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ba64:	1c05      	adds	r5, r0, #0
 800ba66:	1c39      	adds	r1, r7, #0
 800ba68:	1c18      	adds	r0, r3, #0
 800ba6a:	4698      	mov	r8, r3
 800ba6c:	f7f5 f880 	bl	8000b70 <__aeabi_fmul>
 800ba70:	1c01      	adds	r1, r0, #0
 800ba72:	1c28      	adds	r0, r5, #0
 800ba74:	f7f4 fd16 	bl	80004a4 <__aeabi_fadd>
 800ba78:	9a04      	ldr	r2, [sp, #16]
 800ba7a:	9908      	ldr	r1, [sp, #32]
 800ba7c:	5088      	str	r0, [r1, r2]
 800ba7e:	1c39      	adds	r1, r7, #0
 800ba80:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba82:	f7f5 f875 	bl	8000b70 <__aeabi_fmul>
 800ba86:	4651      	mov	r1, sl
 800ba88:	1c05      	adds	r5, r0, #0
 800ba8a:	4640      	mov	r0, r8
 800ba8c:	f7f5 f870 	bl	8000b70 <__aeabi_fmul>
 800ba90:	1c01      	adds	r1, r0, #0
 800ba92:	1c28      	adds	r0, r5, #0
 800ba94:	f7f5 f986 	bl	8000da4 <__aeabi_fsub>
 800ba98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba9a:	9d07      	ldr	r5, [sp, #28]
 800ba9c:	9f04      	ldr	r7, [sp, #16]
 800ba9e:	4659      	mov	r1, fp
 800baa0:	51e8      	str	r0, [r5, r7]
 800baa2:	1c18      	adds	r0, r3, #0
 800baa4:	469a      	mov	sl, r3
 800baa6:	f7f5 f863 	bl	8000b70 <__aeabi_fmul>
 800baaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800baac:	1c05      	adds	r5, r0, #0
 800baae:	1c31      	adds	r1, r6, #0
 800bab0:	1c18      	adds	r0, r3, #0
 800bab2:	4698      	mov	r8, r3
 800bab4:	f7f5 f85c 	bl	8000b70 <__aeabi_fmul>
 800bab8:	1c01      	adds	r1, r0, #0
 800baba:	1c28      	adds	r0, r5, #0
 800babc:	f7f4 fcf2 	bl	80004a4 <__aeabi_fadd>
 800bac0:	9f01      	ldr	r7, [sp, #4]
 800bac2:	9908      	ldr	r1, [sp, #32]
 800bac4:	51c8      	str	r0, [r1, r7]
 800bac6:	1c31      	adds	r1, r6, #0
 800bac8:	4650      	mov	r0, sl
 800baca:	f7f5 f851 	bl	8000b70 <__aeabi_fmul>
 800bace:	4659      	mov	r1, fp
 800bad0:	1c05      	adds	r5, r0, #0
 800bad2:	4640      	mov	r0, r8
 800bad4:	f7f5 f84c 	bl	8000b70 <__aeabi_fmul>
 800bad8:	1c01      	adds	r1, r0, #0
 800bada:	1c28      	adds	r0, r5, #0
 800badc:	f7f5 f962 	bl	8000da4 <__aeabi_fsub>
 800bae0:	9a07      	ldr	r2, [sp, #28]
 800bae2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bae4:	51d0      	str	r0, [r2, r7]
 800bae6:	4649      	mov	r1, r9
 800bae8:	1c18      	adds	r0, r3, #0
 800baea:	469a      	mov	sl, r3
 800baec:	f7f5 f840 	bl	8000b70 <__aeabi_fmul>
 800baf0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800baf2:	1c05      	adds	r5, r0, #0
 800baf4:	1c21      	adds	r1, r4, #0
 800baf6:	1c18      	adds	r0, r3, #0
 800baf8:	4698      	mov	r8, r3
 800bafa:	f7f5 f839 	bl	8000b70 <__aeabi_fmul>
 800bafe:	1c01      	adds	r1, r0, #0
 800bb00:	1c28      	adds	r0, r5, #0
 800bb02:	f7f4 fccf 	bl	80004a4 <__aeabi_fadd>
 800bb06:	003e      	movs	r6, r7
 800bb08:	9d02      	ldr	r5, [sp, #8]
 800bb0a:	9f04      	ldr	r7, [sp, #16]
 800bb0c:	1c21      	adds	r1, r4, #0
 800bb0e:	51e8      	str	r0, [r5, r7]
 800bb10:	4650      	mov	r0, sl
 800bb12:	f7f5 f82d 	bl	8000b70 <__aeabi_fmul>
 800bb16:	4649      	mov	r1, r9
 800bb18:	1c04      	adds	r4, r0, #0
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	f7f5 f828 	bl	8000b70 <__aeabi_fmul>
 800bb20:	1c01      	adds	r1, r0, #0
 800bb22:	1c20      	adds	r0, r4, #0
 800bb24:	f7f5 f93e 	bl	8000da4 <__aeabi_fsub>
 800bb28:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800bb2a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bb2c:	51a0      	str	r0, [r4, r6]
 800bb2e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bb30:	0032      	movs	r2, r6
 800bb32:	4684      	mov	ip, r0
 800bb34:	9819      	ldr	r0, [sp, #100]	; 0x64
 800bb36:	4465      	add	r5, ip
 800bb38:	4684      	mov	ip, r0
 800bb3a:	9b00      	ldr	r3, [sp, #0]
 800bb3c:	9903      	ldr	r1, [sp, #12]
 800bb3e:	4463      	add	r3, ip
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bb44:	4462      	add	r2, ip
 800bb46:	4461      	add	r1, ip
 800bb48:	4467      	add	r7, ip
 800bb4a:	950b      	str	r5, [sp, #44]	; 0x2c
 800bb4c:	9201      	str	r2, [sp, #4]
 800bb4e:	9103      	str	r1, [sp, #12]
 800bb50:	9704      	str	r7, [sp, #16]
 800bb52:	42ab      	cmp	r3, r5
 800bb54:	d900      	bls.n	800bb58 <arm_radix8_butterfly_f32+0x900>
 800bb56:	e5a7      	b.n	800b6a8 <arm_radix8_butterfly_f32+0x450>
 800bb58:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800bb5a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800bb5c:	3208      	adds	r2, #8
 800bb5e:	922e      	str	r2, [sp, #184]	; 0xb8
 800bb60:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800bb62:	3301      	adds	r3, #1
 800bb64:	3208      	adds	r2, #8
 800bb66:	922d      	str	r2, [sp, #180]	; 0xb4
 800bb68:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800bb6a:	932b      	str	r3, [sp, #172]	; 0xac
 800bb6c:	3208      	adds	r2, #8
 800bb6e:	922c      	str	r2, [sp, #176]	; 0xb0
 800bb70:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d000      	beq.n	800bb78 <arm_radix8_butterfly_f32+0x920>
 800bb76:	e557      	b.n	800b628 <arm_radix8_butterfly_f32+0x3d0>
 800bb78:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800bb7a:	9218      	str	r2, [sp, #96]	; 0x60
 800bb7c:	00db      	lsls	r3, r3, #3
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	9331      	str	r3, [sp, #196]	; 0xc4
 800bb82:	0013      	movs	r3, r2
 800bb84:	f7ff fb7b 	bl	800b27e <arm_radix8_butterfly_f32+0x26>
 800bb88:	b035      	add	sp, #212	; 0xd4
 800bb8a:	bc3c      	pop	{r2, r3, r4, r5}
 800bb8c:	4690      	mov	r8, r2
 800bb8e:	4699      	mov	r9, r3
 800bb90:	46a2      	mov	sl, r4
 800bb92:	46ab      	mov	fp, r5
 800bb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb96:	46c0      	nop			; (mov r8, r8)
 800bb98:	3f3504f3 	.word	0x3f3504f3

0800bb9c <__errno>:
 800bb9c:	4b01      	ldr	r3, [pc, #4]	; (800bba4 <__errno+0x8>)
 800bb9e:	6818      	ldr	r0, [r3, #0]
 800bba0:	4770      	bx	lr
 800bba2:	46c0      	nop			; (mov r8, r8)
 800bba4:	20000104 	.word	0x20000104

0800bba8 <__libc_init_array>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	2600      	movs	r6, #0
 800bbac:	4d0c      	ldr	r5, [pc, #48]	; (800bbe0 <__libc_init_array+0x38>)
 800bbae:	4c0d      	ldr	r4, [pc, #52]	; (800bbe4 <__libc_init_array+0x3c>)
 800bbb0:	1b64      	subs	r4, r4, r5
 800bbb2:	10a4      	asrs	r4, r4, #2
 800bbb4:	42a6      	cmp	r6, r4
 800bbb6:	d109      	bne.n	800bbcc <__libc_init_array+0x24>
 800bbb8:	2600      	movs	r6, #0
 800bbba:	f000 f9b3 	bl	800bf24 <_init>
 800bbbe:	4d0a      	ldr	r5, [pc, #40]	; (800bbe8 <__libc_init_array+0x40>)
 800bbc0:	4c0a      	ldr	r4, [pc, #40]	; (800bbec <__libc_init_array+0x44>)
 800bbc2:	1b64      	subs	r4, r4, r5
 800bbc4:	10a4      	asrs	r4, r4, #2
 800bbc6:	42a6      	cmp	r6, r4
 800bbc8:	d105      	bne.n	800bbd6 <__libc_init_array+0x2e>
 800bbca:	bd70      	pop	{r4, r5, r6, pc}
 800bbcc:	00b3      	lsls	r3, r6, #2
 800bbce:	58eb      	ldr	r3, [r5, r3]
 800bbd0:	4798      	blx	r3
 800bbd2:	3601      	adds	r6, #1
 800bbd4:	e7ee      	b.n	800bbb4 <__libc_init_array+0xc>
 800bbd6:	00b3      	lsls	r3, r6, #2
 800bbd8:	58eb      	ldr	r3, [r5, r3]
 800bbda:	4798      	blx	r3
 800bbdc:	3601      	adds	r6, #1
 800bbde:	e7f2      	b.n	800bbc6 <__libc_init_array+0x1e>
 800bbe0:	0800cf94 	.word	0x0800cf94
 800bbe4:	0800cf94 	.word	0x0800cf94
 800bbe8:	0800cf94 	.word	0x0800cf94
 800bbec:	0800cf98 	.word	0x0800cf98

0800bbf0 <malloc>:
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	4b03      	ldr	r3, [pc, #12]	; (800bc00 <malloc+0x10>)
 800bbf4:	0001      	movs	r1, r0
 800bbf6:	6818      	ldr	r0, [r3, #0]
 800bbf8:	f000 f86a 	bl	800bcd0 <_malloc_r>
 800bbfc:	bd10      	pop	{r4, pc}
 800bbfe:	46c0      	nop			; (mov r8, r8)
 800bc00:	20000104 	.word	0x20000104

0800bc04 <free>:
 800bc04:	b510      	push	{r4, lr}
 800bc06:	4b03      	ldr	r3, [pc, #12]	; (800bc14 <free+0x10>)
 800bc08:	0001      	movs	r1, r0
 800bc0a:	6818      	ldr	r0, [r3, #0]
 800bc0c:	f000 f816 	bl	800bc3c <_free_r>
 800bc10:	bd10      	pop	{r4, pc}
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	20000104 	.word	0x20000104

0800bc18 <memcpy>:
 800bc18:	2300      	movs	r3, #0
 800bc1a:	b510      	push	{r4, lr}
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d100      	bne.n	800bc22 <memcpy+0xa>
 800bc20:	bd10      	pop	{r4, pc}
 800bc22:	5ccc      	ldrb	r4, [r1, r3]
 800bc24:	54c4      	strb	r4, [r0, r3]
 800bc26:	3301      	adds	r3, #1
 800bc28:	e7f8      	b.n	800bc1c <memcpy+0x4>

0800bc2a <memset>:
 800bc2a:	0003      	movs	r3, r0
 800bc2c:	1882      	adds	r2, r0, r2
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d100      	bne.n	800bc34 <memset+0xa>
 800bc32:	4770      	bx	lr
 800bc34:	7019      	strb	r1, [r3, #0]
 800bc36:	3301      	adds	r3, #1
 800bc38:	e7f9      	b.n	800bc2e <memset+0x4>
	...

0800bc3c <_free_r>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	0005      	movs	r5, r0
 800bc40:	2900      	cmp	r1, #0
 800bc42:	d010      	beq.n	800bc66 <_free_r+0x2a>
 800bc44:	1f0c      	subs	r4, r1, #4
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	da00      	bge.n	800bc4e <_free_r+0x12>
 800bc4c:	18e4      	adds	r4, r4, r3
 800bc4e:	0028      	movs	r0, r5
 800bc50:	f000 f8b8 	bl	800bdc4 <__malloc_lock>
 800bc54:	4a1d      	ldr	r2, [pc, #116]	; (800bccc <_free_r+0x90>)
 800bc56:	6813      	ldr	r3, [r2, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d105      	bne.n	800bc68 <_free_r+0x2c>
 800bc5c:	6063      	str	r3, [r4, #4]
 800bc5e:	6014      	str	r4, [r2, #0]
 800bc60:	0028      	movs	r0, r5
 800bc62:	f000 f8b7 	bl	800bdd4 <__malloc_unlock>
 800bc66:	bd70      	pop	{r4, r5, r6, pc}
 800bc68:	42a3      	cmp	r3, r4
 800bc6a:	d908      	bls.n	800bc7e <_free_r+0x42>
 800bc6c:	6821      	ldr	r1, [r4, #0]
 800bc6e:	1860      	adds	r0, r4, r1
 800bc70:	4283      	cmp	r3, r0
 800bc72:	d1f3      	bne.n	800bc5c <_free_r+0x20>
 800bc74:	6818      	ldr	r0, [r3, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	1841      	adds	r1, r0, r1
 800bc7a:	6021      	str	r1, [r4, #0]
 800bc7c:	e7ee      	b.n	800bc5c <_free_r+0x20>
 800bc7e:	001a      	movs	r2, r3
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <_free_r+0x4e>
 800bc86:	42a3      	cmp	r3, r4
 800bc88:	d9f9      	bls.n	800bc7e <_free_r+0x42>
 800bc8a:	6811      	ldr	r1, [r2, #0]
 800bc8c:	1850      	adds	r0, r2, r1
 800bc8e:	42a0      	cmp	r0, r4
 800bc90:	d10b      	bne.n	800bcaa <_free_r+0x6e>
 800bc92:	6820      	ldr	r0, [r4, #0]
 800bc94:	1809      	adds	r1, r1, r0
 800bc96:	1850      	adds	r0, r2, r1
 800bc98:	6011      	str	r1, [r2, #0]
 800bc9a:	4283      	cmp	r3, r0
 800bc9c:	d1e0      	bne.n	800bc60 <_free_r+0x24>
 800bc9e:	6818      	ldr	r0, [r3, #0]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	1841      	adds	r1, r0, r1
 800bca4:	6011      	str	r1, [r2, #0]
 800bca6:	6053      	str	r3, [r2, #4]
 800bca8:	e7da      	b.n	800bc60 <_free_r+0x24>
 800bcaa:	42a0      	cmp	r0, r4
 800bcac:	d902      	bls.n	800bcb4 <_free_r+0x78>
 800bcae:	230c      	movs	r3, #12
 800bcb0:	602b      	str	r3, [r5, #0]
 800bcb2:	e7d5      	b.n	800bc60 <_free_r+0x24>
 800bcb4:	6821      	ldr	r1, [r4, #0]
 800bcb6:	1860      	adds	r0, r4, r1
 800bcb8:	4283      	cmp	r3, r0
 800bcba:	d103      	bne.n	800bcc4 <_free_r+0x88>
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	1841      	adds	r1, r0, r1
 800bcc2:	6021      	str	r1, [r4, #0]
 800bcc4:	6063      	str	r3, [r4, #4]
 800bcc6:	6054      	str	r4, [r2, #4]
 800bcc8:	e7ca      	b.n	800bc60 <_free_r+0x24>
 800bcca:	46c0      	nop			; (mov r8, r8)
 800bccc:	200001c0 	.word	0x200001c0

0800bcd0 <_malloc_r>:
 800bcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	1ccd      	adds	r5, r1, #3
 800bcd6:	439d      	bics	r5, r3
 800bcd8:	3508      	adds	r5, #8
 800bcda:	0006      	movs	r6, r0
 800bcdc:	2d0c      	cmp	r5, #12
 800bcde:	d21f      	bcs.n	800bd20 <_malloc_r+0x50>
 800bce0:	250c      	movs	r5, #12
 800bce2:	42a9      	cmp	r1, r5
 800bce4:	d81e      	bhi.n	800bd24 <_malloc_r+0x54>
 800bce6:	0030      	movs	r0, r6
 800bce8:	f000 f86c 	bl	800bdc4 <__malloc_lock>
 800bcec:	4925      	ldr	r1, [pc, #148]	; (800bd84 <_malloc_r+0xb4>)
 800bcee:	680a      	ldr	r2, [r1, #0]
 800bcf0:	0014      	movs	r4, r2
 800bcf2:	2c00      	cmp	r4, #0
 800bcf4:	d11a      	bne.n	800bd2c <_malloc_r+0x5c>
 800bcf6:	4f24      	ldr	r7, [pc, #144]	; (800bd88 <_malloc_r+0xb8>)
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d104      	bne.n	800bd08 <_malloc_r+0x38>
 800bcfe:	0021      	movs	r1, r4
 800bd00:	0030      	movs	r0, r6
 800bd02:	f000 f843 	bl	800bd8c <_sbrk_r>
 800bd06:	6038      	str	r0, [r7, #0]
 800bd08:	0029      	movs	r1, r5
 800bd0a:	0030      	movs	r0, r6
 800bd0c:	f000 f83e 	bl	800bd8c <_sbrk_r>
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	d12b      	bne.n	800bd6c <_malloc_r+0x9c>
 800bd14:	230c      	movs	r3, #12
 800bd16:	0030      	movs	r0, r6
 800bd18:	6033      	str	r3, [r6, #0]
 800bd1a:	f000 f85b 	bl	800bdd4 <__malloc_unlock>
 800bd1e:	e003      	b.n	800bd28 <_malloc_r+0x58>
 800bd20:	2d00      	cmp	r5, #0
 800bd22:	dade      	bge.n	800bce2 <_malloc_r+0x12>
 800bd24:	230c      	movs	r3, #12
 800bd26:	6033      	str	r3, [r6, #0]
 800bd28:	2000      	movs	r0, #0
 800bd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	1b5b      	subs	r3, r3, r5
 800bd30:	d419      	bmi.n	800bd66 <_malloc_r+0x96>
 800bd32:	2b0b      	cmp	r3, #11
 800bd34:	d903      	bls.n	800bd3e <_malloc_r+0x6e>
 800bd36:	6023      	str	r3, [r4, #0]
 800bd38:	18e4      	adds	r4, r4, r3
 800bd3a:	6025      	str	r5, [r4, #0]
 800bd3c:	e003      	b.n	800bd46 <_malloc_r+0x76>
 800bd3e:	6863      	ldr	r3, [r4, #4]
 800bd40:	42a2      	cmp	r2, r4
 800bd42:	d10e      	bne.n	800bd62 <_malloc_r+0x92>
 800bd44:	600b      	str	r3, [r1, #0]
 800bd46:	0030      	movs	r0, r6
 800bd48:	f000 f844 	bl	800bdd4 <__malloc_unlock>
 800bd4c:	0020      	movs	r0, r4
 800bd4e:	2207      	movs	r2, #7
 800bd50:	300b      	adds	r0, #11
 800bd52:	1d23      	adds	r3, r4, #4
 800bd54:	4390      	bics	r0, r2
 800bd56:	1ac2      	subs	r2, r0, r3
 800bd58:	4298      	cmp	r0, r3
 800bd5a:	d0e6      	beq.n	800bd2a <_malloc_r+0x5a>
 800bd5c:	1a1b      	subs	r3, r3, r0
 800bd5e:	50a3      	str	r3, [r4, r2]
 800bd60:	e7e3      	b.n	800bd2a <_malloc_r+0x5a>
 800bd62:	6053      	str	r3, [r2, #4]
 800bd64:	e7ef      	b.n	800bd46 <_malloc_r+0x76>
 800bd66:	0022      	movs	r2, r4
 800bd68:	6864      	ldr	r4, [r4, #4]
 800bd6a:	e7c2      	b.n	800bcf2 <_malloc_r+0x22>
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	1cc4      	adds	r4, r0, #3
 800bd70:	439c      	bics	r4, r3
 800bd72:	42a0      	cmp	r0, r4
 800bd74:	d0e1      	beq.n	800bd3a <_malloc_r+0x6a>
 800bd76:	1a21      	subs	r1, r4, r0
 800bd78:	0030      	movs	r0, r6
 800bd7a:	f000 f807 	bl	800bd8c <_sbrk_r>
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	d1db      	bne.n	800bd3a <_malloc_r+0x6a>
 800bd82:	e7c7      	b.n	800bd14 <_malloc_r+0x44>
 800bd84:	200001c0 	.word	0x200001c0
 800bd88:	200001c4 	.word	0x200001c4

0800bd8c <_sbrk_r>:
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	b570      	push	{r4, r5, r6, lr}
 800bd90:	4d06      	ldr	r5, [pc, #24]	; (800bdac <_sbrk_r+0x20>)
 800bd92:	0004      	movs	r4, r0
 800bd94:	0008      	movs	r0, r1
 800bd96:	602b      	str	r3, [r5, #0]
 800bd98:	f7f5 fe14 	bl	80019c4 <_sbrk>
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	d103      	bne.n	800bda8 <_sbrk_r+0x1c>
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d000      	beq.n	800bda8 <_sbrk_r+0x1c>
 800bda6:	6023      	str	r3, [r4, #0]
 800bda8:	bd70      	pop	{r4, r5, r6, pc}
 800bdaa:	46c0      	nop			; (mov r8, r8)
 800bdac:	20000c80 	.word	0x20000c80

0800bdb0 <__isinff>:
 800bdb0:	4b03      	ldr	r3, [pc, #12]	; (800bdc0 <__isinff+0x10>)
 800bdb2:	0040      	lsls	r0, r0, #1
 800bdb4:	0840      	lsrs	r0, r0, #1
 800bdb6:	18c0      	adds	r0, r0, r3
 800bdb8:	4243      	negs	r3, r0
 800bdba:	4158      	adcs	r0, r3
 800bdbc:	4770      	bx	lr
 800bdbe:	46c0      	nop			; (mov r8, r8)
 800bdc0:	80800000 	.word	0x80800000

0800bdc4 <__malloc_lock>:
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	4802      	ldr	r0, [pc, #8]	; (800bdd0 <__malloc_lock+0xc>)
 800bdc8:	f000 f80c 	bl	800bde4 <__retarget_lock_acquire_recursive>
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	46c0      	nop			; (mov r8, r8)
 800bdd0:	20000c88 	.word	0x20000c88

0800bdd4 <__malloc_unlock>:
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	4802      	ldr	r0, [pc, #8]	; (800bde0 <__malloc_unlock+0xc>)
 800bdd8:	f000 f805 	bl	800bde6 <__retarget_lock_release_recursive>
 800bddc:	bd10      	pop	{r4, pc}
 800bdde:	46c0      	nop			; (mov r8, r8)
 800bde0:	20000c88 	.word	0x20000c88

0800bde4 <__retarget_lock_acquire_recursive>:
 800bde4:	4770      	bx	lr

0800bde6 <__retarget_lock_release_recursive>:
 800bde6:	4770      	bx	lr

0800bde8 <roundf>:
 800bde8:	0dc3      	lsrs	r3, r0, #23
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	3b7f      	subs	r3, #127	; 0x7f
 800bdee:	0001      	movs	r1, r0
 800bdf0:	b510      	push	{r4, lr}
 800bdf2:	2b16      	cmp	r3, #22
 800bdf4:	dc13      	bgt.n	800be1e <roundf+0x36>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	da07      	bge.n	800be0a <roundf+0x22>
 800bdfa:	0fc0      	lsrs	r0, r0, #31
 800bdfc:	07c0      	lsls	r0, r0, #31
 800bdfe:	3301      	adds	r3, #1
 800be00:	d102      	bne.n	800be08 <roundf+0x20>
 800be02:	23fe      	movs	r3, #254	; 0xfe
 800be04:	059b      	lsls	r3, r3, #22
 800be06:	4318      	orrs	r0, r3
 800be08:	bd10      	pop	{r4, pc}
 800be0a:	4a07      	ldr	r2, [pc, #28]	; (800be28 <roundf+0x40>)
 800be0c:	411a      	asrs	r2, r3
 800be0e:	4202      	tst	r2, r0
 800be10:	d0fa      	beq.n	800be08 <roundf+0x20>
 800be12:	2080      	movs	r0, #128	; 0x80
 800be14:	03c0      	lsls	r0, r0, #15
 800be16:	4118      	asrs	r0, r3
 800be18:	1840      	adds	r0, r0, r1
 800be1a:	4390      	bics	r0, r2
 800be1c:	e7f4      	b.n	800be08 <roundf+0x20>
 800be1e:	2b80      	cmp	r3, #128	; 0x80
 800be20:	d1f2      	bne.n	800be08 <roundf+0x20>
 800be22:	f7f4 fb3f 	bl	80004a4 <__aeabi_fadd>
 800be26:	e7ef      	b.n	800be08 <roundf+0x20>
 800be28:	007fffff 	.word	0x007fffff

0800be2c <sqrtf>:
 800be2c:	b570      	push	{r4, r5, r6, lr}
 800be2e:	1c05      	adds	r5, r0, #0
 800be30:	f000 f820 	bl	800be74 <__ieee754_sqrtf>
 800be34:	4b0e      	ldr	r3, [pc, #56]	; (800be70 <sqrtf+0x44>)
 800be36:	1c04      	adds	r4, r0, #0
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	b25b      	sxtb	r3, r3
 800be3c:	3301      	adds	r3, #1
 800be3e:	d014      	beq.n	800be6a <sqrtf+0x3e>
 800be40:	1c29      	adds	r1, r5, #0
 800be42:	1c28      	adds	r0, r5, #0
 800be44:	f7f5 f976 	bl	8001134 <__aeabi_fcmpun>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d10e      	bne.n	800be6a <sqrtf+0x3e>
 800be4c:	2100      	movs	r1, #0
 800be4e:	1c28      	adds	r0, r5, #0
 800be50:	f7f4 fae8 	bl	8000424 <__aeabi_fcmplt>
 800be54:	2800      	cmp	r0, #0
 800be56:	d008      	beq.n	800be6a <sqrtf+0x3e>
 800be58:	f7ff fea0 	bl	800bb9c <__errno>
 800be5c:	2321      	movs	r3, #33	; 0x21
 800be5e:	2100      	movs	r1, #0
 800be60:	6003      	str	r3, [r0, #0]
 800be62:	1c08      	adds	r0, r1, #0
 800be64:	f7f4 fcba 	bl	80007dc <__aeabi_fdiv>
 800be68:	1c04      	adds	r4, r0, #0
 800be6a:	1c20      	adds	r0, r4, #0
 800be6c:	bd70      	pop	{r4, r5, r6, pc}
 800be6e:	46c0      	nop			; (mov r8, r8)
 800be70:	20000168 	.word	0x20000168

0800be74 <__ieee754_sqrtf>:
 800be74:	0042      	lsls	r2, r0, #1
 800be76:	0003      	movs	r3, r0
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	1c04      	adds	r4, r0, #0
 800be7c:	20ff      	movs	r0, #255	; 0xff
 800be7e:	0852      	lsrs	r2, r2, #1
 800be80:	05c0      	lsls	r0, r0, #23
 800be82:	4282      	cmp	r2, r0
 800be84:	d30a      	bcc.n	800be9c <__ieee754_sqrtf+0x28>
 800be86:	1c21      	adds	r1, r4, #0
 800be88:	1c20      	adds	r0, r4, #0
 800be8a:	f7f4 fe71 	bl	8000b70 <__aeabi_fmul>
 800be8e:	1c01      	adds	r1, r0, #0
 800be90:	1c20      	adds	r0, r4, #0
 800be92:	f7f4 fb07 	bl	80004a4 <__aeabi_fadd>
 800be96:	1c04      	adds	r4, r0, #0
 800be98:	1c20      	adds	r0, r4, #0
 800be9a:	bd70      	pop	{r4, r5, r6, pc}
 800be9c:	2a00      	cmp	r2, #0
 800be9e:	d0fb      	beq.n	800be98 <__ieee754_sqrtf+0x24>
 800bea0:	2c00      	cmp	r4, #0
 800bea2:	da07      	bge.n	800beb4 <__ieee754_sqrtf+0x40>
 800bea4:	1c21      	adds	r1, r4, #0
 800bea6:	1c20      	adds	r0, r4, #0
 800bea8:	f7f4 ff7c 	bl	8000da4 <__aeabi_fsub>
 800beac:	1c01      	adds	r1, r0, #0
 800beae:	f7f4 fc95 	bl	80007dc <__aeabi_fdiv>
 800beb2:	e7f0      	b.n	800be96 <__ieee754_sqrtf+0x22>
 800beb4:	0022      	movs	r2, r4
 800beb6:	15e1      	asrs	r1, r4, #23
 800beb8:	4002      	ands	r2, r0
 800beba:	4204      	tst	r4, r0
 800bebc:	d02e      	beq.n	800bf1c <__ieee754_sqrtf+0xa8>
 800bebe:	2280      	movs	r2, #128	; 0x80
 800bec0:	000c      	movs	r4, r1
 800bec2:	025b      	lsls	r3, r3, #9
 800bec4:	0a5b      	lsrs	r3, r3, #9
 800bec6:	0412      	lsls	r2, r2, #16
 800bec8:	3c7f      	subs	r4, #127	; 0x7f
 800beca:	4313      	orrs	r3, r2
 800becc:	07ca      	lsls	r2, r1, #31
 800bece:	d400      	bmi.n	800bed2 <__ieee754_sqrtf+0x5e>
 800bed0:	005b      	lsls	r3, r3, #1
 800bed2:	2200      	movs	r2, #0
 800bed4:	2180      	movs	r1, #128	; 0x80
 800bed6:	2019      	movs	r0, #25
 800bed8:	0016      	movs	r6, r2
 800beda:	1064      	asrs	r4, r4, #1
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	0449      	lsls	r1, r1, #17
 800bee0:	1875      	adds	r5, r6, r1
 800bee2:	429d      	cmp	r5, r3
 800bee4:	dc02      	bgt.n	800beec <__ieee754_sqrtf+0x78>
 800bee6:	186e      	adds	r6, r5, r1
 800bee8:	1b5b      	subs	r3, r3, r5
 800beea:	1852      	adds	r2, r2, r1
 800beec:	3801      	subs	r0, #1
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	0849      	lsrs	r1, r1, #1
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d1f4      	bne.n	800bee0 <__ieee754_sqrtf+0x6c>
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <__ieee754_sqrtf+0x8c>
 800befa:	2301      	movs	r3, #1
 800befc:	3201      	adds	r2, #1
 800befe:	439a      	bics	r2, r3
 800bf00:	23fc      	movs	r3, #252	; 0xfc
 800bf02:	1052      	asrs	r2, r2, #1
 800bf04:	059b      	lsls	r3, r3, #22
 800bf06:	18d2      	adds	r2, r2, r3
 800bf08:	05e4      	lsls	r4, r4, #23
 800bf0a:	18a4      	adds	r4, r4, r2
 800bf0c:	e7c4      	b.n	800be98 <__ieee754_sqrtf+0x24>
 800bf0e:	005b      	lsls	r3, r3, #1
 800bf10:	3201      	adds	r2, #1
 800bf12:	4203      	tst	r3, r0
 800bf14:	d0fb      	beq.n	800bf0e <__ieee754_sqrtf+0x9a>
 800bf16:	3a01      	subs	r2, #1
 800bf18:	1a89      	subs	r1, r1, r2
 800bf1a:	e7d0      	b.n	800bebe <__ieee754_sqrtf+0x4a>
 800bf1c:	2080      	movs	r0, #128	; 0x80
 800bf1e:	0400      	lsls	r0, r0, #16
 800bf20:	e7f7      	b.n	800bf12 <__ieee754_sqrtf+0x9e>
	...

0800bf24 <_init>:
 800bf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf26:	46c0      	nop			; (mov r8, r8)
 800bf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf2a:	bc08      	pop	{r3}
 800bf2c:	469e      	mov	lr, r3
 800bf2e:	4770      	bx	lr

0800bf30 <_fini>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	46c0      	nop			; (mov r8, r8)
 800bf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf36:	bc08      	pop	{r3}
 800bf38:	469e      	mov	lr, r3
 800bf3a:	4770      	bx	lr
