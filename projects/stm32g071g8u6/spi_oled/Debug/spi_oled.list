
spi_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a34  080022ec  080022ec  000122ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d20  08003d20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d20  08003d20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d20  08003d20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  2000000c  08003d34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000990  08003d34  00020990  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007379  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f5  00000000  00000000  000273ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00028aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  00029210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ea1  00000000  00000000  000298c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008458  00000000  00000000  0003e761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d94  00000000  00000000  00046bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca94d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001924  00000000  00000000  000ca9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080022d4 	.word	0x080022d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080022d4 	.word	0x080022d4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fce1 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f81b 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f89f 	bl	800036c <MX_GPIO_Init>
  MX_SPI2_Init();
 800022e:	f000 f85f 	bl	80002f0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000232:	f000 fb61 	bl	80008f8 <OLED_Init>
  OLED_ShowString(10, 10, "STM32G031", 8, 0);
 8000236:	4a09      	ldr	r2, [pc, #36]	; (800025c <main+0x40>)
 8000238:	2300      	movs	r3, #0
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	2308      	movs	r3, #8
 800023e:	210a      	movs	r1, #10
 8000240:	200a      	movs	r0, #10
 8000242:	f000 fb17 	bl	8000874 <OLED_ShowString>
  OLED_ShowString(20, 20, "STM32G031", 8, 1);
 8000246:	4a05      	ldr	r2, [pc, #20]	; (800025c <main+0x40>)
 8000248:	2301      	movs	r3, #1
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2308      	movs	r3, #8
 800024e:	2114      	movs	r1, #20
 8000250:	2014      	movs	r0, #20
 8000252:	f000 fb0f 	bl	8000874 <OLED_ShowString>
  OLED_Refresh();
 8000256:	f000 f8fb 	bl	8000450 <OLED_Refresh>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025a:	e7fe      	b.n	800025a <main+0x3e>
 800025c:	080022ec 	.word	0x080022ec

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b093      	sub	sp, #76	; 0x4c
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2410      	movs	r4, #16
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2338      	movs	r3, #56	; 0x38
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 f827 	bl	80022c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	003b      	movs	r3, r7
 8000278:	0018      	movs	r0, r3
 800027a:	2310      	movs	r3, #16
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f002 f820 	bl	80022c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	0018      	movs	r0, r3
 800028a:	f000 ff8d 	bl	80011a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	193b      	adds	r3, r7, r4
 8000290:	2202      	movs	r2, #2
 8000292:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	0052      	lsls	r2, r2, #1
 800029a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2200      	movs	r2, #0
 80002a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	2240      	movs	r2, #64	; 0x40
 80002a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2200      	movs	r2, #0
 80002ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 ffb9 	bl	8001228 <HAL_RCC_OscConfig>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ba:	f000 f88f 	bl	80003dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	003b      	movs	r3, r7
 80002c0:	2207      	movs	r2, #7
 80002c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c4:	003b      	movs	r3, r7
 80002c6:	2200      	movs	r2, #0
 80002c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	003b      	movs	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	003b      	movs	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d6:	003b      	movs	r3, r7
 80002d8:	2100      	movs	r1, #0
 80002da:	0018      	movs	r0, r3
 80002dc:	f001 fabe 	bl	800185c <HAL_RCC_ClockConfig>
 80002e0:	1e03      	subs	r3, r0, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002e4:	f000 f87a 	bl	80003dc <Error_Handler>
  }
}
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b013      	add	sp, #76	; 0x4c
 80002ee:	bd90      	pop	{r4, r7, pc}

080002f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <MX_SPI2_Init+0x74>)
 80002f6:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <MX_SPI2_Init+0x78>)
 80002f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <MX_SPI2_Init+0x74>)
 80002fc:	2282      	movs	r2, #130	; 0x82
 80002fe:	0052      	lsls	r2, r2, #1
 8000300:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000302:	4b18      	ldr	r3, [pc, #96]	; (8000364 <MX_SPI2_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <MX_SPI2_Init+0x74>)
 800030a:	22e0      	movs	r2, #224	; 0xe0
 800030c:	00d2      	lsls	r2, r2, #3
 800030e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_SPI2_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <MX_SPI2_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_SPI2_Init+0x74>)
 800031e:	2280      	movs	r2, #128	; 0x80
 8000320:	0092      	lsls	r2, r2, #2
 8000322:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_SPI2_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_SPI2_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_SPI2_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_SPI2_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_SPI2_Init+0x74>)
 800033e:	2207      	movs	r2, #7
 8000340:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_SPI2_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_SPI2_Init+0x74>)
 800034a:	2208      	movs	r2, #8
 800034c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <MX_SPI2_Init+0x74>)
 8000350:	0018      	movs	r0, r3
 8000352:	f001 fc0d 	bl	8001b70 <HAL_SPI_Init>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800035a:	f000 f83f 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000028 	.word	0x20000028
 8000368:	40003800 	.word	0x40003800

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	0018      	movs	r0, r3
 8000376:	2314      	movs	r3, #20
 8000378:	001a      	movs	r2, r3
 800037a:	2100      	movs	r1, #0
 800037c:	f001 ffa2 	bl	80022c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0x6c>)
 8000382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_GPIO_Init+0x6c>)
 8000386:	2101      	movs	r1, #1
 8000388:	430a      	orrs	r2, r1
 800038a:	635a      	str	r2, [r3, #52]	; 0x34
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_GPIO_Init+0x6c>)
 800038e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000390:	2201      	movs	r2, #1
 8000392:	4013      	ands	r3, r2
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RES_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 8000398:	2390      	movs	r3, #144	; 0x90
 800039a:	0059      	lsls	r1, r3, #1
 800039c:	23a0      	movs	r3, #160	; 0xa0
 800039e:	05db      	lsls	r3, r3, #23
 80003a0:	2200      	movs	r2, #0
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 fee2 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin;
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2290      	movs	r2, #144	; 0x90
 80003ac:	0052      	lsls	r2, r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2201      	movs	r2, #1
 80003b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2202      	movs	r2, #2
 80003c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c2:	1d3a      	adds	r2, r7, #4
 80003c4:	23a0      	movs	r3, #160	; 0xa0
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	0011      	movs	r1, r2
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 fd6a 	bl	8000ea4 <HAL_GPIO_Init>

}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b006      	add	sp, #24
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40021000 	.word	0x40021000

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <Error_Handler+0x8>
	...

080003e8 <OLED_WR_Byte>:
			OLED_WR_Byte(0xA7,OLED_CMD);//��ɫ��ʾ
		}
}

void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	0002      	movs	r2, r0
 80003f0:	1dfb      	adds	r3, r7, #7
 80003f2:	701a      	strb	r2, [r3, #0]
 80003f4:	1dbb      	adds	r3, r7, #6
 80003f6:	1c0a      	adds	r2, r1, #0
 80003f8:	701a      	strb	r2, [r3, #0]
	u8 i;			  
	if(cmd)
 80003fa:	1dbb      	adds	r3, r7, #6
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d008      	beq.n	8000414 <OLED_WR_Byte+0x2c>
	  OLED_DC_Set();
 8000402:	2380      	movs	r3, #128	; 0x80
 8000404:	0059      	lsls	r1, r3, #1
 8000406:	23a0      	movs	r3, #160	; 0xa0
 8000408:	05db      	lsls	r3, r3, #23
 800040a:	2201      	movs	r2, #1
 800040c:	0018      	movs	r0, r3
 800040e:	f000 fead 	bl	800116c <HAL_GPIO_WritePin>
 8000412:	e007      	b.n	8000424 <OLED_WR_Byte+0x3c>
	else 
	  OLED_DC_Clr();		  
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	0059      	lsls	r1, r3, #1
 8000418:	23a0      	movs	r3, #160	; 0xa0
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	2200      	movs	r2, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fea4 	bl	800116c <HAL_GPIO_WritePin>
	//OLED_CS_Clr();

	HAL_SPI_Transmit(&hspi2, &cmd, 1, 1000);
 8000424:	23fa      	movs	r3, #250	; 0xfa
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	1db9      	adds	r1, r7, #6
 800042a:	4808      	ldr	r0, [pc, #32]	; (800044c <OLED_WR_Byte+0x64>)
 800042c:	2201      	movs	r2, #1
 800042e:	f001 fc57 	bl	8001ce0 <HAL_SPI_Transmit>
	//OLED_CS_Set();
	OLED_DC_Set();   	  
 8000432:	2380      	movs	r3, #128	; 0x80
 8000434:	0059      	lsls	r1, r3, #1
 8000436:	23a0      	movs	r3, #160	; 0xa0
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	2201      	movs	r2, #1
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fe95 	bl	800116c <HAL_GPIO_WritePin>
}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	20000028 	.word	0x20000028

08000450 <OLED_Refresh>:
	OLED_WR_Byte(0xAE,OLED_CMD);//�ر���Ļ
}

//�����Դ浽OLED	
void OLED_Refresh(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<16;i++)
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	2200      	movs	r2, #0
 800045a:	701a      	strb	r2, [r3, #0]
 800045c:	e02e      	b.n	80004bc <OLED_Refresh+0x6c>
	{
	   OLED_WR_Byte(0xb0+i,OLED_CMD); //��������ʼ��ַ
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	3b50      	subs	r3, #80	; 0x50
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2100      	movs	r1, #0
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff ffbd 	bl	80003e8 <OLED_WR_Byte>
	   OLED_WR_Byte(0x00,OLED_CMD);   //���õ�����ʼ��ַ
 800046e:	2100      	movs	r1, #0
 8000470:	2000      	movs	r0, #0
 8000472:	f7ff ffb9 	bl	80003e8 <OLED_WR_Byte>
	   OLED_WR_Byte(0x10,OLED_CMD);   //���ø�����ʼ��ַ
 8000476:	2100      	movs	r1, #0
 8000478:	2010      	movs	r0, #16
 800047a:	f7ff ffb5 	bl	80003e8 <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 800047e:	1dbb      	adds	r3, r7, #6
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]
 8000484:	e010      	b.n	80004a8 <OLED_Refresh+0x58>
		 OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8000486:	1dbb      	adds	r3, r7, #6
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	1dfb      	adds	r3, r7, #7
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	4910      	ldr	r1, [pc, #64]	; (80004d0 <OLED_Refresh+0x80>)
 8000490:	0112      	lsls	r2, r2, #4
 8000492:	188a      	adds	r2, r1, r2
 8000494:	5cd3      	ldrb	r3, [r2, r3]
 8000496:	2101      	movs	r1, #1
 8000498:	0018      	movs	r0, r3
 800049a:	f7ff ffa5 	bl	80003e8 <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 800049e:	1dbb      	adds	r3, r7, #6
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	1dbb      	adds	r3, r7, #6
 80004a4:	3201      	adds	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	1dbb      	adds	r3, r7, #6
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	b25b      	sxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	dae9      	bge.n	8000486 <OLED_Refresh+0x36>
	for(i=0;i<16;i++)
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	3201      	adds	r2, #1
 80004ba:	701a      	strb	r2, [r3, #0]
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b0f      	cmp	r3, #15
 80004c2:	d9cc      	bls.n	800045e <OLED_Refresh+0xe>
  }
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	2000008c 	.word	0x2000008c

080004d4 <OLED_Clear>:
//��������
void OLED_Clear(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<16;i++)
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
 80004e0:	e01b      	b.n	800051a <OLED_Clear+0x46>
	{
	   for(n=0;n<128;n++)
 80004e2:	1dbb      	adds	r3, r7, #6
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	e00d      	b.n	8000506 <OLED_Clear+0x32>
			{
			 OLED_GRAM[n][i]=0;//�����������
 80004ea:	1dbb      	adds	r3, r7, #6
 80004ec:	781a      	ldrb	r2, [r3, #0]
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	490f      	ldr	r1, [pc, #60]	; (8000530 <OLED_Clear+0x5c>)
 80004f4:	0112      	lsls	r2, r2, #4
 80004f6:	188a      	adds	r2, r1, r2
 80004f8:	2100      	movs	r1, #0
 80004fa:	54d1      	strb	r1, [r2, r3]
	   for(n=0;n<128;n++)
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	1dbb      	adds	r3, r7, #6
 8000502:	3201      	adds	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
 8000506:	1dbb      	adds	r3, r7, #6
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b25b      	sxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	daec      	bge.n	80004ea <OLED_Clear+0x16>
	for(i=0;i<16;i++)
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	3201      	adds	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b0f      	cmp	r3, #15
 8000520:	d9df      	bls.n	80004e2 <OLED_Clear+0xe>
			}
  }
	OLED_Refresh();//������ʾ
 8000522:	f7ff ff95 	bl	8000450 <OLED_Refresh>
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	2000008c 	.word	0x2000008c

08000534 <OLED_DrawPoint>:
//���� 
//x:������
//y:������
//t:1 ��� 0,���	
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	0004      	movs	r4, r0
 800053c:	0008      	movs	r0, r1
 800053e:	0011      	movs	r1, r2
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	1c22      	adds	r2, r4, #0
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	1dbb      	adds	r3, r7, #6
 8000548:	1c02      	adds	r2, r0, #0
 800054a:	701a      	strb	r2, [r3, #0]
 800054c:	1d7b      	adds	r3, r7, #5
 800054e:	1c0a      	adds	r2, r1, #0
 8000550:	701a      	strb	r2, [r3, #0]
	u8 i,m,n;
	u8 x0=x,y0=y;
 8000552:	230f      	movs	r3, #15
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	1dfa      	adds	r2, r7, #7
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	230e      	movs	r3, #14
 800055e:	18fb      	adds	r3, r7, r3
 8000560:	1dba      	adds	r2, r7, #6
 8000562:	7812      	ldrb	r2, [r2, #0]
 8000564:	701a      	strb	r2, [r3, #0]
	else if(USE_HORIZONTAL==270)
	{
		x=y0;
		y=127-x0;
	}
	i=y/8;
 8000566:	200d      	movs	r0, #13
 8000568:	183b      	adds	r3, r7, r0
 800056a:	1dba      	adds	r2, r7, #6
 800056c:	7812      	ldrb	r2, [r2, #0]
 800056e:	08d2      	lsrs	r2, r2, #3
 8000570:	701a      	strb	r2, [r3, #0]
	m=y%8;
 8000572:	240c      	movs	r4, #12
 8000574:	193b      	adds	r3, r7, r4
 8000576:	1dba      	adds	r2, r7, #6
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	2107      	movs	r1, #7
 800057c:	400a      	ands	r2, r1
 800057e:	701a      	strb	r2, [r3, #0]
	n=1<<m;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2201      	movs	r2, #1
 8000586:	409a      	lsls	r2, r3
 8000588:	250b      	movs	r5, #11
 800058a:	197b      	adds	r3, r7, r5
 800058c:	701a      	strb	r2, [r3, #0]
	if(t){OLED_GRAM[x][i]|=n;}
 800058e:	1d7b      	adds	r3, r7, #5
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d016      	beq.n	80005c4 <OLED_DrawPoint+0x90>
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	0004      	movs	r4, r0
 800059c:	183b      	adds	r3, r7, r0
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4929      	ldr	r1, [pc, #164]	; (8000648 <OLED_DrawPoint+0x114>)
 80005a2:	0112      	lsls	r2, r2, #4
 80005a4:	188a      	adds	r2, r1, r2
 80005a6:	5cd0      	ldrb	r0, [r2, r3]
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	781a      	ldrb	r2, [r3, #0]
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	1979      	adds	r1, r7, r5
 80005b2:	7809      	ldrb	r1, [r1, #0]
 80005b4:	4301      	orrs	r1, r0
 80005b6:	b2c8      	uxtb	r0, r1
 80005b8:	4923      	ldr	r1, [pc, #140]	; (8000648 <OLED_DrawPoint+0x114>)
 80005ba:	0112      	lsls	r2, r2, #4
 80005bc:	188a      	adds	r2, r1, r2
 80005be:	1c01      	adds	r1, r0, #0
 80005c0:	54d1      	strb	r1, [r2, r3]
	{
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
		OLED_GRAM[x][i]|=n;
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
	}
}
 80005c2:	e03c      	b.n	800063e <OLED_DrawPoint+0x10a>
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	240d      	movs	r4, #13
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	491e      	ldr	r1, [pc, #120]	; (8000648 <OLED_DrawPoint+0x114>)
 80005d0:	0112      	lsls	r2, r2, #4
 80005d2:	188a      	adds	r2, r1, r2
 80005d4:	5cd1      	ldrb	r1, [r2, r3]
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	43c9      	mvns	r1, r1
 80005e0:	b2c8      	uxtb	r0, r1
 80005e2:	4919      	ldr	r1, [pc, #100]	; (8000648 <OLED_DrawPoint+0x114>)
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	188a      	adds	r2, r1, r2
 80005e8:	1c01      	adds	r1, r0, #0
 80005ea:	54d1      	strb	r1, [r2, r3]
		OLED_GRAM[x][i]|=n;
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4914      	ldr	r1, [pc, #80]	; (8000648 <OLED_DrawPoint+0x114>)
 80005f6:	0112      	lsls	r2, r2, #4
 80005f8:	188a      	adds	r2, r1, r2
 80005fa:	5cd0      	ldrb	r0, [r2, r3]
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	193b      	adds	r3, r7, r4
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	210b      	movs	r1, #11
 8000606:	1879      	adds	r1, r7, r1
 8000608:	7809      	ldrb	r1, [r1, #0]
 800060a:	4301      	orrs	r1, r0
 800060c:	b2c8      	uxtb	r0, r1
 800060e:	490e      	ldr	r1, [pc, #56]	; (8000648 <OLED_DrawPoint+0x114>)
 8000610:	0112      	lsls	r2, r2, #4
 8000612:	188a      	adds	r2, r1, r2
 8000614:	1c01      	adds	r1, r0, #0
 8000616:	54d1      	strb	r1, [r2, r3]
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	781a      	ldrb	r2, [r3, #0]
 800061c:	193b      	adds	r3, r7, r4
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4909      	ldr	r1, [pc, #36]	; (8000648 <OLED_DrawPoint+0x114>)
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	188a      	adds	r2, r1, r2
 8000626:	5cd1      	ldrb	r1, [r2, r3]
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	193b      	adds	r3, r7, r4
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	43c9      	mvns	r1, r1
 8000632:	b2c8      	uxtb	r0, r1
 8000634:	4904      	ldr	r1, [pc, #16]	; (8000648 <OLED_DrawPoint+0x114>)
 8000636:	0112      	lsls	r2, r2, #4
 8000638:	188a      	adds	r2, r1, r2
 800063a:	1c01      	adds	r1, r0, #0
 800063c:	54d1      	strb	r1, [r2, r3]
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b004      	add	sp, #16
 8000644:	bdb0      	pop	{r4, r5, r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	2000008c 	.word	0x2000008c

0800064c <OLED_ShowChar>:
//x:0~127
//y:0~63
//size1:ѡ������ 6x8/6x12/8x16/12x24
//mode:0,��ɫ��ʾ;1,������ʾ
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size1,u8 mode)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	0005      	movs	r5, r0
 8000654:	000c      	movs	r4, r1
 8000656:	0010      	movs	r0, r2
 8000658:	0019      	movs	r1, r3
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	1c2a      	adds	r2, r5, #0
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	1dbb      	adds	r3, r7, #6
 8000662:	1c22      	adds	r2, r4, #0
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	1d7b      	adds	r3, r7, #5
 8000668:	1c02      	adds	r2, r0, #0
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	1c0a      	adds	r2, r1, #0
 8000670:	701a      	strb	r2, [r3, #0]
	u8 i,m,temp,size2,chr1;
	u8 x0=x,y0=y;
 8000672:	230a      	movs	r3, #10
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	1dfa      	adds	r2, r7, #7
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	230b      	movs	r3, #11
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	1dba      	adds	r2, r7, #6
 8000682:	7812      	ldrb	r2, [r2, #0]
 8000684:	701a      	strb	r2, [r3, #0]
	if(size1==8)size2=6;
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b08      	cmp	r3, #8
 800068c:	d104      	bne.n	8000698 <OLED_ShowChar+0x4c>
 800068e:	230c      	movs	r3, #12
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	2206      	movs	r2, #6
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e016      	b.n	80006c6 <OLED_ShowChar+0x7a>
	else size2=(size1/8+((size1%8)?1:0))*(size1/2);  //�õ�����һ���ַ���Ӧ������ռ���ֽ���
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	08db      	lsrs	r3, r3, #3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	0019      	movs	r1, r3
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2207      	movs	r2, #7
 80006a8:	4013      	ands	r3, r2
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	1e5a      	subs	r2, r3, #1
 80006ae:	4193      	sbcs	r3, r2
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	18cb      	adds	r3, r1, r3
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	085b      	lsrs	r3, r3, #1
 80006bc:	b2d9      	uxtb	r1, r3
 80006be:	230c      	movs	r3, #12
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	434a      	muls	r2, r1
 80006c4:	701a      	strb	r2, [r3, #0]
	chr1=chr-' ';  //����ƫ�ƺ��ֵ
 80006c6:	2309      	movs	r3, #9
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	1d7a      	adds	r2, r7, #5
 80006cc:	7812      	ldrb	r2, [r2, #0]
 80006ce:	3a20      	subs	r2, #32
 80006d0:	701a      	strb	r2, [r3, #0]
	for(i=0;i<size2;i++)
 80006d2:	230f      	movs	r3, #15
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e0b4      	b.n	8000846 <OLED_ShowChar+0x1fa>
	{
		if(size1==8)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b08      	cmp	r3, #8
 80006e2:	d110      	bne.n	8000706 <OLED_ShowChar+0xba>
			  {temp=asc2_0806[chr1][i];} //����0806����
 80006e4:	2309      	movs	r3, #9
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	781a      	ldrb	r2, [r3, #0]
 80006ea:	230f      	movs	r3, #15
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	7818      	ldrb	r0, [r3, #0]
 80006f0:	230d      	movs	r3, #13
 80006f2:	18f9      	adds	r1, r7, r3
 80006f4:	4c5b      	ldr	r4, [pc, #364]	; (8000864 <OLED_ShowChar+0x218>)
 80006f6:	0013      	movs	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	189b      	adds	r3, r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	18e3      	adds	r3, r4, r3
 8000700:	5c1b      	ldrb	r3, [r3, r0]
 8000702:	700b      	strb	r3, [r1, #0]
 8000704:	e03b      	b.n	800077e <OLED_ShowChar+0x132>
		else if(size1==12)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b0c      	cmp	r3, #12
 800070c:	d110      	bne.n	8000730 <OLED_ShowChar+0xe4>
        {temp=asc2_1206[chr1][i];} //����1206����
 800070e:	2309      	movs	r3, #9
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	230f      	movs	r3, #15
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	7818      	ldrb	r0, [r3, #0]
 800071a:	230d      	movs	r3, #13
 800071c:	18f9      	adds	r1, r7, r3
 800071e:	4c52      	ldr	r4, [pc, #328]	; (8000868 <OLED_ShowChar+0x21c>)
 8000720:	0013      	movs	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	189b      	adds	r3, r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	18e3      	adds	r3, r4, r3
 800072a:	5c1b      	ldrb	r3, [r3, r0]
 800072c:	700b      	strb	r3, [r1, #0]
 800072e:	e026      	b.n	800077e <OLED_ShowChar+0x132>
		else if(size1==16)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b10      	cmp	r3, #16
 8000736:	d10d      	bne.n	8000754 <OLED_ShowChar+0x108>
        {temp=asc2_1608[chr1][i];} //����1608����
 8000738:	2309      	movs	r3, #9
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	7819      	ldrb	r1, [r3, #0]
 800073e:	230f      	movs	r3, #15
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	230d      	movs	r3, #13
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	4848      	ldr	r0, [pc, #288]	; (800086c <OLED_ShowChar+0x220>)
 800074a:	0109      	lsls	r1, r1, #4
 800074c:	1841      	adds	r1, r0, r1
 800074e:	5c8a      	ldrb	r2, [r1, r2]
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e014      	b.n	800077e <OLED_ShowChar+0x132>
		else if(size1==24)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b18      	cmp	r3, #24
 800075a:	d000      	beq.n	800075e <OLED_ShowChar+0x112>
 800075c:	e07d      	b.n	800085a <OLED_ShowChar+0x20e>
        {temp=asc2_2412[chr1][i];} //����2412����
 800075e:	2309      	movs	r3, #9
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	230f      	movs	r3, #15
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	7818      	ldrb	r0, [r3, #0]
 800076a:	230d      	movs	r3, #13
 800076c:	18f9      	adds	r1, r7, r3
 800076e:	4c40      	ldr	r4, [pc, #256]	; (8000870 <OLED_ShowChar+0x224>)
 8000770:	0013      	movs	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	189b      	adds	r3, r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	18e3      	adds	r3, r4, r3
 800077a:	5c1b      	ldrb	r3, [r3, r0]
 800077c:	700b      	strb	r3, [r1, #0]
		else return;
		for(m=0;m<8;m++)
 800077e:	230e      	movs	r3, #14
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	e02f      	b.n	80007e8 <OLED_ShowChar+0x19c>
		{
			if(temp&0x01)OLED_DrawPoint(x,y,mode);
 8000788:	230d      	movs	r3, #13
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	d00a      	beq.n	80007aa <OLED_ShowChar+0x15e>
 8000794:	2320      	movs	r3, #32
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	1dbb      	adds	r3, r7, #6
 800079c:	7819      	ldrb	r1, [r3, #0]
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff fec6 	bl	8000534 <OLED_DrawPoint>
 80007a8:	e00d      	b.n	80007c6 <OLED_ShowChar+0x17a>
			else OLED_DrawPoint(x,y,!mode);
 80007aa:	2320      	movs	r3, #32
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	425a      	negs	r2, r3
 80007b2:	4153      	adcs	r3, r2
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	001a      	movs	r2, r3
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	7819      	ldrb	r1, [r3, #0]
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff feb7 	bl	8000534 <OLED_DrawPoint>
			temp>>=1;
 80007c6:	220d      	movs	r2, #13
 80007c8:	18bb      	adds	r3, r7, r2
 80007ca:	18ba      	adds	r2, r7, r2
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	0852      	lsrs	r2, r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
			y++;
 80007d2:	1dbb      	adds	r3, r7, #6
 80007d4:	781a      	ldrb	r2, [r3, #0]
 80007d6:	1dbb      	adds	r3, r7, #6
 80007d8:	3201      	adds	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
		for(m=0;m<8;m++)
 80007dc:	210e      	movs	r1, #14
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	3201      	adds	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	230e      	movs	r3, #14
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b07      	cmp	r3, #7
 80007f0:	d9ca      	bls.n	8000788 <OLED_ShowChar+0x13c>
		}
		x++;
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	3201      	adds	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
		if((size1!=8)&&((x-x0)==size1/2))
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b08      	cmp	r3, #8
 8000802:	d015      	beq.n	8000830 <OLED_ShowChar+0x1e4>
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	210a      	movs	r1, #10
 800080a:	187b      	adds	r3, r7, r1
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	1d3a      	adds	r2, r7, #4
 8000812:	7812      	ldrb	r2, [r2, #0]
 8000814:	0852      	lsrs	r2, r2, #1
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	4293      	cmp	r3, r2
 800081a:	d109      	bne.n	8000830 <OLED_ShowChar+0x1e4>
		{x=x0;y0=y0+8;}
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	187a      	adds	r2, r7, r1
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	220b      	movs	r2, #11
 8000826:	18bb      	adds	r3, r7, r2
 8000828:	18ba      	adds	r2, r7, r2
 800082a:	7812      	ldrb	r2, [r2, #0]
 800082c:	3208      	adds	r2, #8
 800082e:	701a      	strb	r2, [r3, #0]
		y=y0;
 8000830:	1dbb      	adds	r3, r7, #6
 8000832:	220b      	movs	r2, #11
 8000834:	18ba      	adds	r2, r7, r2
 8000836:	7812      	ldrb	r2, [r2, #0]
 8000838:	701a      	strb	r2, [r3, #0]
	for(i=0;i<size2;i++)
 800083a:	210f      	movs	r1, #15
 800083c:	187b      	adds	r3, r7, r1
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	187b      	adds	r3, r7, r1
 8000842:	3201      	adds	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	230f      	movs	r3, #15
 8000848:	18fa      	adds	r2, r7, r3
 800084a:	230c      	movs	r3, #12
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d200      	bcs.n	8000858 <OLED_ShowChar+0x20c>
 8000856:	e741      	b.n	80006dc <OLED_ShowChar+0x90>
 8000858:	e000      	b.n	800085c <OLED_ShowChar+0x210>
		else return;
 800085a:	46c0      	nop			; (mov r8, r8)
  }
}
 800085c:	46bd      	mov	sp, r7
 800085e:	b004      	add	sp, #16
 8000860:	bdb0      	pop	{r4, r5, r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	080022f8 	.word	0x080022f8
 8000868:	08002520 	.word	0x08002520
 800086c:	08002994 	.word	0x08002994
 8000870:	08002f84 	.word	0x08002f84

08000874 <OLED_ShowString>:
//x,y:�������  
//size1:�����С 
//*chr:�ַ�����ʼ��ַ 
//mode:0,��ɫ��ʾ;1,������ʾ
void OLED_ShowString(u8 x,u8 y,u8 *chr,u8 size1,u8 mode)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b085      	sub	sp, #20
 8000878:	af02      	add	r7, sp, #8
 800087a:	0004      	movs	r4, r0
 800087c:	0008      	movs	r0, r1
 800087e:	603a      	str	r2, [r7, #0]
 8000880:	0019      	movs	r1, r3
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	1c22      	adds	r2, r4, #0
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	1dbb      	adds	r3, r7, #6
 800088a:	1c02      	adds	r2, r0, #0
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	1d7b      	adds	r3, r7, #5
 8000890:	1c0a      	adds	r2, r1, #0
 8000892:	701a      	strb	r2, [r3, #0]
	while((*chr>=' ')&&(*chr<='~'))//�ж��ǲ��ǷǷ��ַ�!
 8000894:	e024      	b.n	80008e0 <OLED_ShowString+0x6c>
	{
		OLED_ShowChar(x,y,*chr,size1,mode);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	1d7b      	adds	r3, r7, #5
 800089c:	781c      	ldrb	r4, [r3, #0]
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	7819      	ldrb	r1, [r3, #0]
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	7818      	ldrb	r0, [r3, #0]
 80008a6:	2318      	movs	r3, #24
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	0023      	movs	r3, r4
 80008b0:	f7ff fecc 	bl	800064c <OLED_ShowChar>
		if(size1==8)x+=6;
 80008b4:	1d7b      	adds	r3, r7, #5
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d105      	bne.n	80008c8 <OLED_ShowString+0x54>
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	1dfa      	adds	r2, r7, #7
 80008c0:	7812      	ldrb	r2, [r2, #0]
 80008c2:	3206      	adds	r2, #6
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e008      	b.n	80008da <OLED_ShowString+0x66>
		else x+=size1/2;
 80008c8:	1d7b      	adds	r3, r7, #5
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	b2d9      	uxtb	r1, r3
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	1dfa      	adds	r2, r7, #7
 80008d4:	7812      	ldrb	r2, [r2, #0]
 80008d6:	188a      	adds	r2, r1, r2
 80008d8:	701a      	strb	r2, [r3, #0]
		chr++;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	603b      	str	r3, [r7, #0]
	while((*chr>=' ')&&(*chr<='~'))//�ж��ǲ��ǷǷ��ַ�!
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b1f      	cmp	r3, #31
 80008e6:	d903      	bls.n	80008f0 <OLED_ShowString+0x7c>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b7e      	cmp	r3, #126	; 0x7e
 80008ee:	d9d2      	bls.n	8000896 <OLED_ShowString+0x22>
  }
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b003      	add	sp, #12
 80008f6:	bd90      	pop	{r4, r7, pc}

080008f8 <OLED_Init>:
	 }
}

//OLED�ĳ�ʼ��
void OLED_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  //__HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b53      	ldr	r3, [pc, #332]	; (8000a4c <OLED_Init+0x154>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000902:	4b52      	ldr	r3, [pc, #328]	; (8000a4c <OLED_Init+0x154>)
 8000904:	2101      	movs	r1, #1
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
 800090a:	4b50      	ldr	r3, [pc, #320]	; (8000a4c <OLED_Init+0x154>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090e:	2201      	movs	r2, #1
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <OLED_Init+0x154>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b4c      	ldr	r3, [pc, #304]	; (8000a4c <OLED_Init+0x154>)
 800091c:	2102      	movs	r1, #2
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b4a      	ldr	r3, [pc, #296]	; (8000a4c <OLED_Init+0x154>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2202      	movs	r2, #2
 8000928:	4013      	ands	r3, r2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pins : PA0 PA1 PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 800092e:	210c      	movs	r1, #12
 8000930:	187b      	adds	r3, r7, r1
 8000932:	4a47      	ldr	r2, [pc, #284]	; (8000a50 <OLED_Init+0x158>)
 8000934:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2201      	movs	r2, #1
 800093a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2201      	movs	r2, #1
 8000940:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2203      	movs	r2, #3
 8000946:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	187a      	adds	r2, r7, r1
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f000 faa7 	bl	8000ea4 <HAL_GPIO_Init>
	
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15, GPIO_PIN_SET);
 8000956:	493e      	ldr	r1, [pc, #248]	; (8000a50 <OLED_Init+0x158>)
 8000958:	23a0      	movs	r3, #160	; 0xa0
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	2201      	movs	r2, #1
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fc04 	bl	800116c <HAL_GPIO_WritePin>

	
	OLED_RES_Clr();
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2200      	movs	r2, #0
 800096a:	2120      	movs	r1, #32
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fbfd 	bl	800116c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000972:	200a      	movs	r0, #10
 8000974:	f000 f9be 	bl	8000cf4 <HAL_Delay>
	OLED_RES_Set();
 8000978:	23a0      	movs	r3, #160	; 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	2201      	movs	r2, #1
 800097e:	2120      	movs	r1, #32
 8000980:	0018      	movs	r0, r3
 8000982:	f000 fbf3 	bl	800116c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 8000986:	2100      	movs	r1, #0
 8000988:	20ae      	movs	r0, #174	; 0xae
 800098a:	f7ff fd2d 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xa8,OLED_CMD); // Set Multiplex Ration
 800098e:	2100      	movs	r1, #0
 8000990:	20a8      	movs	r0, #168	; 0xa8
 8000992:	f7ff fd29 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x7f,OLED_CMD);
 8000996:	2100      	movs	r1, #0
 8000998:	207f      	movs	r0, #127	; 0x7f
 800099a:	f7ff fd25 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD); // Set Frame Frequency
 800099e:	2100      	movs	r1, #0
 80009a0:	20d5      	movs	r0, #213	; 0xd5
 80009a2:	f7ff fd21 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x50,OLED_CMD); // 104Hz
 80009a6:	2100      	movs	r1, #0
 80009a8:	2050      	movs	r0, #80	; 0x50
 80009aa:	f7ff fd1d 	bl	80003e8 <OLED_WR_Byte>
		OLED_WR_Byte(0xC8,OLED_CMD);
		OLED_WR_Byte(0xA1,OLED_CMD);
	}
	else
	{
		OLED_WR_Byte(0xC0,OLED_CMD);
 80009ae:	2100      	movs	r1, #0
 80009b0:	20c0      	movs	r0, #192	; 0xc0
 80009b2:	f7ff fd19 	bl	80003e8 <OLED_WR_Byte>
		OLED_WR_Byte(0xA0,OLED_CMD);
 80009b6:	2100      	movs	r1, #0
 80009b8:	20a0      	movs	r0, #160	; 0xa0
 80009ba:	f7ff fd15 	bl	80003e8 <OLED_WR_Byte>
	}
	OLED_WR_Byte(0xd3,OLED_CMD); // Set Display Offset
 80009be:	2100      	movs	r1, #0
 80009c0:	20d3      	movs	r0, #211	; 0xd3
 80009c2:	f7ff fd11 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);
 80009c6:	2100      	movs	r1, #0
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff fd0d 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xdc,OLED_CMD); // Set Display Start Line
 80009ce:	2100      	movs	r1, #0
 80009d0:	20dc      	movs	r0, #220	; 0xdc
 80009d2:	f7ff fd09 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);
 80009d6:	2100      	movs	r1, #0
 80009d8:	2000      	movs	r0, #0
 80009da:	f7ff fd05 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); // Set Page Addressing Mode
 80009de:	2100      	movs	r1, #0
 80009e0:	2020      	movs	r0, #32
 80009e2:	f7ff fd01 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); // Set Contrast Control
 80009e6:	2100      	movs	r1, #0
 80009e8:	2081      	movs	r0, #129	; 0x81
 80009ea:	f7ff fcfd 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xdf,OLED_CMD);
 80009ee:	2100      	movs	r1, #0
 80009f0:	20df      	movs	r0, #223	; 0xdf
 80009f2:	f7ff fcf9 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xa4,OLED_CMD); // Set Entire Display OFF/ON
 80009f6:	2100      	movs	r1, #0
 80009f8:	20a4      	movs	r0, #164	; 0xa4
 80009fa:	f7ff fcf5 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xa6,OLED_CMD); // Set Normal/Reverse Display
 80009fe:	2100      	movs	r1, #0
 8000a00:	20a6      	movs	r0, #166	; 0xa6
 8000a02:	f7ff fcf1 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xad,OLED_CMD); // Set External VPP
 8000a06:	2100      	movs	r1, #0
 8000a08:	20ad      	movs	r0, #173	; 0xad
 8000a0a:	f7ff fced 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x8a,OLED_CMD);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	208a      	movs	r0, #138	; 0x8a
 8000a12:	f7ff fce9 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xd9,OLED_CMD); // Set Phase Leghth
 8000a16:	2100      	movs	r1, #0
 8000a18:	20d9      	movs	r0, #217	; 0xd9
 8000a1a:	f7ff fce5 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x22,OLED_CMD);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2022      	movs	r0, #34	; 0x22
 8000a22:	f7ff fce1 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xdb,OLED_CMD); // Set Vcomh voltage
 8000a26:	2100      	movs	r1, #0
 8000a28:	20db      	movs	r0, #219	; 0xdb
 8000a2a:	f7ff fcdd 	bl	80003e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x35,OLED_CMD);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2035      	movs	r0, #53	; 0x35
 8000a32:	f7ff fcd9 	bl	80003e8 <OLED_WR_Byte>
	OLED_Clear();
 8000a36:	f7ff fd4d 	bl	80004d4 <OLED_Clear>
	OLED_WR_Byte(0xAF,OLED_CMD);//Display ON
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	20af      	movs	r0, #175	; 0xaf
 8000a3e:	f7ff fcd3 	bl	80003e8 <OLED_WR_Byte>
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b008      	add	sp, #32
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	000080ff 	.word	0x000080ff

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x44>)
 8000a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_MspInit+0x44>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	641a      	str	r2, [r3, #64]	; 0x40
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_MspInit+0x44>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x44>)
 8000a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_MspInit+0x44>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	0549      	lsls	r1, r1, #21
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_MspInit+0x44>)
 8000a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	055b      	lsls	r3, r3, #21
 8000a88:	4013      	ands	r3, r2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b08b      	sub	sp, #44	; 0x2c
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	2414      	movs	r4, #20
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2314      	movs	r3, #20
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f001 fc08 	bl	80022c4 <memset>
  if(hspi->Instance==SPI2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <HAL_SPI_MspInit+0xb8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d146      	bne.n	8000b4c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <HAL_SPI_MspInit+0xbc>)
 8000ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <HAL_SPI_MspInit+0xbc>)
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	01c9      	lsls	r1, r1, #7
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	63da      	str	r2, [r3, #60]	; 0x3c
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <HAL_SPI_MspInit+0xbc>)
 8000ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	01db      	lsls	r3, r3, #7
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_SPI_MspInit+0xbc>)
 8000adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <HAL_SPI_MspInit+0xbc>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_SPI_MspInit+0xbc>)
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aea:	2201      	movs	r2, #1
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2201      	movs	r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2202      	movs	r2, #2
 8000afc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2203      	movs	r2, #3
 8000b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	193a      	adds	r2, r7, r4
 8000b12:	23a0      	movs	r3, #160	; 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 f9c3 	bl	8000ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b1e:	0021      	movs	r1, r4
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2210      	movs	r2, #16
 8000b24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2202      	movs	r2, #2
 8000b2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2203      	movs	r2, #3
 8000b36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	187a      	adds	r2, r7, r1
 8000b40:	23a0      	movs	r3, #160	; 0xa0
 8000b42:	05db      	lsls	r3, r3, #23
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f9ac 	bl	8000ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b00b      	add	sp, #44	; 0x2c
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	40003800 	.word	0x40003800
 8000b58:	40021000 	.word	0x40021000

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f89c 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b98:	f7ff fff7 	bl	8000b8a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	; (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bc2:	f001 fb5b 	bl	800227c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bc6:	f7ff fb29 	bl	800021c <main>

08000bca <LoopForever>:

LoopForever:
  b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   r0, =_estack
 8000bcc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd8:	08003d28 	.word	0x08003d28
  ldr r2, =_sbss
 8000bdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be0:	20000990 	.word	0x20000990

08000be4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_Init+0x3c>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Init+0x3c>)
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	0049      	lsls	r1, r1, #1
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c02:	2003      	movs	r0, #3
 8000c04:	f000 f810 	bl	8000c28 <HAL_InitTick>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e001      	b.n	8000c18 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff ff1e 	bl	8000a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	781b      	ldrb	r3, [r3, #0]
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c30:	230f      	movs	r3, #15
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <HAL_InitTick+0x88>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d02b      	beq.n	8000c98 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <HAL_InitTick+0x8c>)
 8000c42:	681c      	ldr	r4, [r3, #0]
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <HAL_InitTick+0x88>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	0019      	movs	r1, r3
 8000c4a:	23fa      	movs	r3, #250	; 0xfa
 8000c4c:	0098      	lsls	r0, r3, #2
 8000c4e:	f7ff fa59 	bl	8000104 <__udivsi3>
 8000c52:	0003      	movs	r3, r0
 8000c54:	0019      	movs	r1, r3
 8000c56:	0020      	movs	r0, r4
 8000c58:	f7ff fa54 	bl	8000104 <__udivsi3>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 f913 	bl	8000e8a <HAL_SYSTICK_Config>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d112      	bne.n	8000c8e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d80a      	bhi.n	8000c84 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	2301      	movs	r3, #1
 8000c72:	425b      	negs	r3, r3
 8000c74:	2200      	movs	r2, #0
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 f8f2 	bl	8000e60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_InitTick+0x90>)
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e00d      	b.n	8000ca0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c84:	230f      	movs	r3, #15
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e008      	b.n	8000ca0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c8e:	230f      	movs	r3, #15
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e003      	b.n	8000ca0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	781b      	ldrb	r3, [r3, #0]
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b005      	add	sp, #20
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x1c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	18d2      	adds	r2, r2, r3
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_IncTick+0x20>)
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	2000098c 	.word	0x2000098c

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <HAL_GetTick+0x10>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	2000098c 	.word	0x2000098c

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff fff0 	bl	8000ce0 <HAL_GetTick>
 8000d00:	0003      	movs	r3, r0
 8000d02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	001a      	movs	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	189b      	adds	r3, r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	f7ff ffe0 	bl	8000ce0 <HAL_GetTick>
 8000d20:	0002      	movs	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b004      	add	sp, #16
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	20000008 	.word	0x20000008

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	0002      	movs	r2, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d50:	d828      	bhi.n	8000da4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d52:	4a2f      	ldr	r2, [pc, #188]	; (8000e10 <__NVIC_SetPriority+0xd4>)
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	089b      	lsrs	r3, r3, #2
 8000d5c:	33c0      	adds	r3, #192	; 0xc0
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	589b      	ldr	r3, [r3, r2]
 8000d62:	1dfa      	adds	r2, r7, #7
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	0011      	movs	r1, r2
 8000d68:	2203      	movs	r2, #3
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	00d2      	lsls	r2, r2, #3
 8000d6e:	21ff      	movs	r1, #255	; 0xff
 8000d70:	4091      	lsls	r1, r2
 8000d72:	000a      	movs	r2, r1
 8000d74:	43d2      	mvns	r2, r2
 8000d76:	401a      	ands	r2, r3
 8000d78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	019b      	lsls	r3, r3, #6
 8000d7e:	22ff      	movs	r2, #255	; 0xff
 8000d80:	401a      	ands	r2, r3
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	0018      	movs	r0, r3
 8000d88:	2303      	movs	r3, #3
 8000d8a:	4003      	ands	r3, r0
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d90:	481f      	ldr	r0, [pc, #124]	; (8000e10 <__NVIC_SetPriority+0xd4>)
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	33c0      	adds	r3, #192	; 0xc0
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000da2:	e031      	b.n	8000e08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <__NVIC_SetPriority+0xd8>)
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	0019      	movs	r1, r3
 8000dac:	230f      	movs	r3, #15
 8000dae:	400b      	ands	r3, r1
 8000db0:	3b08      	subs	r3, #8
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3306      	adds	r3, #6
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	18d3      	adds	r3, r2, r3
 8000dba:	3304      	adds	r3, #4
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1dfa      	adds	r2, r7, #7
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	00d2      	lsls	r2, r2, #3
 8000dca:	21ff      	movs	r1, #255	; 0xff
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	43d2      	mvns	r2, r2
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	019b      	lsls	r3, r3, #6
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	401a      	ands	r2, r3
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	0018      	movs	r0, r3
 8000de4:	2303      	movs	r3, #3
 8000de6:	4003      	ands	r3, r0
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <__NVIC_SetPriority+0xd8>)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	001c      	movs	r4, r3
 8000df4:	230f      	movs	r3, #15
 8000df6:	4023      	ands	r3, r4
 8000df8:	3b08      	subs	r3, #8
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	3306      	adds	r3, #6
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	18c3      	adds	r3, r0, r3
 8000e04:	3304      	adds	r3, #4
 8000e06:	601a      	str	r2, [r3, #0]
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b003      	add	sp, #12
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	045b      	lsls	r3, r3, #17
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d301      	bcc.n	8000e30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e010      	b.n	8000e52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <SysTick_Config+0x44>)
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	3a01      	subs	r2, #1
 8000e36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e38:	2301      	movs	r3, #1
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	2103      	movs	r1, #3
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff ff7c 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x44>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x44>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	1c02      	adds	r2, r0, #0
 8000e70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff ff5d 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b004      	add	sp, #16
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ffbf 	bl	8000e18 <SysTick_Config>
 8000e9a:	0003      	movs	r3, r0
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e147      	b.n	8001144 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <HAL_GPIO_Init+0x28>
 8000eca:	e138      	b.n	800113e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d005      	beq.n	8000ee4 <HAL_GPIO_Init+0x40>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2203      	movs	r2, #3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	409a      	lsls	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	2201      	movs	r2, #1
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d017      	beq.n	8000f82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2203      	movs	r2, #3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d123      	bne.n	8000fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	58d3      	ldr	r3, [r2, r3]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2107      	movs	r1, #7
 8000fba:	400b      	ands	r3, r1
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	6939      	ldr	r1, [r7, #16]
 8000fd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	23c0      	movs	r3, #192	; 0xc0
 8001010:	029b      	lsls	r3, r3, #10
 8001012:	4013      	ands	r3, r2
 8001014:	d100      	bne.n	8001018 <HAL_GPIO_Init+0x174>
 8001016:	e092      	b.n	800113e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001018:	4a50      	ldr	r2, [pc, #320]	; (800115c <HAL_GPIO_Init+0x2b8>)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3318      	adds	r3, #24
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	589b      	ldr	r3, [r3, r2]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2203      	movs	r2, #3
 800102a:	4013      	ands	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	220f      	movs	r2, #15
 8001030:	409a      	lsls	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	43da      	mvns	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	05db      	lsls	r3, r3, #23
 8001042:	429a      	cmp	r2, r3
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x1ca>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a45      	ldr	r2, [pc, #276]	; (8001160 <HAL_GPIO_Init+0x2bc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x1c6>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a44      	ldr	r2, [pc, #272]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x1c2>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a43      	ldr	r2, [pc, #268]	; (8001168 <HAL_GPIO_Init+0x2c4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x1be>
 800105e:	2303      	movs	r3, #3
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x1cc>
 8001062:	2305      	movs	r3, #5
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x1cc>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x1cc>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x1cc>
 800106e:	2300      	movs	r3, #0
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	2103      	movs	r1, #3
 8001074:	400a      	ands	r2, r1
 8001076:	00d2      	lsls	r2, r2, #3
 8001078:	4093      	lsls	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001080:	4936      	ldr	r1, [pc, #216]	; (800115c <HAL_GPIO_Init+0x2b8>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3318      	adds	r3, #24
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_GPIO_Init+0x2b8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43da      	mvns	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	035b      	lsls	r3, r3, #13
 80010a6:	4013      	ands	r3, r2
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <HAL_GPIO_Init+0x2b8>)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <HAL_GPIO_Init+0x2b8>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43da      	mvns	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	039b      	lsls	r3, r3, #14
 80010d0:	4013      	ands	r3, r2
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <HAL_GPIO_Init+0x2b8>)
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <HAL_GPIO_Init+0x2b8>)
 80010e4:	2384      	movs	r3, #132	; 0x84
 80010e6:	58d3      	ldr	r3, [r2, r3]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43da      	mvns	r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	029b      	lsls	r3, r3, #10
 80010fc:	4013      	ands	r3, r2
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001108:	4914      	ldr	r1, [pc, #80]	; (800115c <HAL_GPIO_Init+0x2b8>)
 800110a:	2284      	movs	r2, #132	; 0x84
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <HAL_GPIO_Init+0x2b8>)
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	58d3      	ldr	r3, [r2, r3]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43da      	mvns	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	025b      	lsls	r3, r3, #9
 800112a:	4013      	ands	r3, r2
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001136:	4909      	ldr	r1, [pc, #36]	; (800115c <HAL_GPIO_Init+0x2b8>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	40da      	lsrs	r2, r3
 800114c:	1e13      	subs	r3, r2, #0
 800114e:	d000      	beq.n	8001152 <HAL_GPIO_Init+0x2ae>
 8001150:	e6b0      	b.n	8000eb4 <HAL_GPIO_Init+0x10>
  }
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b006      	add	sp, #24
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021800 	.word	0x40021800
 8001160:	50000400 	.word	0x50000400
 8001164:	50000800 	.word	0x50000800
 8001168:	50000c00 	.word	0x50000c00

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	0008      	movs	r0, r1
 8001176:	0011      	movs	r1, r2
 8001178:	1cbb      	adds	r3, r7, #2
 800117a:	1c02      	adds	r2, r0, #0
 800117c:	801a      	strh	r2, [r3, #0]
 800117e:	1c7b      	adds	r3, r7, #1
 8001180:	1c0a      	adds	r2, r1, #0
 8001182:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001184:	1c7b      	adds	r3, r7, #1
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800118c:	1cbb      	adds	r3, r7, #2
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001194:	e003      	b.n	800119e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001196:	1cbb      	adds	r3, r7, #2
 8001198:	881a      	ldrh	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	0019      	movs	r1, r3
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d11f      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	0013      	movs	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	189b      	adds	r3, r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4912      	ldr	r1, [pc, #72]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f7fe ff92 	bl	8000104 <__udivsi3>
 80011e0:	0003      	movs	r3, r0
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011e6:	e008      	b.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e001      	b.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e009      	b.n	800120e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	401a      	ands	r2, r3
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	429a      	cmp	r2, r3
 800120a:	d0ed      	beq.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40007000 	.word	0x40007000
 800121c:	fffff9ff 	.word	0xfffff9ff
 8001220:	20000000 	.word	0x20000000
 8001224:	000f4240 	.word	0x000f4240

08001228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e2fe      	b.n	8001838 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2201      	movs	r2, #1
 8001240:	4013      	ands	r3, r2
 8001242:	d100      	bne.n	8001246 <HAL_RCC_OscConfig+0x1e>
 8001244:	e07c      	b.n	8001340 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001246:	4bc3      	ldr	r3, [pc, #780]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2238      	movs	r2, #56	; 0x38
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001250:	4bc0      	ldr	r3, [pc, #768]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2203      	movs	r2, #3
 8001256:	4013      	ands	r3, r2
 8001258:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2b10      	cmp	r3, #16
 800125e:	d102      	bne.n	8001266 <HAL_RCC_OscConfig+0x3e>
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d002      	beq.n	800126c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b08      	cmp	r3, #8
 800126a:	d10b      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	4bb9      	ldr	r3, [pc, #740]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	029b      	lsls	r3, r3, #10
 8001274:	4013      	ands	r3, r2
 8001276:	d062      	beq.n	800133e <HAL_RCC_OscConfig+0x116>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d15e      	bne.n	800133e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e2d9      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	025b      	lsls	r3, r3, #9
 800128c:	429a      	cmp	r2, r3
 800128e:	d107      	bne.n	80012a0 <HAL_RCC_OscConfig+0x78>
 8001290:	4bb0      	ldr	r3, [pc, #704]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4baf      	ldr	r3, [pc, #700]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	0249      	lsls	r1, r1, #9
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e020      	b.n	80012e2 <HAL_RCC_OscConfig+0xba>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	23a0      	movs	r3, #160	; 0xa0
 80012a6:	02db      	lsls	r3, r3, #11
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d10e      	bne.n	80012ca <HAL_RCC_OscConfig+0xa2>
 80012ac:	4ba9      	ldr	r3, [pc, #676]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4ba8      	ldr	r3, [pc, #672]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	02c9      	lsls	r1, r1, #11
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	4ba6      	ldr	r3, [pc, #664]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4ba5      	ldr	r3, [pc, #660]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	0249      	lsls	r1, r1, #9
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e00b      	b.n	80012e2 <HAL_RCC_OscConfig+0xba>
 80012ca:	4ba2      	ldr	r3, [pc, #648]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4ba1      	ldr	r3, [pc, #644]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80012d0:	49a1      	ldr	r1, [pc, #644]	; (8001558 <HAL_RCC_OscConfig+0x330>)
 80012d2:	400a      	ands	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	4b9f      	ldr	r3, [pc, #636]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b9e      	ldr	r3, [pc, #632]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80012dc:	499f      	ldr	r1, [pc, #636]	; (800155c <HAL_RCC_OscConfig+0x334>)
 80012de:	400a      	ands	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d014      	beq.n	8001314 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	f7ff fcf9 	bl	8000ce0 <HAL_GetTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fcf4 	bl	8000ce0 <HAL_GetTick>
 80012f8:	0002      	movs	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e298      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001306:	4b93      	ldr	r3, [pc, #588]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	029b      	lsls	r3, r3, #10
 800130e:	4013      	ands	r3, r2
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xcc>
 8001312:	e015      	b.n	8001340 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fce4 	bl	8000ce0 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800131e:	f7ff fcdf 	bl	8000ce0 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b64      	cmp	r3, #100	; 0x64
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e283      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001330:	4b88      	ldr	r3, [pc, #544]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0xf6>
 800133c:	e000      	b.n	8001340 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2202      	movs	r2, #2
 8001346:	4013      	ands	r3, r2
 8001348:	d100      	bne.n	800134c <HAL_RCC_OscConfig+0x124>
 800134a:	e099      	b.n	8001480 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134c:	4b81      	ldr	r3, [pc, #516]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2238      	movs	r2, #56	; 0x38
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001356:	4b7f      	ldr	r3, [pc, #508]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2203      	movs	r2, #3
 800135c:	4013      	ands	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2b10      	cmp	r3, #16
 8001364:	d102      	bne.n	800136c <HAL_RCC_OscConfig+0x144>
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d002      	beq.n	8001372 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d135      	bne.n	80013de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001372:	4b78      	ldr	r3, [pc, #480]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4013      	ands	r3, r2
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x162>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e256      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a74      	ldr	r2, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x338>)
 8001390:	4013      	ands	r3, r2
 8001392:	0019      	movs	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	021a      	lsls	r2, r3, #8
 800139a:	4b6e      	ldr	r3, [pc, #440]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 800139c:	430a      	orrs	r2, r1
 800139e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d112      	bne.n	80013cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013a6:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a6e      	ldr	r2, [pc, #440]	; (8001564 <HAL_RCC_OscConfig+0x33c>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	0019      	movs	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	4b67      	ldr	r3, [pc, #412]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013ba:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0adb      	lsrs	r3, r3, #11
 80013c0:	2207      	movs	r2, #7
 80013c2:	4013      	ands	r3, r2
 80013c4:	4a68      	ldr	r2, [pc, #416]	; (8001568 <HAL_RCC_OscConfig+0x340>)
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <HAL_RCC_OscConfig+0x344>)
 80013ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013cc:	4b68      	ldr	r3, [pc, #416]	; (8001570 <HAL_RCC_OscConfig+0x348>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff fc29 	bl	8000c28 <HAL_InitTick>
 80013d6:	1e03      	subs	r3, r0, #0
 80013d8:	d051      	beq.n	800147e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e22c      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d030      	beq.n	8001448 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013e6:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a5e      	ldr	r2, [pc, #376]	; (8001564 <HAL_RCC_OscConfig+0x33c>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	4b57      	ldr	r3, [pc, #348]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013fa:	4b56      	ldr	r3, [pc, #344]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b55      	ldr	r3, [pc, #340]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	0049      	lsls	r1, r1, #1
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc6a 	bl	8000ce0 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff fc65 	bl	8000ce0 <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e209      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001424:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4013      	ands	r3, r2
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_RCC_OscConfig+0x338>)
 8001436:	4013      	ands	r3, r2
 8001438:	0019      	movs	r1, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	021a      	lsls	r2, r3, #8
 8001440:	4b44      	ldr	r3, [pc, #272]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001442:	430a      	orrs	r2, r1
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	e01b      	b.n	8001480 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001448:	4b42      	ldr	r3, [pc, #264]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 800144e:	4949      	ldr	r1, [pc, #292]	; (8001574 <HAL_RCC_OscConfig+0x34c>)
 8001450:	400a      	ands	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fc44 	bl	8000ce0 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fc3f 	bl	8000ce0 <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1e3      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001470:	4b38      	ldr	r3, [pc, #224]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4013      	ands	r3, r2
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x236>
 800147c:	e000      	b.n	8001480 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800147e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2208      	movs	r2, #8
 8001486:	4013      	ands	r3, r2
 8001488:	d047      	beq.n	800151a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800148a:	4b32      	ldr	r3, [pc, #200]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2238      	movs	r2, #56	; 0x38
 8001490:	4013      	ands	r3, r2
 8001492:	2b18      	cmp	r3, #24
 8001494:	d10a      	bne.n	80014ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	d03c      	beq.n	800151a <HAL_RCC_OscConfig+0x2f2>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d138      	bne.n	800151a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e1c5      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d019      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc0e 	bl	8000ce0 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc09 	bl	8000ce0 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e1ad      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e0:	2202      	movs	r2, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d0f1      	beq.n	80014ca <HAL_RCC_OscConfig+0x2a2>
 80014e6:	e018      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fbf4 	bl	8000ce0 <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fbef 	bl	8000ce0 <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e193      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001514:	2202      	movs	r2, #2
 8001516:	4013      	ands	r3, r2
 8001518:	d1f1      	bne.n	80014fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2204      	movs	r2, #4
 8001520:	4013      	ands	r3, r2
 8001522:	d100      	bne.n	8001526 <HAL_RCC_OscConfig+0x2fe>
 8001524:	e0c6      	b.n	80016b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	231f      	movs	r3, #31
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2238      	movs	r2, #56	; 0x38
 8001534:	4013      	ands	r3, r2
 8001536:	2b20      	cmp	r3, #32
 8001538:	d11e      	bne.n	8001578 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_RCC_OscConfig+0x32c>)
 800153c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153e:	2202      	movs	r2, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d100      	bne.n	8001546 <HAL_RCC_OscConfig+0x31e>
 8001544:	e0b6      	b.n	80016b4 <HAL_RCC_OscConfig+0x48c>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d000      	beq.n	8001550 <HAL_RCC_OscConfig+0x328>
 800154e:	e0b1      	b.n	80016b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e171      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
 8001554:	40021000 	.word	0x40021000
 8001558:	fffeffff 	.word	0xfffeffff
 800155c:	fffbffff 	.word	0xfffbffff
 8001560:	ffff80ff 	.word	0xffff80ff
 8001564:	ffffc7ff 	.word	0xffffc7ff
 8001568:	00f42400 	.word	0x00f42400
 800156c:	20000000 	.word	0x20000000
 8001570:	20000004 	.word	0x20000004
 8001574:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001578:	4bb1      	ldr	r3, [pc, #708]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 800157a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	055b      	lsls	r3, r3, #21
 8001580:	4013      	ands	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_RCC_OscConfig+0x360>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x362>
 8001588:	2300      	movs	r3, #0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d011      	beq.n	80015b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4bac      	ldr	r3, [pc, #688]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001592:	4bab      	ldr	r3, [pc, #684]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	0549      	lsls	r1, r1, #21
 8001598:	430a      	orrs	r2, r1
 800159a:	63da      	str	r2, [r3, #60]	; 0x3c
 800159c:	4ba8      	ldr	r3, [pc, #672]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 800159e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	055b      	lsls	r3, r3, #21
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015aa:	231f      	movs	r3, #31
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b2:	4ba4      	ldr	r3, [pc, #656]	; (8001844 <HAL_RCC_OscConfig+0x61c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d11a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015be:	4ba1      	ldr	r3, [pc, #644]	; (8001844 <HAL_RCC_OscConfig+0x61c>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4ba0      	ldr	r3, [pc, #640]	; (8001844 <HAL_RCC_OscConfig+0x61c>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb88 	bl	8000ce0 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fb83 	bl	8000ce0 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e127      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e8:	4b96      	ldr	r3, [pc, #600]	; (8001844 <HAL_RCC_OscConfig+0x61c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x3e2>
 80015fc:	4b90      	ldr	r3, [pc, #576]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80015fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001600:	4b8f      	ldr	r3, [pc, #572]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	65da      	str	r2, [r3, #92]	; 0x5c
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x41c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x404>
 8001612:	4b8b      	ldr	r3, [pc, #556]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001614:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001616:	4b8a      	ldr	r3, [pc, #552]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001618:	2104      	movs	r1, #4
 800161a:	430a      	orrs	r2, r1
 800161c:	65da      	str	r2, [r3, #92]	; 0x5c
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001622:	4b87      	ldr	r3, [pc, #540]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	65da      	str	r2, [r3, #92]	; 0x5c
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0x41c>
 800162c:	4b84      	ldr	r3, [pc, #528]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 800162e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001630:	4b83      	ldr	r3, [pc, #524]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001632:	2101      	movs	r1, #1
 8001634:	438a      	bics	r2, r1
 8001636:	65da      	str	r2, [r3, #92]	; 0x5c
 8001638:	4b81      	ldr	r3, [pc, #516]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 800163a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800163c:	4b80      	ldr	r3, [pc, #512]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 800163e:	2104      	movs	r1, #4
 8001640:	438a      	bics	r2, r1
 8001642:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d014      	beq.n	8001676 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fb48 	bl	8000ce0 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001654:	e009      	b.n	800166a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff fb43 	bl	8000ce0 <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	4a79      	ldr	r2, [pc, #484]	; (8001848 <HAL_RCC_OscConfig+0x620>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0e6      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800166a:	4b75      	ldr	r3, [pc, #468]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x42e>
 8001674:	e013      	b.n	800169e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fb33 	bl	8000ce0 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800167e:	e009      	b.n	8001694 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff fb2e 	bl	8000ce0 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	4a6f      	ldr	r2, [pc, #444]	; (8001848 <HAL_RCC_OscConfig+0x620>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e0d1      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2202      	movs	r2, #2
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800169e:	231f      	movs	r3, #31
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016a8:	4b65      	ldr	r3, [pc, #404]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80016aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80016ae:	4967      	ldr	r1, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x624>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d100      	bne.n	80016be <HAL_RCC_OscConfig+0x496>
 80016bc:	e0bb      	b.n	8001836 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016be:	4b60      	ldr	r3, [pc, #384]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2238      	movs	r2, #56	; 0x38
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d100      	bne.n	80016cc <HAL_RCC_OscConfig+0x4a4>
 80016ca:	e07b      	b.n	80017c4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d156      	bne.n	8001782 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d4:	4b5a      	ldr	r3, [pc, #360]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b59      	ldr	r3, [pc, #356]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80016da:	495d      	ldr	r1, [pc, #372]	; (8001850 <HAL_RCC_OscConfig+0x628>)
 80016dc:	400a      	ands	r2, r1
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fafe 	bl	8000ce0 <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff faf9 	bl	8000ce0 <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e09d      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	049b      	lsls	r3, r3, #18
 8001704:	4013      	ands	r3, r2
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001708:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4a51      	ldr	r2, [pc, #324]	; (8001854 <HAL_RCC_OscConfig+0x62c>)
 800170e:	4013      	ands	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1a      	ldr	r2, [r3, #32]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001734:	431a      	orrs	r2, r3
 8001736:	4b42      	ldr	r3, [pc, #264]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001738:	430a      	orrs	r2, r1
 800173a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b40      	ldr	r3, [pc, #256]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	0449      	lsls	r1, r1, #17
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800174a:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0549      	lsls	r1, r1, #21
 8001754:	430a      	orrs	r2, r1
 8001756:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fac2 	bl	8000ce0 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fabd 	bl	8000ce0 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e061      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001774:	4b32      	ldr	r3, [pc, #200]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	049b      	lsls	r3, r3, #18
 800177c:	4013      	ands	r3, r2
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x53a>
 8001780:	e059      	b.n	8001836 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 8001788:	4931      	ldr	r1, [pc, #196]	; (8001850 <HAL_RCC_OscConfig+0x628>)
 800178a:	400a      	ands	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff faa7 	bl	8000ce0 <HAL_GetTick>
 8001792:	0003      	movs	r3, r0
 8001794:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff faa2 	bl	8000ce0 <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e046      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	049b      	lsls	r3, r3, #18
 80017b2:	4013      	ands	r3, r2
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80017b6:	4b22      	ldr	r3, [pc, #136]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80017bc:	4926      	ldr	r1, [pc, #152]	; (8001858 <HAL_RCC_OscConfig+0x630>)
 80017be:	400a      	ands	r2, r1
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	e038      	b.n	8001836 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e033      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x618>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2203      	movs	r2, #3
 80017da:	401a      	ands	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d126      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2270      	movs	r2, #112	; 0x70
 80017e8:	401a      	ands	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d11f      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	23fe      	movs	r3, #254	; 0xfe
 80017f6:	01db      	lsls	r3, r3, #7
 80017f8:	401a      	ands	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d116      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	23f8      	movs	r3, #248	; 0xf8
 8001808:	039b      	lsls	r3, r3, #14
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d10e      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	23e0      	movs	r3, #224	; 0xe0
 8001818:	051b      	lsls	r3, r3, #20
 800181a:	401a      	ands	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	0f5b      	lsrs	r3, r3, #29
 8001828:	075a      	lsls	r2, r3, #29
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b008      	add	sp, #32
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	40007000 	.word	0x40007000
 8001848:	00001388 	.word	0x00001388
 800184c:	efffffff 	.word	0xefffffff
 8001850:	feffffff 	.word	0xfeffffff
 8001854:	11c1808c 	.word	0x11c1808c
 8001858:	eefefffc 	.word	0xeefefffc

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0e9      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2207      	movs	r2, #7
 8001876:	4013      	ands	r3, r2
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d91e      	bls.n	80018bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2207      	movs	r2, #7
 8001884:	4393      	bics	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	4b70      	ldr	r3, [pc, #448]	; (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001890:	f7ff fa26 	bl	8000ce0 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001898:	e009      	b.n	80018ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189a:	f7ff fa21 	bl	8000ce0 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	4a6a      	ldr	r2, [pc, #424]	; (8001a50 <HAL_RCC_ClockConfig+0x1f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0ca      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018ae:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2207      	movs	r2, #7
 80018b4:	4013      	ands	r3, r2
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2202      	movs	r2, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d015      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2204      	movs	r2, #4
 80018cc:	4013      	ands	r3, r2
 80018ce:	d006      	beq.n	80018de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018d0:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	4b5f      	ldr	r3, [pc, #380]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 80018d6:	21e0      	movs	r1, #224	; 0xe0
 80018d8:	01c9      	lsls	r1, r1, #7
 80018da:	430a      	orrs	r2, r1
 80018dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018de:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	4a5d      	ldr	r2, [pc, #372]	; (8001a58 <HAL_RCC_ClockConfig+0x1fc>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 80018ee:	430a      	orrs	r2, r1
 80018f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4013      	ands	r3, r2
 80018fa:	d057      	beq.n	80019ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d107      	bne.n	8001914 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	029b      	lsls	r3, r3, #10
 800190c:	4013      	ands	r3, r2
 800190e:	d12b      	bne.n	8001968 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e097      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d107      	bne.n	800192c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191c:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	049b      	lsls	r3, r3, #18
 8001924:	4013      	ands	r3, r2
 8001926:	d11f      	bne.n	8001968 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e08b      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d107      	bne.n	8001944 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001934:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4013      	ands	r3, r2
 800193e:	d113      	bne.n	8001968 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e07f      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d106      	bne.n	800195a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194c:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001950:	2202      	movs	r2, #2
 8001952:	4013      	ands	r3, r2
 8001954:	d108      	bne.n	8001968 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e074      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195a:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e06d      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001968:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2207      	movs	r2, #7
 800196e:	4393      	bics	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800197c:	f7ff f9b0 	bl	8000ce0 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001984:	e009      	b.n	800199a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001986:	f7ff f9ab 	bl	8000ce0 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4a2f      	ldr	r2, [pc, #188]	; (8001a50 <HAL_RCC_ClockConfig+0x1f4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e054      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2238      	movs	r2, #56	; 0x38
 80019a0:	401a      	ands	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1ec      	bne.n	8001986 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2207      	movs	r2, #7
 80019b2:	4013      	ands	r3, r2
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d21e      	bcs.n	80019f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2207      	movs	r2, #7
 80019c0:	4393      	bics	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019cc:	f7ff f988 	bl	8000ce0 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d6:	f7ff f983 	bl	8000ce0 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <HAL_RCC_ClockConfig+0x1f4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e02c      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2207      	movs	r2, #7
 80019f0:	4013      	ands	r3, r2
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d1ee      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2204      	movs	r2, #4
 80019fe:	4013      	ands	r3, r2
 8001a00:	d009      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <HAL_RCC_ClockConfig+0x200>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 8001a12:	430a      	orrs	r2, r1
 8001a14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a16:	f000 f829 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a1a:	0001      	movs	r1, r0
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	220f      	movs	r2, #15
 8001a24:	401a      	ands	r2, r3
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_RCC_ClockConfig+0x204>)
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	58d3      	ldr	r3, [r2, r3]
 8001a2c:	221f      	movs	r2, #31
 8001a2e:	4013      	ands	r3, r2
 8001a30:	000a      	movs	r2, r1
 8001a32:	40da      	lsrs	r2, r3
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_ClockConfig+0x208>)
 8001a36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x20c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff f8f3 	bl	8000c28 <HAL_InitTick>
 8001a42:	0003      	movs	r3, r0
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b004      	add	sp, #16
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	00001388 	.word	0x00001388
 8001a54:	40021000 	.word	0x40021000
 8001a58:	fffff0ff 	.word	0xfffff0ff
 8001a5c:	ffff8fff 	.word	0xffff8fff
 8001a60:	08003ce0 	.word	0x08003ce0
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a72:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2238      	movs	r2, #56	; 0x38
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d10f      	bne.n	8001a9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a7c:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0adb      	lsrs	r3, r3, #11
 8001a82:	2207      	movs	r2, #7
 8001a84:	4013      	ands	r3, r2
 8001a86:	2201      	movs	r2, #1
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a8e:	6839      	ldr	r1, [r7, #0]
 8001a90:	4835      	ldr	r0, [pc, #212]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a92:	f7fe fb37 	bl	8000104 <__udivsi3>
 8001a96:	0003      	movs	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	e05d      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2238      	movs	r2, #56	; 0x38
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d102      	bne.n	8001aae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x100>)
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	e054      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2238      	movs	r2, #56	; 0x38
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d138      	bne.n	8001b2c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	2207      	movs	r2, #7
 8001acc:	4013      	ands	r3, r2
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d10d      	bne.n	8001af4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	4824      	ldr	r0, [pc, #144]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x100>)
 8001adc:	f7fe fb12 	bl	8000104 <__udivsi3>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	227f      	movs	r2, #127	; 0x7f
 8001aec:	4013      	ands	r3, r2
 8001aee:	434b      	muls	r3, r1
 8001af0:	617b      	str	r3, [r7, #20]
        break;
 8001af2:	e00d      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	481c      	ldr	r0, [pc, #112]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001af8:	f7fe fb04 	bl	8000104 <__udivsi3>
 8001afc:	0003      	movs	r3, r0
 8001afe:	0019      	movs	r1, r3
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	227f      	movs	r2, #127	; 0x7f
 8001b08:	4013      	ands	r3, r2
 8001b0a:	434b      	muls	r3, r1
 8001b0c:	617b      	str	r3, [r7, #20]
        break;
 8001b0e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0f5b      	lsrs	r3, r3, #29
 8001b16:	2207      	movs	r2, #7
 8001b18:	4013      	ands	r3, r2
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	6978      	ldr	r0, [r7, #20]
 8001b22:	f7fe faef 	bl	8000104 <__udivsi3>
 8001b26:	0003      	movs	r3, r0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	e015      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2238      	movs	r2, #56	; 0x38
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d103      	bne.n	8001b40 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2238      	movs	r2, #56	; 0x38
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b18      	cmp	r3, #24
 8001b4a:	d103      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b4c:	23fa      	movs	r3, #250	; 0xfa
 8001b4e:	01db      	lsls	r3, r3, #7
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	e001      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b58:	693b      	ldr	r3, [r7, #16]
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b006      	add	sp, #24
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	40021000 	.word	0x40021000
 8001b68:	00f42400 	.word	0x00f42400
 8001b6c:	007a1200 	.word	0x007a1200

08001b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0a8      	b.n	8001cd4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	2382      	movs	r3, #130	; 0x82
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d009      	beq.n	8001baa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
 8001b9c:	e005      	b.n	8001baa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	225d      	movs	r2, #93	; 0x5d
 8001bb4:	5c9b      	ldrb	r3, [r3, r2]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	225c      	movs	r2, #92	; 0x5c
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f7fe ff68 	bl	8000a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	225d      	movs	r2, #93	; 0x5d
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2140      	movs	r1, #64	; 0x40
 8001be0:	438a      	bics	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	23e0      	movs	r3, #224	; 0xe0
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d902      	bls.n	8001bf6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e002      	b.n	8001bfc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	015b      	lsls	r3, r3, #5
 8001bfa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	23f0      	movs	r3, #240	; 0xf0
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d008      	beq.n	8001c1a <HAL_SPI_Init+0xaa>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	23e0      	movs	r3, #224	; 0xe0
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d002      	beq.n	8001c1a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	2382      	movs	r3, #130	; 0x82
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	401a      	ands	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6899      	ldr	r1, [r3, #8]
 8001c28:	2384      	movs	r3, #132	; 0x84
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	400b      	ands	r3, r1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2102      	movs	r1, #2
 8001c36:	400b      	ands	r3, r1
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	2101      	movs	r1, #1
 8001c40:	400b      	ands	r3, r1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6999      	ldr	r1, [r3, #24]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	2138      	movs	r1, #56	; 0x38
 8001c56:	400b      	ands	r3, r1
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	400b      	ands	r3, r1
 8001c62:	431a      	orrs	r2, r3
 8001c64:	0011      	movs	r1, r2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	019b      	lsls	r3, r3, #6
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	2204      	movs	r2, #4
 8001c80:	401a      	ands	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	2110      	movs	r1, #16
 8001c88:	400b      	ands	r3, r1
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	2108      	movs	r1, #8
 8001c92:	400b      	ands	r3, r1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68d9      	ldr	r1, [r3, #12]
 8001c9a:	23f0      	movs	r3, #240	; 0xf0
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	015b      	lsls	r3, r3, #5
 8001caa:	401a      	ands	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4907      	ldr	r1, [pc, #28]	; (8001cdc <HAL_SPI_Init+0x16c>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	225d      	movs	r2, #93	; 0x5d
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b004      	add	sp, #16
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	fffff7ff 	.word	0xfffff7ff

08001ce0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	1dbb      	adds	r3, r7, #6
 8001cee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cf0:	231f      	movs	r3, #31
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	225c      	movs	r2, #92	; 0x5c
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_SPI_Transmit+0x26>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e140      	b.n	8001f88 <HAL_SPI_Transmit+0x2a8>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	225c      	movs	r2, #92	; 0x5c
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d0e:	f7fe ffe7 	bl	8000ce0 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d16:	2316      	movs	r3, #22
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	1dba      	adds	r2, r7, #6
 8001d1c:	8812      	ldrh	r2, [r2, #0]
 8001d1e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	225d      	movs	r2, #93	; 0x5d
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d004      	beq.n	8001d36 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001d2c:	231f      	movs	r3, #31
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	2202      	movs	r2, #2
 8001d32:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d34:	e11d      	b.n	8001f72 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_SPI_Transmit+0x64>
 8001d3c:	1dbb      	adds	r3, r7, #6
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d104      	bne.n	8001d4e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001d44:	231f      	movs	r3, #31
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d4c:	e111      	b.n	8001f72 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	225d      	movs	r2, #93	; 0x5d
 8001d52:	2103      	movs	r1, #3
 8001d54:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1dba      	adds	r2, r7, #6
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1dba      	adds	r2, r7, #6
 8001d6e:	8812      	ldrh	r2, [r2, #0]
 8001d70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2244      	movs	r2, #68	; 0x44
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2246      	movs	r2, #70	; 0x46
 8001d84:	2100      	movs	r1, #0
 8001d86:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d110      	bne.n	8001dc2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2140      	movs	r1, #64	; 0x40
 8001dac:	438a      	bics	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	01c9      	lsls	r1, r1, #7
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2240      	movs	r2, #64	; 0x40
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d007      	beq.n	8001de0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2140      	movs	r1, #64	; 0x40
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	23e0      	movs	r3, #224	; 0xe0
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d94e      	bls.n	8001e8a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <HAL_SPI_Transmit+0x11e>
 8001df4:	2316      	movs	r3, #22
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d13f      	bne.n	8001e7e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	881a      	ldrh	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	1c9a      	adds	r2, r3, #2
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e22:	e02c      	b.n	8001e7e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d112      	bne.n	8001e58 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	881a      	ldrh	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	1c9a      	adds	r2, r3, #2
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e56:	e012      	b.n	8001e7e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e58:	f7fe ff42 	bl	8000ce0 <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d802      	bhi.n	8001e6e <HAL_SPI_Transmit+0x18e>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_SPI_Transmit+0x194>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d104      	bne.n	8001e7e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001e74:	231f      	movs	r3, #31
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2203      	movs	r2, #3
 8001e7a:	701a      	strb	r2, [r3, #0]
          goto error;
 8001e7c:	e079      	b.n	8001f72 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1cd      	bne.n	8001e24 <HAL_SPI_Transmit+0x144>
 8001e88:	e04f      	b.n	8001f2a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_SPI_Transmit+0x1bc>
 8001e92:	2316      	movs	r3, #22
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d141      	bne.n	8001f20 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001ec2:	e02d      	b.n	8001f20 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d113      	bne.n	8001efa <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	330c      	adds	r3, #12
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ef8:	e012      	b.n	8001f20 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001efa:	f7fe fef1 	bl	8000ce0 <HAL_GetTick>
 8001efe:	0002      	movs	r2, r0
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d802      	bhi.n	8001f10 <HAL_SPI_Transmit+0x230>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	d102      	bne.n	8001f16 <HAL_SPI_Transmit+0x236>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d104      	bne.n	8001f20 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001f16:	231f      	movs	r3, #31
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	701a      	strb	r2, [r3, #0]
          goto error;
 8001f1e:	e028      	b.n	8001f72 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1cc      	bne.n	8001ec4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 f95d 	bl	80021f0 <SPI_EndRxTxTransaction>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001f66:	231f      	movs	r3, #31
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e000      	b.n	8001f72 <HAL_SPI_Transmit+0x292>
  }

error:
 8001f70:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	225d      	movs	r2, #93	; 0x5d
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	225c      	movs	r2, #92	; 0x5c
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f82:	231f      	movs	r3, #31
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	781b      	ldrb	r3, [r3, #0]
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b008      	add	sp, #32
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fa0:	f7fe fe9e 	bl	8000ce0 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	18d3      	adds	r3, r2, r3
 8001fae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fb0:	f7fe fe96 	bl	8000ce0 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	015b      	lsls	r3, r3, #5
 8001fbe:	0d1b      	lsrs	r3, r3, #20
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	4353      	muls	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fc6:	e058      	b.n	800207a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	d055      	beq.n	800207a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fce:	f7fe fe87 	bl	8000ce0 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d902      	bls.n	8001fe4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d142      	bne.n	800206a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	21e0      	movs	r1, #224	; 0xe0
 8001ff0:	438a      	bics	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	2382      	movs	r3, #130	; 0x82
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d113      	bne.n	8002028 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	429a      	cmp	r2, r3
 800200a:	d005      	beq.n	8002018 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	429a      	cmp	r2, r3
 8002016:	d107      	bne.n	8002028 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2140      	movs	r1, #64	; 0x40
 8002024:	438a      	bics	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	019b      	lsls	r3, r3, #6
 8002030:	429a      	cmp	r2, r3
 8002032:	d110      	bne.n	8002056 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	491a      	ldr	r1, [pc, #104]	; (80020a8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002040:	400a      	ands	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	0189      	lsls	r1, r1, #6
 8002052:	430a      	orrs	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	225d      	movs	r2, #93	; 0x5d
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	225c      	movs	r2, #92	; 0x5c
 8002062:	2100      	movs	r1, #0
 8002064:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e017      	b.n	800209a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3b01      	subs	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	4013      	ands	r3, r2
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	425a      	negs	r2, r3
 800208a:	4153      	adcs	r3, r2
 800208c:	b2db      	uxtb	r3, r3
 800208e:	001a      	movs	r2, r3
 8002090:	1dfb      	adds	r3, r7, #7
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d197      	bne.n	8001fc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	b008      	add	sp, #32
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	20000000 	.word	0x20000000
 80020a8:	ffffdfff 	.word	0xffffdfff

080020ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80020ba:	2317      	movs	r3, #23
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80020c2:	f7fe fe0d 	bl	8000ce0 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	18d3      	adds	r3, r2, r3
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80020d2:	f7fe fe05 	bl	8000ce0 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	330c      	adds	r3, #12
 80020e0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	0013      	movs	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	189b      	adds	r3, r3, r2
 80020ec:	00da      	lsls	r2, r3, #3
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	0d1b      	lsrs	r3, r3, #20
 80020f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f4:	4353      	muls	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80020f8:	e068      	b.n	80021cc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	23c0      	movs	r3, #192	; 0xc0
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	429a      	cmp	r2, r3
 8002102:	d10a      	bne.n	800211a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	2117      	movs	r1, #23
 8002112:	187b      	adds	r3, r7, r1
 8002114:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002116:	187b      	adds	r3, r7, r1
 8002118:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	d055      	beq.n	80021cc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002120:	f7fe fdde 	bl	8000ce0 <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212c:	429a      	cmp	r2, r3
 800212e:	d902      	bls.n	8002136 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	2b00      	cmp	r3, #0
 8002134:	d142      	bne.n	80021bc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	21e0      	movs	r1, #224	; 0xe0
 8002142:	438a      	bics	r2, r1
 8002144:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	2382      	movs	r3, #130	; 0x82
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	429a      	cmp	r2, r3
 8002150:	d113      	bne.n	800217a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	429a      	cmp	r2, r3
 800215c:	d005      	beq.n	800216a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	429a      	cmp	r2, r3
 8002168:	d107      	bne.n	800217a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2140      	movs	r1, #64	; 0x40
 8002176:	438a      	bics	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	429a      	cmp	r2, r3
 8002184:	d110      	bne.n	80021a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4916      	ldr	r1, [pc, #88]	; (80021ec <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002192:	400a      	ands	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2180      	movs	r1, #128	; 0x80
 80021a2:	0189      	lsls	r1, r1, #6
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	225d      	movs	r2, #93	; 0x5d
 80021ac:	2101      	movs	r1, #1
 80021ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	225c      	movs	r2, #92	; 0x5c
 80021b4:	2100      	movs	r1, #0
 80021b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e010      	b.n	80021de <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d18e      	bne.n	80020fa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b00a      	add	sp, #40	; 0x28
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	20000000 	.word	0x20000000
 80021ec:	ffffdfff 	.word	0xffffdfff

080021f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	23c0      	movs	r3, #192	; 0xc0
 8002200:	0159      	lsls	r1, r3, #5
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	0013      	movs	r3, r2
 800220a:	2200      	movs	r2, #0
 800220c:	f7ff ff4e 	bl	80020ac <SPI_WaitFifoStateUntilTimeout>
 8002210:	1e03      	subs	r3, r0, #0
 8002212:	d007      	beq.n	8002224 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002218:	2220      	movs	r2, #32
 800221a:	431a      	orrs	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e027      	b.n	8002274 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	0013      	movs	r3, r2
 800222e:	2200      	movs	r2, #0
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	f7ff fead 	bl	8001f90 <SPI_WaitFlagStateUntilTimeout>
 8002236:	1e03      	subs	r3, r0, #0
 8002238:	d007      	beq.n	800224a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	2220      	movs	r2, #32
 8002240:	431a      	orrs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e014      	b.n	8002274 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	23c0      	movs	r3, #192	; 0xc0
 800224e:	00d9      	lsls	r1, r3, #3
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	0013      	movs	r3, r2
 8002258:	2200      	movs	r2, #0
 800225a:	f7ff ff27 	bl	80020ac <SPI_WaitFifoStateUntilTimeout>
 800225e:	1e03      	subs	r3, r0, #0
 8002260:	d007      	beq.n	8002272 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002266:	2220      	movs	r2, #32
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e000      	b.n	8002274 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b004      	add	sp, #16
 800227a:	bd80      	pop	{r7, pc}

0800227c <__libc_init_array>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2600      	movs	r6, #0
 8002280:	4d0c      	ldr	r5, [pc, #48]	; (80022b4 <__libc_init_array+0x38>)
 8002282:	4c0d      	ldr	r4, [pc, #52]	; (80022b8 <__libc_init_array+0x3c>)
 8002284:	1b64      	subs	r4, r4, r5
 8002286:	10a4      	asrs	r4, r4, #2
 8002288:	42a6      	cmp	r6, r4
 800228a:	d109      	bne.n	80022a0 <__libc_init_array+0x24>
 800228c:	2600      	movs	r6, #0
 800228e:	f000 f821 	bl	80022d4 <_init>
 8002292:	4d0a      	ldr	r5, [pc, #40]	; (80022bc <__libc_init_array+0x40>)
 8002294:	4c0a      	ldr	r4, [pc, #40]	; (80022c0 <__libc_init_array+0x44>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	42a6      	cmp	r6, r4
 800229c:	d105      	bne.n	80022aa <__libc_init_array+0x2e>
 800229e:	bd70      	pop	{r4, r5, r6, pc}
 80022a0:	00b3      	lsls	r3, r6, #2
 80022a2:	58eb      	ldr	r3, [r5, r3]
 80022a4:	4798      	blx	r3
 80022a6:	3601      	adds	r6, #1
 80022a8:	e7ee      	b.n	8002288 <__libc_init_array+0xc>
 80022aa:	00b3      	lsls	r3, r6, #2
 80022ac:	58eb      	ldr	r3, [r5, r3]
 80022ae:	4798      	blx	r3
 80022b0:	3601      	adds	r6, #1
 80022b2:	e7f2      	b.n	800229a <__libc_init_array+0x1e>
 80022b4:	08003d20 	.word	0x08003d20
 80022b8:	08003d20 	.word	0x08003d20
 80022bc:	08003d20 	.word	0x08003d20
 80022c0:	08003d24 	.word	0x08003d24

080022c4 <memset>:
 80022c4:	0003      	movs	r3, r0
 80022c6:	1882      	adds	r2, r0, r2
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d100      	bne.n	80022ce <memset+0xa>
 80022cc:	4770      	bx	lr
 80022ce:	7019      	strb	r1, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	e7f9      	b.n	80022c8 <memset+0x4>

080022d4 <_init>:
 80022d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022da:	bc08      	pop	{r3}
 80022dc:	469e      	mov	lr, r3
 80022de:	4770      	bx	lr

080022e0 <_fini>:
 80022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e6:	bc08      	pop	{r3}
 80022e8:	469e      	mov	lr, r3
 80022ea:	4770      	bx	lr
